{"version":3,"file":"ndc.js","sources":["../node_modules/date-fns/constants.js","../node_modules/date-fns/constructFrom.js","../node_modules/date-fns/toDate.js","../node_modules/date-fns/addDays.js","../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","../node_modules/date-fns/_lib/normalizeDates.js","../node_modules/date-fns/startOfDay.js","../node_modules/date-fns/differenceInCalendarDays.js","../node_modules/date-fns/endOfDay.js","../node_modules/date-fns/isWithinInterval.js","../src/years.ts","../src/index.ts"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfDay} function options.\n */\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link isWithinInterval} function options.\n */\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @param date - The date to check\n * @param interval - The interval to check\n * @param options - An object with options\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => false\n *\n * @example\n * // For date equal to the interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to the interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nexport function isWithinInterval(date, interval, options) {\n  const time = +toDate(date, options?.in);\n  const [startTime, endTime] = [\n    +toDate(interval.start, options?.in),\n    +toDate(interval.end, options?.in),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n\n// Fallback for modularized imports:\nexport default isWithinInterval;\n","/**\n * The Nepali calendar data from 1975 BS to 2099 BS.\n * Based on the array index months days (0 → 11th), total days in year (12th)\n */\nconst years: number[][] = [];\n// fill years and their months\nyears[1975] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365];\nyears[1976] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366];\nyears[1977] = [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365];\nyears[1978] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365];\nyears[1979] = years[1975];\nyears[1980] = years[1976];\nyears[1981] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365];\nyears[1982] = years[1978];\nyears[1983] = years[1975];\nyears[1984] = years[1976];\nyears[1985] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365];\nyears[1986] = years[1978];\nyears[1987] = [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365];\nyears[1988] = years[1976];\nyears[1989] = [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365];\nyears[1990] = years[1978];\nyears[1991] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365];\nyears[1992] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366];\nyears[1993] = years[1989];\nyears[1994] = years[1978];\nyears[1995] = years[1991];\nyears[1996] = years[1992];\nyears[1997] = years[1978];\nyears[1998] = [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365];\nyears[1999] = years[1976];\nyears[2000] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365];\nyears[2001] = years[1978];\nyears[2002] = years[1975];\nyears[2003] = years[1976];\nyears[2004] = years[2000];\nyears[2005] = years[1978];\nyears[2006] = years[1975];\nyears[2007] = years[1976];\nyears[2008] = years[1981];\nyears[2009] = years[1978];\nyears[2010] = years[1975];\nyears[2011] = years[1976];\nyears[2012] = years[1985];\nyears[2013] = years[1978];\nyears[2014] = years[1975];\nyears[2015] = years[1976];\nyears[2016] = years[1985];\nyears[2017] = years[1978];\nyears[2018] = years[1987];\nyears[2019] = years[1992];\nyears[2020] = years[1989];\nyears[2021] = years[1978];\nyears[2022] = years[1991];\nyears[2023] = years[1992];\nyears[2024] = years[1989];\nyears[2025] = years[1978];\nyears[2026] = years[1976];\nyears[2027] = years[2000];\nyears[2028] = years[1978];\nyears[2029] = years[1998];\nyears[2030] = years[1976];\nyears[2031] = years[2000];\nyears[2032] = years[1978];\nyears[2033] = years[1975];\nyears[2034] = years[1976];\nyears[2035] = years[1977];\nyears[2036] = years[1978];\nyears[2037] = years[1975];\nyears[2038] = years[1976];\nyears[2039] = years[1985];\nyears[2040] = years[1978];\nyears[2041] = years[1975];\nyears[2042] = years[1976];\nyears[2043] = years[1985];\nyears[2044] = years[1978];\nyears[2045] = years[1987];\nyears[2046] = years[1976];\nyears[2047] = years[1989];\nyears[2048] = years[1978];\nyears[2049] = years[1991];\nyears[2050] = years[1992];\nyears[2051] = years[1989];\nyears[2052] = years[1978];\nyears[2053] = years[1991];\nyears[2054] = years[1992];\nyears[2055] = years[1978];\nyears[2056] = years[1998];\nyears[2057] = years[1976];\nyears[2058] = years[2000];\nyears[2059] = years[1978];\nyears[2060] = years[1975];\nyears[2061] = years[1976];\nyears[2062] = [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365];\nyears[2063] = years[1978];\nyears[2064] = years[1975];\nyears[2065] = years[1976];\nyears[2066] = years[1981];\nyears[2067] = years[1978];\nyears[2068] = years[1975];\nyears[2069] = years[1976];\nyears[2070] = years[1985];\nyears[2071] = years[1978];\nyears[2072] = years[1987];\nyears[2073] = years[1976];\nyears[2074] = years[1989];\nyears[2075] = years[1978];\nyears[2076] = years[1991];\nyears[2077] = years[1992];\nyears[2078] = years[1989];\nyears[2079] = years[1978];\nyears[2080] = years[1991];\nyears[2081] = years[1992];\nyears[2082] = years[1989];\nyears[2083] = years[1978];\nyears[2084] = years[1976];\nyears[2085] = years[2000];\nyears[2086] = years[1978];\nyears[2087] = years[1975];\nyears[2088] = years[1976];\nyears[2089] = years[2000];\nyears[2090] = years[1978];\nyears[2091] = years[1975];\nyears[2092] = years[1976];\nyears[2093] = years[1981];\nyears[2094] = years[1978];\nyears[2095] = years[1975];\nyears[2096] = years[1976];\nyears[2097] = years[1985];\nyears[2098] = years[1978];\nyears[2099] = years[1975];\n\n// export years data\nexport { years };\n","import {\n  addDays,\n  differenceInCalendarDays,\n  endOfDay,\n  isWithinInterval,\n  startOfDay,\n} from 'date-fns';\n\nimport { years } from './years';\n\nexport default class DateConverter {\n  // Supported date range for the Nepali calendar (1975 BS - 2099 BS)\n  private readonly startDate = new Date('1918-04-13'); // 1975-01-01 BS\n  private readonly endDate = new Date('2043-04-13'); // 2099-12-30 BS\n  private readonly dateRangeError = 'The input date is out of supported range.';\n\n  // Extracted values from the input date string\n  private readonly inputYear: number;\n  private readonly inputMonth: number;\n  private readonly inputDate: number;\n\n  constructor(strDate: string) {\n    // Parse and clean the input date string\n    const [year, month, date] = this.parseDateString(strDate);\n    this.inputYear = year;\n    this.inputMonth = month;\n    this.inputDate = date;\n  }\n\n  /**\n   * Parses and cleans the input date string.\n   * Converts Nepali numerals to English and splits into year, month, and date.\n   */\n  private parseDateString(strDate: string): [number, number, number] {\n    const cleanedDate = this.numToEn(strDate)\n      .replace(/[./|,]/g, '-')\n      .trim();\n    const [year, month, date] = cleanedDate.split('-').map(Number);\n\n    return [year, month, date];\n  }\n\n  /**\n   * Converts Nepali numerals (०-९) to English numerals (0-9).\n   */\n  private numToEn(strNum: string): string {\n    const nepaliNumerals = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];\n\n    return strNum.replace(/[०१२३४५६७८९]/g, (char) =>\n      nepaliNumerals.indexOf(char).toString(),\n    );\n  }\n\n  /**\n   * Converts a day index (0-6) to a day name (Sunday-Saturday).\n   */\n  private numToDay(dayIndex: number): string {\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n\n    return days[dayIndex];\n  }\n\n  /**\n   * Calculates the AD date for a given BS date.\n   * Uses the total days difference from the start date (1975-01-01 BS).\n   */\n  private getAdDate(year: number, month: number, date: number): Date {\n    let totalDays = 0;\n\n    // Add days for each year before the input year\n    for (let y = 1975; y < year; y++) {\n      totalDays += years[y][12]; // daysInYear is stored at index 12\n    }\n\n    // Add days for each month before the input month\n    for (let m = 0; m < month - 1; m++) {\n      totalDays += years[year][m];\n    }\n\n    // Add days for the current month\n    totalDays += date - 1; // Subtract 1 to exclude the current day\n\n    return addDays(this.startDate, totalDays);\n  }\n\n  /**\n   * Calculates the BS date for a given AD date.\n   * Uses the total days difference from the start date (1975-01-01 BS).\n   */\n  private getBsDate(givenDate: string): {\n    year: number;\n    month: number;\n    date: number;\n  } {\n    const targetDate = new Date(givenDate);\n    let remainingDays = differenceInCalendarDays(targetDate, this.startDate);\n\n    // Iterate through years and months to find the BS date\n    for (const year in years) {\n      const daysInYear = years[year][12];\n\n      if (remainingDays >= daysInYear) {\n        remainingDays -= daysInYear;\n        continue;\n      }\n\n      for (let month = 0; month < 12; month++) {\n        const daysInMonth = years[year][month];\n\n        if (remainingDays >= daysInMonth) {\n          remainingDays -= daysInMonth;\n          continue;\n        }\n\n        // Return the calculated BS date\n        return {\n          year: Number(year),\n          month: month + 1,\n          date: remainingDays + 1,\n        };\n      }\n    }\n\n    throw new Error(this.dateRangeError);\n  }\n\n  /**\n   * Converts the input BS date to an AD date.\n   * Returns an object with year, month, date, and day.\n   */\n  public toAd() {\n    // Validate the input year range\n    if (this.inputYear < 1975 || this.inputYear > 2099) {\n      throw new Error(this.dateRangeError);\n    }\n\n    // Calculate the AD date and weekday\n    const adDate = this.getAdDate(\n      this.inputYear,\n      this.inputMonth,\n      this.inputDate,\n    );\n    const weekday = this.numToDay(adDate.getDay());\n\n    return {\n      year: adDate.getFullYear(),\n      month: adDate.getMonth() + 1,\n      date: adDate.getDate(),\n      day: weekday,\n    };\n  }\n\n  /**\n   * Converts the input AD date to a BS date.\n   * Returns an object with year, month, date, and day.\n   */\n  public toBs() {\n    // Format the input date string\n    const inputDate = `${this.inputYear}-${this.inputMonth}-${this.inputDate}`;\n    const targetDate = new Date(inputDate);\n\n    // Validate the input date range\n    if (\n      !isWithinInterval(targetDate, {\n        start: startOfDay(this.startDate),\n        end: endOfDay(this.endDate),\n      })\n    ) {\n      throw new Error(this.dateRangeError);\n    }\n\n    // Calculate the BS date and weekday\n    const bsDate = this.getBsDate(inputDate);\n    const weekday = this.numToDay(targetDate.getDay());\n\n    return { ...bsDate, day: weekday };\n  }\n}\n"],"names":["constructFromSymbol","constructFrom","date","value","toDate","argument","context","addDays","amount","options","_date","getTimezoneOffsetInMilliseconds","utcDate","normalizeDates","dates","normalize","startOfDay","differenceInCalendarDays","laterDate","earlierDate","laterDate_","earlierDate_","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","endOfDay","isWithinInterval","interval","time","startTime","endTime","a","b","years","DateConverter","strDate","__publicField","year","month","cleanedDate","strNum","nepaliNumerals","char","dayIndex","totalDays","y","m","givenDate","targetDate","remainingDays","daysInYear","daysInMonth","adDate","weekday","inputDate","bsDate"],"mappings":"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IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,GAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,GAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,GAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,GAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,GAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG;AAClEA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxBA,EAAM,IAAI,IAAIA,EAAM,IAAI;AACxB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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}
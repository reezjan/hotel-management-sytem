{"file_contents":{"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-4 md:p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-lg md:text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-4 md:p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-4 md:p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1890},"client/src/pages/dashboard/security-head/leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, User, CheckCircle, XCircle, AlertCircle, ArrowLeft } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function LeaveRequests() {\n  const [, setLocation] = useLocation();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newRequest, setNewRequest] = useState({\n    leaveType: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\"\n  });\n\n  const queryClient = useQueryClient();\n\n  const { data: myRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests/my-requests\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/leave-requests/my-requests\", { \n        credentials: \"include\" \n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave requests\");\n      return response.json();\n    }\n  });\n\n  const { data: leaveBalances = [] } = useQuery<any[]>({\n    queryKey: [\"/api/leave-balances\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/leave-balances\", { \n        credentials: \"include\" \n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave balances\");\n      return response.json();\n    }\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      const response = await fetch(\"/api/hotels/current/leave-requests\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/my-requests\"] });\n      setIsAddDialogOpen(false);\n      setNewRequest({ leaveType: \"\", startDate: \"\", endDate: \"\", reason: \"\" });\n      toast.success(\"Leave request submitted successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateRequest = () => {\n    if (!newRequest.leaveType || !newRequest.startDate || !newRequest.endDate) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (new Date(newRequest.endDate) < new Date(newRequest.startDate)) {\n      toast.error(\"End date must be after start date\");\n      return;\n    }\n\n    createRequestMutation.mutate(newRequest);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected': return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default: return <Clock className=\"h-4 w-4 text-orange-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-orange-100 text-orange-800 border-orange-200';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDaysDifference = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n    return diffDays;\n  };\n\n  const columns = [\n    { \n      key: \"leaveType\", \n      label: \"Type\", \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium capitalize\" data-testid={`text-type-${value}`}>\n          {value?.replace(/_/g, ' ')}\n        </span>\n      )\n    },\n    { \n      key: \"startDate\", \n      label: \"Start Date\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-startdate\">{formatDate(value)}</span>\n    },\n    { \n      key: \"endDate\", \n      label: \"End Date\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-enddate\">{formatDate(value)}</span>\n    },\n    {\n      key: \"duration\",\n      label: \"Duration\",\n      render: (value: any, row: any) => (\n        <span className=\"text-sm text-muted-foreground\" data-testid=\"text-duration\">\n          {getDaysDifference(row.startDate, row.endDate)} day(s)\n        </span>\n      )\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon(value)}\n          <Badge variant=\"outline\" className={getStatusColor(value)} data-testid={`badge-status-${value}`}>\n            {value?.charAt(0).toUpperCase() + value?.slice(1)}\n          </Badge>\n        </div>\n      )\n    },\n    { \n      key: \"reason\", \n      label: \"Reason\", \n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\" data-testid=\"text-reason\">\n          {value || 'No reason provided'}\n        </span>\n      )\n    },\n    {\n      key: \"managerNotes\",\n      label: \"Manager Notes\",\n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\" data-testid=\"text-managernotes\">\n          {value || '-'}\n        </span>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Submitted\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-submitted\">{formatDate(value)}</span>\n    }\n  ];\n\n  const pendingRequests = myRequests.filter(r => r.status === 'pending').length;\n  const approvedRequests = myRequests.filter(r => r.status === 'approved').length;\n  const rejectedRequests = myRequests.filter(r => r.status === 'rejected').length;\n\n  return (\n    <DashboardLayout title=\"Leave Requests\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/security-head\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"heading-leave-requests\">Leave Requests</h1>\n            <p className=\"text-muted-foreground\">View and manage your leave requests</p>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {leaveBalances.map((balance: any) => (\n            <Card key={balance.id} data-testid={`balance-card-${balance.leaveType}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground capitalize\">\n                    {balance.leaveType.replace(/_/g, ' ')} Leave Balance\n                  </p>\n                  <div className=\"flex items-baseline space-x-2\">\n                    <p className=\"text-3xl font-bold\" data-testid={`balance-remaining-${balance.leaveType}`}>\n                      {parseFloat(balance.remainingDays)}\n                    </p>\n                    <span className=\"text-sm text-muted-foreground\">\n                      / {parseFloat(balance.totalDays)} days\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Used: {parseFloat(balance.usedDays)} days\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-pending\">{pendingRequests}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-approved\">{approvedRequests}</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-rejected\">{rejectedRequests}</p>\n                </div>\n                <XCircle className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <DataTable\n          title=\"My Leave Requests\"\n          data={myRequests}\n          columns={columns}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Request Leave\"\n          searchPlaceholder=\"Search leave requests...\"\n        />\n\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request Leave</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"leaveType\">Leave Type *</Label>\n                <Select \n                  value={newRequest.leaveType} \n                  onValueChange={(value) => setNewRequest({ ...newRequest, leaveType: value })}\n                >\n                  <SelectTrigger data-testid=\"select-leavetype\">\n                    <SelectValue placeholder=\"Select leave type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                    <SelectItem value=\"vacation\">Vacation</SelectItem>\n                    <SelectItem value=\"personal\">Personal Leave</SelectItem>\n                    <SelectItem value=\"emergency\">Emergency Leave</SelectItem>\n                    <SelectItem value=\"family\">Family Leave</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"startDate\">Start Date *</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={newRequest.startDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, startDate: e.target.value })}\n                  min={new Date().toISOString().split('T')[0]}\n                  data-testid=\"input-startdate\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"endDate\">End Date *</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={newRequest.endDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, endDate: e.target.value })}\n                  min={newRequest.startDate || new Date().toISOString().split('T')[0]}\n                  data-testid=\"input-enddate\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"reason\">Reason</Label>\n                <Textarea\n                  id=\"reason\"\n                  value={newRequest.reason}\n                  onChange={(e) => setNewRequest({ ...newRequest, reason: e.target.value })}\n                  placeholder=\"Please provide a reason for your leave request\"\n                  rows={3}\n                  data-testid=\"textarea-reason\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateRequest}\n                  disabled={createRequestMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":13741},"tests/test-kot-validation.js":{"content":"const API_BASE = 'http://localhost:5000';\n\nasync function login(username, password) {\n  const response = await fetch(`${API_BASE}/api/login`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password })\n  });\n  return response.headers.get('set-cookie');\n}\n\nasync function updateKotItem(cookie, itemId, updateData) {\n  const response = await fetch(`${API_BASE}/api/kot-items/${itemId}`, {\n    method: 'PUT',\n    headers: { \n      'Content-Type': 'application/json',\n      'Cookie': cookie \n    },\n    body: JSON.stringify(updateData)\n  });\n  return { status: response.status, data: await response.json() };\n}\n\nasync function createKotOrder(cookie, orderData) {\n  const response = await fetch(`${API_BASE}/api/kot-orders`, {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'Cookie': cookie \n    },\n    body: JSON.stringify(orderData)\n  });\n  return { status: response.status, data: await response.json() };\n}\n\nasync function getMenuItems(cookie, hotelId) {\n  const response = await fetch(`${API_BASE}/api/hotels/${hotelId}/menu-items`, {\n    headers: { 'Cookie': cookie }\n  });\n  return response.json();\n}\n\nasync function getTables(cookie, hotelId) {\n  const response = await fetch(`${API_BASE}/api/hotels/${hotelId}/restaurant-tables`, {\n    headers: { 'Cookie': cookie }\n  });\n  return response.json();\n}\n\nasync function brutalKotTest() {\n  console.log('🔥 BRUTAL KOT VALIDATION TEST 🔥\\n');\n  \n  const hotelId = 'c35083a0-a79a-4172-b8c7-b199ff9c6d11';\n  \n  // Login as different users\n  console.log('Logging in as different users...');\n  const managerCookie = await login('manager', 'manager');\n  const waiterCookie = await login('waiter', 'waiter');\n  const baristaCookie = await login('barista', 'barista');\n  console.log('✓ Logged in as manager, waiter, and barista\\n');\n  \n  // Get menu items and tables\n  const menuItems = await getMenuItems(managerCookie, hotelId);\n  const tables = await getTables(managerCookie, hotelId);\n  \n  if (!menuItems || menuItems.length === 0) {\n    console.error('❌ No menu items found');\n    return;\n  }\n  \n  if (!tables || tables.length === 0) {\n    console.error('❌ No tables found');\n    return;\n  }\n  \n  const testMenuItem = menuItems[0];\n  const testTable = tables[0];\n  \n  console.log(`Using menu item: ${testMenuItem.name} (ID: ${testMenuItem.id})`);\n  console.log(`Using table: ${testTable.name}\\n`);\n  \n  // Create a test KOT order\n  console.log('Creating test KOT order...');\n  const kotData = {\n    hotelId,\n    tableId: testTable.id,\n    status: 'open',\n    items: [\n      {\n        menuItemId: testMenuItem.id,\n        description: testMenuItem.name,\n        qty: 2,\n        unit: 'plate',\n        status: 'pending'\n      }\n    ]\n  };\n  \n  const kotResult = await createKotOrder(managerCookie, kotData);\n  if (kotResult.status !== 201) {\n    console.error('❌ Failed to create KOT order:', kotResult.data);\n    return;\n  }\n  \n  // Get KOT items from the created order\n  const kotOrderId = kotResult.data.id;\n  const kotItemsResponse = await fetch(`${API_BASE}/api/kot-orders/${kotOrderId}/items`, {\n    headers: { 'Cookie': managerCookie }\n  });\n  const kotItems = await kotItemsResponse.json();\n  \n  if (!kotItems || kotItems.length === 0) {\n    console.error('❌ No KOT items found in order');\n    return;\n  }\n  \n  const kotItemId = kotItems[0].id;\n  console.log(`✓ Created KOT order with item ID: ${kotItemId}\\n`);\n  \n  // TEST 1: Non-manager trying to decline order\n  console.log('TEST 1: Non-manager (waiter) trying to decline order');\n  const test1 = await updateKotItem(waiterCookie, kotItemId, {\n    status: 'declined',\n    declineReason: 'Not available anymore'\n  });\n  console.log(`   Result: ${test1.status} - ${test1.data.message || 'Success'}`);\n  console.log(`   ${test1.status === 403 ? '✅ Correctly rejected' : '❌ Should be rejected'}\\n`);\n  \n  // TEST 2: Manager trying to decline without proper reason\n  console.log('TEST 2: Manager declining without proper reason (<10 chars)');\n  const test2 = await updateKotItem(managerCookie, kotItemId, {\n    status: 'declined',\n    declineReason: 'No stock'\n  });\n  console.log(`   Result: ${test2.status} - ${test2.data.message || 'Success'}`);\n  console.log(`   ${test2.status === 400 ? '✅ Correctly rejected' : '❌ Should be rejected'}\\n`);\n  \n  // TEST 3: Manager trying to decline with empty reason\n  console.log('TEST 3: Manager declining with empty reason');\n  const test3 = await updateKotItem(managerCookie, kotItemId, {\n    status: 'declined',\n    declineReason: ''\n  });\n  console.log(`   Result: ${test3.status} - ${test3.data.message || 'Success'}`);\n  console.log(`   ${test3.status === 400 ? '✅ Correctly rejected' : '❌ Should be rejected'}\\n`);\n  \n  // TEST 4: Manager declining with proper reason\n  console.log('TEST 4: Manager declining with proper detailed reason');\n  const test4 = await updateKotItem(managerCookie, kotItemId, {\n    status: 'declined',\n    declineReason: 'Item out of stock - supplier delivery delayed until tomorrow'\n  });\n  console.log(`   Result: ${test4.status} - ${test4.data.message || JSON.stringify(test4.data).substring(0, 50)}`);\n  console.log(`   ${test4.status === 200 ? '✅ Correctly accepted' : '❌ Should be accepted'}\\n`);\n  \n  // Create another KOT item for further testing\n  console.log('Creating another KOT order for status change tests...');\n  const kotData2 = {\n    hotelId,\n    tableId: testTable.id,\n    status: 'open',\n    items: [\n      {\n        menuItemId: testMenuItem.id,\n        description: testMenuItem.name,\n        qty: 1,\n        unit: 'plate',\n        status: 'pending'\n      }\n    ]\n  };\n  \n  const kotResult2 = await createKotOrder(managerCookie, kotData2);\n  if (kotResult2.status !== 201) {\n    console.error('❌ Failed to create second KOT order');\n    return;\n  }\n  \n  const kotOrderId2 = kotResult2.data.id;\n  const kotItemsResponse2 = await fetch(`${API_BASE}/api/kot-orders/${kotOrderId2}/items`, {\n    headers: { 'Cookie': managerCookie }\n  });\n  const kotItems2 = await kotItemsResponse2.json();\n  const kotItemId2 = kotItems2[0].id;\n  console.log(`✓ Created second KOT order with item ID: ${kotItemId2}\\n`);\n  \n  // TEST 5: Barista trying to cancel order\n  console.log('TEST 5: Non-manager (barista) trying to cancel order');\n  const test5 = await updateKotItem(baristaCookie, kotItemId2, {\n    status: 'cancelled',\n    declineReason: 'Customer changed mind about this item'\n  });\n  console.log(`   Result: ${test5.status} - ${test5.data.message || 'Success'}`);\n  console.log(`   ${test5.status === 403 ? '✅ Correctly rejected' : '❌ Should be rejected'}\\n`);\n  \n  // TEST 6: Manager canceling with proper reason\n  console.log('TEST 6: Manager canceling with proper reason');\n  const test6 = await updateKotItem(managerCookie, kotItemId2, {\n    status: 'cancelled',\n    declineReason: 'Customer requested cancellation due to dietary restrictions'\n  });\n  console.log(`   Result: ${test6.status} - ${test6.data.message || JSON.stringify(test6.data).substring(0, 50)}`);\n  console.log(`   ${test6.status === 200 ? '✅ Correctly accepted' : '❌ Should be accepted'}\\n`);\n  \n  // TEST 7: Normal status update by kitchen staff\n  console.log('TEST 7: Kitchen staff (barista) updating to approved');\n  const kotData3 = {\n    hotelId,\n    tableId: testTable.id,\n    status: 'open',\n    items: [\n      {\n        menuItemId: testMenuItem.id,\n        description: testMenuItem.name,\n        qty: 1,\n        unit: 'plate',\n        status: 'pending'\n      }\n    ]\n  };\n  \n  const kotResult3 = await createKotOrder(baristaCookie, kotData3);\n  const kotOrderId3 = kotResult3.data.id;\n  const kotItemsResponse3 = await fetch(`${API_BASE}/api/kot-orders/${kotOrderId3}/items`, {\n    headers: { 'Cookie': baristaCookie }\n  });\n  const kotItems3 = await kotItemsResponse3.json();\n  const kotItemId3 = kotItems3[0].id;\n  \n  const test7 = await updateKotItem(baristaCookie, kotItemId3, {\n    status: 'approved'\n  });\n  console.log(`   Result: ${test7.status} - ${test7.data.message || 'Approved'}`);\n  console.log(`   ${test7.status === 200 ? '✅ Correctly accepted' : '❌ Should be accepted'}\\n`);\n  \n  // TEST 8: Completing order\n  console.log('TEST 8: Completing order (mark as completed)');\n  const test8 = await updateKotItem(baristaCookie, kotItemId3, {\n    status: 'completed'\n  });\n  console.log(`   Result: ${test8.status} - ${test8.data.message || 'Completed'}`);\n  console.log(`   ${test8.status === 200 ? '✅ Correctly accepted' : '❌ Should be accepted'}\\n`);\n  \n  // Summary\n  console.log('📊 TEST SUMMARY:');\n  const results = [test1, test2, test3, test4, test5, test6, test7, test8];\n  const expectedStatuses = [403, 400, 400, 200, 403, 200, 200, 200];\n  \n  let passed = 0;\n  let failed = 0;\n  \n  results.forEach((result, i) => {\n    if (result.status === expectedStatuses[i]) {\n      passed++;\n    } else {\n      failed++;\n      console.log(`   ❌ Test ${i + 1} failed: Expected ${expectedStatuses[i]}, got ${result.status}`);\n    }\n  });\n  \n  console.log(`\\n   ✅ Passed: ${passed}/${results.length}`);\n  console.log(`   ❌ Failed: ${failed}/${results.length}`);\n  \n  if (failed === 0) {\n    console.log('\\n🎉 ALL TESTS PASSED! KOT validation is working correctly!');\n  } else {\n    console.log('\\n⚠️  SOME TESTS FAILED! Review the issues above.');\n  }\n}\n\nbrutalKotTest().catch(console.error);\n","size_bytes":9435},"client/src/pages/dashboard/hall-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar as CalendarIcon, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { format, addDays, startOfWeek, addWeeks, subWeeks, startOfMonth, endOfMonth, eachDayOfInterval } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport type { Hall } from \"@shared/schema\";\n\nexport default function HallCalendar() {\n  const { user } = useAuth();\n  const [selectedHall, setSelectedHall] = useState<string>(\"\");\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [view, setView] = useState<\"week\" | \"month\">(\"week\");\n\n  const { data: halls = [] } = useQuery<Hall[]>({\n    queryKey: [\"/api/halls\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: calendarData } = useQuery({\n    queryKey: [\"/api/halls\", selectedHall, \"calendar\", format(currentDate, \"yyyy-MM-dd\")],\n    refetchInterval: 3000,\n    enabled: !!selectedHall,\n    queryFn: async () => {\n      const response = await fetch(`/api/halls/${selectedHall}/calendar?date=${format(currentDate, \"yyyy-MM-dd\")}`, {\n        credentials: \"include\"\n      });\n      return response.json();\n    }\n  });\n\n  const getWeekDays = () => {\n    const start = startOfWeek(currentDate, { weekStartsOn: 0 });\n    return Array.from({ length: 7 }, (_, i) => addDays(start, i));\n  };\n\n  const getMonthDays = () => {\n    const start = startOfMonth(currentDate);\n    const end = endOfMonth(currentDate);\n    return eachDayOfInterval({ start, end });\n  };\n\n  const days = view === \"week\" ? getWeekDays() : getMonthDays();\n\n  const handlePrevious = () => {\n    if (view === \"week\") {\n      setCurrentDate(subWeeks(currentDate, 1));\n    } else {\n      setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));\n    }\n  };\n\n  const handleNext = () => {\n    if (view === \"week\") {\n      setCurrentDate(addWeeks(currentDate, 1));\n    } else {\n      setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));\n    }\n  };\n\n  const getBookingsForDay = (day: Date) => {\n    if (!calendarData?.slots) return [];\n    return calendarData.slots.filter((slot: any) => {\n      const slotDate = new Date(slot.startTime);\n      return format(slotDate, \"yyyy-MM-dd\") === format(day, \"yyyy-MM-dd\");\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"confirmed\": return \"bg-red-500\";\n      case \"in_progress\": return \"bg-yellow-500\";\n      case \"quotation\": return \"bg-blue-500\";\n      case \"deposit_pending\": return \"bg-orange-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Hall Calendar\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-hall-calendar\">Hall Calendar</h1>\n          <div className=\"flex gap-2\">\n            <Select value={view} onValueChange={(value: any) => setView(value)}>\n              <SelectTrigger className=\"w-32\" data-testid=\"select-view\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"week\">Week</SelectItem>\n                <SelectItem value=\"month\">Month</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <Select value={selectedHall} onValueChange={setSelectedHall}>\n            <SelectTrigger className=\"w-64\" data-testid=\"select-hall-calendar\">\n              <SelectValue placeholder=\"Select a hall\" />\n            </SelectTrigger>\n            <SelectContent>\n              {halls.map((hall) => (\n                <SelectItem key={hall.id} value={hall.id}>\n                  {hall.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"icon\" onClick={handlePrevious} data-testid=\"button-previous\">\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"text-lg font-semibold min-w-[200px] text-center\">\n              {view === \"week\" \n                ? `${format(days[0], \"MMM d\")} - ${format(days[6], \"MMM d, yyyy\")}`\n                : format(currentDate, \"MMMM yyyy\")}\n            </div>\n            <Button variant=\"outline\" size=\"icon\" onClick={handleNext} data-testid=\"button-next\">\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <Button variant=\"outline\" onClick={() => setCurrentDate(new Date())} data-testid=\"button-today\">\n            Today\n          </Button>\n        </div>\n\n        {!selectedHall ? (\n          <Card className=\"p-8\">\n            <div className=\"text-center text-muted-foreground\">\n              <CalendarIcon className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <p>Select a hall to view its calendar</p>\n            </div>\n          </Card>\n        ) : (\n          <Card className=\"p-4\">\n            <div className={cn(\"grid gap-2\", view === \"week\" ? \"grid-cols-7\" : \"grid-cols-7\")}>\n              {view === \"week\" && days.map((day) => (\n                <div key={day.toString()} className=\"text-center font-medium text-sm text-muted-foreground p-2\">\n                  {format(day, \"EEE\")}\n                </div>\n              ))}\n              \n              {days.map((day) => {\n                const bookings = getBookingsForDay(day);\n                const isToday = format(day, \"yyyy-MM-dd\") === format(new Date(), \"yyyy-MM-dd\");\n                \n                return (\n                  <div\n                    key={day.toString()}\n                    className={cn(\n                      \"min-h-[120px] border rounded-lg p-2 space-y-1\",\n                      isToday && \"border-primary bg-primary/5\"\n                    )}\n                    data-testid={`calendar-day-${format(day, \"yyyy-MM-dd\")}`}\n                  >\n                    <div className={cn(\"text-sm font-medium\", isToday && \"text-primary\")}>\n                      {format(day, \"d\")}\n                    </div>\n                    <div className=\"space-y-1\">\n                      {bookings.map((booking: any) => (\n                        <div\n                          key={booking.id}\n                          className={cn(\n                            \"text-xs p-1 rounded text-white truncate\",\n                            getStatusColor(booking.status)\n                          )}\n                          title={`${booking.customerName} - ${format(new Date(booking.startTime), \"HH:mm\")} - ${format(new Date(booking.endTime), \"HH:mm\")}`}\n                          data-testid={`booking-slot-${booking.id}`}\n                        >\n                          {format(new Date(booking.startTime), \"HH:mm\")} {booking.customerName}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"mt-4 flex gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 rounded bg-blue-500\" />\n                <span>Quotation</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 rounded bg-orange-500\" />\n                <span>Deposit Pending</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 rounded bg-red-500\" />\n                <span>Confirmed</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 rounded bg-yellow-500\" />\n                <span>In Progress</span>\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":8339},"client/src/pages/dashboard/housekeeping-supervisor/leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, Clock, User, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function LeaveRequests() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newRequest, setNewRequest] = useState({\n    leaveType: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\"\n  });\n  const [selectedRequest, setSelectedRequest] = useState<any>(null);\n  const [isActionDialogOpen, setIsActionDialogOpen] = useState(false);\n  const [actionType, setActionType] = useState<'approve' | 'reject'>('approve');\n  const [managerNotes, setManagerNotes] = useState(\"\");\n\n  const queryClient = useQueryClient();\n\n  // Fetch user's own leave requests\n  const { data: myRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests/my-requests\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch leave balances\n  const { data: leaveBalances = [] } = useQuery<any[]>({\n    queryKey: [\"/api/leave-balances\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch pending leave requests for approval from subordinates\n  const { data: pendingApprovals = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests/pending-approvals\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch all leave requests from subordinates\n  const { data: subordinateRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests\"],\n    refetchInterval: 3000\n  });\n\n  // Create leave request mutation\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      const response = await fetch(\"/api/hotels/current/leave-requests\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/my-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-balances\"] });\n      setIsAddDialogOpen(false);\n      setNewRequest({ leaveType: \"\", startDate: \"\", endDate: \"\", reason: \"\" });\n      toast.success(\"Leave request submitted successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Approve leave request mutation\n  const approveRequestMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes?: string }) => {\n      const response = await fetch(`/api/leave-requests/${id}/approve`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ managerNotes: notes })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to approve leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/pending-approvals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests\"] });\n      setIsActionDialogOpen(false);\n      setSelectedRequest(null);\n      setManagerNotes(\"\");\n      toast.success(\"Leave request approved successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Reject leave request mutation\n  const rejectRequestMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes: string }) => {\n      const response = await fetch(`/api/leave-requests/${id}/reject`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ managerNotes: notes })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to reject leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/pending-approvals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests\"] });\n      setIsActionDialogOpen(false);\n      setSelectedRequest(null);\n      setManagerNotes(\"\");\n      toast.success(\"Leave request rejected\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateRequest = () => {\n    if (!newRequest.leaveType || !newRequest.startDate || !newRequest.endDate) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (new Date(newRequest.endDate) < new Date(newRequest.startDate)) {\n      toast.error(\"End date must be after start date\");\n      return;\n    }\n\n    createRequestMutation.mutate(newRequest);\n  };\n\n  const handleApprovalAction = (request: any, action: 'approve' | 'reject') => {\n    setSelectedRequest(request);\n    setActionType(action);\n    setManagerNotes(\"\");\n    setIsActionDialogOpen(true);\n  };\n\n  const handleConfirmAction = () => {\n    if (!selectedRequest) return;\n    \n    if (actionType === 'approve') {\n      approveRequestMutation.mutate({\n        id: selectedRequest.id,\n        notes: managerNotes\n      });\n    } else {\n      rejectRequestMutation.mutate({\n        id: selectedRequest.id,\n        notes: managerNotes\n      });\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected': return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default: return <Clock className=\"h-4 w-4 text-orange-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-orange-100 text-orange-800 border-orange-200';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDaysDifference = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n    return diffDays;\n  };\n\n  // Columns for my requests\n  const myRequestsColumns = [\n    { \n      key: \"leaveType\", \n      label: \"Type\", \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium capitalize\" data-testid={`text-type-${value}`}>\n          {value?.replace(/_/g, ' ')}\n        </span>\n      )\n    },\n    { \n      key: \"startDate\", \n      label: \"Start Date\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-startdate\">{formatDate(value)}</span>\n    },\n    { \n      key: \"endDate\", \n      label: \"End Date\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-enddate\">{formatDate(value)}</span>\n    },\n    {\n      key: \"duration\",\n      label: \"Duration\",\n      render: (value: any, row: any) => (\n        <span className=\"text-sm text-muted-foreground\" data-testid=\"text-duration\">\n          {getDaysDifference(row.startDate, row.endDate)} day(s)\n        </span>\n      )\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon(value)}\n          <Badge variant=\"outline\" className={getStatusColor(value)} data-testid={`badge-status-${value}`}>\n            {value?.charAt(0).toUpperCase() + value?.slice(1)}\n          </Badge>\n        </div>\n      )\n    },\n    { \n      key: \"reason\", \n      label: \"Reason\", \n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\" data-testid=\"text-reason\">\n          {value || 'No reason provided'}\n        </span>\n      )\n    },\n    {\n      key: \"managerNotes\",\n      label: \"Manager Notes\",\n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\" data-testid=\"text-managernotes\">\n          {value || '-'}\n        </span>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Submitted\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-submitted\">{formatDate(value)}</span>\n    }\n  ];\n\n  // Columns for pending approvals\n  const pendingApprovalsColumns = [\n    { \n      key: \"requestedBy\", \n      label: \"Employee\", \n      render: (value: string, row: any) => (\n        <div className=\"flex items-center space-x-2\">\n          <User className=\"h-4 w-4 text-muted-foreground\" />\n          <span data-testid={`text-employee-${row.id}`}>{row.requestedByUser?.username || 'Unknown User'}</span>\n        </div>\n      )\n    },\n    { \n      key: \"leaveType\", \n      label: \"Type\", \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium capitalize\" data-testid={`text-leavetype-${value}`}>\n          {value?.replace(/_/g, ' ')}\n        </span>\n      )\n    },\n    { \n      key: \"startDate\", \n      label: \"Start Date\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-startdate-approval\">{formatDate(value)}</span>\n    },\n    { \n      key: \"endDate\", \n      label: \"End Date\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-enddate-approval\">{formatDate(value)}</span>\n    },\n    {\n      key: \"duration\",\n      label: \"Duration\",\n      render: (value: any, row: any) => (\n        <span className=\"text-sm text-muted-foreground\" data-testid=\"text-duration-approval\">\n          {getDaysDifference(row.startDate, row.endDate)} day(s)\n        </span>\n      )\n    },\n    { \n      key: \"reason\", \n      label: \"Reason\", \n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\" data-testid=\"text-reason-approval\">\n          {value || 'No reason provided'}\n        </span>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Submitted\", \n      sortable: true,\n      render: (value: string) => <span data-testid=\"text-submitted-approval\">{formatDate(value)}</span>\n    }\n  ];\n\n  // Columns for all subordinate requests\n  const allSubordinateColumns = [\n    ...pendingApprovalsColumns,\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon(value)}\n          <Badge variant=\"outline\" className={getStatusColor(value)} data-testid={`badge-subordinate-status-${value}`}>\n            {value?.charAt(0).toUpperCase() + value?.slice(1)}\n          </Badge>\n        </div>\n      )\n    },\n    {\n      key: \"managerNotes\",\n      label: \"Notes\",\n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\" data-testid=\"text-notes-subordinate\">\n          {value || '-'}\n        </span>\n      )\n    }\n  ];\n\n  const approvalActions = [\n    { \n      label: \"Approve\", \n      action: (row: any) => handleApprovalAction(row, 'approve'),\n      variant: \"default\" as const,\n      testId: \"button-approve\"\n    },\n    { \n      label: \"Reject\", \n      action: (row: any) => handleApprovalAction(row, 'reject'),\n      variant: \"destructive\" as const,\n      testId: \"button-reject\"\n    }\n  ];\n\n  const pendingMyRequests = myRequests.filter(r => r.status === 'pending').length;\n  const approvedMyRequests = myRequests.filter(r => r.status === 'approved').length;\n  const rejectedMyRequests = myRequests.filter(r => r.status === 'rejected').length;\n\n  const approvedSubordinate = subordinateRequests.filter(r => r.status === 'approved').length;\n  const rejectedSubordinate = subordinateRequests.filter(r => r.status === 'rejected').length;\n\n  return (\n    <DashboardLayout title=\"Leave Requests\">\n      <div className=\"space-y-6\">\n        <Tabs defaultValue=\"my-requests\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"tabs-leave-requests\">\n            <TabsTrigger value=\"my-requests\" data-testid=\"tab-my-requests\">My Leave Requests</TabsTrigger>\n            <TabsTrigger value=\"team-approvals\" data-testid=\"tab-team-approvals\">\n              Team Approvals\n              {pendingApprovals.length > 0 && (\n                <Badge className=\"ml-2 bg-orange-500\" data-testid=\"badge-pending-count\">\n                  {pendingApprovals.length}\n                </Badge>\n              )}\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"my-requests\" className=\"space-y-6\">\n            {/* Leave Balance Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {leaveBalances.map((balance: any) => (\n                <Card key={balance.id} data-testid={`balance-card-${balance.leaveType}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium text-muted-foreground capitalize\">\n                        {balance.leaveType.replace(/_/g, ' ')} Leave Balance\n                      </p>\n                      <div className=\"flex items-baseline space-x-2\">\n                        <p className=\"text-3xl font-bold\" data-testid={`balance-remaining-${balance.leaveType}`}>\n                          {parseFloat(balance.remainingDays)}\n                        </p>\n                        <span className=\"text-sm text-muted-foreground\">\n                          / {parseFloat(balance.totalDays)} days\n                        </span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Used: {parseFloat(balance.usedDays)} days\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* My Request Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-pending\">{pendingMyRequests}</p>\n                    </div>\n                    <Clock className=\"h-8 w-8 text-orange-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-approved\">{approvedMyRequests}</p>\n                    </div>\n                    <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-rejected\">{rejectedMyRequests}</p>\n                    </div>\n                    <XCircle className=\"h-8 w-8 text-red-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* My Requests Table */}\n            <DataTable\n              title=\"My Leave Requests\"\n              data={myRequests}\n              columns={myRequestsColumns}\n              isLoading={isLoading}\n              onAdd={() => setIsAddDialogOpen(true)}\n              addButtonLabel=\"Request Leave\"\n              searchPlaceholder=\"Search leave requests...\"\n            />\n          </TabsContent>\n\n          <TabsContent value=\"team-approvals\" className=\"space-y-6\">\n            {/* Team Approval Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Pending Approval</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-pending-approval\">{pendingApprovals.length}</p>\n                    </div>\n                    <Clock className=\"h-8 w-8 text-orange-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-approved-subordinate\">{approvedSubordinate}</p>\n                    </div>\n                    <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-rejected-subordinate\">{rejectedSubordinate}</p>\n                    </div>\n                    <XCircle className=\"h-8 w-8 text-red-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Pending Approvals Table */}\n            <DataTable\n              title=\"Pending Leave Requests\"\n              data={pendingApprovals}\n              columns={pendingApprovalsColumns}\n              actions={approvalActions}\n              isLoading={isLoading}\n              searchPlaceholder=\"Search pending requests...\"\n            />\n\n            {/* All Subordinate Requests Table */}\n            <DataTable\n              title=\"All Team Leave Requests\"\n              data={subordinateRequests}\n              columns={allSubordinateColumns}\n              isLoading={isLoading}\n              searchPlaceholder=\"Search all requests...\"\n            />\n          </TabsContent>\n        </Tabs>\n\n        {/* Add Leave Request Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request Leave</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"leaveType\">Leave Type *</Label>\n                <Select \n                  value={newRequest.leaveType} \n                  onValueChange={(value) => setNewRequest({ ...newRequest, leaveType: value })}\n                >\n                  <SelectTrigger data-testid=\"select-leavetype\">\n                    <SelectValue placeholder=\"Select leave type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                    <SelectItem value=\"vacation\">Vacation</SelectItem>\n                    <SelectItem value=\"personal\">Personal Leave</SelectItem>\n                    <SelectItem value=\"emergency\">Emergency Leave</SelectItem>\n                    <SelectItem value=\"family\">Family Leave</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"startDate\">Start Date *</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={newRequest.startDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, startDate: e.target.value })}\n                  min={new Date().toISOString().split('T')[0]}\n                  data-testid=\"input-startdate\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"endDate\">End Date *</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={newRequest.endDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, endDate: e.target.value })}\n                  min={newRequest.startDate || new Date().toISOString().split('T')[0]}\n                  data-testid=\"input-enddate\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"reason\">Reason</Label>\n                <Textarea\n                  id=\"reason\"\n                  value={newRequest.reason}\n                  onChange={(e) => setNewRequest({ ...newRequest, reason: e.target.value })}\n                  placeholder=\"Please provide a reason for your leave request\"\n                  rows={3}\n                  data-testid=\"textarea-reason\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateRequest}\n                  disabled={createRequestMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Approval/Rejection Dialog */}\n        <Dialog open={isActionDialogOpen} onOpenChange={setIsActionDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {actionType === 'approve' ? 'Approve' : 'Reject'} Leave Request\n              </DialogTitle>\n            </DialogHeader>\n            {selectedRequest && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Request Details</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <p><strong>Employee:</strong> {selectedRequest.requestedByUser?.username || 'Unknown'}</p>\n                    <p><strong>Type:</strong> {selectedRequest.leaveType?.replace(/_/g, ' ')}</p>\n                    <p><strong>Period:</strong> {formatDate(selectedRequest.startDate)} - {formatDate(selectedRequest.endDate)}</p>\n                    <p><strong>Duration:</strong> {getDaysDifference(selectedRequest.startDate, selectedRequest.endDate)} day(s)</p>\n                    {selectedRequest.reason && (\n                      <p><strong>Reason:</strong> {selectedRequest.reason}</p>\n                    )}\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"managerNotes\">\n                    Manager Notes {actionType === 'reject' ? '(Required)' : '(Optional)'}\n                  </Label>\n                  <Textarea\n                    id=\"managerNotes\"\n                    value={managerNotes}\n                    onChange={(e) => setManagerNotes(e.target.value)}\n                    placeholder={`Add notes for the ${actionType} decision...`}\n                    rows={3}\n                    data-testid=\"textarea-managernotes\"\n                  />\n                </div>\n                \n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setIsActionDialogOpen(false)} data-testid=\"button-cancel-action\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleConfirmAction}\n                    disabled={approveRequestMutation.isPending || rejectRequestMutation.isPending || (actionType === 'reject' && !managerNotes.trim())}\n                    variant={actionType === 'approve' ? 'default' : 'destructive'}\n                    data-testid=\"button-confirm-action\"\n                  >\n                    {(approveRequestMutation.isPending || rejectRequestMutation.isPending) \n                      ? (actionType === 'approve' ? \"Approving...\" : \"Rejecting...\") \n                      : (actionType === 'approve' ? \"Approve Request\" : \"Reject Request\")\n                    }\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":26201},"client/src/pages/dashboard/housekeeping-supervisor/task-assignment.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function HousekeepingSupervisorTaskAssignment() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const form = useForm({\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      assignedTo: \"\",\n      priority: \"medium\",\n      dueDateTime: \"\"\n    }\n  });\n\n  const { data: tasks = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/tasks\"],\n    refetchInterval: 3000\n  });\n\n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Enable real-time updates\n  useRealtimeQuery({\n    queryKey: '/api/hotels/current/tasks',\n    events: ['task:created', 'task:updated', 'task:deleted']\n  });\n\n  useRealtimeQuery({\n    queryKey: '/api/attendance/daily',\n    events: ['attendance:updated']\n  });\n\n  const housekeepingStaff = staff.filter(s => s.role?.name === 'housekeeping_staff');\n  const onlineStaff = housekeepingStaff.filter(s => \n    dailyAttendance.some(a => a.userId === s.id && a.status === 'active')\n  );\n  const housekeepingTasks = tasks.filter(task => \n    housekeepingStaff.some(s => s.id === task.assignedTo)\n  );\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (taskData: any) => {\n      const response = await fetch(\"/api/hotels/current/tasks\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(taskData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create task\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/tasks\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({ title: \"Task assigned successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      const response = await fetch(`/api/hotels/current/tasks/${taskId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status })\n      });\n      if (!response.ok) throw new Error(\"Failed to update task\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/tasks\"] });\n      toast({ title: \"Task status updated\" });\n    },\n    onError: (error: any) => {\n      toast({ title: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleCreateTask = (data: any) => {\n    if (!data.title || !data.assignedTo) {\n      toast({ title: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    const { dueDateTime, ...taskData } = data;\n    createTaskMutation.mutate({\n      ...taskData,\n      hotelId: user?.hotelId,\n      createdBy: user?.id,\n      dueDate: dueDateTime || null\n    });\n  };\n\n  const taskColumns = [\n    { key: \"title\", label: \"Task\", sortable: true },\n    { \n      key: \"assignedTo\", \n      label: \"Assigned To\", \n      render: (value: any, row: any) => {\n        const assignee = staff.find(s => s.id === row.assignedTo);\n        return assignee?.username || \"Unassigned\";\n      }\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      sortable: true,\n      render: (value: string) => {\n        const statusColors: Record<string, string> = {\n          'pending': 'bg-gray-100 text-gray-800',\n          'in_progress': 'bg-blue-100 text-blue-800',\n          'pending_review': 'bg-yellow-100 text-yellow-800',\n          'completed': 'bg-green-100 text-green-800',\n          'cancelled': 'bg-red-100 text-red-800'\n        };\n        return (\n          <span className={`px-2 py-1 rounded-md text-xs font-medium ${statusColors[value] || 'bg-gray-100 text-gray-800'}`}>\n            {value === 'pending_review' ? 'Pending Approval' : value}\n          </span>\n        );\n      }\n    },\n    { key: \"priority\", label: \"Priority\", sortable: true },\n    { \n      key: \"createdAt\", \n      label: \"Created\", \n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleDateString('en-GB', { timeZone: 'Asia/Kathmandu' })\n    }\n  ];\n\n  const taskActions = [\n    { \n      label: \"Approve\", \n      action: (row: any) => updateTaskMutation.mutate({ taskId: row.id, status: \"completed\" }),\n      show: (row: any) => row.status === 'pending_review'\n    },\n    { \n      label: \"Mark Complete\", \n      action: (row: any) => updateTaskMutation.mutate({ taskId: row.id, status: \"completed\" }),\n      show: (row: any) => row.status === 'in_progress'\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Task Assignment\">\n      <DataTable\n        title=\"Housekeeping Tasks\"\n        data={housekeepingTasks}\n        columns={taskColumns}\n        actions={taskActions}\n        onAdd={() => setIsAddDialogOpen(true)}\n        addButtonLabel=\"Assign New Task\"\n        searchPlaceholder=\"Search tasks...\"\n        isLoading={isLoading}\n      />\n\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign New Task</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleCreateTask)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Task Title</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-title\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} data-testid=\"textarea-description\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"assignedTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assign To (Only On-Duty Staff)</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-assignedto\">\n                          <SelectValue placeholder=\"Select staff member\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {onlineStaff.map(s => (\n                          <SelectItem key={s.id} value={s.id}>\n                            {s.username} (Online)\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-priority\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"dueDateTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Due Date (Optional)</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"datetime-local\" data-testid=\"input-duedate\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createTaskMutation.isPending} data-testid=\"button-submit\">\n                  {createTaskMutation.isPending ? \"Assigning...\" : \"Assign Task\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10409},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/hooks/use-confirm-dialog.tsx":{"content":"import { create } from 'zustand';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ConfirmDialogState {\n  isOpen: boolean;\n  title: string;\n  description: string;\n  onConfirm: (() => void) | null;\n  onCancel?: (() => void) | null;\n  confirmText?: string;\n  cancelText?: string;\n  variant?: 'default' | 'destructive';\n}\n\ninterface ConfirmDialogStore extends ConfirmDialogState {\n  open: (config: Omit<ConfirmDialogState, 'isOpen'>) => void;\n  close: () => void;\n}\n\nconst useConfirmDialogStore = create<ConfirmDialogStore>((set) => ({\n  isOpen: false,\n  title: '',\n  description: '',\n  onConfirm: null,\n  onCancel: null,\n  confirmText: 'Confirm',\n  cancelText: 'Cancel',\n  variant: 'default',\n  open: (config) => set({ isOpen: true, ...config }),\n  close: () => set({ \n    isOpen: false, \n    onConfirm: null, \n    onCancel: null,\n    confirmText: 'Confirm',\n    cancelText: 'Cancel',\n    variant: 'default'\n  }),\n}));\n\nexport const useConfirmDialog = () => {\n  const store = useConfirmDialogStore();\n\n  const confirm = (config: Omit<ConfirmDialogState, 'isOpen' | 'onConfirm'> & { \n    onConfirm: () => void | Promise<void> \n  }): Promise<boolean> => {\n    return new Promise((resolve) => {\n      store.open({\n        ...config,\n        onConfirm: async () => {\n          await config.onConfirm();\n          store.close();\n          resolve(true);\n        },\n        onCancel: () => {\n          config.onCancel?.();\n          store.close();\n          resolve(false);\n        }\n      });\n    });\n  };\n\n  return { confirm };\n};\n\nexport const ConfirmDialogProvider = () => {\n  const { isOpen, title, description, onConfirm, onCancel, confirmText, cancelText, variant } = useConfirmDialogStore();\n\n  return (\n    <AlertDialog open={isOpen} onOpenChange={(open) => {\n      if (!open) {\n        onCancel?.();\n        useConfirmDialogStore.getState().close();\n      }\n    }}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={() => {\n            onCancel?.();\n            useConfirmDialogStore.getState().close();\n          }}>\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={() => onConfirm?.()}\n            className={variant === 'destructive' ? 'bg-destructive text-destructive-foreground hover:bg-destructive/90' : ''}\n          >\n            {confirmText}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n","size_bytes":2831},"client/src/pages/dashboard/surveillance-officer/vehicle-logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { Car, Plus } from \"lucide-react\";\n\nexport default function SurveillanceOfficerVehicleLogs() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showForm, setShowForm] = useState(false);\n  const [vehicleForm, setVehicleForm] = useState({\n    vehicleNumber: \"\",\n    vehicleType: \"car\",\n    driverName: \"\",\n    purpose: \"\"\n  });\n  \n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: vehicleLogs = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vehicle-logs\"],\n    refetchInterval: 3000\n  });\n\n  const checkInVehicleMutation = useMutation({\n    mutationFn: async (data: typeof vehicleForm) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/vehicle-logs\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vehicle-logs\"] });\n      toast({ title: \"Vehicle checked in successfully\" });\n      setVehicleForm({ vehicleNumber: \"\", vehicleType: \"car\", driverName: \"\", purpose: \"\" });\n      setShowForm(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to check in vehicle\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const checkOutVehicleMutation = useMutation({\n    mutationFn: async (vehicleId: string) => {\n      return await apiRequest(\"PATCH\", `/api/vehicle-logs/${vehicleId}/checkout`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vehicle-logs\"] });\n      toast({ title: \"Vehicle checked out successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to check out vehicle\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleVehicleCheckIn = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!vehicleForm.vehicleNumber || !vehicleForm.vehicleType || !vehicleForm.driverName) {\n      toast({ title: \"Vehicle number, type, and driver name are required\", variant: \"destructive\" });\n      return;\n    }\n    checkInVehicleMutation.mutate(vehicleForm);\n  };\n\n  const myVehicleLogs = vehicleLogs.filter(v => v.recordedBy === user?.id);\n  const activeVehicles = myVehicleLogs.filter(v => !v.checkOut);\n  \n  const filteredLogs = myVehicleLogs.filter(log => \n    searchQuery === \"\" || \n    log.vehicleNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    log.driverName?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <DashboardLayout title=\"Vehicle Logs\">\n      <div className=\"space-y-6\">\n        {/* Stats Card */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Vehicles On Premises</p>\n                <p className=\"text-4xl font-bold\">{activeVehicles.length}</p>\n              </div>\n              <Car className=\"h-12 w-12 text-purple-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Check-in Form */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Vehicle Check-in</CardTitle>\n                <CardDescription>Record new vehicle entry</CardDescription>\n              </div>\n              <Button \n                onClick={() => setShowForm(!showForm)} \n                size=\"sm\"\n                data-testid=\"button-toggle-form\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {showForm ? 'Cancel' : 'Check-in Vehicle'}\n              </Button>\n            </div>\n          </CardHeader>\n          {showForm && (\n            <CardContent>\n              <form onSubmit={handleVehicleCheckIn} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"vehicleNumber\">Vehicle Number *</Label>\n                    <Input\n                      id=\"vehicleNumber\"\n                      data-testid=\"input-vehicle-number\"\n                      value={vehicleForm.vehicleNumber}\n                      onChange={(e) => setVehicleForm({ ...vehicleForm, vehicleNumber: e.target.value })}\n                      placeholder=\"e.g., BA 12 PA 1234\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"vehicleType\">Vehicle Type *</Label>\n                    <Select \n                      value={vehicleForm.vehicleType} \n                      onValueChange={(value) => setVehicleForm({ ...vehicleForm, vehicleType: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-vehicle-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"car\">Car</SelectItem>\n                        <SelectItem value=\"motorcycle\">Motorcycle</SelectItem>\n                        <SelectItem value=\"truck\">Truck</SelectItem>\n                        <SelectItem value=\"van\">Van</SelectItem>\n                        <SelectItem value=\"bus\">Bus</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"driverName\">Driver Name *</Label>\n                    <Input\n                      id=\"driverName\"\n                      data-testid=\"input-driver-name\"\n                      value={vehicleForm.driverName}\n                      onChange={(e) => setVehicleForm({ ...vehicleForm, driverName: e.target.value })}\n                      placeholder=\"Driver's full name\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"purpose\">Purpose</Label>\n                    <Input\n                      id=\"purpose\"\n                      data-testid=\"input-purpose\"\n                      value={vehicleForm.purpose}\n                      onChange={(e) => setVehicleForm({ ...vehicleForm, purpose: e.target.value })}\n                      placeholder=\"Purpose of visit\"\n                    />\n                  </div>\n                </div>\n                <Button \n                  type=\"submit\" \n                  disabled={checkInVehicleMutation.isPending}\n                  data-testid=\"button-submit-checkin\"\n                >\n                  {checkInVehicleMutation.isPending ? 'Checking in...' : 'Check-in Vehicle'}\n                </Button>\n              </form>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* Vehicle Logs */}\n        <Card>\n          <CardHeader>\n            <CardTitle>My Vehicle Logs</CardTitle>\n            <CardDescription>\n              <div className=\"mt-2\">\n                <Label htmlFor=\"vehicleSearch\">Search</Label>\n                <Input\n                  id=\"vehicleSearch\"\n                  data-testid=\"input-vehicle-search\"\n                  placeholder=\"Search by vehicle number or driver name...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\" data-testid=\"loading-vehicles\">Loading vehicle logs...</div>\n            ) : filteredLogs.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-vehicles\">\n                {searchQuery ? 'No matching vehicles found.' : 'No vehicle logs yet.'}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredLogs.map((log) => (\n                  <div \n                    key={log.id} \n                    className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\" \n                    data-testid={`vehicle-${log.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-1\">\n                        <Car className=\"h-5 w-5 text-muted-foreground\" />\n                        <span className=\"font-semibold text-lg\" data-testid={`vehicle-number-${log.id}`}>\n                          {log.vehicleNumber}\n                        </span>\n                        <span className=\"px-2 py-0.5 rounded text-xs bg-blue-100 text-blue-800\">\n                          {log.vehicleType}\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground ml-8\">\n                        <p>Driver: {log.driverName}</p>\n                        {log.purpose && <p>Purpose: {log.purpose}</p>}\n                        <p className=\"mt-1\">\n                          Check-in: {format(new Date(log.checkIn), 'MMM dd, yyyy HH:mm')}\n                        </p>\n                        {log.checkOut && (\n                          <p>Check-out: {format(new Date(log.checkOut), 'MMM dd, yyyy HH:mm')}</p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                        log.checkOut ? 'bg-gray-100 text-gray-800' : 'bg-green-100 text-green-800'\n                      }`} data-testid={`vehicle-status-${log.id}`}>\n                        {log.checkOut ? 'Checked Out' : 'On Premises'}\n                      </span>\n                      {!log.checkOut && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => checkOutVehicleMutation.mutate(log.id)}\n                          disabled={checkOutVehicleMutation.isPending}\n                          data-testid={`button-checkout-${log.id}`}\n                        >\n                          Check Out\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":11373},"client/src/pages/dashboard/manager/my-leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function ManagerLeaveRequests() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newRequest, setNewRequest] = useState({\n    leaveType: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\"\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch user's own leave requests\n  const { data: myRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests/my-requests\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch leave balances\n  const { data: leaveBalances = [] } = useQuery<any[]>({\n    queryKey: [\"/api/leave-balances\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates for leave requests\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/leave-requests/my-requests\"],\n    refetchInterval: 3000,\n    events: ['leave:created', 'leave:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/leave-balances\"],\n    refetchInterval: 3000,\n    events: ['leave:created', 'leave:updated']\n  });\n\n  // Create leave request mutation\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      const response = await fetch(\"/api/hotels/current/leave-requests\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/my-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-balances\"] });\n      setIsAddDialogOpen(false);\n      setNewRequest({ leaveType: \"\", startDate: \"\", endDate: \"\", reason: \"\" });\n      toast.success(\"Leave request submitted successfully to owner\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateRequest = () => {\n    if (!newRequest.leaveType || !newRequest.startDate || !newRequest.endDate) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (new Date(newRequest.endDate) < new Date(newRequest.startDate)) {\n      toast.error(\"End date must be after start date\");\n      return;\n    }\n\n    createRequestMutation.mutate(newRequest);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected': return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default: return <Clock className=\"h-4 w-4 text-orange-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-orange-100 text-orange-800 border-orange-200';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDaysDifference = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n    return diffDays;\n  };\n\n  // Columns for my requests\n  const myRequestsColumns = [\n    { \n      key: \"leaveType\", \n      label: \"Type\", \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium capitalize\">\n          {value?.replace(/_/g, ' ')}\n        </span>\n      )\n    },\n    { \n      key: \"startDate\", \n      label: \"Start Date\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    },\n    { \n      key: \"endDate\", \n      label: \"End Date\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    },\n    {\n      key: \"duration\",\n      label: \"Duration\",\n      render: (value: any, row: any) => (\n        <span className=\"text-sm text-muted-foreground\">\n          {getDaysDifference(row.startDate, row.endDate)} day(s)\n        </span>\n      )\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon(value)}\n          <Badge variant=\"outline\" className={getStatusColor(value)}>\n            {value?.charAt(0).toUpperCase() + value?.slice(1)}\n          </Badge>\n        </div>\n      )\n    },\n    { \n      key: \"reason\", \n      label: \"Reason\", \n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\">\n          {value || 'No reason provided'}\n        </span>\n      )\n    },\n    {\n      key: \"managerNotes\",\n      label: \"Owner Notes\",\n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\">\n          {value || '-'}\n        </span>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Submitted\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    }\n  ];\n\n  const pendingMyRequests = myRequests.filter(r => r.status === 'pending').length;\n  const approvedMyRequests = myRequests.filter(r => r.status === 'approved').length;\n  const rejectedMyRequests = myRequests.filter(r => r.status === 'rejected').length;\n\n  return (\n    <DashboardLayout title=\"My Leave Requests\">\n      <div className=\"space-y-6\">\n        {/* Leave Balance Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {leaveBalances.map((balance: any) => (\n            <Card key={balance.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground capitalize\">\n                    {balance.leaveType.replace(/_/g, ' ')} Leave Balance\n                  </p>\n                  <div className=\"flex items-baseline space-x-2\">\n                    <p className=\"text-3xl font-bold\">\n                      {parseFloat(balance.remainingDays)}\n                    </p>\n                    <span className=\"text-sm text-muted-foreground\">\n                      / {parseFloat(balance.totalDays)} days\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Used: {parseFloat(balance.usedDays)} days\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* My Request Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold\">{pendingMyRequests}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                  <p className=\"text-2xl font-bold\">{approvedMyRequests}</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                  <p className=\"text-2xl font-bold\">{rejectedMyRequests}</p>\n                </div>\n                <XCircle className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* My Requests Table */}\n        <DataTable\n          title=\"My Leave Requests\"\n          data={myRequests}\n          columns={myRequestsColumns}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Request Leave\"\n          searchPlaceholder=\"Search leave requests...\"\n        />\n\n        {/* Add Leave Request Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request Leave</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"leaveType\">Leave Type *</Label>\n                <Select \n                  value={newRequest.leaveType} \n                  onValueChange={(value) => setNewRequest({ ...newRequest, leaveType: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select leave type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                    <SelectItem value=\"vacation\">Vacation</SelectItem>\n                    <SelectItem value=\"personal\">Personal Leave</SelectItem>\n                    <SelectItem value=\"emergency\">Emergency Leave</SelectItem>\n                    <SelectItem value=\"family\">Family Leave</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"startDate\">Start Date *</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={newRequest.startDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, startDate: e.target.value })}\n                  min={new Date().toISOString().split('T')[0]}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"endDate\">End Date *</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={newRequest.endDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, endDate: e.target.value })}\n                  min={newRequest.startDate || new Date().toISOString().split('T')[0]}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"reason\">Reason</Label>\n                <Textarea\n                  id=\"reason\"\n                  value={newRequest.reason}\n                  onChange={(e) => setNewRequest({ ...newRequest, reason: e.target.value })}\n                  placeholder=\"Please provide a reason for your leave request\"\n                  rows={3}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateRequest}\n                  disabled={createRequestMutation.isPending}\n                >\n                  {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":12630},"client/src/pages/dashboard/finance.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { DollarSign, TrendingUp, TrendingDown, Receipt, CreditCard, Smartphone, Building, CheckCircle, XCircle, Landmark, Building2 } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Transaction, MaintenanceRequest, Vendor } from \"@shared/schema\";\n\nexport default function FinanceDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const [isBankDepositModalOpen, setIsBankDepositModalOpen] = useState(false);\n  const [isVendorPaymentModalOpen, setIsVendorPaymentModalOpen] = useState(false);\n  const [isAddVendorModalOpen, setIsAddVendorModalOpen] = useState(false);\n  const [isAddExpenseModalOpen, setIsAddExpenseModalOpen] = useState(false);\n  const [selectedVendor, setSelectedVendor] = useState<Vendor | null>(null);\n\n  const bankDepositForm = useForm({\n    defaultValues: {\n      amount: \"\",\n      bankName: \"\",\n      notes: \"\"\n    }\n  });\n\n  const vendorPaymentForm = useForm({\n    defaultValues: {\n      vendorId: \"\",\n      amount: \"\",\n      paymentMethod: \"\",\n      chequeNumber: \"\",\n      bankName: \"\",\n      notes: \"\"\n    }\n  });\n\n  const addVendorForm = useForm({\n    defaultValues: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\"\n    }\n  });\n\n  const addExpenseForm = useForm({\n    defaultValues: {\n      category: \"utilities\",\n      amount: \"\",\n      paymentMethod: \"cash\",\n      chequeNumber: \"\",\n      bankName: \"\",\n      description: \"\"\n    }\n  });\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Listen for real-time transaction updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  // Listen for real-time user updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000,\n    events: ['user:created', 'user:updated']\n  });\n\n  // Listen for real-time maintenance updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    events: ['maintenance:updated', 'maintenance:created']\n  });\n\n  const { data: maintenanceRequests = [], isLoading: maintenanceLoading } = useQuery<MaintenanceRequest[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: vendors = [], isLoading: vendorsLoading } = useQuery<Vendor[]>({\n    queryKey: [\"/api/hotels/current/vendors\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: users = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Filter cash deposit requests (cash_deposit_request transactions)\n  const cashDepositRequests = transactions.filter(t => \n    t.txnType === 'cash_deposit_request'\n  );\n\n  const pendingCashDeposits = cashDepositRequests.filter(t => !t.reference?.includes('APPROVED') && !t.reference?.includes('REJECTED'));\n\n  const approveCashDepositMutation = useMutation({\n    mutationFn: async (transactionId: string) => {\n      const transaction = transactions.find(t => t.id === transactionId);\n      if (!transaction) throw new Error(\"Transaction not found\");\n      \n      const currentDetails = transaction.details as Record<string, any> || {};\n      await apiRequest(\"PUT\", `/api/transactions/${transactionId}`, {\n        reference: `${transaction.reference || ''} - APPROVED by ${user?.username}`,\n        details: { ...currentDetails, approvedBy: user?.username, approvedAt: new Date().toISOString() }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Cash deposit request approved successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to approve cash deposit request\", variant: \"destructive\" });\n    }\n  });\n\n  const rejectCashDepositMutation = useMutation({\n    mutationFn: async (transactionId: string) => {\n      const transaction = transactions.find(t => t.id === transactionId);\n      if (!transaction) throw new Error(\"Transaction not found\");\n      \n      const currentDetails = transaction.details as Record<string, any> || {};\n      await apiRequest(\"PUT\", `/api/transactions/${transactionId}`, {\n        reference: `${transaction.reference || ''} - REJECTED by ${user?.username}`,\n        details: { ...currentDetails, rejectedBy: user?.username, rejectedAt: new Date().toISOString() }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Cash deposit request rejected\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to reject cash deposit request\", variant: \"destructive\" });\n    }\n  });\n\n  const bankDepositMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const amount = parseFloat(data.amount);\n      if (isNaN(amount) || amount <= 0) {\n        throw new Error(\"Please enter a valid amount\");\n      }\n      if (!data.bankName || data.bankName.trim() === \"\") {\n        throw new Error(\"Bank name is required\");\n      }\n\n      await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user?.hotelId,\n        txnType: \"bank_deposit\",\n        amount: amount.toFixed(2),\n        paymentMethod: \"cash\",\n        purpose: \"Cash deposited to bank\",\n        reference: `Deposited by ${user?.username}`,\n        details: {\n          bankName: data.bankName.trim(),\n          notes: data.notes || \"\",\n          depositedBy: user?.username,\n          depositedAt: new Date().toISOString()\n        },\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Success\", description: \"Cash deposited to bank successfully\" });\n      bankDepositForm.reset();\n      setIsBankDepositModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to deposit cash to bank\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const vendorPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const amount = parseFloat(data.amount);\n      if (isNaN(amount) || amount <= 0) {\n        throw new Error(\"Please enter a valid amount\");\n      }\n      if (!data.vendorId) {\n        throw new Error(\"Please select a vendor\");\n      }\n      if (!data.paymentMethod) {\n        throw new Error(\"Please select a payment method\");\n      }\n      \n      // Validate cheque details if payment method is cheque\n      if (data.paymentMethod === \"cheque\") {\n        if (!data.chequeNumber || data.chequeNumber.trim() === \"\") {\n          throw new Error(\"Cheque number is required\");\n        }\n        if (!data.bankName || data.bankName.trim() === \"\") {\n          throw new Error(\"Bank name is required for cheque payment\");\n        }\n      }\n\n      const vendor = vendors.find(v => v.id === data.vendorId);\n      const details: any = {\n        vendorId: data.vendorId,\n        vendorName: vendor?.name || \"Unknown\",\n        notes: data.notes || \"\",\n        paidBy: user?.username\n      };\n\n      if (data.paymentMethod === \"cheque\") {\n        details.chequeNumber = data.chequeNumber.trim();\n        details.bankName = data.bankName.trim();\n      }\n\n      await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user?.hotelId,\n        txnType: \"vendor_payment\",\n        amount: amount.toFixed(2),\n        paymentMethod: data.paymentMethod,\n        purpose: `Payment to ${vendor?.name || 'vendor'}`,\n        reference: `Paid by ${user?.username}`,\n        details,\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Success\", description: \"Vendor payment processed successfully\" });\n      vendorPaymentForm.reset();\n      setIsVendorPaymentModalOpen(false);\n      setSelectedVendor(null);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to process vendor payment\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const addVendorMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!data.name || data.name.trim() === \"\") {\n        throw new Error(\"Vendor name is required\");\n      }\n\n      const contact: any = {};\n      if (data.phone) contact.phone = data.phone.trim();\n      if (data.email) contact.email = data.email.trim();\n      if (data.address) contact.address = data.address.trim();\n\n      await apiRequest(\"POST\", \"/api/hotels/current/vendors\", {\n        hotelId: user?.hotelId,\n        name: data.name.trim(),\n        contact\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vendors\"] });\n      toast({ title: \"Success\", description: \"Vendor added successfully\" });\n      addVendorForm.reset();\n      setIsAddVendorModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to add vendor\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const addExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const amount = parseFloat(data.amount);\n      if (isNaN(amount) || amount <= 0) {\n        throw new Error(\"Please enter a valid amount\");\n      }\n\n      // Validate cheque details if payment method is cheque\n      if (data.paymentMethod === \"cheque\") {\n        if (!data.chequeNumber || data.chequeNumber.trim() === \"\") {\n          throw new Error(\"Cheque number is required\");\n        }\n        if (!data.bankName || data.bankName.trim() === \"\") {\n          throw new Error(\"Bank name is required for cheque payment\");\n        }\n      }\n\n      const details: any = {};\n      if (data.paymentMethod === \"cheque\") {\n        details.chequeNumber = data.chequeNumber.trim();\n        details.bankName = data.bankName.trim();\n      }\n\n      await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user?.hotelId,\n        txnType: \"cash_out\",\n        amount: amount.toFixed(2),\n        paymentMethod: data.paymentMethod,\n        purpose: `${data.category} - ${data.description}`,\n        reference: data.category,\n        details,\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Success\", description: \"Expense recorded successfully\" });\n      addExpenseForm.reset();\n      setIsAddExpenseModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to record expense\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Calculate financial totals - separate revenue (income) from expenses\n  // Exclude cash_deposit_request as it's a transfer, not revenue or expense\n  const revenueTransactions = transactions.filter(t => \n    t.txnType === 'cash_in' || t.txnType === 'pos_in' || t.txnType === 'fonepay_in' || \n    t.txnType === 'revenue' || (t.txnType && t.txnType.includes('_in'))\n  );\n  \n  const expenseTransactions = transactions.filter(t => \n    (t.txnType === 'cash_out' || t.txnType === 'vendor_payment' || \n    (t.txnType && t.txnType.includes('_out'))) && \n    t.txnType !== 'cash_deposit_request'\n  );\n\n  // Revenue by payment method (only count income transactions)\n  const cashRevenue = revenueTransactions\n    .filter(t => t.paymentMethod === 'cash')\n    .reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  \n  const posRevenue = revenueTransactions\n    .filter(t => t.paymentMethod === 'pos')\n    .reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  \n  const fonepayRevenue = revenueTransactions\n    .filter(t => t.paymentMethod === 'fonepay')\n    .reduce((sum, t) => sum + Number(t.amount || 0), 0);\n\n  const totalRevenue = revenueTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalExpenses = expenseTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const netRevenue = totalRevenue - totalExpenses;\n  \n  // Calculate profit margin\n  const profitMargin = totalRevenue > 0 ? ((netRevenue / totalRevenue) * 100) : 0;\n\n  // For display purposes - all transactions by payment method (including expenses)\n  const allCashTransactions = transactions.filter(t => t.paymentMethod === 'cash');\n  const allPosTransactions = transactions.filter(t => t.paymentMethod === 'pos');\n  const allFonepayTransactions = transactions.filter(t => t.paymentMethod === 'fonepay');\n\n  // Calculate vendor payments specifically if needed for separate display\n  const vendorPayments = transactions.filter(t => t.txnType === 'vendor_payment');\n  const totalVendorPayments = vendorPayments.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n\n  // Bank balance tracking: POS + Fonepay revenue goes to bank\n  // When cash is deposited to bank, it's deducted from cash and added to bank\n  const bankDeposits = transactions.filter(t => t.txnType === 'bank_deposit');\n  const totalBankDeposits = bankDeposits.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  \n  // Bank Balance = POS Revenue + Fonepay Revenue + Cash Deposits to Bank\n  const bankBalance = posRevenue + fonepayRevenue + totalBankDeposits;\n  \n  // Cash Balance = Cash Revenue - Cash Deposits to Bank\n  const cashBalance = cashRevenue - totalBankDeposits;\n\n  const maintenanceColumns = [\n    { key: \"description\", label: \"Request\", sortable: true },\n    { key: \"department\", label: \"Department\", sortable: true },\n    { \n      key: \"reportedBy\", \n      label: \"Raised By\", \n      render: (value: any, row: any) => {\n        if (typeof value === 'object' && value?.username) {\n          return value.username;\n        }\n        return \"Unknown\";\n      }\n    },\n    { key: \"status\", label: \"Status\", sortable: true },\n    { key: \"createdAt\", label: \"Date\", sortable: true }\n  ];\n\n  const transactionColumns = [\n    { key: \"txnType\", label: \"Type\", sortable: true },\n    { key: \"amount\", label: \"Amount\", sortable: true, render: (value: number) => formatCurrency(value) },\n    { key: \"paymentMethod\", label: \"Method\", sortable: true },\n    { \n      key: \"purpose\", \n      label: \"Purpose\", \n      sortable: true,\n      render: (value: string, row: any) => {\n        if (row.purpose === 'room_checkout_payment' && row.details) {\n          return (\n            <div className=\"space-y-1\">\n              <div className=\"font-medium\">{value}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                Room {row.details.roomNumber} - {row.details.guestName}\n                {row.details.numberOfDays && ` (${row.details.numberOfDays} day${row.details.numberOfDays > 1 ? 's' : ''})`}\n              </div>\n            </div>\n          );\n        }\n        return value;\n      }\n    },\n    { \n      key: \"details\", \n      label: \"Details\", \n      render: (value: any, row: any) => {\n        if (row.txnType === 'cash_deposit_request') {\n          if (row.reference?.includes('APPROVED')) {\n            return (\n              <Badge className=\"bg-green-600 text-white\" data-testid={`status-approved-${row.id}`}>\n                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                Approved\n              </Badge>\n            );\n          } else if (row.reference?.includes('REJECTED')) {\n            return (\n              <Badge variant=\"destructive\" data-testid={`status-rejected-${row.id}`}>\n                <XCircle className=\"h-3 w-3 mr-1\" />\n                Rejected\n              </Badge>\n            );\n          } else {\n            return (\n              <Badge variant=\"secondary\" data-testid={`status-pending-${row.id}`}>\n                Pending\n              </Badge>\n            );\n          }\n        }\n        if (row.purpose === 'room_checkout_payment' && value) {\n          return (\n            <div className=\"text-xs space-y-1\">\n              {value.roomCharges > 0 && (\n                <div className=\"text-muted-foreground\">Room: {formatCurrency(value.roomCharges)}</div>\n              )}\n              {value.mealPlanCharges > 0 && (\n                <div className=\"text-muted-foreground\">Meals: {formatCurrency(value.mealPlanCharges)}</div>\n              )}\n              {value.foodCharges > 0 && (\n                <div className=\"text-muted-foreground\">Food: {formatCurrency(value.foodCharges)}</div>\n              )}\n              {value.totalTax > 0 && (\n                <div className=\"text-muted-foreground\">Tax: {formatCurrency(value.totalTax)}</div>\n              )}\n              {value.discountAmount > 0 && (\n                <div className=\"text-green-600\">Discount: -{formatCurrency(value.discountAmount)}</div>\n              )}\n            </div>\n          );\n        }\n        return '-';\n      }\n    },\n    { key: \"createdAt\", label: \"Date\", sortable: true }\n  ];\n\n  const vendorColumns = [\n    { key: \"name\", label: \"Vendor Name\", sortable: true },\n    { \n      key: \"contact\", \n      label: \"Contact\", \n      render: (value: any) => {\n        if (typeof value === 'object' && value?.phone) {\n          return value.phone;\n        }\n        return \"N/A\";\n      }\n    },\n    { key: \"createdAt\", label: \"Added\", sortable: true }\n  ];\n\n  const expenseColumns = [\n    { key: \"purpose\", label: \"Expense\", sortable: true },\n    { key: \"amount\", label: \"Amount\", sortable: true, render: (value: number) => formatCurrency(value) },\n    { key: \"paymentMethod\", label: \"Payment Method\", sortable: true },\n    { key: \"createdAt\", label: \"Date\", sortable: true }\n  ];\n\n  const vendorActions = [\n    { \n      label: \"Pay\", \n      action: (row: any) => {\n        setSelectedVendor(row);\n        vendorPaymentForm.setValue(\"vendorId\", row.id);\n        setIsVendorPaymentModalOpen(true);\n      }\n    }\n  ];\n\n  const expenseActions: any[] = [];\n\n  // Filter expenses (cash_out transactions)\n  const expenses = transactions.filter(t => t.txnType === 'cash_out' || t.txnType === 'vendor_payment');\n\n  const isLoading = transactionsLoading || maintenanceLoading || vendorsLoading;\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Finance Dashboard\">\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading financial data...</p>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Finance Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Financial Overview Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Revenue\"\n            value={formatCurrency(totalRevenue)}\n            icon={<DollarSign />}\n            iconColor=\"text-green-500\"\n            trend={{ value: revenueTransactions.length, label: \"transactions\", isPositive: true }}\n          />\n          <StatsCard\n            title=\"Net Revenue\"\n            value={formatCurrency(netRevenue)}\n            icon={<TrendingUp />}\n            iconColor=\"text-blue-500\"\n            trend={{ value: Number(profitMargin.toFixed(1)), label: \"profit margin\", isPositive: profitMargin > 0 }}\n          />\n          <StatsCard\n            title=\"Total Expenses\"\n            value={formatCurrency(totalExpenses)}\n            icon={<TrendingDown />}\n            iconColor=\"text-red-500\"\n            trend={{ value: expenseTransactions.length, label: \"transactions\", isPositive: false }}\n          />\n          <StatsCard\n            title=\"Pending Cash Deposits\"\n            value={pendingCashDeposits.length}\n            icon={<Receipt />}\n            iconColor=\"text-orange-500\"\n          />\n        </div>\n\n        {/* Bank Balance Tracking */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Bank Balance & Cash Flow</CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Bank balance includes POS + Fonepay revenue. Cash deposits to bank are deducted from cash.\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Bank Balance */}\n              <div className=\"p-6 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-950 dark:to-indigo-950 rounded-lg border-2 border-blue-200 dark:border-blue-800\" data-testid=\"balance-bank\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Landmark className=\"h-12 w-12 text-blue-600 dark:text-blue-400\" />\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-muted-foreground\">Bank Balance</p>\n                    <p className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">{formatCurrency(bankBalance)}</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2 pt-4 border-t border-blue-200 dark:border-blue-800\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">POS Revenue:</span>\n                    <span className=\"font-medium\">{formatCurrency(posRevenue)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Fonepay Revenue:</span>\n                    <span className=\"font-medium\">{formatCurrency(fonepayRevenue)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Cash Deposits:</span>\n                    <span className=\"font-medium\">{formatCurrency(totalBankDeposits)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Cash Balance */}\n              <div className=\"p-6 bg-gradient-to-br from-green-50 to-emerald-100 dark:from-green-950 dark:to-emerald-950 rounded-lg border-2 border-green-200 dark:border-green-800\" data-testid=\"balance-cash\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Receipt className=\"h-12 w-12 text-green-600 dark:text-green-400\" />\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-muted-foreground\">Cash on Hand</p>\n                    <p className=\"text-3xl font-bold text-green-600 dark:text-green-400\">{formatCurrency(cashBalance)}</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2 pt-4 border-t border-green-200 dark:border-green-800\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Cash Revenue:</span>\n                    <span className=\"font-medium\">{formatCurrency(cashRevenue)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Deposited to Bank:</span>\n                    <span className=\"font-medium text-red-600 dark:text-red-400\">-{formatCurrency(totalBankDeposits)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Deposits Count:</span>\n                    <span className=\"font-medium\">{bankDeposits.length}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Method Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Revenue by Payment Method</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 bg-green-50 dark:bg-green-950 rounded-lg\" data-testid=\"revenue-cash\">\n                <Receipt className=\"h-12 w-12 mx-auto mb-4 text-green-600 dark:text-green-400\" />\n                <h3 className=\"text-lg font-semibold text-foreground\">Cash Revenue</h3>\n                <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{formatCurrency(cashRevenue)}</p>\n                <p className=\"text-sm text-muted-foreground\">{allCashTransactions.length} total transactions</p>\n              </div>\n              <div className=\"text-center p-6 bg-blue-50 dark:bg-blue-950 rounded-lg\" data-testid=\"revenue-pos\">\n                <CreditCard className=\"h-12 w-12 mx-auto mb-4 text-blue-600 dark:text-blue-400\" />\n                <h3 className=\"text-lg font-semibold text-foreground\">POS Revenue</h3>\n                <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{formatCurrency(posRevenue)}</p>\n                <p className=\"text-sm text-muted-foreground\">{allPosTransactions.length} total transactions</p>\n              </div>\n              <div className=\"text-center p-6 bg-purple-50 dark:bg-purple-950 rounded-lg\" data-testid=\"revenue-fonepay\">\n                <Smartphone className=\"h-12 w-12 mx-auto mb-4 text-purple-600 dark:text-purple-400\" />\n                <h3 className=\"text-lg font-semibold text-foreground\">Fonepay Revenue</h3>\n                <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">{formatCurrency(fonepayRevenue)}</p>\n                <p className=\"text-sm text-muted-foreground\">{allFonepayTransactions.length} total transactions</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Maintenance Requests */}\n        <DataTable\n          title=\"Maintenance Requests from Departments\"\n          data={maintenanceRequests}\n          columns={maintenanceColumns}\n          searchPlaceholder=\"Search maintenance requests...\"\n        />\n\n        {/* Recent Transactions */}\n        <DataTable\n          title=\"Recent Transactions\"\n          data={transactions.slice(0, 20)}\n          columns={transactionColumns}\n          searchPlaceholder=\"Search transactions...\"\n        />\n\n        {/* Expense Tracking */}\n        <DataTable\n          title=\"Expense Tracking\"\n          data={expenses}\n          columns={expenseColumns}\n          actions={expenseActions}\n          onAdd={() => setIsAddExpenseModalOpen(true)}\n          addButtonLabel=\"Add Expense\"\n          searchPlaceholder=\"Search expenses...\"\n        />\n\n        {/* Vendor Management */}\n        <DataTable\n          title=\"Vendor Management\"\n          data={vendors}\n          columns={vendorColumns}\n          actions={vendorActions}\n          onAdd={() => setIsAddVendorModalOpen(true)}\n          addButtonLabel=\"Add Vendor\"\n          searchPlaceholder=\"Search vendors...\"\n        />\n\n        {/* Financial Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Monthly Financial Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\" data-testid=\"summary-revenue\">\n                <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(totalRevenue)}</div>\n                <div className=\"text-sm text-green-700\">Total Revenue</div>\n              </div>\n              <div className=\"text-center p-4 bg-red-50 rounded-lg\" data-testid=\"summary-expenses\">\n                <div className=\"text-2xl font-bold text-red-600\">{formatCurrency(totalExpenses)}</div>\n                <div className=\"text-sm text-red-700\">Total Expenses</div>\n              </div>\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\" data-testid=\"summary-profit\">\n                <div className=\"text-2xl font-bold text-blue-600\">{formatCurrency(netRevenue)}</div>\n                <div className=\"text-sm text-blue-700\">Net Profit</div>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\" data-testid=\"summary-margin\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {totalRevenue > 0 ? ((netRevenue / totalRevenue) * 100).toFixed(1) : 0}%\n                </div>\n                <div className=\"text-sm text-purple-700\">Profit Margin</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cash Deposit Requests */}\n        {pendingCashDeposits.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Pending Cash Deposit Requests</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {pendingCashDeposits.map((request) => (\n                  <div key={request.id} className=\"flex items-center justify-between p-4 border-2 border-orange-200 rounded-lg bg-orange-50\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <Receipt className=\"h-4 w-4 text-orange-600\" />\n                        <h4 className=\"font-semibold text-foreground\">{request.purpose}</h4>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{request.reference}</p>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Badge variant=\"outline\" className=\"text-orange-700 border-orange-300\">\n                          {formatCurrency(Number(request.amount))}\n                        </Badge>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {new Date(request.createdAt || '').toLocaleDateString()}\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2 ml-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"text-green-600 border-green-600 hover:bg-green-50\"\n                        onClick={() => approveCashDepositMutation.mutate(request.id)}\n                        disabled={approveCashDepositMutation.isPending}\n                        data-testid={`button-approve-${request.id}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Approve\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"text-red-600 border-red-600 hover:bg-red-50\"\n                        onClick={() => rejectCashDepositMutation.mutate(request.id)}\n                        disabled={rejectCashDepositMutation.isPending}\n                        data-testid={`button-reject-${request.id}`}\n                      >\n                        <XCircle className=\"h-4 w-4 mr-1\" />\n                        Reject\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Cash Flow Analysis */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Cash Flow Analysis</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg\" data-testid=\"cashflow-inflow\">\n                <div className=\"flex items-center\">\n                  <TrendingUp className=\"text-green-500 mr-3 h-6 w-6\" />\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Cash Inflow</h4>\n                    <p className=\"text-sm text-muted-foreground\">Revenue from all sources</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-bold text-green-600\">{formatCurrency(totalRevenue)}</p>\n                  <p className=\"text-sm text-green-700\">{revenueTransactions.length} transactions</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg\" data-testid=\"cashflow-outflow\">\n                <div className=\"flex items-center\">\n                  <TrendingDown className=\"text-red-500 mr-3 h-6 w-6\" />\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Cash Outflow</h4>\n                    <p className=\"text-sm text-muted-foreground\">Expenses and vendor payments</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-bold text-red-600\">{formatCurrency(totalExpenses)}</p>\n                  <p className=\"text-sm text-red-700\">{expenseTransactions.length} transactions</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg\" data-testid=\"cashflow-net\">\n                <div className=\"flex items-center\">\n                  <DollarSign className=\"text-blue-500 mr-3 h-6 w-6\" />\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Net Cash Flow</h4>\n                    <p className=\"text-sm text-muted-foreground\">Inflow minus outflow</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-bold text-blue-600\">{formatCurrency(netRevenue)}</p>\n                  <p className=\"text-sm text-blue-700\">Profit margin: {totalRevenue > 0 ? ((netRevenue / totalRevenue) * 100).toFixed(1) : 0}%</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bank Deposit Modal */}\n        <Dialog open={isBankDepositModalOpen} onOpenChange={setIsBankDepositModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Deposit Cash to Bank</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...bankDepositForm}>\n              <form onSubmit={bankDepositForm.handleSubmit((data) => bankDepositMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={bankDepositForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-bank-amount\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={bankDepositForm.control}\n                  name=\"bankName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bank Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter bank name\" data-testid=\"input-bank-name\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={bankDepositForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Additional notes...\" rows={2} data-testid=\"textarea-bank-notes\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={bankDepositMutation.isPending}\n                    data-testid=\"button-submit-bank-deposit\"\n                  >\n                    {bankDepositMutation.isPending ? \"Processing...\" : \"Deposit to Bank\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => setIsBankDepositModalOpen(false)}\n                    data-testid=\"button-cancel-bank-deposit\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Vendor Payment Modal */}\n        <Dialog open={isVendorPaymentModalOpen} onOpenChange={setIsVendorPaymentModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Vendor Payment</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...vendorPaymentForm}>\n              <form onSubmit={vendorPaymentForm.handleSubmit((data) => vendorPaymentMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"vendorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vendor *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-vendor\">\n                            <SelectValue placeholder=\"Select vendor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {vendors.map((vendor) => (\n                            <SelectItem key={vendor.id} value={vendor.id}>\n                              {vendor.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-vendor-amount\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-payment-method\">\n                            <SelectValue placeholder=\"Select payment method\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"cheque\">Cheque</SelectItem>\n                          <SelectItem value=\"pos\">POS</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                \n                {vendorPaymentForm.watch(\"paymentMethod\") === \"cheque\" && (\n                  <>\n                    <FormField\n                      control={vendorPaymentForm.control}\n                      name=\"chequeNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Cheque Number *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter cheque number\" data-testid=\"input-cheque-number\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={vendorPaymentForm.control}\n                      name=\"bankName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bank Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Which bank cheque issued from\" data-testid=\"input-cheque-bank\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </>\n                )}\n                \n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Additional notes...\" rows={2} data-testid=\"textarea-vendor-notes\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={vendorPaymentMutation.isPending}\n                    data-testid=\"button-submit-vendor-payment\"\n                  >\n                    {vendorPaymentMutation.isPending ? \"Processing...\" : \"Process Payment\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => {\n                      setIsVendorPaymentModalOpen(false);\n                      setSelectedVendor(null);\n                    }}\n                    data-testid=\"button-cancel-vendor-payment\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Add Vendor Modal */}\n        <Dialog open={isAddVendorModalOpen} onOpenChange={setIsAddVendorModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Vendor</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...addVendorForm}>\n              <form onSubmit={addVendorForm.handleSubmit((data) => addVendorMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={addVendorForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vendor Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter vendor name\" data-testid=\"input-vendor-name\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addVendorForm.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter phone number\" data-testid=\"input-vendor-phone\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addVendorForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"email\" placeholder=\"Enter email address\" data-testid=\"input-vendor-email\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addVendorForm.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Enter address\" rows={2} data-testid=\"textarea-vendor-address\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={addVendorMutation.isPending}\n                    data-testid=\"button-submit-add-vendor\"\n                  >\n                    {addVendorMutation.isPending ? \"Adding...\" : \"Add Vendor\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => setIsAddVendorModalOpen(false)}\n                    data-testid=\"button-cancel-add-vendor\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Add Expense Modal */}\n        <Dialog open={isAddExpenseModalOpen} onOpenChange={setIsAddExpenseModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Expense</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...addExpenseForm}>\n              <form onSubmit={addExpenseForm.handleSubmit((data) => addExpenseMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={addExpenseForm.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-expense-category\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"utilities\">Utilities</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                          <SelectItem value=\"supplies\">Supplies</SelectItem>\n                          <SelectItem value=\"salaries\">Salaries</SelectItem>\n                          <SelectItem value=\"rent\">Rent</SelectItem>\n                          <SelectItem value=\"insurance\">Insurance</SelectItem>\n                          <SelectItem value=\"marketing\">Marketing</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addExpenseForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-expense-amount\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={addExpenseForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-expense-payment-method\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"cheque\">Cheque</SelectItem>\n                          <SelectItem value=\"pos\">POS</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                \n                {addExpenseForm.watch(\"paymentMethod\") === \"cheque\" && (\n                  <>\n                    <FormField\n                      control={addExpenseForm.control}\n                      name=\"chequeNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Cheque Number *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter cheque number\" data-testid=\"input-expense-cheque-number\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={addExpenseForm.control}\n                      name=\"bankName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bank Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Which bank cheque issued from\" data-testid=\"input-expense-cheque-bank\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </>\n                )}\n                \n                <FormField\n                  control={addExpenseForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Expense description\" rows={3} data-testid=\"textarea-expense-description\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={addExpenseMutation.isPending}\n                    data-testid=\"button-submit-add-expense\"\n                  >\n                    {addExpenseMutation.isPending ? \"Recording...\" : \"Record Expense\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => setIsAddExpenseModalOpen(false)}\n                    data-testid=\"button-cancel-add-expense\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":53709},"client/src/pages/dashboard/surveillance-officer/duty-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, LogIn, LogOut, Calendar } from \"lucide-react\";\nimport { formatDateTime } from \"@/lib/utils\";\n\nexport default function SurveillanceOfficerDutyStatus() {\n  const { data: attendanceStatus } = useQuery<any>({\n    queryKey: [\"/api/attendance/status\"],\n    refetchInterval: 3000\n  });\n\n  const { data: attendanceHistory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/history\"],\n    refetchInterval: 3000\n  });\n\n  const isOnDuty = attendanceStatus?.isOnDuty || false;\n  const activeAttendance = attendanceStatus?.attendance;\n  const recentAttendance = attendanceHistory.slice(0, 5);\n\n  return (\n    <DashboardLayout title=\"Duty Status\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>My Duty Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"h-8 w-8 text-blue-500\" />\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Current Status</h4>\n                    <p className=\"text-sm text-muted-foreground\">Your duty status for today</p>\n                  </div>\n                </div>\n                <Badge \n                  className={isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} \n                  variant=\"secondary\"\n                  data-testid=\"duty-status-badge\"\n                >\n                  {isOnDuty ? 'On Duty' : 'Off Duty'}\n                </Badge>\n              </div>\n\n              {activeAttendance && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <LogIn className=\"h-6 w-6 text-green-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Clock In Time</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-time\">\n                            {formatDateTime(activeAttendance.clockInTime)}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Calendar className=\"h-6 w-6 text-blue-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Location</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-location\">\n                            {activeAttendance.clockInLocation || 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n                    <strong>Note:</strong> Use the duty toggle in the top navigation bar to clock in or clock out. \n                    Your attendance is automatically tracked when you're on duty.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Attendance History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {recentAttendance.length === 0 ? (\n              <p className=\"text-muted-foreground\">No attendance records found</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentAttendance.map((record: any, index: number) => (\n                  <div key={record.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`attendance-record-${index}`}>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <LogIn className=\"h-4 w-4 text-green-500\" />\n                        <p className=\"text-sm font-medium text-foreground\">{formatDateTime(record.clockInTime)}</p>\n                      </div>\n                      {record.clockOutTime && (\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <LogOut className=\"h-4 w-4 text-gray-500\" />\n                          <p className=\"text-sm text-muted-foreground\">{formatDateTime(record.clockOutTime)}</p>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={record.status === 'active' ? 'default' : 'secondary'}>\n                        {record.status === 'active' ? 'Active' : 'Completed'}\n                      </Badge>\n                      {record.totalHours && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">{parseFloat(record.totalHours).toFixed(2)} hours</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":5829},"client/src/pages/dashboard/owner/financial-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DollarSign, TrendingUp, CreditCard, Receipt } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function FinancialOverview() {\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000\n  });\n\n  const { data: payments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/payments\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/payments\"],\n    refetchInterval: 3000,\n    events: ['payment:created', 'payment:updated']\n  });\n\n  // Calculate real financial metrics\n  // Calculate total revenue from all income transactions\n  const revenueTransactions = transactions.filter(t => \n    t.txnType === 'cash_in' || t.txnType === 'pos_in' || t.txnType === 'fonepay_in' || \n    t.txnType === 'revenue' || (t.txnType && t.txnType.includes('_in'))\n  );\n  \n  const totalRevenue = revenueTransactions.reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n\n  const totalExpenses = transactions\n    .filter(t => \n      t.txnType === 'cash_out' || t.txnType === 'vendor_payment' || \n      (t.txnType && t.txnType.includes('_out'))\n    )\n    .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n\n  // Revenue by payment method (already defined above)\n\n  const cashRevenue = revenueTransactions\n    .filter(t => t.paymentMethod === 'cash')\n    .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  \n  const posRevenue = revenueTransactions\n    .filter(t => t.paymentMethod === 'pos')\n    .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  \n  const fonepayRevenue = revenueTransactions\n    .filter(t => t.paymentMethod === 'fonepay')\n    .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n\n  // All transactions by payment method for transaction count\n  const allCashTransactions = transactions.filter(t => t.paymentMethod === 'cash');\n  const allPosTransactions = transactions.filter(t => t.paymentMethod === 'pos');\n  const allFonepayTransactions = transactions.filter(t => t.paymentMethod === 'fonepay');\n\n  return (\n    <DashboardLayout title=\"Financial Overview\">\n      <div className=\"space-y-6\">\n        {/* Revenue Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Revenue\"\n            value={formatCurrency(totalRevenue)}\n            icon={<DollarSign />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Total Expenses\"\n            value={formatCurrency(totalExpenses)}\n            icon={<TrendingUp />}\n            iconColor=\"text-red-500\"\n          />\n          <StatsCard\n            title=\"Net Profit\"\n            value={formatCurrency(totalRevenue - totalExpenses)}\n            icon={<Receipt />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Total Transactions\"\n            value={transactions.length}\n            icon={<CreditCard />}\n            iconColor=\"text-purple-500\"\n          />\n        </div>\n\n        {/* Payment Method Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Method Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 bg-green-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-green-600\">{formatCurrency(cashRevenue)}</div>\n                <div className=\"text-sm text-green-700 mt-2\">Cash Revenue</div>\n                <div className=\"text-xs text-green-600\">{allCashTransactions.length} total transactions</div>\n              </div>\n              <div className=\"text-center p-6 bg-blue-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-blue-600\">{formatCurrency(posRevenue)}</div>\n                <div className=\"text-sm text-blue-700 mt-2\">POS Revenue</div>\n                <div className=\"text-xs text-blue-600\">{allPosTransactions.length} total transactions</div>\n              </div>\n              <div className=\"text-center p-6 bg-purple-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-purple-600\">{formatCurrency(fonepayRevenue)}</div>\n                <div className=\"text-sm text-purple-700 mt-2\">Fonepay Revenue</div>\n                <div className=\"text-xs text-purple-600\">{allFonepayTransactions.length} total transactions</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Transactions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Transactions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {transactions.slice(0, 10).map((transaction, index) => (\n                <div key={transaction.id || index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <div className=\"font-medium\">{transaction.txnType?.replace(/_/g, ' ').toUpperCase()}</div>\n                    <div className=\"text-sm text-muted-foreground\">{transaction.purpose || 'No description'}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(transaction.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`font-bold ${\n                      transaction.txnType?.includes('in') ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {transaction.txnType?.includes('in') ? '+' : '-'}{formatCurrency(Number(transaction.amount))}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {transaction.paymentMethod?.toUpperCase()}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {transactions.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No transactions found\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":6801},"tests/test-all-pages.js":{"content":"#!/usr/bin/env node\n\nimport http from 'http';\n\nconst BASE_URL = 'http://localhost:5000';\n\n// Helper to make API requests\nasync function request(path, options = {}) {\n  return new Promise((resolve, reject) => {\n    const url = new URL(path, BASE_URL);\n    const req = http.request(url, {\n      method: options.method || 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    }, (res) => {\n      let body = '';\n      res.on('data', chunk => body += chunk);\n      res.on('end', () => {\n        try {\n          const data = body ? JSON.parse(body) : null;\n          resolve({ status: res.statusCode, data, headers: res.headers });\n        } catch (e) {\n          resolve({ status: res.statusCode, data: body, headers: res.headers });\n        }\n      });\n    });\n\n    req.on('error', reject);\n    if (options.body) {\n      req.write(options.body);\n    }\n    req.end();\n  });\n}\n\n// Store session cookie\nlet sessionCookie = '';\n\nasync function login(username, password) {\n  console.log(`\\n🔐 Logging in as ${username}...`);\n  const res = await request('/api/login', {\n    method: 'POST',\n    body: JSON.stringify({ username, password })\n  });\n  \n  if (res.status === 200 && res.headers['set-cookie']) {\n    sessionCookie = res.headers['set-cookie'][0].split(';')[0];\n    console.log(`✅ Logged in successfully`);\n    return res.data;\n  }\n  console.log(`❌ Login failed: ${res.status}`);\n  return null;\n}\n\nasync function testAPI(endpoint, description) {\n  const res = await request(endpoint, {\n    headers: { 'Cookie': sessionCookie }\n  });\n  \n  const status = res.status === 200 ? '✅' : '❌';\n  console.log(`${status} ${description}: ${endpoint} (${res.status})`);\n  \n  if (res.status === 200 && res.data) {\n    const dataLength = Array.isArray(res.data) ? res.data.length : 'object';\n    console.log(`   📊 Data: ${dataLength} items`);\n  }\n  \n  return res;\n}\n\nasync function runTests() {\n  console.log('🧪 COMPREHENSIVE PAGE TEST - Hotel Management System\\n');\n  console.log('='.repeat(60));\n  \n  // Test Finance Role\n  console.log('\\n📊 TESTING FINANCE ROLE');\n  console.log('-'.repeat(60));\n  \n  const financeUser = await login('finance', 'finance');\n  if (financeUser) {\n    console.log(`   User ID: ${financeUser.id}`);\n    console.log(`   Hotel ID: ${financeUser.hotelId || 'MISSING!'}`);\n    console.log(`   Role: ${financeUser.role?.name || 'MISSING!'}`);\n    \n    await testAPI('/api/hotels/current/transactions', 'Fetch Transactions');\n    await testAPI('/api/hotels/current/maintenance-requests', 'Fetch Maintenance Requests');\n    await testAPI('/api/hotels/current/vendors', 'Fetch Vendors');\n    await testAPI('/api/halls', 'Fetch Halls');\n  }\n  \n  // Test Manager Role\n  console.log('\\n👔 TESTING MANAGER ROLE');\n  console.log('-'.repeat(60));\n  \n  const managerUser = await login('manager', 'manager');\n  if (managerUser) {\n    console.log(`   User ID: ${managerUser.id}`);\n    console.log(`   Hotel ID: ${managerUser.hotelId || 'MISSING!'}`);\n    console.log(`   Role: ${managerUser.role?.name || 'MISSING!'}`);\n    \n    await testAPI('/api/hotels/current/users', 'Fetch Staff');\n    await testAPI('/api/hotels/current/transactions', 'Fetch Transactions');\n    await testAPI('/api/hotels/current/vendors', 'Fetch Vendors');\n    await testAPI('/api/hotels/current/guests', 'Fetch Guests');\n  }\n  \n  // Test Owner Role\n  console.log('\\n👑 TESTING OWNER ROLE');\n  console.log('-'.repeat(60));\n  \n  const ownerUser = await login('owner', 'owner123');\n  if (ownerUser) {\n    console.log(`   User ID: ${ownerUser.id}`);\n    console.log(`   Hotel ID: ${ownerUser.hotelId || 'MISSING!'}`);\n    console.log(`   Role: ${ownerUser.role?.name || 'MISSING!'}`);\n    \n    await testAPI('/api/hotels/current/transactions', 'Fetch Transactions');\n    await testAPI('/api/hotels/current/rooms', 'Fetch Rooms');\n    await testAPI('/api/hotels/current/users', 'Fetch Users');\n    await testAPI('/api/hotels/current/inventory-items', 'Fetch Inventory');\n  }\n  \n  // Test Storekeeper Role\n  console.log('\\n📦 TESTING STOREKEEPER ROLE');\n  console.log('-'.repeat(60));\n  \n  const storekeeperUser = await login('storekeeper', 'storekeeper');\n  if (storekeeperUser) {\n    console.log(`   User ID: ${storekeeperUser.id}`);\n    console.log(`   Hotel ID: ${storekeeperUser.hotelId || 'MISSING!'}`);\n    console.log(`   Role: ${storekeeperUser.role?.name || 'MISSING!'}`);\n    \n    await testAPI('/api/hotels/current/inventory-items', 'Fetch Inventory');\n    await testAPI('/api/hotels/current/stock-requests', 'Fetch Stock Requests');\n  }\n  \n  console.log('\\n' + '='.repeat(60));\n  console.log('✨ Test Complete!\\n');\n}\n\nrunTests().catch(console.error);\n","size_bytes":4727},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/pages/dashboard/kitchen-staff.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChefHat, Clock, CheckCircle, XCircle, Package, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useState } from \"react\";\n\ninterface KotItem {\n  id: string;\n  menuItemId: string;\n  qty: number;\n  notes: string | null;\n  status: string;\n  declineReason: string | null;\n  menuItem?: { name: string };\n}\n\ninterface KotOrder {\n  id: string;\n  tableId: string;\n  status: string;\n  createdAt: string;\n  items?: KotItem[];\n}\n\ninterface RestaurantTable {\n  id: string;\n  name: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  unit: string;\n}\n\nexport default function KitchenStaffDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [declineDialogOpen, setDeclineDialogOpen] = useState(false);\n  const [wastageDialogOpen, setWastageDialogOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<KotItem | null>(null);\n  const [declineReason, setDeclineReason] = useState(\"\");\n  const [wastageData, setWastageData] = useState({\n    itemId: \"\",\n    qty: \"\",\n    unit: \"\",\n    reason: \"\"\n  });\n\n  const { data: kotOrders = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: tables = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"]\n  });\n\n  const updateKotItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/kot-items/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"KOT item updated successfully\" });\n      setDeclineDialogOpen(false);\n      setDeclineReason(\"\");\n      setSelectedItem(null);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const createWastageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/wastages\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Wastage recorded successfully\" });\n      setWastageDialogOpen(false);\n      setWastageData({ itemId: \"\", qty: \"\", unit: \"\", reason: \"\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleApprove = (item: KotItem) => {\n    updateKotItemMutation.mutate({\n      id: item.id,\n      data: { status: \"approved\" }\n    });\n  };\n\n  const handleDecline = (item: KotItem) => {\n    setSelectedItem(item);\n    setDeclineDialogOpen(true);\n  };\n\n  const handleSetReady = (item: KotItem) => {\n    updateKotItemMutation.mutate({\n      id: item.id,\n      data: { status: \"ready\" }\n    });\n  };\n\n  const submitDecline = () => {\n    if (!selectedItem || !declineReason.trim()) {\n      toast({ title: \"Please provide a reason for declining\", variant: \"destructive\" });\n      return;\n    }\n    if (declineReason.trim().length < 10) {\n      toast({ title: \"Decline reason must be at least 10 characters\", variant: \"destructive\" });\n      return;\n    }\n    updateKotItemMutation.mutate({\n      id: selectedItem.id,\n      data: { status: \"declined\", declineReason: declineReason.trim() }\n    });\n  };\n\n  const submitWastage = () => {\n    if (!wastageData.itemId || !wastageData.qty || !wastageData.reason.trim()) {\n      toast({ title: \"Please fill all wastage fields\", variant: \"destructive\" });\n      return;\n    }\n    const qty = parseFloat(wastageData.qty);\n    if (isNaN(qty) || qty <= 0) {\n      toast({ title: \"Please enter a valid quantity\", variant: \"destructive\" });\n      return;\n    }\n    createWastageMutation.mutate({\n      itemId: wastageData.itemId,\n      qty: qty.toString(),\n      unit: wastageData.unit,\n      reason: wastageData.reason.trim()\n    });\n  };\n\n  const pendingOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'pending')\n  ) : [];\n  \n  const approvedOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'approved')\n  ) : [];\n  \n  const readyOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.every((item: KotItem) => item.status === 'ready')\n  ) : [];\n  \n  const declinedOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'declined')\n  ) : [];\n\n  const getTableNumber = (tableId: string) => {\n    if (!Array.isArray(tables)) return tableId;\n    const table = (tables as RestaurantTable[]).find((t: RestaurantTable) => t.id === tableId);\n    return table?.name || tableId;\n  };\n\n  const renderKotCard = (order: KotOrder) => (\n    <Card key={order.id}>\n      <CardHeader>\n        <CardTitle className=\"flex justify-between items-center\">\n          <span>{getTableNumber(order.tableId)}</span>\n          <span className=\"text-sm text-gray-500\">\n            {new Date(order.createdAt).toLocaleTimeString()}\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {order.items?.map((item: KotItem) => (\n          <div key={item.id} className=\"mb-4 p-3 border rounded\">\n            <div className=\"flex justify-between items-start mb-2\">\n              <div>\n                <p className=\"font-semibold\">{item.menuItem?.name}</p>\n                <p className=\"text-sm text-gray-600\">Quantity: {item.qty}</p>\n                {item.notes && <p className=\"text-sm text-gray-500\">Notes: {item.notes}</p>}\n                {item.declineReason && (\n                  <p className=\"text-sm text-red-600\">Declined: {item.declineReason}</p>\n                )}\n              </div>\n              <Badge variant={\n                item.status === 'approved' ? 'default' :\n                item.status === 'ready' ? 'default' :\n                item.status === 'declined' ? 'destructive' : 'secondary'\n              }>\n                {item.status}\n              </Badge>\n            </div>\n            {item.status === 'pending' && (\n              <div className=\"flex gap-2 mt-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => handleApprove(item)}\n                  className=\"flex-1\"\n                >\n                  <CheckCircle className=\"w-4 h-4 mr-1\" /> Approve\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => handleDecline(item)}\n                  className=\"flex-1\"\n                >\n                  <XCircle className=\"w-4 h-4 mr-1\" /> Decline\n                </Button>\n              </div>\n            )}\n            {item.status === 'approved' && (\n              <Button\n                size=\"sm\"\n                onClick={() => handleSetReady(item)}\n                className=\"w-full mt-2\"\n              >\n                <Clock className=\"w-4 h-4 mr-1\" /> Set Ready\n              </Button>\n            )}\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <DashboardLayout title=\"Kitchen Staff Dashboard\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Pending Orders\"\n            value={pendingOrders.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"In Preparation\"\n            value={approvedOrders.length}\n            icon={<ChefHat />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Ready to Serve\"\n            value={readyOrders.length}\n            icon={<CheckCircle />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Declined\"\n            value={declinedOrders.length}\n            icon={<XCircle />}\n            iconColor=\"text-red-500\"\n          />\n        </div>\n\n        <div className=\"flex gap-2 justify-end\">\n          <Dialog open={wastageDialogOpen} onOpenChange={setWastageDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Package className=\"w-4 h-4 mr-2\" /> Record Wastage\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Record Wastage</DialogTitle>\n                <DialogDescription>Record inventory wastage with reason</DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Inventory Item</Label>\n                  <Select\n                    value={wastageData.itemId}\n                    onValueChange={(value) => {\n                      const selectedInventoryItem = (inventoryItems as InventoryItem[]).find(item => item.id === value);\n                      setWastageData({ \n                        ...wastageData, \n                        itemId: value,\n                        unit: selectedInventoryItem?.unit || 'piece'\n                      });\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select item\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.isArray(inventoryItems) && (inventoryItems as InventoryItem[]).map((item: InventoryItem) => (\n                        <SelectItem key={item.id} value={item.id}>\n                          {item.name} ({item.unit})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Quantity</Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={wastageData.qty}\n                    onChange={(e) => setWastageData({ ...wastageData, qty: e.target.value })}\n                    placeholder=\"Enter quantity\"\n                  />\n                </div>\n                <div>\n                  <Label>Reason</Label>\n                  <Textarea\n                    value={wastageData.reason}\n                    onChange={(e) => setWastageData({ ...wastageData, reason: e.target.value })}\n                    placeholder=\"Explain reason for wastage\"\n                  />\n                </div>\n                <Button onClick={submitWastage} className=\"w-full\" disabled={createWastageMutation.isPending}>\n                  Record Wastage\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <ChefHat className=\"h-5 w-5 text-blue-500\" />\n              <span>Kitchen Orders</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold mb-2\">Pending Orders ({pendingOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {pendingOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No pending orders</p>\n                  ) : (\n                    pendingOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">In Preparation ({approvedOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {approvedOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No orders in preparation</p>\n                  ) : (\n                    approvedOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Ready ({readyOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {readyOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No ready orders</p>\n                  ) : (\n                    readyOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Declined ({declinedOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {declinedOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No declined orders</p>\n                  ) : (\n                    declinedOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={declineDialogOpen} onOpenChange={setDeclineDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Decline KOT Item</DialogTitle>\n            <DialogDescription>Please provide a reason for declining this item</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Reason for Decline</Label>\n              <Textarea\n                value={declineReason}\n                onChange={(e) => setDeclineReason(e.target.value)}\n                placeholder=\"e.g., Out of stock, Wrong order\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setDeclineDialogOpen(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={submitDecline} className=\"flex-1\" variant=\"destructive\" disabled={updateKotItemMutation.isPending}>\n                Decline\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":15555},"client/src/pages/dashboard/cashier.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { Receipt, ShoppingCart, Plus, Minus, CreditCard, DollarSign, Smartphone, Printer, Wrench, Banknote, AlertCircle, CheckCircle2, Clock, Building2, Waves } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { formatCurrency } from \"@/lib/utils\";\n\nexport default function CashierDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  \n  const [currentOrder, setCurrentOrder] = useState<any[]>([]);\n  const [isBillingModalOpen, setIsBillingModalOpen] = useState(false);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n  const [voucherCode, setVoucherCode] = useState(\"\");\n  const [appliedVoucher, setAppliedVoucher] = useState<any>(null);\n  const [customerType, setCustomerType] = useState<\"inhouse\" | \"walkin\">(\"inhouse\");\n  const [isCashDepositModalOpen, setIsCashDepositModalOpen] = useState(false);\n  const [selectedAmenities, setSelectedAmenities] = useState<any[]>([]);\n  const [isAmenityBillingModalOpen, setIsAmenityBillingModalOpen] = useState(false);\n\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"],\n    refetchInterval: 3000\n  });\n\n  const { data: menuItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    refetchInterval: 3000\n  });\n\n  const { data: halls = [] } = useQuery<any[]>({\n    queryKey: [\"/api/halls\"],\n    refetchInterval: 3000\n  });\n\n  const { data: pools = [] } = useQuery<any[]>({\n    queryKey: [\"/api/pools\"],\n    refetchInterval: 3000\n  });\n\n  const { data: services = [] } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n    refetchInterval: 3000\n  });\n\n  const { data: tasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/users\", user?.id, \"tasks\"],\n    refetchInterval: 3000\n  });\n\n  const cashDepositForm = useForm({\n    defaultValues: {\n      amount: \"\",\n      description: \"\"\n    }\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (transactionData: any) => {\n      await apiRequest(\"POST\", \"/api/transactions\", transactionData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Payment processed successfully\" });\n    }\n  });\n\n  const cashDepositMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!user?.hotelId) {\n        throw new Error(\"User not associated with a hotel\");\n      }\n      \n      const amount = parseFloat(data.amount);\n      if (isNaN(amount) || amount <= 0) {\n        throw new Error(\"Please enter a valid amount\");\n      }\n      \n      const result = await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user.hotelId,\n        txnType: \"cash_deposit_request\",\n        amount: amount.toFixed(2),\n        purpose: `Cash Deposit Request: ${data.description}`,\n        reference: `Cashier: ${user.username}`,\n        paymentMethod: \"cash\",\n        createdBy: user.id\n      });\n      return result;\n    },\n    onSuccess: () => {\n      toast({ \n        title: \"Success!\", \n        description: \"Cash deposit request sent to Finance department\",\n        variant: \"default\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      setIsCashDepositModalOpen(false);\n      cashDepositForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error?.message || \"Failed to submit cash deposit request. Please check the amount and try again.\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", user?.id, \"tasks\"] });\n      toast({ title: \"Task updated successfully\" });\n    }\n  });\n\n  const validateVoucherMutation = useMutation({\n    mutationFn: async (code: string) => {\n      if (!code || code.trim().length === 0) {\n        throw new Error(\"Please enter a voucher code\");\n      }\n      const response = await apiRequest(\"POST\", \"/api/vouchers/validate\", { code: code.trim() });\n      return response;\n    },\n    onSuccess: (data: any) => {\n      if (data.valid && data.voucher) {\n        setAppliedVoucher(data.voucher);\n        const discountText = data.voucher.discountType === 'percentage' \n          ? `${data.voucher.discountAmount}% off`\n          : `${formatCurrency(data.voucher.discountAmount)} off`;\n        toast({ \n          title: \"✓ Voucher Applied!\", \n          description: `Code: ${data.voucher.code} - ${discountText}`,\n          variant: \"default\"\n        });\n      } else {\n        setAppliedVoucher(null);\n        const errorMessage = data.message || \"Voucher code not found or expired\";\n        toast({ \n          title: \"Invalid Voucher\", \n          description: `${errorMessage}. Please check the code and try again. Vouchers must be created by Manager first.`, \n          variant: \"destructive\" \n        });\n      }\n    },\n    onError: (error: any) => {\n      setAppliedVoucher(null);\n      toast({ \n        title: \"Validation Error\", \n        description: error?.message || \"Unable to validate voucher. Please ensure the voucher exists in the system.\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const sortedTasks = [...tasks].sort((a, b) => {\n    const priorityOrder = { low: 0, medium: 1, high: 2 };\n    return priorityOrder[a.priority as keyof typeof priorityOrder] - priorityOrder[b.priority as keyof typeof priorityOrder];\n  });\n\n  const pendingTasks = sortedTasks.filter(t => t.status === 'pending');\n  const performingTasks = sortedTasks.filter(t => t.status === 'performing');\n  const completedTasks = sortedTasks.filter(t => t.status === 'completed');\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800 border-red-300';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';\n      case 'low': return 'bg-green-100 text-green-800 border-green-300';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high': return <AlertCircle className=\"h-3 w-3\" />;\n      case 'medium': return <Clock className=\"h-3 w-3\" />;\n      case 'low': return <CheckCircle2 className=\"h-3 w-3\" />;\n      default: return null;\n    }\n  };\n\n  const calculateTaxBreakdown = (subtotalWithTax: number, discount: number = 0) => {\n    const activeTaxes = hotelTaxes.filter((tax: any) => tax.isActive);\n    \n    let totalTaxRate = 0;\n    activeTaxes.forEach((tax: any) => {\n      totalTaxRate += parseFloat(tax.percent) / 100;\n    });\n\n    const basePrice = Math.round((subtotalWithTax / (1 + totalTaxRate)) * 100) / 100;\n    const discountedBase = Math.max(0, Math.round((basePrice - discount) * 100) / 100);\n    \n    const taxBreakdown: any = {};\n    let totalTax = 0;\n    activeTaxes.forEach((tax: any) => {\n      const taxRate = parseFloat(tax.percent) / 100;\n      const taxAmount = Math.round((discountedBase * taxRate) * 100) / 100;\n      taxBreakdown[tax.taxType] = {\n        rate: parseFloat(tax.percent),\n        amount: taxAmount\n      };\n      totalTax += taxAmount;\n    });\n\n    const grandTotal = Math.round((discountedBase + totalTax) * 100) / 100;\n\n    return {\n      basePrice: Math.round(basePrice * 100) / 100,\n      discountedBase: Math.round(discountedBase * 100) / 100,\n      taxBreakdown,\n      totalTax: Math.round(totalTax * 100) / 100,\n      grandTotal\n    };\n  };\n\n  const addToOrder = (menuItem: any) => {\n    const existingItem = currentOrder.find(item => item.id === menuItem.id);\n    if (existingItem) {\n      setCurrentOrder(prev =>\n        prev.map(item =>\n          item.id === menuItem.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        )\n      );\n    } else {\n      setCurrentOrder(prev => [...prev, { ...menuItem, quantity: 1 }]);\n    }\n  };\n\n  const addAmenity = (amenity: any, type: string) => {\n    // Always use walk-in rate for amenity billing (no stock limits apply)\n    const price = amenity.priceWalkin;\n    const existingItem = selectedAmenities.find(item => item.id === amenity.id);\n    \n    if (!existingItem) {\n      setSelectedAmenities(prev => [...prev, {\n        ...amenity,\n        type,\n        price,\n        quantity: 1\n      }]);\n    }\n  };\n\n  const removeFromOrder = (menuItemId: string) => {\n    setCurrentOrder(prev => prev.filter(item => item.id !== menuItemId));\n  };\n\n  const removeAmenity = (amenityId: string) => {\n    setSelectedAmenities(prev => prev.filter(item => item.id !== amenityId));\n  };\n\n  const updateQuantity = (menuItemId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromOrder(menuItemId);\n      return;\n    }\n    setCurrentOrder(prev =>\n      prev.map(item =>\n        item.id === menuItemId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const calculateSubtotal = () => {\n    const menuTotal = currentOrder.reduce((total, item) => total + (item.price * item.quantity), 0);\n    const amenitiesTotal = selectedAmenities.reduce((total, item) => total + (item.price * item.quantity), 0);\n    return menuTotal + amenitiesTotal;\n  };\n\n  const calculateAmenityBillTaxFree = () => {\n    // Amenity billing is tax-free - no taxes applied\n    const total = selectedAmenities.reduce((total, item) => total + (item.price * item.quantity), 0);\n    return Math.round(total * 100) / 100;\n  };\n\n  const calculateFinalBill = () => {\n    const subtotalWithTax = calculateSubtotal();\n    \n    let discount = 0;\n    if (appliedVoucher) {\n      const discountAmount = parseFloat(appliedVoucher.discountAmount);\n      if (appliedVoucher.discountType === 'percentage') {\n        // Calculate percentage discount from base amount (before taxes)\n        const activeTaxes = hotelTaxes.filter((tax: any) => tax.isActive);\n        let totalTaxRate = 0;\n        activeTaxes.forEach((tax: any) => {\n          totalTaxRate += parseFloat(tax.percent) / 100;\n        });\n        const basePrice = Math.round((subtotalWithTax / (1 + totalTaxRate)) * 100) / 100;\n        discount = Math.round((basePrice * discountAmount / 100) * 100) / 100;\n      } else {\n        // Fixed amount discount\n        discount = Math.round(discountAmount * 100) / 100;\n      }\n    }\n\n    const taxCalc = calculateTaxBreakdown(subtotalWithTax, discount);\n\n    return {\n      ...taxCalc,\n      discount\n    };\n  };\n\n  const handleApplyVoucher = () => {\n    if (voucherCode.trim()) {\n      validateVoucherMutation.mutate(voucherCode.trim());\n    }\n  };\n\n  const handleProcessPayment = async () => {\n    if (!selectedPaymentMethod) {\n      toast({ title: \"Error\", description: \"Please select a payment method\", variant: \"destructive\" });\n      return;\n    }\n\n    const billCalc = calculateFinalBill();\n    \n    try {\n      await createTransactionMutation.mutateAsync({\n        txnType: selectedPaymentMethod === 'cash' ? 'cash_in' : selectedPaymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n        amount: billCalc.grandTotal.toString(),\n        paymentMethod: selectedPaymentMethod,\n        purpose: customerType === 'inhouse' ? 'restaurant_sale' : 'walk_in_sale',\n        reference: appliedVoucher ? `Voucher: ${appliedVoucher.code}` : undefined\n      });\n\n      if (appliedVoucher) {\n        try {\n          await apiRequest(\"POST\", \"/api/vouchers/redeem\", {\n            voucherId: appliedVoucher.id\n          });\n        } catch (error) {\n          toast({ title: \"Warning\", description: \"Transaction successful but voucher redemption failed\", variant: \"destructive\" });\n        }\n      }\n\n      handlePrintBill();\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to process payment\", variant: \"destructive\" });\n    }\n  };\n\n  const handlePrintBill = () => {\n    const billCalc = calculateFinalBill();\n    const hotelName = hotel?.name || \"HOTEL\";\n    const hotelAddress = hotel?.address || \"\";\n    const hotelPhone = hotel?.phone || \"\";\n    const now = new Date();\n    \n    let billContent = `\n<div style=\"font-family: 'Courier New', monospace; width: 300px; padding: 10px;\">\n  <div style=\"text-align: center; font-weight: bold; font-size: 16px; border-bottom: 2px dashed #000; padding-bottom: 10px; margin-bottom: 10px;\">\n    ${hotelName}\n  </div>\n  \n  <div style=\"text-align: center; font-size: 11px; margin-bottom: 10px;\">\n    ${hotelAddress ? `${hotelAddress}<br/>` : ''}\n    ${hotelPhone ? `Tel: ${hotelPhone}<br/>` : ''}\n  </div>\n  \n  <div style=\"text-align: center; font-size: 12px; margin-bottom: 15px;\">\n    Restaurant Bill<br/>\n    ${customerType === 'walkin' ? 'WALK-IN CUSTOMER' : 'IN-HOUSE GUEST'}\n  </div>\n  \n  <div style=\"font-size: 11px; margin-bottom: 10px;\">\n    <div>Date: ${now.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' })}</div>\n    <div>Time: ${now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>\n    <div>Bill No: ${now.getTime().toString().slice(-8)}</div>\n    <div>Cashier: ${user?.username}</div>\n  </div>\n  \n  <div style=\"border-top: 2px dashed #000; border-bottom: 2px dashed #000; padding: 10px 0; margin: 10px 0;\">\n    <table style=\"width: 100%; font-size: 11px;\">\n      <thead>\n        <tr style=\"border-bottom: 1px solid #000;\">\n          <th style=\"text-align: left; padding-bottom: 5px;\">Item</th>\n          <th style=\"text-align: center; padding-bottom: 5px;\">Qty</th>\n          <th style=\"text-align: right; padding-bottom: 5px;\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n`;\n\n    currentOrder.forEach(item => {\n      billContent += `\n        <tr>\n          <td style=\"padding: 3px 0;\">${item.name}</td>\n          <td style=\"text-align: center;\">${item.quantity}</td>\n          <td style=\"text-align: right;\">${formatCurrency(item.price * item.quantity)}</td>\n        </tr>`;\n    });\n\n    selectedAmenities.forEach(item => {\n      billContent += `\n        <tr>\n          <td style=\"padding: 3px 0;\">${item.name} (${item.type})</td>\n          <td style=\"text-align: center;\">${item.quantity}</td>\n          <td style=\"text-align: right;\">${formatCurrency(item.price * item.quantity)}</td>\n        </tr>`;\n    });\n\n    billContent += `\n      </tbody>\n    </table>\n  </div>\n  \n  <div style=\"font-size: 11px; margin-top: 10px;\">\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n      <span>Subtotal (Excl. Tax):</span>\n      <span>${formatCurrency(billCalc.basePrice)}</span>\n    </div>\n`;\n\n    Object.entries(billCalc.taxBreakdown).forEach(([taxType, details]: [string, any]) => {\n      billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n      <span>${taxType} (${details.rate}%):</span>\n      <span>${formatCurrency(details.amount)}</span>\n    </div>`;\n    });\n\n    if (billCalc.discount > 0) {\n      billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0; color: green;\">\n      <span>Discount (${appliedVoucher?.code}):</span>\n      <span>- ${formatCurrency(billCalc.discount)}</span>\n    </div>`;\n    }\n\n    billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 10px 0 5px 0; margin-top: 5px; border-top: 2px dashed #000; font-weight: bold; font-size: 14px;\">\n      <span>GRAND TOTAL:</span>\n      <span>${formatCurrency(billCalc.grandTotal)}</span>\n    </div>\n    \n    <div style=\"display: flex; justify-content: space-between; padding: 5px 0; font-weight: bold;\">\n      <span>Payment Method:</span>\n      <span>${selectedPaymentMethod.toUpperCase()}</span>\n    </div>\n  </div>\n  \n  <div style=\"text-align: center; margin-top: 20px; padding-top: 10px; border-top: 2px dashed #000; font-size: 12px;\">\n    Thank You! Visit Again<br/>\n    <div style=\"margin-top: 5px; font-size: 10px;\">\n      This is a computer generated bill\n    </div>\n  </div>\n</div>\n    `;\n\n    const printWindow = window.open('', '_blank', 'width=400,height=600');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Bill - ${hotelName}</title>\n            <style>\n              @media print {\n                body { margin: 0; }\n              }\n              body {\n                margin: 0;\n                padding: 20px;\n                font-family: 'Courier New', monospace;\n              }\n            </style>\n          </head>\n          <body onload=\"window.print(); window.close();\">\n            ${billContent}\n          </body>\n        </html>\n      `);\n      printWindow.document.close();\n    }\n\n    setIsBillingModalOpen(false);\n    setCurrentOrder([]);\n    setSelectedAmenities([]);\n    setSelectedPaymentMethod(\"\");\n    setAppliedVoucher(null);\n    setVoucherCode(\"\");\n  };\n\n  const handleTaskStatusUpdate = (task: any, newStatus: string) => {\n    updateTaskMutation.mutate({ taskId: task.id, status: newStatus });\n  };\n\n  return (\n    <DashboardLayout title=\"Cashier Dashboard\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <StatsCard\n            title=\"Pending Tasks\"\n            value={pendingTasks.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"In Progress\"\n            value={performingTasks.length}\n            icon={<ShoppingCart />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Completed\"\n            value={completedTasks.length}\n            icon={<CheckCircle2 />}\n            iconColor=\"text-green-500\"\n          />\n          <Button \n            className=\"h-full min-h-[100px]\" \n            onClick={() => setIsBillingModalOpen(true)}\n            size=\"lg\"\n          >\n            <Receipt className=\"h-6 w-6 mr-2\" />\n            New Checkout\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>My Tasks (Priority Order)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {sortedTasks.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-4\">No tasks assigned</p>\n                ) : (\n                  sortedTasks.map((task) => (\n                    <div key={task.id} className={`flex items-center justify-between p-4 border-2 rounded-lg ${getPriorityColor(task.priority)}`}>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          {getPriorityIcon(task.priority)}\n                          <h4 className=\"font-semibold\">{task.title}</h4>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {task.priority.toUpperCase()}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm opacity-90\">{task.description}</p>\n                        <Badge variant=\"secondary\" className=\"text-xs mt-2\">\n                          {task.status}\n                        </Badge>\n                      </div>\n                      <div className=\"flex flex-col gap-2 ml-4\">\n                        {task.status === 'pending' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleTaskStatusUpdate(task, 'performing')}\n                          >\n                            Start\n                          </Button>\n                        )}\n                        {task.status === 'performing' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleTaskStatusUpdate(task, 'completed')}\n                          >\n                            Complete\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start h-16\"\n                  onClick={() => setLocation('/hall-bookings')}\n                  data-testid=\"button-hall-bookings\"\n                >\n                  <Building2 className=\"h-5 w-5 mr-3\" />\n                  View Hall Bookings\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start h-16\"\n                  onClick={() => setIsAmenityBillingModalOpen(true)}\n                >\n                  <Waves className=\"h-5 w-5 mr-3\" />\n                  Bill Amenities (Walk-In Rate)\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start h-16\"\n                  onClick={() => setIsCashDepositModalOpen(true)}\n                >\n                  <Banknote className=\"h-5 w-5 mr-3\" />\n                  Request Cash Deposit to Finance\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start h-16\"\n                  onClick={() => setLocation('/cashier/maintenance')}\n                  data-testid=\"button-maintenance\"\n                >\n                  <Wrench className=\"h-5 w-5 mr-3\" />\n                  Report Maintenance Issue\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Dialog open={isCashDepositModalOpen} onOpenChange={setIsCashDepositModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Request Cash Deposit to Finance</DialogTitle>\n            </DialogHeader>\n            <Form {...cashDepositForm}>\n              <form onSubmit={cashDepositForm.handleSubmit((data) => cashDepositMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={cashDepositForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount (NPR)</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" min=\"0.01\" placeholder=\"Enter amount\" required />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={cashDepositForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Reason for deposit\" required />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" className=\"w-full\" disabled={cashDepositMutation.isPending}>\n                  {cashDepositMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={isAmenityBillingModalOpen} onOpenChange={setIsAmenityBillingModalOpen}>\n          <DialogContent className=\"w-full max-w-[95vw] sm:max-w-3xl max-h-[95vh] overflow-y-auto p-3 sm:p-6\">\n            <DialogHeader className=\"pb-2\">\n              <DialogTitle className=\"text-lg sm:text-xl md:text-2xl\">Bill Amenities (Walk-In Rate)</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"flex flex-col gap-4\">\n              <div className=\"p-3 bg-blue-50 border border-blue-200 rounded text-sm text-blue-800\">\n                <strong>Note:</strong> All amenities are billed at walk-in customer rates. No stock limits apply. Halls cannot be billed here.\n              </div>\n\n              {/* Amenities Selection */}\n              <div className=\"space-y-3 max-h-[250px] overflow-y-auto\">\n                {(pools.length > 0 || services.length > 0) ? (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-sm\">Available Amenities</h4>\n                    {pools.map((pool) => (\n                      <div key={pool.id} className=\"flex items-center justify-between p-3 border rounded-lg touch-manipulation\">\n                        <div className=\"flex-1 min-w-0 pr-2\">\n                          <p className=\"font-medium text-sm truncate\">{pool.name} (Pool)</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Walk-in Rate: {formatCurrency(pool.priceWalkin)}\n                          </p>\n                        </div>\n                        <Button size=\"lg\" className=\"h-10 w-10 sm:h-12 sm:w-12 shrink-0\" onClick={() => addAmenity(pool, 'Pool')}>\n                          <Plus className=\"h-5 w-5\" />\n                        </Button>\n                      </div>\n                    ))}\n                    {services.map((service) => (\n                      <div key={service.id} className=\"flex items-center justify-between p-3 border rounded-lg touch-manipulation\">\n                        <div className=\"flex-1 min-w-0 pr-2\">\n                          <p className=\"font-medium text-sm truncate\">{service.name} ({service.kind})</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Walk-in Rate: {formatCurrency(service.priceWalkin)}\n                          </p>\n                        </div>\n                        <Button size=\"lg\" className=\"h-10 w-10 sm:h-12 sm:w-12 shrink-0\" onClick={() => addAmenity(service, service.kind)}>\n                          <Plus className=\"h-5 w-5\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground text-center py-8\">No amenities available. Pools and services can be added by management.</p>\n                )}\n              </div>\n\n              {/* Selected Amenities */}\n              <div className=\"border-t pt-3\">\n                <h4 className=\"font-medium mb-2 text-sm sm:text-base\">Selected Items</h4>\n                {selectedAmenities.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground py-4 text-center\">No items selected yet</p>\n                ) : (\n                  <div className=\"space-y-2 max-h-[150px] overflow-y-auto\">\n                    {selectedAmenities.map((item) => (\n                      <div key={item.id} className=\"flex flex-col sm:flex-row sm:items-center gap-2 p-2 bg-muted rounded\">\n                        <span className=\"flex-1 font-medium text-sm min-w-0 truncate\">{item.name} ({item.type})</span>\n                        <div className=\"flex items-center gap-2 justify-between sm:justify-end\">\n                          <span className=\"w-8 text-center text-sm font-semibold\">{item.quantity}</span>\n                          <span className=\"w-20 text-right text-sm font-semibold\">{formatCurrency(item.price * item.quantity)}</span>\n                          <Button size=\"sm\" className=\"h-8 w-8 sm:h-9 sm:w-9\" variant=\"destructive\" onClick={() => removeAmenity(item.id)}>×</Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Bill Summary */}\n              <Card className=\"w-full\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base sm:text-lg\">Bill Summary (Tax-Free)</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {(() => {\n                    const total = calculateAmenityBillTaxFree();\n                    return (\n                      <>\n                        <div className=\"flex justify-between text-xs sm:text-sm text-muted-foreground\">\n                          <span>Subtotal:</span>\n                          <span className=\"font-semibold\">{formatCurrency(total)}</span>\n                        </div>\n                        <div className=\"flex justify-between text-xs sm:text-sm text-blue-600\">\n                          <span>Taxes:</span>\n                          <span className=\"font-semibold\">No tax applied</span>\n                        </div>\n                        <div className=\"flex justify-between font-bold text-base sm:text-lg pt-2 border-t\">\n                          <span>TOTAL:</span>\n                          <span>{formatCurrency(total)}</span>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </CardContent>\n              </Card>\n\n              {/* Payment Method */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm sm:text-base\">Payment Method</h4>\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2\">\n                  <Button\n                    variant={selectedPaymentMethod === 'cash' ? 'default' : 'outline'}\n                    className=\"h-12 justify-start text-base\"\n                    onClick={() => setSelectedPaymentMethod('cash')}\n                  >\n                    <DollarSign className=\"h-5 w-5 mr-2\" />\n                    Cash\n                  </Button>\n                  <Button\n                    variant={selectedPaymentMethod === 'pos' ? 'default' : 'outline'}\n                    className=\"h-12 justify-start text-base\"\n                    onClick={() => setSelectedPaymentMethod('pos')}\n                  >\n                    <CreditCard className=\"h-5 w-5 mr-2\" />\n                    POS/Card\n                  </Button>\n                  <Button\n                    variant={selectedPaymentMethod === 'fonepay' ? 'default' : 'outline'}\n                    className=\"h-12 justify-start text-base\"\n                    onClick={() => setSelectedPaymentMethod('fonepay')}\n                  >\n                    <Smartphone className=\"h-5 w-5 mr-2\" />\n                    Fonepay\n                  </Button>\n                </div>\n              </div>\n\n              {/* Checkout Button */}\n              <Button\n                className=\"w-full h-14 text-base sm:text-lg\"\n                size=\"lg\"\n                onClick={async () => {\n                  if (!selectedPaymentMethod) {\n                    toast({ title: \"Error\", description: \"Please select a payment method\", variant: \"destructive\" });\n                    return;\n                  }\n\n                  const total = calculateAmenityBillTaxFree();\n                  \n                  try {\n                    await createTransactionMutation.mutateAsync({\n                      txnType: selectedPaymentMethod === 'cash' ? 'cash_in' : selectedPaymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n                      amount: total.toString(),\n                      paymentMethod: selectedPaymentMethod,\n                      purpose: 'amenity_sale',\n                      reference: 'Walk-in amenity billing (Tax-free)'\n                    });\n\n                    // Print bill\n                    const hotelName = hotel?.name || \"HOTEL\";\n                    const hotelAddress = hotel?.address || \"\";\n                    const hotelPhone = hotel?.phone || \"\";\n                    const now = new Date();\n                    \n                    let billContent = `\n                    <div style=\"font-family: 'Courier New', monospace; width: 300px; padding: 10px;\">\n                      <div style=\"text-align: center; font-weight: bold; font-size: 16px; border-bottom: 2px dashed #000; padding-bottom: 10px; margin-bottom: 10px;\">\n                        ${hotelName}\n                      </div>\n                      \n                      <div style=\"text-align: center; font-size: 11px; margin-bottom: 10px;\">\n                        ${hotelAddress ? `${hotelAddress}<br/>` : ''}\n                        ${hotelPhone ? `Tel: ${hotelPhone}<br/>` : ''}\n                      </div>\n                      \n                      <div style=\"text-align: center; font-size: 12px; margin-bottom: 15px;\">\n                        Amenity Bill (Tax-Free)<br/>\n                        WALK-IN CUSTOMER\n                      </div>\n                      \n                      <div style=\"font-size: 11px; margin-bottom: 10px;\">\n                        <div>Date: ${now.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' })}</div>\n                        <div>Time: ${now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>\n                        <div>Bill No: ${now.getTime().toString().slice(-8)}</div>\n                        <div>Cashier: ${user?.username}</div>\n                      </div>\n                      \n                      <div style=\"border-top: 2px dashed #000; border-bottom: 2px dashed #000; padding: 10px 0; margin: 10px 0;\">\n                        <table style=\"width: 100%; font-size: 11px;\">\n                          <thead>\n                            <tr style=\"border-bottom: 1px solid #000;\">\n                              <th style=\"text-align: left; padding-bottom: 5px;\">Item</th>\n                              <th style=\"text-align: center; padding-bottom: 5px;\">Qty</th>\n                              <th style=\"text-align: right; padding-bottom: 5px;\">Amount</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                    `;\n\n                    selectedAmenities.forEach(item => {\n                      billContent += `\n                            <tr>\n                              <td style=\"padding: 3px 0;\">${item.name} (${item.type})</td>\n                              <td style=\"text-align: center;\">${item.quantity}</td>\n                              <td style=\"text-align: right;\">${formatCurrency(item.price * item.quantity)}</td>\n                            </tr>`;\n                    });\n\n                    billContent += `\n                          </tbody>\n                        </table>\n                      </div>\n                      \n                      <div style=\"font-size: 11px; margin-top: 10px;\">\n                        <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n                          <span>Subtotal:</span>\n                          <span>${formatCurrency(total)}</span>\n                        </div>\n                        <div style=\"display: flex; justify-content: space-between; padding: 3px 0; color: blue;\">\n                          <span>Tax:</span>\n                          <span>No tax applied</span>\n                        </div>\n                        <div style=\"display: flex; justify-content: space-between; padding: 10px 0 5px 0; margin-top: 5px; border-top: 2px dashed #000; font-weight: bold; font-size: 14px;\">\n                          <span>TOTAL:</span>\n                          <span>${formatCurrency(total)}</span>\n                        </div>\n                        \n                        <div style=\"display: flex; justify-content: space-between; padding: 5px 0; font-weight: bold;\">\n                          <span>Payment Method:</span>\n                          <span>${selectedPaymentMethod.toUpperCase()}</span>\n                        </div>\n                      </div>\n                      \n                      <div style=\"text-align: center; margin-top: 20px; padding-top: 10px; border-top: 2px dashed #000; font-size: 12px;\">\n                        Thank You! Visit Again<br/>\n                        <div style=\"margin-top: 5px; font-size: 10px;\">\n                          This is a computer generated bill\n                        </div>\n                      </div>\n                    </div>\n                    `;\n\n                    const printWindow = window.open('', '_blank', 'width=400,height=600');\n                    if (printWindow) {\n                      printWindow.document.write(`\n                        <html>\n                          <head>\n                            <title>Amenity Bill - ${hotelName}</title>\n                            <style>\n                              @media print {\n                                body { margin: 0; }\n                              }\n                              body {\n                                margin: 0;\n                                padding: 20px;\n                                font-family: 'Courier New', monospace;\n                              }\n                            </style>\n                          </head>\n                          <body onload=\"window.print(); window.close();\">\n                            ${billContent}\n                          </body>\n                        </html>\n                      `);\n                      printWindow.document.close();\n                    }\n\n                    setIsAmenityBillingModalOpen(false);\n                    setSelectedAmenities([]);\n                    setSelectedPaymentMethod(\"\");\n                  } catch (error) {\n                    toast({ title: \"Error\", description: \"Failed to process payment\", variant: \"destructive\" });\n                  }\n                }}\n                disabled={createTransactionMutation.isPending || selectedAmenities.length === 0 || !selectedPaymentMethod}\n              >\n                <Printer className=\"h-5 w-5 mr-2\" />\n                {createTransactionMutation.isPending ? \"Processing...\" : \"Checkout & Print Bill\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={isBillingModalOpen} onOpenChange={setIsBillingModalOpen}>\n          <DialogContent className=\"w-full max-w-[95vw] sm:max-w-2xl md:max-w-4xl lg:max-w-6xl max-h-[95vh] overflow-y-auto p-3 sm:p-6\">\n            <DialogHeader className=\"pb-2\">\n              <DialogTitle className=\"text-lg sm:text-xl md:text-2xl\">Checkout & Billing</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"flex flex-col gap-4\">\n              {/* Customer Type Selector - Mobile Optimized */}\n              <div className=\"w-full\">\n                <Select value={customerType} onValueChange={(value: any) => setCustomerType(value)}>\n                  <SelectTrigger className=\"w-full sm:w-64 h-12 text-base\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"inhouse\" className=\"text-base\">In-House Guest</SelectItem>\n                    <SelectItem value=\"walkin\" className=\"text-base\">Walk-In Customer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Items Selection - Mobile Optimized */}\n              <Tabs defaultValue=\"menu\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 h-12\">\n                  <TabsTrigger value=\"menu\" className=\"text-sm sm:text-base\">Menu Items</TabsTrigger>\n                  <TabsTrigger value=\"amenities\" className=\"text-sm sm:text-base\">Amenities</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"menu\" className=\"space-y-2 max-h-[200px] sm:max-h-[300px] overflow-y-auto mt-3\">\n                  {menuItems.filter(item => item.active).map((item) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 touch-manipulation\">\n                      <div className=\"flex-1 min-w-0 pr-2\">\n                        <p className=\"font-medium text-sm sm:text-base truncate\">{item.name}</p>\n                        <p className=\"text-xs sm:text-sm text-muted-foreground\">{formatCurrency(item.price)}</p>\n                      </div>\n                      <Button size=\"lg\" className=\"h-10 w-10 sm:h-12 sm:w-12 shrink-0\" onClick={() => addToOrder(item)}>\n                        <Plus className=\"h-5 w-5\" />\n                      </Button>\n                    </div>\n                  ))}\n                </TabsContent>\n\n                <TabsContent value=\"amenities\" className=\"space-y-3 max-h-[200px] sm:max-h-[300px] overflow-y-auto mt-3\">\n                  <div className=\"mb-2 p-2 bg-blue-50 border border-blue-200 rounded text-xs text-blue-800\">\n                    <strong>Note:</strong> Amenities are billed at walk-in customer rates. No stock limits apply.\n                  </div>\n                  {(pools.length > 0 || services.length > 0) ? (\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-sm\">Available Amenities (Walk-In Rate)</h4>\n                      {pools.map((pool) => (\n                        <div key={pool.id} className=\"flex items-center justify-between p-3 border rounded-lg touch-manipulation\">\n                          <div className=\"flex-1 min-w-0 pr-2\">\n                            <p className=\"font-medium text-sm truncate\">{pool.name} (Pool)</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Walk-in Rate: {formatCurrency(pool.priceWalkin)}\n                            </p>\n                          </div>\n                          <Button size=\"lg\" className=\"h-10 w-10 sm:h-12 sm:w-12 shrink-0\" onClick={() => addAmenity(pool, 'Pool')}>\n                            <Plus className=\"h-5 w-5\" />\n                          </Button>\n                        </div>\n                      ))}\n                      {services.map((service) => (\n                        <div key={service.id} className=\"flex items-center justify-between p-3 border rounded-lg touch-manipulation\">\n                          <div className=\"flex-1 min-w-0 pr-2\">\n                            <p className=\"font-medium text-sm truncate\">{service.name} ({service.kind})</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Walk-in Rate: {formatCurrency(service.priceWalkin)}\n                            </p>\n                          </div>\n                          <Button size=\"lg\" className=\"h-10 w-10 sm:h-12 sm:w-12 shrink-0\" onClick={() => addAmenity(service, service.kind)}>\n                            <Plus className=\"h-5 w-5\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground text-center py-8\">No amenities available. Pools and services can be added by management.</p>\n                  )}\n                </TabsContent>\n              </Tabs>\n\n              {/* Current Order - Mobile Optimized */}\n              <div className=\"border-t pt-3\">\n                <h4 className=\"font-medium mb-2 text-sm sm:text-base\">Current Order</h4>\n                {currentOrder.length === 0 && selectedAmenities.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground py-4 text-center\">No items added yet</p>\n                ) : (\n                  <div className=\"space-y-2 max-h-[150px] overflow-y-auto\">\n                    {currentOrder.map((item) => (\n                      <div key={item.id} className=\"flex flex-col sm:flex-row sm:items-center gap-2 p-2 bg-muted rounded\">\n                        <span className=\"flex-1 font-medium text-sm min-w-0 truncate\">{item.name}</span>\n                        <div className=\"flex items-center gap-1 sm:gap-2 justify-between sm:justify-end\">\n                          <Button size=\"sm\" className=\"h-8 w-8 sm:h-9 sm:w-9\" variant=\"outline\" onClick={() => updateQuantity(item.id, item.quantity - 1)}>\n                            <Minus className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                          </Button>\n                          <span className=\"w-6 sm:w-8 text-center text-sm font-semibold\">{item.quantity}</span>\n                          <Button size=\"sm\" className=\"h-8 w-8 sm:h-9 sm:w-9\" variant=\"outline\" onClick={() => updateQuantity(item.id, item.quantity + 1)}>\n                            <Plus className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                          </Button>\n                          <span className=\"w-16 sm:w-20 text-right text-sm font-semibold\">{formatCurrency(item.price * item.quantity)}</span>\n                          <Button size=\"sm\" className=\"h-8 w-8 sm:h-9 sm:w-9\" variant=\"destructive\" onClick={() => removeFromOrder(item.id)}>×</Button>\n                        </div>\n                      </div>\n                    ))}\n                    {selectedAmenities.map((item) => (\n                      <div key={item.id} className=\"flex flex-col sm:flex-row sm:items-center gap-2 p-2 bg-muted rounded\">\n                        <span className=\"flex-1 font-medium text-sm min-w-0 truncate\">{item.name} ({item.type})</span>\n                        <div className=\"flex items-center gap-2 justify-between sm:justify-end\">\n                          <span className=\"w-8 text-center text-sm font-semibold\">{item.quantity}</span>\n                          <span className=\"w-20 text-right text-sm font-semibold\">{formatCurrency(item.price * item.quantity)}</span>\n                          <Button size=\"sm\" className=\"h-8 w-8 sm:h-9 sm:w-9\" variant=\"destructive\" onClick={() => removeAmenity(item.id)}>×</Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Bill Summary - Mobile Optimized */}\n              <Card className=\"w-full\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base sm:text-lg\">Bill Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {(() => {\n                    const bill = calculateFinalBill();\n                    return (\n                      <>\n                        <div className=\"flex justify-between text-xs sm:text-sm\">\n                          <span>Subtotal (Excl. Tax):</span>\n                          <span className=\"font-semibold\">{formatCurrency(bill.basePrice)}</span>\n                        </div>\n                        {Object.entries(bill.taxBreakdown).map(([taxType, details]: [string, any]) => (\n                          <div key={taxType} className=\"flex justify-between text-xs sm:text-sm\">\n                            <span>{taxType} ({details.rate}%):</span>\n                            <span className=\"font-semibold\">{formatCurrency(details.amount)}</span>\n                          </div>\n                        ))}\n                        {bill.discount > 0 && (\n                          <div className=\"flex justify-between text-xs sm:text-sm text-green-600\">\n                            <span>Discount:</span>\n                            <span className=\"font-semibold\">- {formatCurrency(bill.discount)}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between font-bold text-base sm:text-lg pt-2 border-t\">\n                          <span>GRAND TOTAL:</span>\n                          <span>{formatCurrency(bill.grandTotal)}</span>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </CardContent>\n              </Card>\n\n              {/* Voucher Section - Mobile Optimized */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm sm:text-base\">Voucher Code (Optional)</h4>\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Enter voucher code\"\n                    value={voucherCode}\n                    onChange={(e) => setVoucherCode(e.target.value.toUpperCase())}\n                    className=\"h-12 text-base\"\n                  />\n                  <Button \n                    onClick={handleApplyVoucher} \n                    disabled={validateVoucherMutation.isPending || !voucherCode.trim()}\n                    className=\"h-12 px-6 shrink-0\"\n                  >\n                    {validateVoucherMutation.isPending ? \"...\" : \"Apply\"}\n                  </Button>\n                </div>\n                {appliedVoucher && (\n                  <p className=\"text-xs sm:text-sm text-green-600\">\n                    ✓ Voucher \"{appliedVoucher.code}\" applied: -{formatCurrency(appliedVoucher.discountAmount)}\n                  </p>\n                )}\n              </div>\n\n              {/* Payment Method - Mobile Optimized */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm sm:text-base\">Payment Method</h4>\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2\">\n                  <Button\n                    variant={selectedPaymentMethod === 'cash' ? 'default' : 'outline'}\n                    className=\"h-12 justify-start text-base\"\n                    onClick={() => setSelectedPaymentMethod('cash')}\n                  >\n                    <DollarSign className=\"h-5 w-5 mr-2\" />\n                    Cash\n                  </Button>\n                  <Button\n                    variant={selectedPaymentMethod === 'pos' ? 'default' : 'outline'}\n                    className=\"h-12 justify-start text-base\"\n                    onClick={() => setSelectedPaymentMethod('pos')}\n                  >\n                    <CreditCard className=\"h-5 w-5 mr-2\" />\n                    POS/Card\n                  </Button>\n                  <Button\n                    variant={selectedPaymentMethod === 'fonepay' ? 'default' : 'outline'}\n                    className=\"h-12 justify-start text-base\"\n                    onClick={() => setSelectedPaymentMethod('fonepay')}\n                  >\n                    <Smartphone className=\"h-5 w-5 mr-2\" />\n                    Fonepay\n                  </Button>\n                </div>\n              </div>\n\n              {/* Checkout Button - Mobile Optimized */}\n              <Button\n                className=\"w-full h-14 text-base sm:text-lg\"\n                size=\"lg\"\n                onClick={handleProcessPayment}\n                disabled={createTransactionMutation.isPending || (currentOrder.length === 0 && selectedAmenities.length === 0) || !selectedPaymentMethod}\n              >\n                <Printer className=\"h-5 w-5 mr-2\" />\n                {createTransactionMutation.isPending ? \"Processing...\" : \"Checkout & Print Bill\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":52556},"client/src/pages/dashboard/manager/amenities.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Edit, Trash2, Building, Waves, Wrench } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { DashboardLayout } from '@/components/layout/dashboard-layout';\n\ninterface Hall {\n  id: string;\n  name: string;\n  capacity: number;\n  priceInhouse: string;\n  priceWalkin: string;\n  createdAt: string;\n}\n\ninterface Pool {\n  id: string;\n  name: string;\n  priceInhouse: string;\n  priceWalkin: string;\n  createdAt: string;\n}\n\ninterface Service {\n  id: string;\n  kind: string;\n  name: string;\n  priceInhouse: string;\n  priceWalkin: string;\n}\n\nconst ServiceTypes = [\n  'Spa',\n  'Jacuzzi',\n  'Massage',\n  'Fitness Center',\n  'Sauna',\n  'Beauty Salon',\n  'Laundry',\n  'Car Rental',\n  'Tour Guide',\n  'Airport Transfer',\n  'Conference Room',\n  'Business Center',\n  'Other'\n];\n\nexport default function AmenitiesPage() {\n  const [halls, setHalls] = useState<Hall[]>([]);\n  const [pools, setPools] = useState<Pool[]>([]);\n  const [services, setServices] = useState<Service[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('halls');\n\n  // Dialog states\n  const [showHallDialog, setShowHallDialog] = useState(false);\n  const [showPoolDialog, setShowPoolDialog] = useState(false);\n  const [showServiceDialog, setShowServiceDialog] = useState(false);\n  const [editingHall, setEditingHall] = useState<Hall | null>(null);\n  const [editingPool, setEditingPool] = useState<Pool | null>(null);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [deleteConfirm, setDeleteConfirm] = useState<{type: 'hall' | 'pool' | 'service', id: string} | null>(null);\n\n  // Form states\n  const [hallForm, setHallForm] = useState({\n    name: '',\n    capacity: '',\n    priceInhouse: '',\n    priceWalkin: ''\n  });\n\n  const [poolForm, setPoolForm] = useState({\n    name: '',\n    priceInhouse: '',\n    priceWalkin: ''\n  });\n\n  const [serviceForm, setServiceForm] = useState({\n    kind: '',\n    name: '',\n    priceInhouse: '',\n    priceWalkin: ''\n  });\n\n  const fetchAmenities = async () => {\n    try {\n      setLoading(true);\n      const [hallsRes, poolsRes, servicesRes] = await Promise.all([\n        fetch('/api/halls'),\n        fetch('/api/pools'),\n        fetch('/api/services')\n      ]);\n\n      if (hallsRes.ok) {\n        const hallsData = await hallsRes.json();\n        setHalls(hallsData);\n      }\n\n      if (poolsRes.ok) {\n        const poolsData = await poolsRes.json();\n        setPools(poolsData);\n      }\n\n      if (servicesRes.ok) {\n        const servicesData = await servicesRes.json();\n        setServices(servicesData);\n      }\n    } catch (error) {\n      toast.error('Failed to fetch amenities');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAmenities();\n  }, []);\n\n  const resetForms = () => {\n    setHallForm({ name: '', capacity: '', priceInhouse: '', priceWalkin: '' });\n    setPoolForm({ name: '', priceInhouse: '', priceWalkin: '' });\n    setServiceForm({ kind: '', name: '', priceInhouse: '', priceWalkin: '' });\n    setEditingHall(null);\n    setEditingPool(null);\n    setEditingService(null);\n  };\n\n  const handleHallSubmit = async () => {\n    try {\n      const data = {\n        name: hallForm.name,\n        capacity: parseInt(hallForm.capacity),\n        priceInhouse: hallForm.priceInhouse,\n        priceWalkin: hallForm.priceWalkin\n      };\n\n      const response = editingHall\n        ? await fetch(`/api/halls/${editingHall.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          })\n        : await fetch('/api/halls', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast.success(editingHall ? 'Hall updated successfully' : 'Hall created successfully');\n        setShowHallDialog(false);\n        resetForms();\n        fetchAmenities();\n      } else {\n        toast.error('Failed to save hall');\n      }\n    } catch (error) {\n      toast.error('Failed to save hall');\n    }\n  };\n\n  const handlePoolSubmit = async () => {\n    try {\n      const data = {\n        name: poolForm.name,\n        priceInhouse: poolForm.priceInhouse,\n        priceWalkin: poolForm.priceWalkin\n      };\n\n      const response = editingPool\n        ? await fetch(`/api/pools/${editingPool.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          })\n        : await fetch('/api/pools', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast.success(editingPool ? 'Pool updated successfully' : 'Pool created successfully');\n        setShowPoolDialog(false);\n        resetForms();\n        fetchAmenities();\n      } else {\n        toast.error('Failed to save pool');\n      }\n    } catch (error) {\n      toast.error('Failed to save pool');\n    }\n  };\n\n  const handleServiceSubmit = async () => {\n    try {\n      const data = {\n        kind: serviceForm.kind,\n        name: serviceForm.name,\n        priceInhouse: serviceForm.priceInhouse,\n        priceWalkin: serviceForm.priceWalkin\n      };\n\n      const response = editingService\n        ? await fetch(`/api/services/${editingService.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          })\n        : await fetch('/api/services', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast.success(editingService ? 'Service updated successfully' : 'Service created successfully');\n        setShowServiceDialog(false);\n        resetForms();\n        fetchAmenities();\n      } else {\n        toast.error('Failed to save service');\n      }\n    } catch (error) {\n      toast.error('Failed to save service');\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deleteConfirm) return;\n\n    try {\n      const response = await fetch(`/api/${deleteConfirm.type}s/${deleteConfirm.id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        toast.success(`${deleteConfirm.type} deleted successfully`);\n        setDeleteConfirm(null);\n        fetchAmenities();\n      } else {\n        toast.error(`Failed to delete ${deleteConfirm.type}`);\n      }\n    } catch (error) {\n      toast.error(`Failed to delete ${deleteConfirm.type}`);\n    }\n  };\n\n  const editHall = (hall: Hall) => {\n    setHallForm({\n      name: hall.name,\n      capacity: hall.capacity.toString(),\n      priceInhouse: hall.priceInhouse,\n      priceWalkin: hall.priceWalkin\n    });\n    setEditingHall(hall);\n    setShowHallDialog(true);\n  };\n\n  const editPool = (pool: Pool) => {\n    setPoolForm({\n      name: pool.name,\n      priceInhouse: pool.priceInhouse,\n      priceWalkin: pool.priceWalkin\n    });\n    setEditingPool(pool);\n    setShowPoolDialog(true);\n  };\n\n  const editService = (service: Service) => {\n    setServiceForm({\n      kind: service.kind,\n      name: service.name,\n      priceInhouse: service.priceInhouse,\n      priceWalkin: service.priceWalkin\n    });\n    setEditingService(service);\n    setShowServiceDialog(true);\n  };\n\n  const formatPrice = (price: string) => {\n    return `NPR ${parseFloat(price).toLocaleString()}`;\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout title=\"Amenities Management\">\n        <div className=\"text-center\">Loading amenities...</div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Amenities Management\">\n      <div>\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold\">Amenities Management</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Manage hotel amenities including halls, pools, and services with dual pricing for in-house guests and walk-in customers.\n        </p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Building className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{halls.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Event Halls</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Waves className=\"h-8 w-8 text-cyan-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{pools.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Pools</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Wrench className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{services.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Services</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"halls\">Event Halls</TabsTrigger>\n          <TabsTrigger value=\"pools\">Pools</TabsTrigger>\n          <TabsTrigger value=\"services\">Services</TabsTrigger>\n        </TabsList>\n\n        {/* Halls Tab */}\n        <TabsContent value=\"halls\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Event Halls</h2>\n            <Dialog open={showHallDialog} onOpenChange={(open) => {\n              setShowHallDialog(open);\n              if (!open) resetForms();\n            }}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Hall\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>{editingHall ? 'Edit Hall' : 'Add New Hall'}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"hall-name\">Hall Name</Label>\n                    <Input\n                      id=\"hall-name\"\n                      value={hallForm.name}\n                      onChange={(e) => setHallForm({...hallForm, name: e.target.value})}\n                      placeholder=\"e.g., Grand Ballroom\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"hall-capacity\">Capacity</Label>\n                    <Input\n                      id=\"hall-capacity\"\n                      type=\"number\"\n                      value={hallForm.capacity}\n                      onChange={(e) => setHallForm({...hallForm, capacity: e.target.value})}\n                      placeholder=\"e.g., 200\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"hall-price-inhouse\">In-House Price (NPR)</Label>\n                      <Input\n                        id=\"hall-price-inhouse\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={hallForm.priceInhouse}\n                        onChange={(e) => setHallForm({...hallForm, priceInhouse: e.target.value})}\n                        placeholder=\"5000.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"hall-price-walkin\">Walk-in Price (NPR)</Label>\n                      <Input\n                        id=\"hall-price-walkin\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={hallForm.priceWalkin}\n                        onChange={(e) => setHallForm({...hallForm, priceWalkin: e.target.value})}\n                        placeholder=\"8000.00\"\n                      />\n                    </div>\n                  </div>\n                  <Button onClick={handleHallSubmit} className=\"w-full\">\n                    {editingHall ? 'Update Hall' : 'Create Hall'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Capacity</TableHead>\n                    <TableHead>In-House Price</TableHead>\n                    <TableHead>Walk-in Price</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {halls.map((hall) => (\n                    <TableRow key={hall.id}>\n                      <TableCell className=\"font-medium\">{hall.name}</TableCell>\n                      <TableCell>{hall.capacity} people</TableCell>\n                      <TableCell>{formatPrice(hall.priceInhouse)}</TableCell>\n                      <TableCell>{formatPrice(hall.priceWalkin)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => editHall(hall)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => setDeleteConfirm({type: 'hall', id: hall.id})}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {halls.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center text-muted-foreground\">\n                        No halls configured. Add your first hall to get started.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Pools Tab */}\n        <TabsContent value=\"pools\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Swimming Pools</h2>\n            <Dialog open={showPoolDialog} onOpenChange={(open) => {\n              setShowPoolDialog(open);\n              if (!open) resetForms();\n            }}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Pool\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>{editingPool ? 'Edit Pool' : 'Add New Pool'}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"pool-name\">Pool Name</Label>\n                    <Input\n                      id=\"pool-name\"\n                      value={poolForm.name}\n                      onChange={(e) => setPoolForm({...poolForm, name: e.target.value})}\n                      placeholder=\"e.g., Olympic Pool\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"pool-price-inhouse\">In-House Price (NPR)</Label>\n                      <Input\n                        id=\"pool-price-inhouse\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={poolForm.priceInhouse}\n                        onChange={(e) => setPoolForm({...poolForm, priceInhouse: e.target.value})}\n                        placeholder=\"500.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"pool-price-walkin\">Walk-in Price (NPR)</Label>\n                      <Input\n                        id=\"pool-price-walkin\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={poolForm.priceWalkin}\n                        onChange={(e) => setPoolForm({...poolForm, priceWalkin: e.target.value})}\n                        placeholder=\"800.00\"\n                      />\n                    </div>\n                  </div>\n                  <Button onClick={handlePoolSubmit} className=\"w-full\">\n                    {editingPool ? 'Update Pool' : 'Create Pool'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>In-House Price</TableHead>\n                    <TableHead>Walk-in Price</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {pools.map((pool) => (\n                    <TableRow key={pool.id}>\n                      <TableCell className=\"font-medium\">{pool.name}</TableCell>\n                      <TableCell>{formatPrice(pool.priceInhouse)}</TableCell>\n                      <TableCell>{formatPrice(pool.priceWalkin)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => editPool(pool)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => setDeleteConfirm({type: 'pool', id: pool.id})}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {pools.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={4} className=\"text-center text-muted-foreground\">\n                        No pools configured. Add your first pool to get started.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Services Tab */}\n        <TabsContent value=\"services\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Hotel Services</h2>\n            <Dialog open={showServiceDialog} onOpenChange={(open) => {\n              setShowServiceDialog(open);\n              if (!open) resetForms();\n            }}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Service\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>{editingService ? 'Edit Service' : 'Add New Service'}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"service-kind\">Service Type</Label>\n                    <Select \n                      value={serviceForm.kind} \n                      onValueChange={(value) => setServiceForm({...serviceForm, kind: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select service type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {ServiceTypes.map((type) => (\n                          <SelectItem key={type} value={type}>{type}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"service-name\">Service Name</Label>\n                    <Input\n                      id=\"service-name\"\n                      value={serviceForm.name}\n                      onChange={(e) => setServiceForm({...serviceForm, name: e.target.value})}\n                      placeholder=\"e.g., Swedish Massage\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"service-price-inhouse\">In-House Price (NPR)</Label>\n                      <Input\n                        id=\"service-price-inhouse\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={serviceForm.priceInhouse}\n                        onChange={(e) => setServiceForm({...serviceForm, priceInhouse: e.target.value})}\n                        placeholder=\"1500.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"service-price-walkin\">Walk-in Price (NPR)</Label>\n                      <Input\n                        id=\"service-price-walkin\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={serviceForm.priceWalkin}\n                        onChange={(e) => setServiceForm({...serviceForm, priceWalkin: e.target.value})}\n                        placeholder=\"2000.00\"\n                      />\n                    </div>\n                  </div>\n                  <Button onClick={handleServiceSubmit} className=\"w-full\">\n                    {editingService ? 'Update Service' : 'Create Service'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Service Type</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>In-House Price</TableHead>\n                    <TableHead>Walk-in Price</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {services.map((service) => (\n                    <TableRow key={service.id}>\n                      <TableCell>\n                        <Badge variant=\"secondary\">{service.kind}</Badge>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">{service.name}</TableCell>\n                      <TableCell>{formatPrice(service.priceInhouse)}</TableCell>\n                      <TableCell>{formatPrice(service.priceWalkin)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => editService(service)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => setDeleteConfirm({type: 'service', id: service.id})}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {services.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center text-muted-foreground\">\n                        No services configured. Add your first service to get started.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteConfirm} onOpenChange={() => setDeleteConfirm(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete this {deleteConfirm?.type}.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n    </DashboardLayout>\n  );\n}","size_bytes":26607},"client/src/pages/dashboard/restaurant-bar-manager/table-setup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, Plus, Users, MapPin } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nexport default function TableSetup() {\n  const { confirm } = useConfirmDialog();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newTable, setNewTable] = useState({\n    name: \"\",\n    capacity: \"\",\n    location: \"\",\n    status: \"available\"\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch restaurant tables\n  const { data: tables = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 3000\n  });\n\n  // Create table mutation\n  const createTableMutation = useMutation({\n    mutationFn: async (tableData: any) => {\n      const response = await fetch(\"/api/hotels/current/restaurant-tables\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...tableData,\n          capacity: parseInt(tableData.capacity)\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create table\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/restaurant-tables\"] });\n      setIsAddDialogOpen(false);\n      setNewTable({ name: \"\", capacity: \"\", location: \"\", status: \"available\" });\n      toast.success(\"Table created successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Update table status mutation\n  const updateTableMutation = useMutation({\n    mutationFn: async ({ tableId, status }: { tableId: string; status: string }) => {\n      const response = await fetch(`/api/hotels/current/restaurant-tables/${tableId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status })\n      });\n      if (!response.ok) throw new Error(\"Failed to update table\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/restaurant-tables\"] });\n      toast.success(\"Table status updated\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateTable = () => {\n    if (!newTable.name || !newTable.capacity) {\n      toast.error(\"Please fill in table name and capacity\");\n      return;\n    }\n\n    createTableMutation.mutate(newTable);\n  };\n\n  const handleStatusChange = (table: any, status: string) => {\n    updateTableMutation.mutate({ tableId: table.id, status });\n  };\n\n  const handleDeleteTable = async (table: any) => {\n    await confirm({\n      title: \"Delete Table\",\n      description: `Are you sure you want to delete table \"${table.name}\"?`,\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: async () => {\n        try {\n          const response = await fetch(`/api/hotels/current/restaurant-tables/${table.id}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n          });\n          if (!response.ok) throw new Error(\"Failed to delete table\");\n          queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/restaurant-tables\"] });\n          toast.success(\"Table deleted successfully\");\n        } catch (error: any) {\n          toast.error(error.message);\n        }\n      }\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'text-green-600 bg-green-100';\n      case 'occupied': return 'text-red-600 bg-red-100';\n      case 'reserved': return 'text-orange-600 bg-orange-100';\n      case 'cleaning': return 'text-blue-600 bg-blue-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const columns = [\n    { key: \"name\", label: \"Table Name\", sortable: true },\n    { \n      key: \"capacity\", \n      label: \"Capacity\", \n      sortable: true,\n      render: (value: number) => (\n        <div className=\"flex items-center space-x-1\">\n          <Users className=\"h-4 w-4 text-gray-500\" />\n          <span>{value} guests</span>\n        </div>\n      )\n    },\n    { \n      key: \"location\", \n      label: \"Location\", \n      render: (value: string) => value ? (\n        <div className=\"flex items-center space-x-1\">\n          <MapPin className=\"h-4 w-4 text-gray-500\" />\n          <span>{value}</span>\n        </div>\n      ) : 'Not specified'\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string, row: any) => (\n        <div className=\"flex items-center space-x-2\">\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(value)}`}>\n            {value?.charAt(0).toUpperCase() + value?.slice(1)}\n          </span>\n          <Select \n            value={value} \n            onValueChange={(newStatus) => handleStatusChange(row, newStatus)}\n          >\n            <SelectTrigger className=\"w-28 h-8\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"available\">Available</SelectItem>\n              <SelectItem value=\"occupied\">Occupied</SelectItem>\n              <SelectItem value=\"reserved\">Reserved</SelectItem>\n              <SelectItem value=\"cleaning\">Cleaning</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      )\n    }\n  ];\n\n  const actions = [\n    { \n      label: \"Delete\", \n      action: handleDeleteTable, \n      variant: \"destructive\" as const \n    }\n  ];\n\n  const totalTables = tables.length;\n  const availableTables = tables.filter(t => t.status === 'available').length;\n  const occupiedTables = tables.filter(t => t.status === 'occupied').length;\n  const totalCapacity = tables.reduce((sum, table) => sum + (table.capacity || 0), 0);\n\n  return (\n    <DashboardLayout title=\"Table Setup\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Tables</p>\n                  <p className=\"text-2xl font-bold\">{totalTables}</p>\n                </div>\n                <Table className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Available</p>\n                  <p className=\"text-2xl font-bold\">{availableTables}</p>\n                </div>\n                <div className=\"h-8 w-8 rounded-full bg-green-100 flex items-center justify-center\">\n                  <div className=\"h-4 w-4 rounded-full bg-green-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Occupied</p>\n                  <p className=\"text-2xl font-bold\">{occupiedTables}</p>\n                </div>\n                <div className=\"h-8 w-8 rounded-full bg-red-100 flex items-center justify-center\">\n                  <div className=\"h-4 w-4 rounded-full bg-red-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Capacity</p>\n                  <p className=\"text-2xl font-bold\">{totalCapacity}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tables Table */}\n        <DataTable\n          title=\"Restaurant Tables\"\n          data={tables}\n          columns={columns}\n          actions={actions}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Add Table\"\n          searchPlaceholder=\"Search tables...\"\n        />\n\n        {/* Add Table Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add Restaurant Table</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Table Name *</Label>\n                <Input\n                  id=\"name\"\n                  value={newTable.name}\n                  onChange={(e) => setNewTable({ ...newTable, name: e.target.value })}\n                  placeholder=\"e.g., Table 1, VIP A, Patio 3\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"capacity\">Capacity (Number of Guests) *</Label>\n                <Input\n                  id=\"capacity\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={newTable.capacity}\n                  onChange={(e) => setNewTable({ ...newTable, capacity: e.target.value })}\n                  placeholder=\"Enter number of seats\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"location\">Location/Area</Label>\n                <Input\n                  id=\"location\"\n                  value={newTable.location}\n                  onChange={(e) => setNewTable({ ...newTable, location: e.target.value })}\n                  placeholder=\"e.g., Indoor, Patio, VIP Section\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"status\">Initial Status</Label>\n                <Select \n                  value={newTable.status} \n                  onValueChange={(value) => setNewTable({ ...newTable, status: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"available\">Available</SelectItem>\n                    <SelectItem value=\"cleaning\">Cleaning</SelectItem>\n                    <SelectItem value=\"reserved\">Reserved</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateTable}\n                  disabled={createTableMutation.isPending}\n                >\n                  {createTableMutation.isPending ? \"Creating...\" : \"Create Table\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":12134},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/dashboard/manager/maintenance-requests.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { CheckCircle, XCircle, Clock } from \"lucide-react\";\n\nexport default function ManagerMaintenanceRequests() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showApproveDialog, setShowApproveDialog] = useState(false);\n  const [showDeclineDialog, setShowDeclineDialog] = useState(false);\n  const [selectedRequest, setSelectedRequest] = useState<any>(null);\n  const [notes, setNotes] = useState(\"\");\n\n  const { data: maintenanceRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/maintenance-requests\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch maintenance requests\");\n      return response.json();\n    }\n  });\n\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, status, notes }: { id: string; status: string; notes?: string }) => {\n      const response = await fetch(`/api/maintenance-requests/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status, notes })\n      });\n      if (!response.ok) throw new Error(\"Failed to update request\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Request updated successfully\" });\n      setShowApproveDialog(false);\n      setShowDeclineDialog(false);\n      setSelectedRequest(null);\n      setNotes(\"\");\n    },\n    onError: (error: any) => {\n      toast({ title: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleApprove = (request: any) => {\n    setSelectedRequest(request);\n    setShowApproveDialog(true);\n  };\n\n  const handleDecline = (request: any) => {\n    setSelectedRequest(request);\n    setShowDeclineDialog(true);\n  };\n\n  const confirmApprove = () => {\n    if (!selectedRequest) return;\n    updateRequestMutation.mutate({\n      id: selectedRequest.id,\n      status: \"approved\",\n      notes: notes || undefined\n    });\n  };\n\n  const confirmDecline = () => {\n    if (!selectedRequest || !notes.trim()) {\n      toast({ title: \"Please provide a reason for declining\", variant: \"destructive\" });\n      return;\n    }\n    updateRequestMutation.mutate({\n      id: selectedRequest.id,\n      status: \"declined\",\n      notes: notes\n    });\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const variants = {\n      high: \"destructive\",\n      medium: \"default\",\n      low: \"secondary\"\n    };\n    return <Badge variant={variants[priority as keyof typeof variants] as any}>{priority}</Badge>;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const colors = {\n      pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n      approved: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n      declined: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n      in_progress: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n      resolved: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400\"\n    };\n    return (\n      <Badge className={colors[status as keyof typeof colors] || \"\"}>\n        {status}\n      </Badge>\n    );\n  };\n\n  const columns = [\n    { \n      key: \"title\", \n      label: \"Issue\", \n      sortable: true,\n      render: (value: string, row: any) => (\n        <div>\n          <div className=\"font-medium\">{value}</div>\n          {row.description && (\n            <div className=\"text-sm text-muted-foreground truncate max-w-xs\">{row.description}</div>\n          )}\n        </div>\n      )\n    },\n    { key: \"location\", label: \"Location\", sortable: true },\n    { \n      key: \"reportedBy\", \n      label: \"Reported By\", \n      render: (value: any) => (\n        <div>\n          <div>{value?.username || \"Unknown\"}</div>\n          <div className=\"text-xs text-muted-foreground\">{value?.role?.name || \"\"}</div>\n        </div>\n      )\n    },\n    { \n      key: \"priority\", \n      label: \"Priority\", \n      sortable: true,\n      render: (value: string) => getPriorityBadge(value)\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      sortable: true,\n      render: (value: string) => getStatusBadge(value)\n    },\n    {\n      key: \"createdAt\",\n      label: \"Date Reported\",\n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleDateString()\n    },\n    {\n      key: \"actions\",\n      label: \"Actions\",\n      render: (_: any, row: any) => (\n        <div className=\"flex gap-2\">\n          {row.status === \"pending\" && (\n            <>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleApprove(row)}\n                data-testid={`button-approve-${row.id}`}\n              >\n                <CheckCircle className=\"h-4 w-4 mr-1\" />\n                Approve\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleDecline(row)}\n                data-testid={`button-decline-${row.id}`}\n              >\n                <XCircle className=\"h-4 w-4 mr-1\" />\n                Decline\n              </Button>\n            </>\n          )}\n          {row.status === \"approved\" && (\n            <Badge variant=\"secondary\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              Awaiting Assignment\n            </Badge>\n          )}\n        </div>\n      )\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"space-y-6\">\n        <DataTable\n          title=\"All Maintenance Requests\"\n          data={maintenanceRequests}\n          columns={columns}\n          isLoading={isLoading}\n          searchPlaceholder=\"Search requests...\"\n        />\n      </div>\n\n      {/* Approve Dialog */}\n      <Dialog open={showApproveDialog} onOpenChange={setShowApproveDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Approve Maintenance Request</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p>Are you sure you want to approve this maintenance request?</p>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"approve-notes\">Notes (Optional)</Label>\n              <Textarea\n                id=\"approve-notes\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Add any approval notes or instructions...\"\n                rows={3}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowApproveDialog(false)}>\n              Cancel\n            </Button>\n            <Button onClick={confirmApprove} disabled={updateRequestMutation.isPending}>\n              {updateRequestMutation.isPending ? \"Approving...\" : \"Approve\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Decline Dialog */}\n      <Dialog open={showDeclineDialog} onOpenChange={setShowDeclineDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Decline Maintenance Request</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p>Please provide a reason for declining this maintenance request:</p>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"decline-notes\">Reason *</Label>\n              <Textarea\n                id=\"decline-notes\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Explain why this request is being declined...\"\n                rows={3}\n                required\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDeclineDialog(false)}>\n              Cancel\n            </Button>\n            <Button \n              variant=\"destructive\" \n              onClick={confirmDecline} \n              disabled={updateRequestMutation.isPending || !notes.trim()}\n            >\n              {updateRequestMutation.isPending ? \"Declining...\" : \"Decline\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":9053},"client/src/components/tables/data-table.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Download } from \"lucide-react\";\nimport { cn, getStatusColor } from \"@/lib/utils\";\n\ninterface Column {\n  key: string;\n  label: string;\n  sortable?: boolean;\n  render?: (value: any, row: any) => React.ReactNode;\n}\n\ninterface DataTableProps {\n  title: string;\n  data: any[];\n  columns: Column[];\n  searchPlaceholder?: string;\n  actions?: {\n    label: string;\n    action: (row: any) => void;\n    variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\";\n    show?: (row: any) => boolean;\n  }[];\n  onAdd?: () => void;\n  addButtonLabel?: string;\n  className?: string;\n  isLoading?: boolean;\n}\n\nexport function DataTable({\n  title,\n  data,\n  columns,\n  searchPlaceholder = \"Search...\",\n  actions = [],\n  onAdd,\n  addButtonLabel = \"Add New\",\n  className,\n  isLoading = false\n}: DataTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\n\n  const handleExport = () => {\n    if (sortedData.length === 0) return;\n\n    const headers = columns.map(col => col.label).join(',');\n    const rows = sortedData.map(row => \n      columns.map(col => {\n        let value = row[col.key];\n        \n        // Use render function if available to get proper formatted value\n        if (col.render) {\n          const rendered = col.render(value, row);\n          // Extract text content from React elements\n          if (typeof rendered === 'object' && rendered !== null) {\n            // If it's a React element with props.children, try to extract text\n            if ('props' in rendered && rendered.props && 'children' in rendered.props) {\n              value = String(rendered.props.children);\n            } else {\n              value = String(value || '');\n            }\n          } else {\n            value = String(rendered || '');\n          }\n        } else if (typeof value === 'object' && value !== null) {\n          // Handle objects - try to extract a display value\n          if (value.name) value = value.name;\n          else if (value.label) value = value.label;\n          else value = JSON.stringify(value);\n        } else {\n          value = String(value || '');\n        }\n        \n        const stringValue = String(value).replace(/\"/g, '\"\"');\n        return `\"${stringValue}\"`;\n      }).join(',')\n    );\n    \n    const csv = [headers, ...rows].join('\\n');\n    \n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const filteredData = data.filter(row =>\n    Object.values(row).some(value =>\n      String(value).toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  );\n\n  const sortedData = sortColumn\n    ? [...filteredData].sort((a, b) => {\n        const aValue = a[sortColumn];\n        const bValue = b[sortColumn];\n        \n        if (aValue < bValue) return sortDirection === \"asc\" ? -1 : 1;\n        if (aValue > bValue) return sortDirection === \"asc\" ? 1 : -1;\n        return 0;\n      })\n    : filteredData;\n\n  const handleSort = (columnKey: string) => {\n    if (sortColumn === columnKey) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortColumn(columnKey);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const renderCellValue = (column: Column, value: any, row: any) => {\n    if (column.render) {\n      return column.render(value, row);\n    }\n\n    if (column.key.includes(\"status\")) {\n      return (\n        <Badge className={getStatusColor(value)} variant=\"secondary\">\n          {value}\n        </Badge>\n      );\n    }\n\n    if (column.key.includes(\"date\") || column.key.includes(\"time\")) {\n      return new Date(value).toLocaleDateString();\n    }\n\n    if (column.key.includes(\"amount\") || column.key.includes(\"price\")) {\n      return `रु${Number(value).toLocaleString()}`;\n    }\n\n    return value;\n  };\n\n  return (\n    <Card className={cn(\"\", className)} data-testid={`table-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"p-4 md:p-6\">\n        <div className=\"space-y-3 md:space-y-0 md:flex md:items-center md:justify-between\">\n          <CardTitle className=\"text-base md:text-lg\" data-testid={`table-title-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {title}\n          </CardTitle>\n          <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-2\">\n            <div className=\"relative flex-1 sm:flex-initial\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder={searchPlaceholder}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9 w-full sm:w-48 md:w-64\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                data-testid=\"button-export\"\n                onClick={handleExport}\n                disabled={sortedData.length === 0}\n                title=\"Export to CSV\"\n                className=\"flex-1 sm:flex-initial\"\n              >\n                <Download className=\"h-4 w-4 mr-0 sm:mr-2\" />\n                <span className=\"sm:inline\">Export</span>\n              </Button>\n              {onAdd && (\n                <Button onClick={onAdd} size=\"sm\" data-testid=\"button-add\" className=\"flex-1 sm:flex-initial\">\n                  {addButtonLabel}\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0 md:p-6 md:pt-0\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                {columns.map((column) => (\n                  <th\n                    key={column.key}\n                    className={cn(\n                      \"text-left p-3 md:p-4 text-foreground font-medium text-xs md:text-sm whitespace-nowrap\",\n                      column.sortable && \"cursor-pointer hover:bg-muted\"\n                    )}\n                    onClick={() => column.sortable && handleSort(column.key)}\n                    data-testid={`table-header-${column.key}`}\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>{column.label}</span>\n                      {column.sortable && sortColumn === column.key && (\n                        <span className=\"text-xs\">\n                          {sortDirection === \"asc\" ? \"↑\" : \"↓\"}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n                {actions.length > 0 && (\n                  <th className=\"text-left p-3 md:p-4 text-foreground font-medium text-xs md:text-sm whitespace-nowrap\">Actions</th>\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {isLoading ? (\n                Array.from({ length: 3 }).map((_, index) => (\n                  <tr key={`loading-${index}`} className=\"border-b border-border\">\n                    {columns.map((column) => (\n                      <td key={column.key} className=\"p-3 md:p-4\">\n                        <div className=\"h-4 bg-muted animate-pulse rounded w-3/4\"></div>\n                      </td>\n                    ))}\n                    {actions.length > 0 && (\n                      <td className=\"p-3 md:p-4\">\n                        <div className=\"flex space-x-2\">\n                          {actions.map((_, actionIndex) => (\n                            <div\n                              key={actionIndex}\n                              className=\"h-8 w-16 bg-muted animate-pulse rounded\"\n                            ></div>\n                          ))}\n                        </div>\n                      </td>\n                    )}\n                  </tr>\n                ))\n              ) : sortedData.length === 0 ? (\n                <tr>\n                  <td \n                    colSpan={columns.length + (actions.length > 0 ? 1 : 0)}\n                    className=\"text-center p-6 md:p-8 text-muted-foreground text-sm\"\n                    data-testid=\"table-empty-state\"\n                  >\n                    No data found\n                  </td>\n                </tr>\n              ) : (\n                sortedData.map((row, index) => (\n                  <tr \n                    key={row.id || index} \n                    className=\"border-b border-border hover:bg-muted/50\"\n                    data-testid={`table-row-${index}`}\n                  >\n                    {columns.map((column) => (\n                      <td \n                        key={column.key} \n                        className=\"p-3 md:p-4 text-xs md:text-sm\"\n                        data-testid={`table-cell-${column.key}-${index}`}\n                      >\n                        {renderCellValue(column, row[column.key], row)}\n                      </td>\n                    ))}\n                    {actions.length > 0 && (\n                      <td className=\"p-3 md:p-4\">\n                        <div className=\"flex flex-col sm:flex-row gap-1 sm:gap-2\">\n                          {actions.map((action, actionIndex) => {\n                            const shouldShow = action.show ? action.show(row) : true;\n                            if (!shouldShow) return null;\n                            return (\n                              <Button\n                                key={actionIndex}\n                                variant={action.variant || \"outline\"}\n                                size=\"sm\"\n                                onClick={() => action.action(row)}\n                                data-testid={`table-action-${action.label.toLowerCase().replace(/\\s+/g, '-')}-${index}`}\n                                className=\"text-xs whitespace-nowrap\"\n                              >\n                                {action.label}\n                              </Button>\n                            );\n                          })}\n                        </div>\n                      </td>\n                    )}\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11058},"client/src/pages/dashboard/owner/staff-management.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Users, UserCheck, UserX, UserPlus, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\n// Define the staff creation schema\nconst staffSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(50, \"Username must be less than 50 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().min(1, \"First name is required\").max(50, \"First name must be less than 50 characters\"),\n  lastName: z.string().min(1, \"Last name is required\").max(50, \"Last name must be less than 50 characters\"),\n  phone: z.string().min(1, \"Phone number is required\").max(20, \"Phone number must be less than 20 characters\"),\n  address: z.string().optional(),\n  role: z.string().min(1, \"Role is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password confirmation is required\")\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype StaffFormData = z.infer<typeof staffSchema>;\n\n// Owner can create these roles\nconst OWNER_CREATABLE_ROLES = [\n  { value: 'manager', label: 'Manager' },\n  { value: 'housekeeping_supervisor', label: 'Housekeeping Supervisor' },\n  { value: 'restaurant_bar_manager', label: 'Restaurant & Bar Manager' },\n  { value: 'security_head', label: 'Security Head' },\n  { value: 'finance', label: 'Finance' }\n];\n\nexport default function StaffManagement() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedStaff, setSelectedStaff] = useState<any>(null);\n\n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: roles = [] } = useQuery<any[]>({\n    queryKey: [\"/api/roles\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000,\n    events: ['user:created', 'user:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000,\n    events: ['attendance:updated']\n  });\n\n  // Form for staff creation\n  const form = useForm<StaffFormData>({\n    resolver: zodResolver(staffSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      address: \"\",\n      role: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    }\n  });\n\n  // Form for staff editing\n  const editForm = useForm<Omit<StaffFormData, 'password' | 'confirmPassword'>>({\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      address: \"\",\n      role: \"\"\n    }\n  });\n\n  // Update edit form when selectedStaff changes\n  useEffect(() => {\n    if (selectedStaff && isEditModalOpen) {\n      editForm.reset({\n        username: selectedStaff.username || \"\",\n        email: selectedStaff.email || \"\",\n        firstName: selectedStaff.firstName || \"\",\n        lastName: selectedStaff.lastName || \"\",\n        phone: selectedStaff.phone || \"\",\n        address: selectedStaff.address || \"\",\n        role: selectedStaff.role?.name || \"\"\n      });\n    }\n  }, [selectedStaff, isEditModalOpen, editForm]);\n\n  const createStaffMutation = useMutation({\n    mutationFn: async (data: StaffFormData) => {\n      const { confirmPassword, ...staffData } = data;\n      const res = await apiRequest(\"POST\", \"/api/users\", staffData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      toast({\n        title: \"Staff Member Created Successfully\",\n        description: \"The new staff account has been created and can now access the system.\",\n      });\n      form.reset();\n      setIsCreateModalOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to Create Staff Member\",\n        description: error.message || \"Please check your input and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteStaffMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ message: \"Failed to delete staff member\" }));\n        throw new Error(error.message);\n      }\n      // 204 No Content - don't try to parse JSON\n      if (response.status === 204) {\n        return null;\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member removed successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleStatusMutation = useMutation({\n    mutationFn: async ({ userId, isActive }: { userId: string; isActive: boolean }) => {\n      const response = await fetch(`/api/users/${userId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ isActive }),\n      });\n      if (!response.ok) throw new Error(\"Failed to toggle status\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update staff status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editStaffMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Convert role name to roleId\n      const role = roles.find(r => r.name === data.role);\n      if (!role) {\n        throw new Error(\"Invalid role selected\");\n      }\n      \n      const { role: _, ...updateData } = data;\n      const payload = {\n        ...updateData,\n        roleId: role.id,\n        hotelId: user?.hotelId\n      };\n      \n      const response = await fetch(`/api/users/${selectedStaff?.id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update staff member\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Staff member updated successfully\",\n      });\n      editForm.reset();\n      setIsEditModalOpen(false);\n      setSelectedStaff(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate staff metrics\n  const totalStaff = staff.length;\n  const onlineStaff = staff.filter(s => dailyAttendance.some(a => a.userId === s.id && a.status === 'active')).length;\n  const offlineStaff = totalStaff - onlineStaff;\n  const activeStaff = staff.filter(s => s.isActive).length;\n\n  // Group staff by role\n  const staffByRole = staff.reduce((acc, member) => {\n    const roleName = member.role?.name || 'unknown';\n    if (!acc[roleName]) acc[roleName] = [];\n    acc[roleName].push(member);\n    return acc;\n  }, {} as Record<string, any[]>);\n\n  const staffColumns = [\n    { key: \"username\", label: \"Username\", sortable: true },\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        // Use fullName if available, otherwise combine firstName and lastName\n        if (value) return value;\n        if (row.firstName || row.lastName) {\n          return `${row.firstName || ''} ${row.lastName || ''}`.trim() || '-';\n        }\n        return '-';\n      }\n    },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true, \n      render: (value: any) => (\n        <Badge variant=\"outline\">\n          {value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || 'No Role'}\n        </Badge>\n      )\n    },\n    { \n      key: \"address\", \n      label: \"Address\", \n      sortable: true,\n      render: (value: any) => value || '-'\n    },\n    { key: \"email\", label: \"Email\", sortable: true },\n    { key: \"phone\", label: \"Phone\", sortable: true },\n    { \n      key: \"id\", \n      label: \"Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs ${\n            isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n          }`}>\n            {isOnDuty ? 'On Duty' : 'Off Duty'}\n          </span>\n        );\n      }\n    },\n    { \n      key: \"isActive\", \n      label: \"Active\", \n      render: (value: boolean) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${\n          value ? 'bg-blue-100 text-blue-800' : 'bg-red-100 text-red-800'\n        }`}>\n          {value ? 'Active' : 'Inactive'}\n        </span>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Joined\", \n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleDateString()\n    }\n  ];\n\n  const { confirm } = useConfirmDialog();\n\n  const staffActions = [\n    { \n      label: \"Edit\", \n      action: (row: any) => {\n        setSelectedStaff(row);\n        setIsEditModalOpen(true);\n      } \n    },\n    { \n      label: \"Toggle Status\", \n      action: (row: any) => {\n        const newStatus = !row.isActive;\n        toggleStatusMutation.mutate({ userId: row.id, isActive: newStatus });\n      } \n    },\n    { \n      label: \"Remove\", \n      action: async (row: any) => {\n        await confirm({\n          title: \"Remove Staff Member\",\n          description: `Are you sure you want to remove ${row.username}? This action cannot be undone.`,\n          confirmText: \"Remove\",\n          cancelText: \"Cancel\",\n          variant: \"destructive\",\n          onConfirm: () => {\n            deleteStaffMutation.mutate(row.id);\n          }\n        });\n      }, \n      variant: \"destructive\" as const \n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Staff Management\">\n      <div className=\"space-y-6\">\n        {/* Staff Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Staff\"\n            value={totalStaff}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Online Staff\"\n            value={onlineStaff}\n            icon={<UserCheck />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Offline Staff\"\n            value={offlineStaff}\n            icon={<UserX />}\n            iconColor=\"text-gray-500\"\n          />\n          <StatsCard\n            title=\"Active Staff\"\n            value={activeStaff}\n            icon={<UserPlus />}\n            iconColor=\"text-purple-500\"\n          />\n        </div>\n\n        {/* Staff by Role */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Staff Distribution by Role</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {Object.entries(staffByRole).map(([roleName, members]) => {\n                const membersList = members as any[];\n                return (\n                  <div key={roleName} className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg capitalize\">\n                      {roleName.replace(/_/g, ' ')}\n                    </h3>\n                    <div className=\"mt-2 space-y-1\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        {membersList.length}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {membersList.filter((m: any) => dailyAttendance.some(a => a.userId === m.id && a.status === 'active')).length} on duty\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Staff Table */}\n        <DataTable\n          title=\"All Staff Members\"\n          data={staff}\n          columns={staffColumns}\n          actions={staffActions}\n          onAdd={() => setIsCreateModalOpen(true)}\n          addButtonLabel=\"Add Staff Member\"\n          searchPlaceholder=\"Search staff...\"\n        />\n\n        {/* Create Staff Modal */}\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-blue-500\" />\n                <span>Create New Staff Member</span>\n              </DialogTitle>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit((data) => createStaffMutation.mutate(data))} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter first name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter last name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter username\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email *</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"staff@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Phone number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Role *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a role\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {OWNER_CREATABLE_ROLES.map((role) => (\n                              <SelectItem key={role.value} value={role.value}>\n                                {role.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"text-sm font-medium text-foreground mb-3\">Account Security</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password *</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Confirm Password *</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Confirm password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-3 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      form.reset();\n                      setIsCreateModalOpen(false);\n                    }}\n                    disabled={createStaffMutation.isPending}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createStaffMutation.isPending}\n                  >\n                    {createStaffMutation.isPending && (\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    )}\n                    Create Staff Member\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Staff Modal */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-blue-500\" />\n                <span>Edit Staff Member</span>\n              </DialogTitle>\n            </DialogHeader>\n            \n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit((data) => editStaffMutation.mutate(data))} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter first name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter last name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter username\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email *</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"staff@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Phone number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Role *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a role\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {roles.filter(role => role.name !== 'super_admin' && role.name !== 'owner').map((role) => (\n                              <SelectItem key={role.id} value={role.name}>\n                                {role.name.split('_').map((word: string) => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-3 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      editForm.reset();\n                      setIsEditModalOpen(false);\n                      setSelectedStaff(null);\n                    }}\n                    disabled={editStaffMutation.isPending}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={editStaffMutation.isPending}\n                  >\n                    {editStaffMutation.isPending && (\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    )}\n                    Update Staff Member\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":27158},"client/src/pages/dashboard/storekeeper/inventory-tracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Package, AlertTriangle, Search } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function StorekeeperInventoryTracking() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: inventoryItems = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: lowStockItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/low-stock-items\"],\n    refetchInterval: 3000\n  });\n\n  const filteredItems = inventoryItems.filter((item: any) =>\n    item.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const isLowStock = (itemId: string) => {\n    return lowStockItems.some((lowItem: any) => lowItem.id === itemId);\n  };\n\n  return (\n    <DashboardLayout title=\"Inventory Tracking\">\n      <div className=\"space-y-4 sm:space-y-6 p-4 sm:p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-lg sm:text-xl\">\n              <Package className=\"w-5 h-5\" />\n              All Inventory Items\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search inventory items...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-inventory\"\n                />\n              </div>\n            </div>\n\n            {isLoading ? (\n              <p className=\"text-center text-muted-foreground py-8\">Loading inventory...</p>\n            ) : filteredItems.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\" data-testid=\"no-items-message\">\n                {searchTerm ? 'No items found' : 'No inventory items'}\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredItems.map((item: any) => (\n                  <div\n                    key={item.id}\n                    className={`p-3 sm:p-4 border rounded-lg ${\n                      isLowStock(item.id)\n                        ? 'border-red-300 bg-red-50 dark:bg-red-950'\n                        : 'hover:bg-accent'\n                    } transition-colors`}\n                    data-testid={`inventory-item-${item.id}`}\n                  >\n                    <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold text-base sm:text-lg\" data-testid={`item-name-${item.id}`}>\n                            {item.name}\n                          </h3>\n                          {isLowStock(item.id) && (\n                            <Badge variant=\"destructive\" className=\"flex items-center gap-1 w-fit\">\n                              <AlertTriangle className=\"w-3 h-3\" />\n                              Low Stock\n                            </Badge>\n                          )}\n                        </div>\n                        {item.description && (\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            {item.description}\n                          </p>\n                        )}\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 text-sm\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Current Stock:</span>\n                            <span className=\"ml-2 font-medium\" data-testid={`item-current-qty-${item.id}`}>\n                              {item.baseStockQty || 0} {item.baseUnit || 'units'}\n                            </span>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Reorder Level:</span>\n                            <span className=\"ml-2 font-medium\">\n                              {item.reorderLevel || 0} {item.baseUnit || 'units'}\n                            </span>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Cost/Unit:</span>\n                            <span className=\"ml-2 font-medium\">\n                              रु{parseFloat(item.costPerUnit || 0).toFixed(2)}\n                            </span>\n                          </div>\n                          {item.storageLocation && (\n                            <div>\n                              <span className=\"text-muted-foreground\">Location:</span>\n                              <span className=\"ml-2 font-medium\">{item.storageLocation}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {lowStockItems.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-red-600 dark:text-red-400\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                Low Stock Alerts ({lowStockItems.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {lowStockItems.map((item: any) => (\n                  <div\n                    key={item.id}\n                    className=\"flex items-center justify-between p-3 border border-red-200 rounded-lg bg-red-50 dark:bg-red-950\"\n                    data-testid={`low-stock-alert-${item.id}`}\n                  >\n                    <div>\n                      <p className=\"font-medium\">{item.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Current: {item.currentQty} {item.unit} | Min: {item.minQty} {item.unit}\n                      </p>\n                    </div>\n                    <Badge variant=\"destructive\">Action Required</Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":6868},"client/src/pages/dashboard/bartender.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wine, Clock, CheckCircle, XCircle, Package, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useState } from \"react\";\n\ninterface KotItem {\n  id: string;\n  menuItemId: string;\n  qty: number;\n  notes: string | null;\n  status: string;\n  declineReason: string | null;\n  menuItem?: { name: string };\n}\n\ninterface KotOrder {\n  id: string;\n  tableId: string;\n  status: string;\n  createdAt: string;\n  items?: KotItem[];\n}\n\ninterface RestaurantTable {\n  id: string;\n  name: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  unit: string;\n}\n\nexport default function BartenderDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [declineDialogOpen, setDeclineDialogOpen] = useState(false);\n  const [wastageDialogOpen, setWastageDialogOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<KotItem | null>(null);\n  const [declineReason, setDeclineReason] = useState(\"\");\n  const [wastageData, setWastageData] = useState({\n    itemId: \"\",\n    qty: \"\",\n    unit: \"\",\n    reason: \"\"\n  });\n\n  const { data: kotOrders = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: tables = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"]\n  });\n\n  const updateKotItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/kot-items/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"KOT item updated successfully\" });\n      setDeclineDialogOpen(false);\n      setDeclineReason(\"\");\n      setSelectedItem(null);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const createWastageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/wastages\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Wastage recorded successfully\" });\n      setWastageDialogOpen(false);\n      setWastageData({ itemId: \"\", qty: \"\", unit: \"\", reason: \"\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleApprove = (item: KotItem) => {\n    updateKotItemMutation.mutate({\n      id: item.id,\n      data: { status: \"approved\" }\n    });\n  };\n\n  const handleDecline = (item: KotItem) => {\n    setSelectedItem(item);\n    setDeclineDialogOpen(true);\n  };\n\n  const handleSetReady = (item: KotItem) => {\n    updateKotItemMutation.mutate({\n      id: item.id,\n      data: { status: \"ready\" }\n    });\n  };\n\n  const submitDecline = () => {\n    if (!selectedItem || !declineReason.trim()) {\n      toast({ title: \"Please provide a reason for declining\", variant: \"destructive\" });\n      return;\n    }\n    if (declineReason.trim().length < 10) {\n      toast({ title: \"Decline reason must be at least 10 characters\", variant: \"destructive\" });\n      return;\n    }\n    updateKotItemMutation.mutate({\n      id: selectedItem.id,\n      data: { status: \"declined\", declineReason: declineReason.trim() }\n    });\n  };\n\n  const submitWastage = () => {\n    if (!wastageData.itemId || !wastageData.qty || !wastageData.reason.trim()) {\n      toast({ title: \"Please fill all wastage fields\", variant: \"destructive\" });\n      return;\n    }\n    const qty = parseFloat(wastageData.qty);\n    if (isNaN(qty) || qty <= 0) {\n      toast({ title: \"Please enter a valid quantity\", variant: \"destructive\" });\n      return;\n    }\n    createWastageMutation.mutate({\n      itemId: wastageData.itemId,\n      qty: qty.toString(),\n      unit: wastageData.unit,\n      reason: wastageData.reason.trim()\n    });\n  };\n\n  const pendingOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'pending')\n  ) : [];\n  \n  const approvedOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'approved')\n  ) : [];\n  \n  const readyOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.every((item: KotItem) => item.status === 'ready')\n  ) : [];\n  \n  const declinedOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'declined')\n  ) : [];\n\n  const getTableNumber = (tableId: string) => {\n    if (!Array.isArray(tables)) return tableId;\n    const table = (tables as RestaurantTable[]).find((t: RestaurantTable) => t.id === tableId);\n    return table?.name || tableId;\n  };\n\n  const renderKotCard = (order: KotOrder) => (\n    <Card key={order.id}>\n      <CardHeader>\n        <CardTitle className=\"flex justify-between items-center\">\n          <span>{getTableNumber(order.tableId)}</span>\n          <span className=\"text-sm text-gray-500\">\n            {new Date(order.createdAt).toLocaleTimeString()}\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {order.items?.map((item: KotItem) => (\n          <div key={item.id} className=\"mb-4 p-3 border rounded\">\n            <div className=\"flex justify-between items-start mb-2\">\n              <div>\n                <p className=\"font-semibold\">{item.menuItem?.name}</p>\n                <p className=\"text-sm text-gray-600\">Quantity: {item.qty}</p>\n                {item.notes && <p className=\"text-sm text-gray-500\">Notes: {item.notes}</p>}\n                {item.declineReason && (\n                  <p className=\"text-sm text-red-600\">Declined: {item.declineReason}</p>\n                )}\n              </div>\n              <Badge variant={\n                item.status === 'approved' ? 'default' :\n                item.status === 'ready' ? 'default' :\n                item.status === 'declined' ? 'destructive' : 'secondary'\n              }>\n                {item.status}\n              </Badge>\n            </div>\n            {item.status === 'pending' && (\n              <div className=\"flex gap-2 mt-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => handleApprove(item)}\n                  className=\"flex-1\"\n                >\n                  <CheckCircle className=\"w-4 h-4 mr-1\" /> Approve\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => handleDecline(item)}\n                  className=\"flex-1\"\n                >\n                  <XCircle className=\"w-4 h-4 mr-1\" /> Decline\n                </Button>\n              </div>\n            )}\n            {item.status === 'approved' && (\n              <Button\n                size=\"sm\"\n                onClick={() => handleSetReady(item)}\n                className=\"w-full mt-2\"\n              >\n                <Clock className=\"w-4 h-4 mr-1\" /> Set Ready\n              </Button>\n            )}\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <DashboardLayout title=\"Bartender Dashboard\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Pending Orders\"\n            value={pendingOrders.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"In Preparation\"\n            value={approvedOrders.length}\n            icon={<Wine />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Ready to Serve\"\n            value={readyOrders.length}\n            icon={<CheckCircle />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Declined\"\n            value={declinedOrders.length}\n            icon={<XCircle />}\n            iconColor=\"text-red-500\"\n          />\n        </div>\n\n        <div className=\"flex gap-2 justify-end\">\n          <Dialog open={wastageDialogOpen} onOpenChange={setWastageDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Package className=\"w-4 h-4 mr-2\" /> Record Wastage\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Record Wastage</DialogTitle>\n                <DialogDescription>Record inventory wastage with reason</DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Inventory Item</Label>\n                  <Select\n                    value={wastageData.itemId}\n                    onValueChange={(value) => {\n                      const selectedInventoryItem = (inventoryItems as InventoryItem[]).find(item => item.id === value);\n                      setWastageData({ \n                        ...wastageData, \n                        itemId: value,\n                        unit: selectedInventoryItem?.unit || 'piece'\n                      });\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select item\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.isArray(inventoryItems) && (inventoryItems as InventoryItem[]).map((item: InventoryItem) => (\n                        <SelectItem key={item.id} value={item.id}>\n                          {item.name} ({item.unit})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Quantity</Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={wastageData.qty}\n                    onChange={(e) => setWastageData({ ...wastageData, qty: e.target.value })}\n                    placeholder=\"Enter quantity\"\n                  />\n                </div>\n                <div>\n                  <Label>Reason</Label>\n                  <Textarea\n                    value={wastageData.reason}\n                    onChange={(e) => setWastageData({ ...wastageData, reason: e.target.value })}\n                    placeholder=\"Explain reason for wastage\"\n                  />\n                </div>\n                <Button onClick={submitWastage} className=\"w-full\" disabled={createWastageMutation.isPending}>\n                  Record Wastage\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Wine className=\"h-5 w-5 text-purple-500\" />\n              <span>Bar Orders</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold mb-2\">Pending Orders ({pendingOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {pendingOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No pending orders</p>\n                  ) : (\n                    pendingOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">In Preparation ({approvedOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {approvedOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No orders in preparation</p>\n                  ) : (\n                    approvedOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Ready ({readyOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {readyOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No ready orders</p>\n                  ) : (\n                    readyOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Declined ({declinedOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {declinedOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No declined orders</p>\n                  ) : (\n                    declinedOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={declineDialogOpen} onOpenChange={setDeclineDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Decline KOT Item</DialogTitle>\n            <DialogDescription>Please provide a reason for declining this item</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Reason for Decline</Label>\n              <Textarea\n                value={declineReason}\n                onChange={(e) => setDeclineReason(e.target.value)}\n                placeholder=\"e.g., Out of stock, Equipment issue\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setDeclineDialogOpen(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={submitDecline} className=\"flex-1\" variant=\"destructive\" disabled={updateKotItemMutation.isPending}>\n                Decline\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":15543},"client/src/pages/dashboard/owner/audit-transparency.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon, FileText, DollarSign, Package, Users, Settings, History, TrendingUp, ArrowLeft } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function AuditTransparencyPage() {\n  const [, setLocation] = useLocation();\n  const [dateRange, setDateRange] = useState<{ from: Date | undefined; to: Date | undefined }>({\n    from: undefined,\n    to: undefined\n  });\n\n  // Financial Activity - Use financial overview logic (real-time)\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"]\n  });\n\n  // Maintenance Approvals - Use maintenance requests logic (real-time)\n  const { data: maintenanceRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"]\n  });\n\n  // Real-time updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    events: ['maintenance:updated']\n  });\n\n  // Filter transactions by date if range is selected\n  const filteredTransactions = dateRange.from && dateRange.to \n    ? transactions.filter(t => {\n        const txnDate = new Date(t.createdAt);\n        return txnDate >= dateRange.from! && txnDate <= dateRange.to!;\n      })\n    : transactions;\n\n  // Filter maintenance by date if range is selected\n  const filteredMaintenance = dateRange.from && dateRange.to\n    ? maintenanceRequests.filter(m => {\n        const reqDate = new Date(m.createdAt);\n        return reqDate >= dateRange.from! && reqDate <= dateRange.to!;\n      })\n    : maintenanceRequests;\n\n  const buildQueryUrl = (baseUrl: string, from?: Date, to?: Date) => {\n    if (!from || !to) return baseUrl;\n    const params = new URLSearchParams({\n      startDate: from.toISOString(),\n      endDate: to.toISOString()\n    });\n    return `${baseUrl}?${params.toString()}`;\n  };\n\n  const { data: auditLogs = [] } = useQuery({\n    queryKey: ['/api/audit-logs', dateRange.from?.toISOString(), dateRange.to?.toISOString()],\n    queryFn: async () => {\n      const url = buildQueryUrl('/api/audit-logs', dateRange.from, dateRange.to);\n      const res = await fetch(url, { credentials: 'include' });\n      if (!res.ok) return [];\n      return res.json();\n    },\n    refetchInterval: 5000\n  });\n\n  const { data: priceChangeLogs = [] } = useQuery({\n    queryKey: ['/api/price-change-logs', dateRange.from?.toISOString(), dateRange.to?.toISOString()],\n    queryFn: async () => {\n      const url = buildQueryUrl('/api/price-change-logs', dateRange.from, dateRange.to);\n      const res = await fetch(url, { credentials: 'include' });\n      if (!res.ok) return [];\n      return res.json();\n    },\n    refetchInterval: 10000\n  });\n\n  const { data: taxChangeLogs = [] } = useQuery({\n    queryKey: ['/api/tax-change-logs'],\n    queryFn: async () => {\n      const res = await fetch('/api/tax-change-logs', { credentials: 'include' });\n      if (!res.ok) return [];\n      return res.json();\n    },\n    refetchInterval: 30000\n  });\n\n  const { data: inventoryMovements = [] } = useQuery({\n    queryKey: ['/api/inventory-movement-logs', dateRange.from?.toISOString(), dateRange.to?.toISOString()],\n    queryFn: async () => {\n      const url = buildQueryUrl('/api/inventory-movement-logs', dateRange.from, dateRange.to);\n      const res = await fetch(url, { credentials: 'include' });\n      if (!res.ok) return [];\n      return res.json();\n    },\n    refetchInterval: 10000\n  });\n\n  const { data: staffActivity = [] } = useQuery({\n    queryKey: ['/api/staff-activity-summary', dateRange.from?.toISOString(), dateRange.to?.toISOString()],\n    queryFn: async () => {\n      const url = buildQueryUrl('/api/staff-activity-summary', dateRange.from, dateRange.to);\n      const res = await fetch(url, { credentials: 'include' });\n      if (!res.ok) return [];\n      return res.json();\n    },\n    refetchInterval: 10000\n  });\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/owner\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"heading-audit-transparency\">Audit & Transparency</h1>\n            <p className=\"text-muted-foreground\">Complete visibility into all hotel operations and changes</p>\n          </div>\n        </div>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\" data-testid=\"button-date-range\">\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {dateRange.from && dateRange.to ? (\n                `${format(dateRange.from, \"PPP\")} - ${format(dateRange.to, \"PPP\")}`\n              ) : (\n                \"Select date range (optional)\"\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"end\">\n            <Calendar\n              mode=\"range\"\n              selected={{ from: dateRange.from, to: dateRange.to }}\n              onSelect={(range) => setDateRange({ from: range?.from, to: range?.to })}\n              numberOfMonths={2}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n            <History className=\"mr-2 h-4 w-4\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"financial\" data-testid=\"tab-financial\">\n            <DollarSign className=\"mr-2 h-4 w-4\" />\n            Financial Activity\n          </TabsTrigger>\n          <TabsTrigger value=\"maintenance\" data-testid=\"tab-maintenance\">\n            <Settings className=\"mr-2 h-4 w-4\" />\n            Maintenance Approvals\n          </TabsTrigger>\n          <TabsTrigger value=\"price-changes\" data-testid=\"tab-price-changes\">\n            <TrendingUp className=\"mr-2 h-4 w-4\" />\n            Price Changes\n          </TabsTrigger>\n          <TabsTrigger value=\"inventory\" data-testid=\"tab-inventory\">\n            <Package className=\"mr-2 h-4 w-4\" />\n            Inventory Movements\n          </TabsTrigger>\n          <TabsTrigger value=\"staff\" data-testid=\"tab-staff\">\n            <Users className=\"mr-2 h-4 w-4\" />\n            Staff Activity\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card data-testid=\"card-total-logs\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Audit Logs</CardTitle>\n                <FileText className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-audit-count\">{auditLogs.length}</div>\n                <p className=\"text-xs text-muted-foreground\">In selected period</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-price-changes\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Price Changes</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-price-changes\">{priceChangeLogs.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Items updated</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-inventory-movements\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Inventory Movements</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-inventory-count\">{inventoryMovements.length}</div>\n                <p className=\"text-xs text-muted-foreground\">Transactions recorded</p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-active-staff\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Active Staff</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-staff-count\">\n                  {new Set(staffActivity.map((s: any) => s.userId)).size}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Performed actions</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Audit Logs</CardTitle>\n              <CardDescription>Latest system activities and changes</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {auditLogs.slice(0, 10).map((log: any) => (\n                  <div key={log.id} className=\"flex items-start justify-between border-b pb-4\" data-testid={`log-${log.id}`}>\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-log-action-${log.id}`}>\n                        {log.action} - {log.resourceType}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-log-time-${log.id}`}>\n                        {new Date(log.createdAt).toLocaleString()}\n                      </p>\n                    </div>\n                    <Badge variant={log.success ? \"default\" : \"destructive\"} data-testid={`badge-log-status-${log.id}`}>\n                      {log.success ? \"Success\" : \"Failed\"}\n                    </Badge>\n                  </div>\n                ))}\n                {auditLogs.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-logs\">\n                    No audit logs found in the selected period.\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"financial\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Financial Transaction History</CardTitle>\n              <CardDescription>Complete audit trail of all financial transactions with creator information</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredTransactions.map((txn: any) => (\n                  <div key={txn.id} className=\"flex items-start justify-between border-b pb-4\" data-testid={`transaction-${txn.id}`}>\n                    <div className=\"space-y-1 flex-1\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-txn-purpose-${txn.id}`}>\n                        {txn.purpose || 'Transaction'}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                        <span data-testid={`text-txn-type-${txn.id}`}>Type: {txn.txnType?.replace(/_/g, ' ')}</span>\n                        <span data-testid={`text-txn-amount-${txn.id}`}>\n                          Amount: NPR {parseFloat(txn.amount || 0).toLocaleString()}\n                        </span>\n                        {txn.paymentMethod && (\n                          <span data-testid={`text-payment-method-${txn.id}`}>\n                            Method: {txn.paymentMethod}\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-created-by-${txn.id}`}>\n                        Created by: {txn.creator?.username || 'Unknown'} ({txn.creator?.role?.replace(/_/g, ' ') || 'N/A'}) on{\" \"}\n                        {new Date(txn.createdAt).toLocaleString()}\n                      </p>\n                      {txn.reference && (\n                        <p className=\"text-xs text-muted-foreground\" data-testid={`text-reference-${txn.id}`}>\n                          Reference: {txn.reference}\n                        </p>\n                      )}\n                    </div>\n                    <Badge \n                      variant={txn.txnType === 'revenue' || txn.txnType?.includes('_in') ? 'default' : txn.txnType === 'expense' || txn.txnType?.includes('_out') ? 'destructive' : 'secondary'}\n                      data-testid={`badge-txn-type-${txn.id}`}\n                    >\n                      {formatCurrency(parseFloat(txn.amount || 0))}\n                    </Badge>\n                  </div>\n                ))}\n                {filteredTransactions.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-transactions\">\n                    No financial transactions found.\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"maintenance\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Maintenance Request History</CardTitle>\n              <CardDescription>Track all maintenance requests with approval status and history</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredMaintenance.map((request: any) => (\n                  <div key={request.id} className=\"flex items-start justify-between border-b pb-4\" data-testid={`maintenance-${request.id}`}>\n                    <div className=\"space-y-1 flex-1\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-request-title-${request.id}`}>\n                        {request.title}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Location: {request.location || 'N/A'}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-reported-by-${request.id}`}>\n                        Reported by: {request.reportedBy?.username || 'Unknown'} ({request.reportedBy?.role?.name?.replace(/_/g, ' ') || 'N/A'})\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Priority: <Badge variant={request.priority === 'high' ? 'destructive' : request.priority === 'medium' ? 'default' : 'secondary'}>{request.priority}</Badge>\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-request-date-${request.id}`}>\n                        Submitted: {new Date(request.createdAt).toLocaleString()}\n                      </p>\n                    </div>\n                    <Badge \n                      variant={\n                        request.status === 'approved' ? 'default' : \n                        request.status === 'resolved' ? 'secondary' :\n                        request.status === 'declined' ? 'destructive' : \n                        'outline'\n                      }\n                      data-testid={`badge-status-${request.id}`}\n                    >\n                      {request.status?.toUpperCase() || 'PENDING'}\n                    </Badge>\n                  </div>\n                ))}\n                {filteredMaintenance.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-maintenance\">\n                    No maintenance requests found.\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"price-changes\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Price Change History</CardTitle>\n              <CardDescription>Track all pricing modifications with who made them</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {priceChangeLogs.map((log: any) => (\n                  <div key={log.id} className=\"flex items-start justify-between border-b pb-4\" data-testid={`price-change-${log.id}`}>\n                    <div className=\"space-y-1 flex-1\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-item-name-${log.id}`}>\n                        {log.itemName} ({log.itemType})\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                        <span data-testid={`text-old-price-${log.id}`}>\n                          Old: NPR {parseFloat(log.previousPrice || 0).toLocaleString()}\n                        </span>\n                        <span>→</span>\n                        <span data-testid={`text-new-price-${log.id}`}>\n                          New: NPR {parseFloat(log.newPrice || 0).toLocaleString()}\n                        </span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-changed-by-${log.id}`}>\n                        Changed by: {log.changedBy?.username} ({log.changedBy?.role}) on{\" \"}\n                        {new Date(log.createdAt).toLocaleString()}\n                      </p>\n                    </div>\n                    <Badge \n                      variant={parseFloat(log.newPrice) > parseFloat(log.previousPrice) ? \"default\" : \"secondary\"}\n                      data-testid={`badge-price-trend-${log.id}`}\n                    >\n                      {parseFloat(log.newPrice) > parseFloat(log.previousPrice) ? \"Increase\" : \"Decrease\"}\n                    </Badge>\n                  </div>\n                ))}\n                {priceChangeLogs.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-price-changes\">\n                    No price changes recorded.\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {taxChangeLogs.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Tax Configuration Changes</CardTitle>\n                <CardDescription>History of tax rate modifications</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {taxChangeLogs.map((log: any) => (\n                    <div key={log.id} className=\"flex items-start justify-between border-b pb-4\" data-testid={`tax-change-${log.id}`}>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm font-medium\" data-testid={`text-tax-type-${log.id}`}>{log.taxType}</p>\n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                          <span data-testid={`text-old-tax-${log.id}`}>Old: {log.previousPercent}%</span>\n                          <span>→</span>\n                          <span data-testid={`text-new-tax-${log.id}`}>New: {log.newPercent}%</span>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground\" data-testid={`text-tax-changed-by-${log.id}`}>\n                          Changed by: {log.changedBy?.username} on {new Date(log.createdAt).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"inventory\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Inventory Movement Tracking</CardTitle>\n              <CardDescription>Detailed logs of all stock movements with responsible persons</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {inventoryMovements.map((movement: any) => (\n                  <div key={movement.id} className=\"flex items-start justify-between border-b pb-4\" data-testid={`inventory-movement-${movement.id}`}>\n                    <div className=\"space-y-1 flex-1\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-item-${movement.id}`}>\n                        {movement.item?.name} ({movement.item?.sku})\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                        <span data-testid={`text-qty-${movement.id}`}>\n                          Qty: {movement.qtyPackage} {movement.item?.unit}\n                        </span>\n                        {movement.department && (\n                          <span data-testid={`text-dept-${movement.id}`}>Dept: {movement.department}</span>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-recorded-by-${movement.id}`}>\n                        Recorded by: {movement.recordedBy?.username} ({movement.recordedBy?.role})\n                        {movement.issuedTo && ` | Issued to: ${movement.issuedTo.username} (${movement.issuedTo.role})`}\n                      </p>\n                      {movement.notes && (\n                        <p className=\"text-xs text-muted-foreground\" data-testid={`text-notes-${movement.id}`}>\n                          Notes: {movement.notes}\n                        </p>\n                      )}\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-time-${movement.id}`}>\n                        {new Date(movement.createdAt).toLocaleString()}\n                      </p>\n                    </div>\n                    <Badge data-testid={`badge-transaction-type-${movement.id}`}>\n                      {movement.transactionType}\n                    </Badge>\n                  </div>\n                ))}\n                {inventoryMovements.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-inventory\">\n                    No inventory movements recorded.\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"staff\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Staff Activity Summary</CardTitle>\n              <CardDescription>Overview of actions performed by each staff member</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {staffActivity.map((activity: any, index: number) => (\n                  <div key={index} className=\"flex items-start justify-between border-b pb-4\" data-testid={`staff-activity-${index}`}>\n                    <div className=\"space-y-1 flex-1\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-staff-${index}`}>\n                        {activity.username} ({activity.role})\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-activity-${index}`}>\n                        {activity.action} on {activity.resourceType}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-last-${index}`}>\n                        Last activity: {new Date(activity.lastActivity).toLocaleString()}\n                      </p>\n                    </div>\n                    <Badge data-testid={`badge-count-${index}`}>{activity.count} times</Badge>\n                  </div>\n                ))}\n                {staffActivity.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-staff-activity\">\n                    No staff activity recorded.\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":25395},"tests/test-authenticated-attacks.ts":{"content":"/**\n * AUTHENTICATED ATTACK TEST SUITE\n * Tests protected endpoints with valid sessions to find authorization bugs\n */\n\nconst API_BASE = process.env.REPLIT_DEV_DOMAIN \n  ? `https://${process.env.REPLIT_DEV_DOMAIN}` \n  : 'http://localhost:5000';\n\ninterface Session {\n  cookie: string;\n  user: any;\n}\n\nasync function login(username: string, password: string): Promise<Session | null> {\n  try {\n    const response = await fetch(`${API_BASE}/api/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n      credentials: 'include'\n    });\n    \n    if (!response.ok) return null;\n    \n    const user = await response.json();\n    const cookie = response.headers.get('set-cookie') || '';\n    \n    return { cookie, user };\n  } catch (error) {\n    console.error(`Login failed for ${username}:`, error);\n    return null;\n  }\n}\n\nasync function testWithSession(session: Session, method: string, url: string, body: any, testName: string) {\n  try {\n    const headers: any = { 'Content-Type': 'application/json' };\n    if (session.cookie) headers['Cookie'] = session.cookie;\n    \n    const response = await fetch(`${API_BASE}${url}`, {\n      method,\n      headers,\n      body: body ? JSON.stringify(body) : undefined,\n      credentials: 'include'\n    });\n    \n    const text = await response.text();\n    let data;\n    try {\n      data = JSON.parse(text);\n    } catch {\n      data = text.substring(0, 100);\n    }\n    \n    const status = response.status >= 400 ? '❌' : '✅';\n    console.log(`${status} [${response.status}] ${testName}`);\n    if (response.status >= 400) {\n      console.log(`   Response: ${JSON.stringify(data).substring(0, 100)}`);\n    }\n    \n    return { response, data };\n  } catch (error) {\n    console.error(`💥 CRASH: ${testName}:`, error);\n    return { error };\n  }\n}\n\nasync function runAuthenticatedAttacks() {\n  console.log('🔐 STARTING AUTHENTICATED ATTACK TEST SUITE 🔐\\n');\n  \n  // Login as different users\n  console.log('=== LOGGING IN AS DIFFERENT USERS ===\\n');\n  const manager = await login('manager', 'manager');\n  const frontDesk = await login('sita', 'sitasita');\n  const waiter = await login('waiter', 'waiter');\n  const barista = await login('barista', 'barista');\n  const storekeeper = await login('store', 'storekeeper');\n  \n  if (!manager || !frontDesk || !waiter) {\n    console.error('Failed to login! Aborting tests.');\n    return;\n  }\n  \n  console.log('✅ Manager logged in:', manager.user.username, 'Hotel:', manager.user.hotelId);\n  console.log('✅ Front Desk logged in:', frontDesk.user.username, 'Hotel:', frontDesk.user.hotelId);\n  console.log('✅ Waiter logged in:', waiter.user.username, 'Hotel:', waiter.user.hotelId);\n  \n  // Fake hotel ID for cross-hotel attacks\n  const fakeHotelId = '00000000-0000-0000-0000-000000000000';\n  const realHotelId = manager.user.hotelId;\n  \n  console.log('\\n=== ATTACKING AUTHORIZATION - CROSS-HOTEL ACCESS ===\\n');\n  \n  // Try to access different hotel's data\n  await testWithSession(manager, 'GET', `/api/hotels/${fakeHotelId}/users`, null, \n    'Manager accessing fake hotel users');\n  await testWithSession(manager, 'GET', `/api/hotels/${fakeHotelId}/rooms`, null, \n    'Manager accessing fake hotel rooms');\n  await testWithSession(manager, 'GET', `/api/hotels/${fakeHotelId}/inventory`, null, \n    'Manager accessing fake hotel inventory');\n  \n  console.log('\\n=== ATTACKING PRIVILEGE ESCALATION ===\\n');\n  \n  // Front desk trying to perform manager actions\n  await testWithSession(frontDesk, 'POST', `/api/hotels/${realHotelId}/users`, {\n    username: 'hacker',\n    email: 'hack@test.com',\n    roleId: 2, // Try to create owner\n    passwordHash: 'fake'\n  }, 'Front Desk creating owner user (should fail)');\n  \n  await testWithSession(frontDesk, 'DELETE', `/api/hotels/${realHotelId}/users/${manager.user.id}`, null,\n    'Front Desk deleting manager (should fail)');\n  \n  // Waiter trying manager actions\n  await testWithSession(waiter, 'POST', `/api/hotels/current/transactions`, {\n    amount: 50000,\n    txnType: 'income',\n    purpose: 'Fake revenue'\n  }, 'Waiter creating transaction (should fail)');\n  \n  console.log('\\n=== ATTACKING MAINTENANCE REQUEST REASSIGNMENT ===\\n');\n  \n  // First create a maintenance request as manager\n  const createMR = await testWithSession(manager, 'POST', '/api/maintenance-requests', {\n    title: 'Test Request',\n    location: 'Room 101',\n    description: 'Test',\n    hotelId: realHotelId,\n    reportedBy: manager.user.id,\n    assignedTo: waiter.user.id\n  }, 'Manager creating maintenance request');\n  \n  if (createMR.data && createMR.data.id) {\n    const mrId = createMR.data.id;\n    \n    // Waiter trying to reassign their own task to someone else (should fail)\n    await testWithSession(waiter, 'PUT', `/api/maintenance-requests/${mrId}`, {\n      assignedTo: frontDesk.user.id\n    }, 'Waiter reassigning maintenance request (should fail - not supervisor)');\n    \n    // Barista (not assigned) trying to update request (should fail)\n    if (barista) {\n      await testWithSession(barista, 'PUT', `/api/maintenance-requests/${mrId}`, {\n        status: 'completed'\n      }, 'Barista updating unassigned request (should fail)');\n    }\n    \n    // Manager reassigning (should succeed)\n    await testWithSession(manager, 'PUT', `/api/maintenance-requests/${mrId}`, {\n      assignedTo: storekeeper?.user.id || waiter.user.id\n    }, 'Manager reassigning maintenance request (should succeed)');\n  }\n  \n  console.log('\\n=== ATTACKING FINANCIAL SYSTEM ===\\n');\n  \n  // Create a transaction as manager first\n  const createTxn = await testWithSession(manager, 'POST', '/api/hotels/current/transactions', {\n    amount: 1000,\n    txnType: 'expense',\n    purpose: 'Test expense',\n    paymentMethod: 'cash'\n  }, 'Manager creating transaction');\n  \n  if (createTxn.data && createTxn.data.id) {\n    const txnId = createTxn.data.id;\n    \n    // Waiter trying to void transaction (should fail)\n    await testWithSession(waiter, 'POST', `/api/transactions/${txnId}/void`, {\n      reason: 'Waiter trying to void - this is a 20+ character reason to bypass validation'\n    }, 'Waiter voiding transaction (should fail - not manager/owner)');\n    \n    // Manager voiding with short reason (should fail)\n    await testWithSession(manager, 'POST', `/api/transactions/${txnId}/void`, {\n      reason: 'short'\n    }, 'Manager voiding with short reason (should fail - < 15 chars)');\n    \n    // Manager voiding with proper reason (should succeed)\n    await testWithSession(manager, 'POST', `/api/transactions/${txnId}/void`, {\n      reason: 'Testing void functionality - legitimate business reason for voiding this transaction'\n    }, 'Manager voiding with valid reason (should succeed)');\n    \n    // Try to void already voided transaction (should fail)\n    await testWithSession(manager, 'POST', `/api/transactions/${txnId}/void`, {\n      reason: 'Trying to void already voided transaction - should fail double void prevention'\n    }, 'Manager double-voiding transaction (should fail)');\n  }\n  \n  console.log('\\n=== ATTACKING USER SELF-DEACTIVATION ===\\n');\n  \n  // Try to deactivate self\n  await testWithSession(manager, 'PATCH', `/api/hotels/${realHotelId}/users/${manager.user.id}`, {\n    isActive: false\n  }, 'Manager deactivating self (should fail)');\n  \n  console.log('\\n=== ATTACKING EDGE CASES ===\\n');\n  \n  // Try operations with invalid UUIDs\n  await testWithSession(manager, 'PUT', '/api/maintenance-requests/not-a-uuid', {\n    status: 'completed'\n  }, 'Update with invalid UUID');\n  \n  await testWithSession(manager, 'DELETE', `/api/hotels/${realHotelId}/users/not-a-uuid`, null,\n    'Delete with invalid UUID');\n  \n  // Try massive transaction amounts\n  await testWithSession(manager, 'POST', '/api/hotels/current/transactions', {\n    amount: 999999999999999999,\n    txnType: 'expense'\n  }, 'Massive transaction amount');\n  \n  // Try negative amounts\n  await testWithSession(manager, 'POST', '/api/hotels/current/transactions', {\n    amount: -50000,\n    txnType: 'income'\n  }, 'Negative transaction amount');\n  \n  console.log('\\n🔐 AUTHENTICATED ATTACK TEST SUITE COMPLETE 🔐');\n}\n\nrunAuthenticatedAttacks().catch(console.error);\n","size_bytes":8224},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupWebSocket } from \"./websocket\";\nimport cron from \"node-cron\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { kotOrders, type KotOrder, users } from \"@shared/schema\";\nimport { and, eq, isNull } from \"drizzle-orm\";\n\n// Set timezone to Nepal\nprocess.env.TZ = 'Asia/Kathmandu';\n\nconst app = express();\napp.set('etag', false);\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Setup WebSocket for real-time updates\n  setupWebSocket(server);\n  log('WebSocket server initialized');\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Set up KOT order status sync cron job - runs every 5 minutes\n  cron.schedule('*/5 * * * *', async () => {\n    try {\n      log('Running periodic KOT order status sync...');\n      \n      // Get all active KOT orders (not completed or cancelled)\n      const activeOrders = await db\n        .select()\n        .from(kotOrders);\n      \n      // Filter to active orders\n      const ordersToSync = activeOrders.filter(\n        (order: KotOrder) => order.status !== 'completed' && order.status !== 'cancelled'\n      );\n      \n      // Sync each order\n      for (const order of ordersToSync) {\n        await storage.updateKotOrderStatus(order.id);\n      }\n      \n      log(`KOT sync completed for ${ordersToSync.length} orders`);\n    } catch (error) {\n      console.error('Error in KOT sync cron job:', error);\n    }\n  });\n  \n  log('KOT order status sync cron job scheduled (every 5 minutes)');\n\n  // Set up annual leave balance reset cron job - runs on January 1st at midnight\n  cron.schedule('0 0 1 1 *', async () => {\n    try {\n      log('Running annual leave balance reset...');\n      \n      const newYear = new Date().getFullYear();\n      \n      // Get all active users\n      const activeUsers = await db\n        .select()\n        .from(users)\n        .where(and(\n          eq(users.isActive, true),\n          isNull(users.deletedAt)\n        ));\n      \n      let resetCount = 0;\n      \n      // Initialize leave balances for each user for the new year\n      for (const user of activeUsers) {\n        if (user.hotelId) {\n          await storage.initializeLeaveBalances(user.id, user.hotelId, newYear);\n          resetCount++;\n        }\n      }\n      \n      log(`Leave balances reset completed for ${resetCount} users for year ${newYear}`);\n    } catch (error) {\n      console.error('Error in annual leave balance reset cron job:', error);\n    }\n  });\n  \n  log('Annual leave balance reset cron job scheduled (every January 1st)');\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":4475},"server/sanitize.ts":{"content":"/**\n * Sanitizes a string input to prevent XSS attacks by removing HTML tags and scripts\n * Uses regex to strip all HTML/XML tags from the input\n * @param input - The string to sanitize\n * @returns Sanitized string with HTML/script tags removed\n */\nexport function sanitizeInput(input: string): string {\n  if (typeof input !== 'string') {\n    return input;\n  }\n  \n  // Remove all HTML tags using regex\n  // This strips <script>, <img>, and all other HTML tags\n  return input\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\n    .replace(/<[^>]+>/g, '') // Remove all HTML tags\n    .replace(/&lt;/g, '<').replace(/&gt;/g, '>') // Decode HTML entities\n    .replace(/<[^>]+>/g, '') // Remove again in case entities were decoded\n    .trim();\n}\n\n/**\n * Sanitizes all string values in an object recursively\n * @param obj - The object to sanitize\n * @returns New object with sanitized string values\n */\nexport function sanitizeObject<T extends Record<string, any>>(obj: T): T {\n  const sanitized: any = {};\n  \n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === 'string') {\n      sanitized[key] = sanitizeInput(value);\n    } else if (value && typeof value === 'object' && !Array.isArray(value)) {\n      sanitized[key] = sanitizeObject(value);\n    } else if (Array.isArray(value)) {\n      sanitized[key] = value.map(item => \n        typeof item === 'string' ? sanitizeInput(item) :\n        typeof item === 'object' ? sanitizeObject(item) :\n        item\n      );\n    } else {\n      sanitized[key] = value;\n    }\n  }\n  \n  return sanitized as T;\n}\n","size_bytes":1607},"client/src/components/modals/final-billing-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Loader2 } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport type { SelectHallBooking } from \"@shared/schema\";\n\nconst finalBillingSchema = z.object({\n  actualNumberOfPeople: z.number().min(1, \"Number of people is required\"),\n  finalPaymentMethod: z.string().min(1, \"Payment method is required\"),\n  finalPaymentAmount: z.number().min(0, \"Payment amount must be positive\")\n});\n\ntype FinalBillingFormData = z.infer<typeof finalBillingSchema>;\n\ninterface FinalBillingModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking: SelectHallBooking | null;\n  onSuccess: () => void;\n}\n\nexport function FinalBillingModal({ open, onOpenChange, booking, onSuccess }: FinalBillingModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [calculatedTotal, setCalculatedTotal] = useState(0);\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    enabled: !!user?.hotelId && open\n  });\n\n  const form = useForm<FinalBillingFormData>({\n    resolver: zodResolver(finalBillingSchema),\n    defaultValues: {\n      actualNumberOfPeople: booking?.numberOfPeople || 1,\n      finalPaymentMethod: \"\",\n      finalPaymentAmount: 0\n    }\n  });\n\n  const watchedActualPeople = form.watch(\"actualNumberOfPeople\");\n  const watchedFinalPayment = form.watch(\"finalPaymentAmount\");\n\n  // Calculate final total (using booking's total amount)\n  const calculateFinalTotal = () => {\n    if (!booking) return 0;\n\n    const bookingTotal = Number(booking.totalAmount || 0);\n    setCalculatedTotal(bookingTotal);\n    return bookingTotal;\n  };\n\n  // Reset form when modal opens\n  useEffect(() => {\n    if (open && booking) {\n      form.reset({\n        actualNumberOfPeople: booking.numberOfPeople || 1,\n        finalPaymentMethod: \"\",\n        finalPaymentAmount: 0\n      });\n    }\n  }, [open, booking?.id]);\n\n  // Recalculate when values change\n  useEffect(() => {\n    if (open && booking) {\n      const total = calculateFinalTotal();\n      const advance = Number(booking.advancePaid || 0);\n      const balance = total - advance;\n      form.setValue(\"finalPaymentAmount\", Math.max(0, balance));\n    }\n  }, [watchedActualPeople, open, booking]);\n\n  const finalizeBillingMutation = useMutation({\n    mutationFn: async (data: FinalBillingFormData) => {\n      if (!booking) throw new Error(\"No booking selected\");\n\n      const finalTotal = calculateFinalTotal();\n      const advancePaid = Number(booking.advancePaid || 0);\n      const balanceDue = finalTotal - advancePaid;\n\n      const updateData = {\n        actualNumberOfPeople: data.actualNumberOfPeople,\n        totalAmount: finalTotal.toFixed(2),\n        balanceDue: balanceDue.toFixed(2),\n        paymentMethod: data.finalPaymentMethod,\n        status: \"completed\"\n      };\n\n      // Update booking\n      await apiRequest(\"PATCH\", `/api/hotels/${user?.hotelId}/hall-bookings/${booking.id}`, updateData);\n\n      // Record final payment\n      if (data.finalPaymentAmount > 0) {\n        await apiRequest(\"POST\", `/api/hotels/${user?.hotelId}/booking-payments`, {\n          bookingId: booking.id,\n          amount: data.finalPaymentAmount.toFixed(2),\n          paymentMethod: data.finalPaymentMethod,\n          notes: \"Final payment\"\n        });\n      }\n    },\n    onSuccess: () => {\n      toast({ title: \"Billing finalized successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\"] });\n      form.reset();\n      onSuccess();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to finalize billing\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  if (!booking) return null;\n\n  const handleSubmit = (data: FinalBillingFormData) => {\n    finalizeBillingMutation.mutate(data);\n  };\n\n  const bookingTotal = Number(booking.totalAmount || 0);\n  const advancePaid = Number(booking.advancePaid || 0);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Final Billing - {booking.customerName}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <Card className=\"p-4 bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n            <h3 className=\"font-semibold mb-2\">Booking Summary</h3>\n            <div className=\"space-y-1 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Estimated Guest Count:</span>\n                <span className=\"font-medium\">{booking.numberOfPeople} people</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Quotation Amount:</span>\n                <span className=\"font-medium\">{formatCurrency(bookingTotal)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Advance Paid:</span>\n                <span className=\"font-medium\">{formatCurrency(advancePaid)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Payment Method:</span>\n                <span className=\"font-medium\">{booking.paymentMethod || \"N/A\"}</span>\n              </div>\n              {(booking.foodServices && typeof booking.foodServices === 'string') ? (\n                <div className=\"mt-2 pt-2 border-t\">\n                  <span className=\"text-muted-foreground\">Services Included:</span>\n                  <p className=\"font-medium text-sm mt-1\">{booking.foodServices}</p>\n                </div>\n              ) : null}\n            </div>\n          </Card>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"actualNumberOfPeople\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Actual Number of People (Event Day)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min={1}\n                        {...field}\n                        onChange={(e) => {\n                          field.onChange(parseInt(e.target.value) || 1);\n                          setTimeout(calculateFinalTotal, 0);\n                        }}\n                        data-testid=\"input-actual-people\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Separator className=\"my-4\" />\n\n              <Card className=\"p-4 bg-muted\">\n                <h3 className=\"font-semibold mb-3\">Final Bill</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Total Amount:</span>\n                    <span>{formatCurrency(calculatedTotal)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-green-600 dark:text-green-400\">\n                    <span className=\"text-sm\">Advance Paid:</span>\n                    <span className=\"font-medium\">- {formatCurrency(advancePaid)}</span>\n                  </div>\n                  <Separator />\n                  <div className=\"flex justify-between text-lg font-bold text-primary\">\n                    <span>Balance Due:</span>\n                    <span>{formatCurrency(Math.max(0, calculatedTotal - advancePaid))}</span>\n                  </div>\n                </div>\n              </Card>\n\n              <FormField\n                control={form.control}\n                name=\"finalPaymentAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Final Payment Amount</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min={0}\n                        {...field}\n                        onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        data-testid=\"input-final-payment\"\n                      />\n                    </FormControl>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Balance due: {formatCurrency(Math.max(0, calculatedTotal - advancePaid))}\n                    </p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"finalPaymentMethod\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Final Payment Method</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-final-payment-method\">\n                          <SelectValue placeholder=\"Select payment method\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"cheque\">Cheque</SelectItem>\n                        <SelectItem value=\"pos\">POS/Card</SelectItem>\n                        <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => onOpenChange(false)}\n                  data-testid=\"button-cancel-billing\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={finalizeBillingMutation.isPending}\n                  data-testid=\"button-finalize-billing\"\n                >\n                  {finalizeBillingMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Finalize Billing\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11609},"client/src/components/common/password-reset-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\nconst passwordResetSchema = z.object({\n  oldPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\")\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype PasswordResetData = z.infer<typeof passwordResetSchema>;\n\ninterface PasswordResetModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function PasswordResetModal({ isOpen, onClose }: PasswordResetModalProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showOldPassword, setShowOldPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const form = useForm<PasswordResetData>({\n    resolver: zodResolver(passwordResetSchema),\n    defaultValues: {\n      oldPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    }\n  });\n\n  const onSubmit = async (data: PasswordResetData) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          oldPassword: data.oldPassword,\n          newPassword: data.newPassword\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to reset password\");\n      }\n      \n      toast({\n        title: \"Password Changed Successfully\",\n        description: \"Your password has been updated successfully.\",\n      });\n      \n      form.reset();\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Password Change Failed\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-password-reset\">\n        <DialogHeader>\n          <DialogTitle>Change Password</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"oldPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Current Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input \n                        {...field} \n                        type={showOldPassword ? \"text\" : \"password\"} \n                        placeholder=\"Enter current password\" \n                        data-testid=\"input-old-password\" \n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowOldPassword(!showOldPassword)}\n                        data-testid=\"button-toggle-old-password\"\n                      >\n                        {showOldPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>New Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input \n                        {...field} \n                        type={showNewPassword ? \"text\" : \"password\"} \n                        placeholder=\"Enter new password\" \n                        data-testid=\"input-new-password\" \n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowNewPassword(!showNewPassword)}\n                        data-testid=\"button-toggle-new-password\"\n                      >\n                        {showNewPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input \n                        {...field} \n                        type={showConfirmPassword ? \"text\" : \"password\"} \n                        placeholder=\"Confirm new password\" \n                        data-testid=\"input-confirm-password\" \n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        data-testid=\"button-toggle-confirm-password\"\n                      >\n                        {showConfirmPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex space-x-3\">\n              <Button \n                type=\"submit\" \n                className=\"flex-1\" \n                disabled={isSubmitting}\n                data-testid=\"button-change-password\"\n              >\n                {isSubmitting ? \"Changing...\" : \"Change Password\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"secondary\" \n                className=\"flex-1\" \n                onClick={onClose}\n                data-testid=\"button-cancel-change\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7952},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/dashboard/my-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, User, Mail, Phone, Shield, LogOut } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\n\nconst passwordChangeSchema = z.object({\n  oldPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\")\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype PasswordChangeData = z.infer<typeof passwordChangeSchema>;\n\nexport default function MyProfile() {\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showOldPassword, setShowOldPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const form = useForm<PasswordChangeData>({\n    resolver: zodResolver(passwordChangeSchema),\n    defaultValues: {\n      oldPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    }\n  });\n\n  const onSubmit = async (data: PasswordChangeData) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          oldPassword: data.oldPassword,\n          newPassword: data.newPassword\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to change password\");\n      }\n      \n      toast({\n        title: \"Password Changed Successfully\",\n        description: \"Your password has been updated successfully.\",\n      });\n      \n      form.reset();\n    } catch (error: any) {\n      toast({\n        title: \"Password Change Failed\",\n        description: error.message || \"Please check your current password and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <DashboardLayout title=\"My Profile\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\" data-testid=\"heading-my-profile\">My Profile</h2>\n          <p className=\"text-muted-foreground\">\n            View your profile information and manage your account settings.\n          </p>\n        </div>\n\n        {/* User Information Card */}\n        <Card data-testid=\"card-user-information\">\n          <CardHeader>\n            <CardTitle>User Information</CardTitle>\n            <CardDescription>Your account details</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-primary/10 p-2 rounded-lg\">\n                  <User className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Username</p>\n                  <p className=\"font-medium\" data-testid=\"text-username\">{user?.username}</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-primary/10 p-2 rounded-lg\">\n                  <Shield className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Role</p>\n                  <p className=\"font-medium\" data-testid=\"text-role\">\n                    {user?.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </p>\n                </div>\n              </div>\n\n              {user?.email && (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-primary/10 p-2 rounded-lg\">\n                    <Mail className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Email</p>\n                    <p className=\"font-medium\" data-testid=\"text-email\">{user.email}</p>\n                  </div>\n                </div>\n              )}\n\n              {user?.phone && (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-primary/10 p-2 rounded-lg\">\n                    <Phone className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Phone</p>\n                    <p className=\"font-medium\" data-testid=\"text-phone\">{user.phone}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Change Password Card */}\n        <Card data-testid=\"card-change-password\">\n          <CardHeader>\n            <CardTitle>Change Password</CardTitle>\n            <CardDescription>Update your password to keep your account secure</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"oldPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showOldPassword ? \"text\" : \"password\"} \n                            placeholder=\"Enter current password\" \n                            data-testid=\"input-old-password\" \n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowOldPassword(!showOldPassword)}\n                            data-testid=\"button-toggle-old-password\"\n                          >\n                            {showOldPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showNewPassword ? \"text\" : \"password\"} \n                            placeholder=\"Enter new password\" \n                            data-testid=\"input-new-password\" \n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowNewPassword(!showNewPassword)}\n                            data-testid=\"button-toggle-new-password\"\n                          >\n                            {showNewPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showConfirmPassword ? \"text\" : \"password\"} \n                            placeholder=\"Confirm new password\" \n                            data-testid=\"input-confirm-password\" \n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-confirm-password\"\n                          >\n                            {showConfirmPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  disabled={isSubmitting}\n                  data-testid=\"button-change-password\"\n                >\n                  {isSubmitting ? \"Changing Password...\" : \"Change Password\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Logout Section */}\n        <Card data-testid=\"card-logout\">\n          <CardHeader>\n            <CardTitle>Session Management</CardTitle>\n            <CardDescription>Manage your account session</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Separator className=\"mb-4\" />\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Logout</p>\n                <p className=\"text-sm text-muted-foreground\">Sign out from your account</p>\n              </div>\n              <Button \n                variant=\"destructive\" \n                onClick={handleLogout}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-logout-profile\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":12222},"client/src/pages/dashboard/restaurant-bar-manager/menu-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Utensils, Plus, Coffee, Wine, Cake, X, Beaker } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nexport default function MenuManagement() {\n  const { confirm } = useConfirmDialog();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [isIngredientsDialogOpen, setIsIngredientsDialogOpen] = useState(false);\n  const [selectedMenuItem, setSelectedMenuItem] = useState<any>(null);\n  const [ingredients, setIngredients] = useState<Array<{inventoryItemId: string; quantity: number; unit?: string}>>([]);\n  const [newMenuItem, setNewMenuItem] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    categoryId: \"\",\n    active: true\n  });\n  const [newCategory, setNewCategory] = useState({ name: \"\" });\n\n  const queryClient = useQueryClient();\n\n  // Fetch menu items\n  const { data: menuItems = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch menu categories\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-categories\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch inventory items for ingredients\n  const { data: inventoryItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  // Create menu item mutation\n  const createMenuItemMutation = useMutation({\n    mutationFn: async (itemData: any) => {\n      const response = await fetch(\"/api/hotels/current/menu-items\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...itemData,\n          price: parseFloat(itemData.price),\n          categoryId: itemData.categoryId || null\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create menu item\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/menu-items\"] });\n      setIsAddDialogOpen(false);\n      setNewMenuItem({ name: \"\", description: \"\", price: \"\", categoryId: \"\", active: true });\n      toast.success(\"Menu item created successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Toggle active status mutation\n  const toggleActiveMutation = useMutation({\n    mutationFn: async ({ itemId, active }: { itemId: string; active: boolean }) => {\n      const response = await fetch(`/api/hotels/current/menu-items/${itemId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ active })\n      });\n      if (!response.ok) throw new Error(\"Failed to update menu item\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/menu-items\"] });\n      toast.success(\"Menu item status updated\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Create category mutation\n  const createCategoryMutation = useMutation({\n    mutationFn: async (categoryData: { name: string }) => {\n      const response = await fetch(\"/api/hotels/current/menu-categories\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(categoryData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create category\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/menu-categories\"] });\n      setIsCategoryDialogOpen(false);\n      setNewCategory({ name: \"\" });\n      toast.success(\"Category created successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Delete category mutation\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (categoryId: string) => {\n      const response = await fetch(`/api/hotels/current/menu-categories/${categoryId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to delete category\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/menu-categories\"] });\n      toast.success(\"Category deleted successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateMenuItem = () => {\n    if (!newMenuItem.name || !newMenuItem.price) {\n      toast.error(\"Please fill in name and price\");\n      return;\n    }\n\n    createMenuItemMutation.mutate(newMenuItem);\n  };\n\n  const handleToggleActive = (item: any) => {\n    toggleActiveMutation.mutate({\n      itemId: item.id,\n      active: !item.active\n    });\n  };\n\n  const handleDeleteMenuItem = async (item: any) => {\n    await confirm({\n      title: \"Delete Menu Item\",\n      description: `Are you sure you want to delete \"${item.name}\"?`,\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: async () => {\n        try {\n          const response = await fetch(`/api/hotels/current/menu-items/${item.id}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n          });\n          if (!response.ok) throw new Error(\"Failed to delete menu item\");\n          queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/menu-items\"] });\n          toast.success(\"Menu item deleted successfully\");\n        } catch (error: any) {\n          toast.error(error.message);\n        }\n      }\n    });\n  };\n\n  const handleCreateCategory = () => {\n    if (!newCategory.name.trim()) {\n      toast.error(\"Please enter a category name\");\n      return;\n    }\n    createCategoryMutation.mutate(newCategory);\n  };\n\n  const handleDeleteCategory = async (category: any) => {\n    await confirm({\n      title: \"Delete Category\",\n      description: `Are you sure you want to delete \"${category.name}\" category?`,\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: () => {\n        deleteCategoryMutation.mutate(category.id);\n      }\n    });\n  };\n\n  const handleManageIngredients = (item: any) => {\n    setSelectedMenuItem(item);\n    // Load existing ingredients from recipe if available\n    const existingIngredients = item.recipe?.ingredients || [];\n    setIngredients(existingIngredients);\n    setIsIngredientsDialogOpen(true);\n  };\n\n  const addIngredient = () => {\n    setIngredients([...ingredients, { inventoryItemId: \"\", quantity: 0, unit: \"\" }]);\n  };\n\n  const removeIngredient = (index: number) => {\n    setIngredients(ingredients.filter((_, i) => i !== index));\n  };\n\n  const updateIngredient = (index: number, field: string, value: any) => {\n    const updated = [...ingredients];\n    updated[index] = { ...updated[index], [field]: value };\n    setIngredients(updated);\n  };\n\n  const getUnitsForItem = (inventoryItemId: string) => {\n    const item = inventoryItems.find(i => i.id === inventoryItemId);\n    if (!item) return [];\n    \n    const category = item.measurementCategory || 'weight';\n    const baseUnit = item.baseUnit || 'kg';\n    \n    const weightUnits = ['mg', 'g', 'kg', 'oz', 'lb'];\n    const volumeUnits = ['ml', 'L', 'tsp', 'tbsp', 'cup', 'fl_oz'];\n    const countUnits = ['piece', 'dozen', 'pack'];\n    \n    let units: string[] = [];\n    if (category === 'weight') {\n      units = weightUnits;\n    } else if (category === 'volume') {\n      units = volumeUnits;\n    } else if (category === 'count') {\n      units = countUnits;\n    } else {\n      units = [baseUnit];\n    }\n    \n    if (item.conversionProfile && typeof item.conversionProfile === 'object') {\n      const customUnits = Object.keys(item.conversionProfile).filter(\n        k => k !== 'baseUnit' && k !== 'baseToKg' && k !== 'baseToL'\n      );\n      units = Array.from(new Set([...units, ...customUnits]));\n    }\n    \n    return units;\n  };\n\n  const getUnitLabel = (unit: string) => {\n    const labels: Record<string, string> = {\n      mg: \"mg\", g: \"g\", kg: \"kg\", oz: \"oz\", lb: \"lb\",\n      ml: \"ml\", L: \"L\", tsp: \"tsp\", tbsp: \"tbsp\", cup: \"cup\", fl_oz: \"fl oz\",\n      piece: \"piece\", dozen: \"dozen\", pack: \"pack\"\n    };\n    return labels[unit] || unit;\n  };\n\n  const saveIngredientsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/hotels/current/menu-items/${selectedMenuItem.id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          recipe: {\n            ingredients: ingredients.filter(ing => ing.inventoryItemId && ing.quantity > 0 && ing.unit)\n          }\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to save ingredients\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/menu-items\"] });\n      setIsIngredientsDialogOpen(false);\n      toast.success(\"Ingredients saved successfully with unit conversions\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const isBeverageItem = (item: any) => {\n    const categoryName = item.category?.name?.toLowerCase() || '';\n    return categoryName.includes('coffee') || \n           categoryName.includes('beverage') || \n           categoryName.includes('drink') ||\n           categoryName.includes('bar');\n  };\n\n  const getCategoryIcon = (categoryName: string) => {\n    const name = categoryName?.toLowerCase() || '';\n    if (name.includes('coffee') || name.includes('beverage')) return <Coffee className=\"h-4 w-4\" />;\n    if (name.includes('wine') || name.includes('alcohol') || name.includes('drink')) return <Wine className=\"h-4 w-4\" />;\n    if (name.includes('dessert') || name.includes('cake')) return <Cake className=\"h-4 w-4\" />;\n    return <Utensils className=\"h-4 w-4\" />;\n  };\n\n  const columns = [\n    { key: \"name\", label: \"Item Name\", sortable: true },\n    { \n      key: \"category\", \n      label: \"Category\", \n      render: (value: any) => value ? (\n        <div className=\"flex items-center space-x-2\">\n          {getCategoryIcon(value.name)}\n          <span>{value.name}</span>\n        </div>\n      ) : 'Uncategorized'\n    },\n    { \n      key: \"price\", \n      label: \"Price\", \n      sortable: true, \n      render: (value: any) => {\n        const numValue = Number(value);\n        return `रु${!isNaN(numValue) ? numValue.toFixed(2) : '0.00'}`;\n      }\n    },\n    { \n      key: \"active\", \n      label: \"Status\", \n      render: (value: boolean, row: any) => (\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            checked={value}\n            onCheckedChange={() => handleToggleActive(row)}\n            disabled={toggleActiveMutation.isPending}\n          />\n          <span className={`text-sm ${value ? 'text-green-600' : 'text-gray-600'}`}>\n            {value ? 'Active' : 'Inactive'}\n          </span>\n        </div>\n      )\n    }\n  ];\n\n  const handleManageIngredientsClick = (item: any) => {\n    if (!isBeverageItem(item)) {\n      toast.error(\"Ingredients can only be managed for beverage items (coffee, drinks, bar)\");\n      return;\n    }\n    handleManageIngredients(item);\n  };\n\n  const actions = [\n    {\n      label: \"Manage Ingredients\",\n      action: handleManageIngredientsClick,\n      variant: \"default\" as const\n    },\n    {\n      label: \"Delete\",\n      action: handleDeleteMenuItem,\n      variant: \"destructive\" as const\n    }\n  ];\n\n  const activeItems = menuItems.filter(item => item.active).length;\n  const totalItems = menuItems.length;\n  const avgPrice = menuItems.length > 0 \n    ? menuItems.reduce((sum, item) => sum + (Number(item.price) || 0), 0) / menuItems.length \n    : 0;\n\n  return (\n    <DashboardLayout title=\"Menu Management\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Items</p>\n                  <p className=\"text-2xl font-bold\">{totalItems}</p>\n                </div>\n                <Utensils className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Items</p>\n                  <p className=\"text-2xl font-bold\">{activeItems}</p>\n                </div>\n                <div className=\"h-8 w-8 rounded-full bg-green-100 flex items-center justify-center\">\n                  <div className=\"h-4 w-4 rounded-full bg-green-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Categories</p>\n                  <p className=\"text-2xl font-bold\">{categories.length}</p>\n                </div>\n                <Coffee className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Price</p>\n                  <p className=\"text-2xl font-bold\">रु{avgPrice.toFixed(0)}</p>\n                </div>\n                <Wine className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Categories Management */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Menu Categories</CardTitle>\n              <Button onClick={() => setIsCategoryDialogOpen(true)} size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Category\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {categories.length === 0 ? (\n                <p className=\"text-muted-foreground col-span-full text-center py-8\">\n                  No categories yet. Create your first category to organize your menu.\n                </p>\n              ) : (\n                categories.map((category) => (\n                  <Card key={category.id} className=\"relative\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getCategoryIcon(category.name)}\n                          <span className=\"font-medium\">{category.name}</span>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteCategory(category)}\n                          className=\"text-destructive hover:text-destructive hover:bg-destructive/10\"\n                        >\n                          Delete\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Menu Items Table */}\n        <DataTable\n          title=\"Menu Items\"\n          data={menuItems}\n          columns={columns}\n          actions={actions}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Add Menu Item\"\n          searchPlaceholder=\"Search menu items...\"\n        />\n\n        {/* Add Menu Item Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add Menu Item</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Item Name *</Label>\n                <Input\n                  id=\"name\"\n                  value={newMenuItem.name}\n                  onChange={(e) => setNewMenuItem({ ...newMenuItem, name: e.target.value })}\n                  placeholder=\"Enter item name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={newMenuItem.description}\n                  onChange={(e) => setNewMenuItem({ ...newMenuItem, description: e.target.value })}\n                  placeholder=\"Enter item description\"\n                  rows={3}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"price\">Price (रु) *</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={newMenuItem.price}\n                  onChange={(e) => setNewMenuItem({ ...newMenuItem, price: e.target.value })}\n                  placeholder=\"Enter price\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"category\">Category</Label>\n                <Select \n                  value={newMenuItem.categoryId} \n                  onValueChange={(value) => setNewMenuItem({ ...newMenuItem, categoryId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"active\"\n                  checked={newMenuItem.active}\n                  onCheckedChange={(checked) => setNewMenuItem({ ...newMenuItem, active: checked })}\n                />\n                <Label htmlFor=\"active\">Active (available for ordering)</Label>\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateMenuItem}\n                  disabled={createMenuItemMutation.isPending}\n                >\n                  {createMenuItemMutation.isPending ? \"Creating...\" : \"Create Item\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Add Category Dialog */}\n        <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add Menu Category</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"categoryName\">Category Name *</Label>\n                <Input\n                  id=\"categoryName\"\n                  value={newCategory.name}\n                  onChange={(e) => setNewCategory({ name: e.target.value })}\n                  placeholder=\"e.g., Appetizers, Main Course, Beverages\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsCategoryDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateCategory}\n                  disabled={createCategoryMutation.isPending}\n                >\n                  {createCategoryMutation.isPending ? \"Creating...\" : \"Create Category\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Manage Ingredients Dialog */}\n        <Dialog open={isIngredientsDialogOpen} onOpenChange={setIsIngredientsDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Beaker className=\"h-5 w-5\" />\n                Manage Ingredients - {selectedMenuItem?.name}\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Set ingredients for automatic inventory deduction when this item is ordered\n              </p>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              {ingredients.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No ingredients added yet. Click \"Add Ingredient\" to start.\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {ingredients.map((ingredient, index) => {\n                    const availableUnits = ingredient.inventoryItemId ? getUnitsForItem(ingredient.inventoryItemId) : [];\n                    const selectedItem = inventoryItems.find(i => i.id === ingredient.inventoryItemId);\n                    \n                    return (\n                      <div key={index} className=\"flex items-end gap-3 p-3 border rounded-lg\">\n                        <div className=\"flex-1\">\n                          <Label>Inventory Item *</Label>\n                          <Select\n                            value={ingredient.inventoryItemId}\n                            onValueChange={(value) => {\n                              updateIngredient(index, 'inventoryItemId', value);\n                              const item = inventoryItems.find(i => i.id === value);\n                              if (item && !ingredient.unit) {\n                                updateIngredient(index, 'unit', item.baseUnit || 'kg');\n                              }\n                            }}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select item\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {inventoryItems.map((item) => (\n                                <SelectItem key={item.id} value={item.id}>\n                                  {item.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"w-28\">\n                          <Label>Quantity *</Label>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            value={ingredient.quantity || \"\"}\n                            onChange={(e) => updateIngredient(index, 'quantity', parseFloat(e.target.value) || 0)}\n                            placeholder=\"0.00\"\n                          />\n                        </div>\n                        <div className=\"w-28\">\n                          <Label>Unit *</Label>\n                          <Select\n                            value={ingredient.unit || selectedItem?.baseUnit || ''}\n                            onValueChange={(value) => updateIngredient(index, 'unit', value)}\n                            disabled={!ingredient.inventoryItemId}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Unit\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {availableUnits.map((unit) => (\n                                <SelectItem key={unit} value={unit}>\n                                  {getUnitLabel(unit)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => removeIngredient(index)}\n                          className=\"text-destructive hover:text-destructive\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <Button\n                variant=\"outline\"\n                onClick={addIngredient}\n                className=\"w-full\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Ingredient\n              </Button>\n              \n              <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setIsIngredientsDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={() => saveIngredientsMutation.mutate()}\n                  disabled={saveIngredientsMutation.isPending}\n                >\n                  {saveIngredientsMutation.isPending ? \"Saving...\" : \"Save Ingredients\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":27326},"shared/measurements.ts":{"content":"import { z } from \"zod\";\n\nexport const MeasurementCategory = {\n  WEIGHT: \"weight\",\n  VOLUME: \"volume\",\n  COUNT: \"count\",\n  CUSTOM: \"custom\"\n} as const;\n\nexport type MeasurementCategoryType = typeof MeasurementCategory[keyof typeof MeasurementCategory];\n\nexport const WeightUnit = {\n  MG: \"mg\",\n  G: \"g\",\n  KG: \"kg\",\n  OZ: \"oz\",\n  LB: \"lb\"\n} as const;\n\nexport const VolumeUnit = {\n  ML: \"ml\",\n  L: \"L\",\n  TSP: \"tsp\",\n  TBSP: \"tbsp\",\n  CUP: \"cup\",\n  FL_OZ: \"fl_oz\"\n} as const;\n\nexport const CountUnit = {\n  PIECE: \"piece\",\n  DOZEN: \"dozen\",\n  PACK: \"pack\"\n} as const;\n\nexport const Unit = {\n  ...WeightUnit,\n  ...VolumeUnit,\n  ...CountUnit\n} as const;\n\nexport type UnitCode = typeof Unit[keyof typeof Unit];\n\nexport const weightUnits: UnitCode[] = Object.values(WeightUnit);\nexport const volumeUnits: UnitCode[] = Object.values(VolumeUnit);\nexport const countUnits: UnitCode[] = Object.values(CountUnit);\n\nconst weightConversions: Record<string, number> = {\n  mg: 0.000001,\n  g: 0.001,\n  kg: 1,\n  oz: 0.0283495,\n  lb: 0.453592\n};\n\nconst volumeConversions: Record<string, number> = {\n  ml: 0.001,\n  L: 1,\n  tsp: 0.00492892,\n  tbsp: 0.0147868,\n  cup: 0.236588,\n  fl_oz: 0.0295735\n};\n\nconst countConversions: Record<string, number> = {\n  piece: 1,\n  dozen: 12,\n  pack: 1\n};\n\nexport interface ConversionProfile {\n  baseUnit: UnitCode;\n  baseToKg?: number;\n  baseToL?: number;\n  [key: string]: number | string | undefined;\n}\n\nexport interface RecipeIngredient {\n  inventoryItemId: string;\n  quantity: number;\n  unit: UnitCode;\n  customFactor?: number;\n}\n\nexport const recipeIngredientSchema = z.object({\n  inventoryItemId: z.string().uuid(),\n  quantity: z.number().positive(),\n  unit: z.string(),\n  customFactor: z.number().positive().optional()\n});\n\nexport function convertToBase(\n  quantity: number,\n  fromUnit: UnitCode,\n  toUnit: UnitCode,\n  category: MeasurementCategoryType,\n  conversionProfile?: ConversionProfile\n): number {\n  if (fromUnit === toUnit) {\n    return quantity;\n  }\n\n  if (conversionProfile && conversionProfile[fromUnit]) {\n    const factor = conversionProfile[fromUnit] as number;\n    return quantity * factor;\n  }\n\n  let conversions: Record<string, number>;\n  \n  switch (category) {\n    case MeasurementCategory.WEIGHT:\n      conversions = weightConversions;\n      break;\n    case MeasurementCategory.VOLUME:\n      conversions = volumeConversions;\n      break;\n    case MeasurementCategory.COUNT:\n      conversions = countConversions;\n      break;\n    default:\n      throw new Error(`Unsupported conversion category: ${category}`);\n  }\n\n  if (!conversions[fromUnit] || !conversions[toUnit]) {\n    throw new Error(`Cannot convert from ${fromUnit} to ${toUnit}`);\n  }\n\n  const baseValue = quantity * conversions[fromUnit];\n  return baseValue / conversions[toUnit];\n}\n\nexport function getSupportedUnitsForItem(\n  category: MeasurementCategoryType,\n  conversionProfile?: ConversionProfile\n): UnitCode[] {\n  const customUnits = conversionProfile \n    ? Object.keys(conversionProfile).filter(k => k !== 'baseUnit' && k !== 'baseToKg' && k !== 'baseToL') as UnitCode[]\n    : [];\n\n  switch (category) {\n    case MeasurementCategory.WEIGHT:\n      return [...weightUnits, ...customUnits];\n    case MeasurementCategory.VOLUME:\n      return [...volumeUnits, ...customUnits];\n    case MeasurementCategory.COUNT:\n      return [...countUnits, ...customUnits];\n    case MeasurementCategory.CUSTOM:\n      return customUnits;\n    default:\n      return customUnits;\n  }\n}\n\nexport function validateUnitCategory(unit: UnitCode, category: MeasurementCategoryType): boolean {\n  switch (category) {\n    case MeasurementCategory.WEIGHT:\n      return weightUnits.includes(unit);\n    case MeasurementCategory.VOLUME:\n      return volumeUnits.includes(unit);\n    case MeasurementCategory.COUNT:\n      return countUnits.includes(unit);\n    case MeasurementCategory.CUSTOM:\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function getCategoryForUnit(unit: string): MeasurementCategoryType {\n  const normalizedUnit = unit.toLowerCase();\n  \n  if (weightUnits.includes(normalizedUnit as UnitCode)) return MeasurementCategory.WEIGHT;\n  if (volumeUnits.includes(normalizedUnit as UnitCode)) return MeasurementCategory.VOLUME;\n  if (countUnits.includes(normalizedUnit as UnitCode)) return MeasurementCategory.COUNT;\n  \n  const weightAliases = ['kilogram', 'gram', 'milligram', 'pound', 'ounce', 'ton', 'tonne'];\n  const volumeAliases = ['liter', 'litre', 'milliliter', 'millilitre', 'gallon', 'quart', 'pint', 'teaspoon', 'tablespoon'];\n  const countAliases = ['unit', 'item', 'box', 'bottle', 'can', 'bag'];\n  \n  if (weightAliases.some(alias => normalizedUnit.includes(alias))) return MeasurementCategory.WEIGHT;\n  if (volumeAliases.some(alias => normalizedUnit.includes(alias))) return MeasurementCategory.VOLUME;\n  if (countAliases.some(alias => normalizedUnit.includes(alias))) return MeasurementCategory.COUNT;\n  \n  return MeasurementCategory.COUNT;\n}\n\nexport function getUnitLabel(unit: UnitCode): string {\n  const labels: Record<string, string> = {\n    mg: \"Milligrams\",\n    g: \"Grams\",\n    kg: \"Kilograms\",\n    oz: \"Ounces\",\n    lb: \"Pounds\",\n    ml: \"Milliliters\",\n    L: \"Liters\",\n    tsp: \"Teaspoons\",\n    tbsp: \"Tablespoons\",\n    cup: \"Cups\",\n    fl_oz: \"Fluid Ounces\",\n    piece: \"Pieces\",\n    dozen: \"Dozen\",\n    pack: \"Packs\"\n  };\n  \n  return labels[unit] || unit;\n}\n","size_bytes":5381},"client/src/components/print/hall-quotation.tsx":{"content":"import { useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Printer, X } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport type { SelectHallBooking, Hall, Hotel } from \"@shared/schema\";\n\ninterface HallQuotationProps {\n  booking: SelectHallBooking;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function HallQuotation({ booking, open, onOpenChange }: HallQuotationProps) {\n  const printRef = useRef<HTMLDivElement>(null);\n\n  const { data: hall } = useQuery<Hall>({\n    queryKey: [`/api/halls/${booking?.hallId}`],\n    enabled: !!booking?.hallId\n  });\n\n  const { data: hotel } = useQuery<Hotel>({\n    queryKey: [`/api/hotels/${booking?.hotelId}`],\n    enabled: !!booking?.hotelId\n  });\n\n  const { data: hotelTaxes } = useQuery<any[]>({\n    queryKey: [`/api/hotels/${booking?.hotelId}/taxes`],\n    enabled: !!booking?.hotelId\n  });\n\n  const handlePrint = () => {\n    const printContent = printRef.current;\n    if (!printContent) return;\n\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Hall Booking Quotation - ${booking.id}</title>\n          <style>\n            @media print {\n              @page {\n                size: A4;\n                margin: 0;\n              }\n              body {\n                margin: 0;\n                padding: 0;\n              }\n              .no-print {\n                display: none;\n              }\n            }\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            body {\n              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              color: #1a1a1a;\n              background: white;\n            }\n            .page {\n              width: 210mm;\n              min-height: 297mm;\n              padding: 15mm;\n              margin: 0 auto;\n              background: white;\n              box-shadow: 0 0 10px rgba(0,0,0,0.1);\n            }\n            .header {\n              border-bottom: 2px solid #2c3e50;\n              padding-bottom: 12px;\n              margin-bottom: 15px;\n            }\n            .hotel-name {\n              font-size: 22px;\n              font-weight: 700;\n              color: #2c3e50;\n              margin-bottom: 6px;\n              letter-spacing: 0.5px;\n            }\n            .hotel-details {\n              font-size: 9px;\n              color: #555;\n              line-height: 1.4;\n            }\n            .quotation-title {\n              text-align: center;\n              font-size: 18px;\n              font-weight: 600;\n              color: #2c3e50;\n              margin: 12px 0;\n              text-transform: uppercase;\n              letter-spacing: 1px;\n            }\n            .meta-info {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 15px;\n              font-size: 9px;\n            }\n            .meta-box {\n              flex: 1;\n            }\n            .meta-label {\n              font-weight: 600;\n              color: #2c3e50;\n              margin-bottom: 3px;\n            }\n            .section {\n              margin-bottom: 15px;\n            }\n            .section-title {\n              font-size: 11px;\n              font-weight: 600;\n              color: #2c3e50;\n              border-bottom: 1px solid #ecf0f1;\n              padding-bottom: 5px;\n              margin-bottom: 10px;\n              text-transform: uppercase;\n              letter-spacing: 0.5px;\n            }\n            .info-grid {\n              display: grid;\n              grid-template-columns: 1fr 1fr;\n              gap: 8px;\n              font-size: 9px;\n            }\n            .info-item {\n              display: flex;\n              gap: 6px;\n            }\n            .info-label {\n              font-weight: 600;\n              color: #555;\n              min-width: 100px;\n            }\n            .info-value {\n              color: #1a1a1a;\n            }\n            table {\n              width: 100%;\n              border-collapse: collapse;\n              margin: 10px 0;\n              font-size: 9px;\n            }\n            thead {\n              background: #2c3e50;\n              color: white;\n            }\n            th {\n              padding: 8px;\n              text-align: left;\n              font-weight: 600;\n              font-size: 9px;\n              text-transform: uppercase;\n              letter-spacing: 0.3px;\n            }\n            td {\n              padding: 6px 8px;\n              border-bottom: 1px solid #ecf0f1;\n            }\n            tbody tr:hover {\n              background: #f8f9fa;\n            }\n            .text-right {\n              text-align: right;\n            }\n            .summary-table {\n              margin-top: 10px;\n              width: 100%;\n              max-width: 350px;\n              margin-left: auto;\n            }\n            .summary-table td {\n              padding: 5px 8px;\n              border: none;\n            }\n            .summary-row {\n              font-size: 9px;\n            }\n            .total-row {\n              font-size: 11px;\n              font-weight: 700;\n              border-top: 2px solid #2c3e50;\n              color: #2c3e50;\n            }\n            .terms {\n              margin-top: 15px;\n              padding: 10px;\n              background: #f8f9fa;\n              border-left: 3px solid #2c3e50;\n              font-size: 7px;\n              line-height: 1.4;\n            }\n            .terms-title {\n              font-weight: 600;\n              margin-bottom: 5px;\n              color: #2c3e50;\n              font-size: 8px;\n            }\n            .terms ul {\n              margin-left: 15px;\n              margin-top: 4px;\n            }\n            .terms li {\n              margin-bottom: 2px;\n            }\n            .footer {\n              margin-top: 15px;\n              padding-top: 10px;\n              border-top: 1px solid #ecf0f1;\n              text-align: center;\n              font-size: 8px;\n              color: #777;\n            }\n            .signature-section {\n              margin-top: 20px;\n              display: flex;\n              justify-content: space-between;\n            }\n            .signature-box {\n              text-align: center;\n              flex: 1;\n            }\n            .signature-line {\n              border-top: 1px solid #000;\n              margin-top: 40px;\n              padding-top: 6px;\n              font-size: 9px;\n              font-weight: 600;\n            }\n            .status-badge {\n              display: inline-block;\n              padding: 4px 12px;\n              border-radius: 4px;\n              font-size: 10px;\n              font-weight: 600;\n              text-transform: uppercase;\n            }\n            .status-quotation {\n              background: #3498db;\n              color: white;\n            }\n            .status-confirmed {\n              background: #27ae60;\n              color: white;\n            }\n          </style>\n        </head>\n        <body>\n          ${printContent.innerHTML}\n        </body>\n      </html>\n    `);\n    \n    printWindow.document.close();\n    printWindow.focus();\n    \n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 250);\n  };\n\n  // Parse food and services from the JSONB fields or text format\n  let foodServices: any[] = [];\n  let otherServices: any[] = [];\n  let servicePackages: any[] = [];\n  \n  // Handle food services - can be array or text string\n  if (Array.isArray(booking.foodServices)) {\n    foodServices = booking.foodServices;\n  } else if (typeof booking.foodServices === 'string' && booking.foodServices) {\n    // Parse text format: \"Food: Items (690 persons × रु800.00 = रु552,000.00)\"\n    const match = booking.foodServices.match(/Food:\\s*(.+?)\\s*\\((\\d+)\\s*persons\\s*×\\s*(?:रु)?([\\d,]+(?:\\.\\d+)?)\\s*=\\s*(?:रु)?([\\d,]+(?:\\.\\d+)?)\\)/);\n    if (match) {\n      foodServices = [{\n        name: 'Food & Beverage',\n        description: match[1].trim(),\n        numberOfPersons: parseInt(match[2]),\n        pricePerPerson: parseFloat(match[3].replace(/,/g, '')),\n        totalPrice: parseFloat(match[4].replace(/,/g, ''))\n      }];\n    }\n  }\n  \n  // Handle other services\n  if (Array.isArray(booking.otherServices)) {\n    otherServices = booking.otherServices;\n  }\n  \n  // Handle service packages\n  if (Array.isArray(booking.servicePackages)) {\n    servicePackages = booking.servicePackages;\n  }\n  \n  const hallPrice = parseFloat(booking.hallBasePrice || \"0\");\n  const foodTotal = foodServices.reduce((sum: number, item: any) => sum + (parseFloat(item.totalPrice || item.total || \"0\")), 0);\n  const servicesTotal = otherServices.reduce((sum: number, item: any) => sum + (parseFloat(item.totalPrice || item.total || \"0\")), 0);\n  const packagesTotal = servicePackages.reduce((sum: number, item: any) => sum + (parseFloat(item.totalPrice || item.total || \"0\")), 0);\n\n  const subtotal = hallPrice + foodTotal + servicesTotal + packagesTotal;\n  \n  // Get taxes from hotel taxes\n  const activeTaxes = hotelTaxes?.filter((tax: any) => tax.isActive) || [];\n  const vatTax = activeTaxes.find((tax: any) => tax.taxType === 'vat');\n  const serviceTax = activeTaxes.find((tax: any) => tax.taxType === 'service_charge');\n  const luxuryTax = activeTaxes.find((tax: any) => tax.taxType === 'luxury_tax');\n  \n  const vatAmount = vatTax ? subtotal * (parseFloat(vatTax.percent || \"0\") / 100) : 0;\n  const serviceTaxAmount = serviceTax ? subtotal * (parseFloat(serviceTax.percent || \"0\") / 100) : 0;\n  const luxuryTaxAmount = luxuryTax ? subtotal * (parseFloat(luxuryTax.percent || \"0\") / 100) : 0;\n  const totalTax = vatAmount + serviceTaxAmount + luxuryTaxAmount;\n  \n  // Calculate total from subtotal + taxes (this is the accurate total)\n  const calculatedTotal = subtotal + totalTax;\n  \n  // Use booking.totalAmount if available, otherwise use calculated total\n  const total = parseFloat(booking.totalAmount || \"0\") || calculatedTotal;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-[900px] max-h-[90vh] overflow-y-auto p-0\">\n        <div className=\"sticky top-0 bg-white border-b p-4 flex justify-between items-center z-10 no-print\">\n          <h2 className=\"text-lg font-semibold\">Hall Booking Quotation</h2>\n          <div className=\"flex gap-2\">\n            <Button onClick={handlePrint} data-testid=\"button-print-quotation\">\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Print\n            </Button>\n            <Button variant=\"outline\" size=\"icon\" onClick={() => onOpenChange(false)} data-testid=\"button-close-quotation\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div ref={printRef}>\n          <div className=\"page\">\n            {/* Header */}\n            <div className=\"header\">\n              <div className=\"hotel-name\">{hotel?.name || \"Hotel Name\"}</div>\n              <div className=\"hotel-details\">\n                {hotel?.address && <div>{hotel.address}</div>}\n                {hotel?.phone && <div>Phone: {hotel.phone}</div>}\n                {hotel?.vatNo && <div>VAT No: {hotel.vatNo}</div>}\n              </div>\n            </div>\n\n            {/* Quotation Title */}\n            <div className=\"quotation-title\">Hall Booking Quotation</div>\n\n            {/* Meta Information */}\n            <div className=\"meta-info\">\n              <div className=\"meta-box\">\n                <div className=\"meta-label\">Quotation No:</div>\n                <div>{booking.id.substring(0, 8).toUpperCase()}</div>\n              </div>\n              <div className=\"meta-box\">\n                <div className=\"meta-label\">Date:</div>\n                <div>{format(new Date(booking.createdAt!), \"PPP\")}</div>\n              </div>\n              <div className=\"meta-box\">\n                <div className=\"meta-label\">Status:</div>\n                <div>\n                  <span className={`status-badge status-${booking.status}`}>\n                    {booking.status}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Customer Information */}\n            <div className=\"section\">\n              <div className=\"section-title\">Customer Information</div>\n              <div className=\"info-grid\">\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Name:</span>\n                  <span className=\"info-value\">{booking.customerName}</span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Phone:</span>\n                  <span className=\"info-value\">{booking.customerPhone}</span>\n                </div>\n                {booking.customerEmail && (\n                  <div className=\"info-item\">\n                    <span className=\"info-label\">Email:</span>\n                    <span className=\"info-value\">{booking.customerEmail}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Event Details */}\n            <div className=\"section\">\n              <div className=\"section-title\">Event Details</div>\n              <div className=\"info-grid\">\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Hall:</span>\n                  <span className=\"info-value\">{hall?.name || \"N/A\"}</span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Capacity:</span>\n                  <span className=\"info-value\">{hall?.capacity || \"N/A\"} persons</span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Event Date:</span>\n                  <span className=\"info-value\">\n                    {booking.bookingStartTime ? format(new Date(booking.bookingStartTime), \"PPP\") : \"N/A\"}\n                  </span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Event Time:</span>\n                  <span className=\"info-value\">\n                    {booking.bookingStartTime && booking.bookingEndTime\n                      ? `${format(new Date(booking.bookingStartTime), \"p\")} - ${format(new Date(booking.bookingEndTime), \"p\")}`\n                      : \"N/A\"}\n                  </span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Number of Guests:</span>\n                  <span className=\"info-value\">{booking.numberOfPeople || 0} persons</span>\n                </div>\n                {booking.duration && (\n                  <div className=\"info-item\">\n                    <span className=\"info-label\">Duration:</span>\n                    <span className=\"info-value\">{booking.duration} hours</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Services Breakdown */}\n            <div className=\"section\">\n              <div className=\"section-title\">Services & Pricing</div>\n              \n              <table>\n                <thead>\n                  <tr>\n                    <th style={{ width: \"10%\" }}>#</th>\n                    <th style={{ width: \"45%\" }}>Description</th>\n                    <th style={{ width: \"15%\" }} className=\"text-right\">Quantity</th>\n                    <th style={{ width: \"15%\" }} className=\"text-right\">Unit Price</th>\n                    <th style={{ width: \"15%\" }} className=\"text-right\">Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>1</td>\n                    <td>\n                      <strong>Hall Rental</strong><br/>\n                      {hall?.name || \"Hall\"}\n                      {booking.duration && (\n                        <span style={{ fontSize: \"8px\", color: \"#666\", display: \"block\", marginTop: \"2px\" }}>\n                          ({booking.duration} hours @ {formatCurrency(hallPrice / parseFloat(booking.duration))} per hour)\n                        </span>\n                      )}\n                    </td>\n                    <td className=\"text-right\">{booking.duration ? `${booking.duration} hrs` : '1'}</td>\n                    <td className=\"text-right\">\n                      {booking.duration ? formatCurrency(hallPrice / parseFloat(booking.duration)) : formatCurrency(hallPrice)}\n                    </td>\n                    <td className=\"text-right\">{formatCurrency(hallPrice)}</td>\n                  </tr>\n                  \n                  {foodServices.length > 0 && foodServices.map((item: any, index: number) => {\n                    const persons = item.quantity || item.numberOfPersons || 0;\n                    const pricePerPerson = parseFloat(item.pricePerPerson || item.price || \"0\");\n                    const total = parseFloat(item.totalPrice || item.total || \"0\");\n                    \n                    return (\n                      <tr key={`food-${index}`}>\n                        <td>{index + 2}</td>\n                        <td>\n                          <strong>{item.itemName || item.name || \"Food & Beverage\"}</strong>\n                          {item.description && <br/>}\n                          {item.description && <span style={{ fontSize: \"8px\", color: \"#666\" }}>{item.description}</span>}\n                          {persons > 0 && pricePerPerson > 0 && (\n                            <span style={{ fontSize: \"8px\", color: \"#666\", display: \"block\", marginTop: \"2px\" }}>\n                              ({persons} persons × {formatCurrency(pricePerPerson)} per person)\n                            </span>\n                          )}\n                        </td>\n                        <td className=\"text-right\">{persons > 0 ? `${persons} pax` : '1'}</td>\n                        <td className=\"text-right\">{formatCurrency(pricePerPerson)}</td>\n                        <td className=\"text-right\">{formatCurrency(total)}</td>\n                      </tr>\n                    );\n                  })}\n                  \n                  {otherServices.length > 0 && otherServices.map((item: any, index: number) => {\n                    const qty = item.quantity || 1;\n                    const price = parseFloat(item.price || \"0\");\n                    const total = parseFloat(item.totalPrice || item.total || \"0\");\n                    \n                    return (\n                      <tr key={`service-${index}`}>\n                        <td>{index + 2 + foodServices.length}</td>\n                        <td>\n                          <strong>{item.serviceName || item.name || \"Additional Service\"}</strong>\n                          {item.description && <br/>}\n                          {item.description && <span style={{ fontSize: \"8px\", color: \"#666\" }}>{item.description}</span>}\n                          {qty > 1 && price > 0 && (\n                            <span style={{ fontSize: \"8px\", color: \"#666\", display: \"block\", marginTop: \"2px\" }}>\n                              ({qty} × {formatCurrency(price)} per unit)\n                            </span>\n                          )}\n                        </td>\n                        <td className=\"text-right\">{qty}</td>\n                        <td className=\"text-right\">{formatCurrency(price)}</td>\n                        <td className=\"text-right\">{formatCurrency(total)}</td>\n                      </tr>\n                    );\n                  })}\n                  \n                  {servicePackages.length > 0 && servicePackages.map((item: any, index: number) => {\n                    const qty = item.quantity || 1;\n                    const price = parseFloat(item.price || \"0\");\n                    const total = parseFloat(item.totalPrice || item.total || \"0\");\n                    \n                    return (\n                      <tr key={`package-${index}`}>\n                        <td>{index + 2 + foodServices.length + otherServices.length}</td>\n                        <td>\n                          <strong>{item.packageName || item.name || \"Service Package\"}</strong>\n                          {item.description && <br/>}\n                          {item.description && <span style={{ fontSize: \"8px\", color: \"#666\" }}>{item.description}</span>}\n                          {qty > 1 && price > 0 && (\n                            <span style={{ fontSize: \"8px\", color: \"#666\", display: \"block\", marginTop: \"2px\" }}>\n                              ({qty} × {formatCurrency(price)} per package)\n                            </span>\n                          )}\n                        </td>\n                        <td className=\"text-right\">{qty}</td>\n                        <td className=\"text-right\">{formatCurrency(price)}</td>\n                        <td className=\"text-right\">{formatCurrency(total)}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n\n              {/* Summary */}\n              <table className=\"summary-table\">\n                <tbody>\n                  <tr className=\"summary-row\">\n                    <td><strong>Subtotal (Services):</strong></td>\n                    <td className=\"text-right\"><strong>{formatCurrency(subtotal)}</strong></td>\n                  </tr>\n                  <tr style={{ height: '8px' }}><td colSpan={2}></td></tr>\n                  {vatTax && (\n                    <tr className=\"summary-row\">\n                      <td style={{ paddingLeft: '12px' }}>VAT ({vatTax.percent}%):</td>\n                      <td className=\"text-right\">{formatCurrency(vatAmount)}</td>\n                    </tr>\n                  )}\n                  {serviceTax && (\n                    <tr className=\"summary-row\">\n                      <td style={{ paddingLeft: '12px' }}>Service Charge ({serviceTax.percent}%):</td>\n                      <td className=\"text-right\">{formatCurrency(serviceTaxAmount)}</td>\n                    </tr>\n                  )}\n                  {luxuryTax && (\n                    <tr className=\"summary-row\">\n                      <td style={{ paddingLeft: '12px' }}>Luxury Tax ({luxuryTax.percent}%):</td>\n                      <td className=\"text-right\">{formatCurrency(luxuryTaxAmount)}</td>\n                    </tr>\n                  )}\n                  {totalTax > 0 && (\n                    <>\n                      <tr style={{ height: '4px' }}><td colSpan={2}></td></tr>\n                      <tr className=\"summary-row\" style={{ borderTop: '1px solid #ddd' }}>\n                        <td><strong>Total Taxes:</strong></td>\n                        <td className=\"text-right\"><strong>{formatCurrency(totalTax)}</strong></td>\n                      </tr>\n                    </>\n                  )}\n                  <tr style={{ height: '8px' }}><td colSpan={2}></td></tr>\n                  <tr className=\"total-row\" style={{ fontSize: '12px' }}>\n                    <td><strong>GRAND TOTAL:</strong></td>\n                    <td className=\"text-right\"><strong>{formatCurrency(total)}</strong></td>\n                  </tr>\n                  {parseFloat(booking.advancePaid || \"0\") > 0 && (\n                    <>\n                      <tr className=\"summary-row\">\n                        <td>Advance Paid:</td>\n                        <td className=\"text-right\" style={{ color: \"#27ae60\" }}>\n                          -{formatCurrency(parseFloat(booking.advancePaid || \"0\"))}\n                        </td>\n                      </tr>\n                      <tr className=\"total-row\">\n                        <td>Balance Due:</td>\n                        <td className=\"text-right\" style={{ color: \"#e74c3c\" }}>\n                          {formatCurrency(parseFloat(booking.balanceDue || \"0\"))}\n                        </td>\n                      </tr>\n                    </>\n                  )}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Special Requests */}\n            {booking.specialRequests && (\n              <div className=\"section\">\n                <div className=\"section-title\">Special Requests</div>\n                <div style={{ fontSize: \"9px\", lineHeight: \"1.4\", padding: \"6px\", background: \"#f8f9fa\", borderRadius: \"4px\" }}>\n                  {booking.specialRequests}\n                </div>\n              </div>\n            )}\n\n            {/* Terms & Conditions */}\n            <div className=\"terms\">\n              <div className=\"terms-title\">Terms & Conditions</div>\n              <ul>\n                <li>This quotation is valid for 30 days from the date of issue.</li>\n                <li>A minimum advance payment of 50% is required to confirm the booking.</li>\n                <li>The balance amount must be paid before or on the event date.</li>\n                <li>Cancellation must be notified at least 7 days in advance for a full refund of the advance.</li>\n                <li>Any additional services requested on the event day will be charged separately.</li>\n                <li>The hall must be vacated by the agreed end time. Overtime charges may apply.</li>\n                <li>The client is responsible for any damage to hotel property during the event.</li>\n                <li>All prices are inclusive of applicable taxes unless stated otherwise.</li>\n              </ul>\n            </div>\n\n            {/* Signature Section */}\n            <div className=\"signature-section\">\n              <div className=\"signature-box\">\n                <div className=\"signature-line\">Authorized Signature</div>\n                <div style={{ fontSize: \"10px\", marginTop: \"4px\", color: \"#666\" }}>\n                  {hotel?.name || \"Hotel Management\"}\n                </div>\n              </div>\n              <div className=\"signature-box\">\n                <div className=\"signature-line\">Customer Signature</div>\n                <div style={{ fontSize: \"10px\", marginTop: \"4px\", color: \"#666\" }}>\n                  {booking.customerName}\n                </div>\n              </div>\n            </div>\n\n            {/* Footer */}\n            <div className=\"footer\">\n              <div>Thank you for choosing {hotel?.name || \"our hotel\"}!</div>\n              <div style={{ marginTop: \"8px\" }}>\n                For any queries, please contact us at {hotel?.phone || \"our reception desk\"}\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":26821},"client/src/pages/dashboard/housekeeping-staff.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { CheckSquare, Clock, Wrench, Send } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { getStatusColor } from \"@/lib/utils\";\n\nexport default function HousekeepingStaffDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTask, setSelectedTask] = useState<any>(null);\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: tasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/users\", user?.id, \"tasks\"],\n    enabled: !!user?.id,\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", user?.id, \"tasks\"] });\n      toast({ title: \"Task updated successfully\" });\n      setSelectedTask(null);\n    }\n  });\n\n  const createMaintenanceRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const pendingTasks = tasks.filter(t => t.status === 'pending');\n  const performingTasks = tasks.filter(t => t.status === 'performing');\n  const completedTasks = tasks.filter(t => t.status === 'completed');\n  const todayCompleted = completedTasks.filter(t => {\n    const today = new Date().toDateString();\n    return new Date(t.updatedAt || t.createdAt).toDateString() === today;\n  });\n\n  const handleTaskStatusUpdate = (task: any, newStatus: string) => {\n    updateTaskMutation.mutate({ taskId: task.id, status: newStatus });\n  };\n\n  const handleMaintenanceSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createMaintenanceRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Housekeeping Staff Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Pending Tasks\"\n            value={pendingTasks.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"In Progress\"\n            value={performingTasks.length}\n            icon={<CheckSquare />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Completed Today\"\n            value={todayCompleted.length}\n            icon={<CheckSquare />}\n            iconColor=\"text-green-500\"\n            trend={{ \n              value: todayCompleted.length > 0 ? 100 : 0, \n              label: \"completion rate\", \n              isPositive: true \n            }}\n          />\n          <StatsCard\n            title=\"Total Tasks\"\n            value={tasks.length}\n            icon={<CheckSquare />}\n            iconColor=\"text-purple-500\"\n          />\n        </div>\n\n        {/* Task Management */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* My Tasks */}\n          <Card>\n            <CardHeader>\n              <CardTitle>My Tasks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {tasks.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-tasks-message\">\n                    No tasks assigned\n                  </p>\n                ) : (\n                  tasks.slice(0, 10).map((task, index) => (\n                    <div key={task.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`task-item-${index}`}>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground\">{task.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{task.description}</p>\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <Badge className={getPriorityColor(task.priority)} variant=\"outline\">\n                            {task.priority?.toUpperCase() || 'MEDIUM'}\n                          </Badge>\n                          <Badge className={getStatusColor(task.status)} variant=\"secondary\">\n                            {task.status}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {new Date(task.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col space-y-1\">\n                        {task.status === 'pending' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleTaskStatusUpdate(task, 'performing')}\n                            disabled={updateTaskMutation.isPending}\n                            data-testid={`button-start-task-${index}`}\n                          >\n                            Start\n                          </Button>\n                        )}\n                        {task.status === 'performing' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleTaskStatusUpdate(task, 'completed')}\n                            disabled={updateTaskMutation.isPending}\n                            data-testid={`button-complete-task-${index}`}\n                          >\n                            Complete\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Maintenance Request */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Send className=\"h-5 w-5 mr-2\" />\n                Submit Maintenance Request\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleMaintenanceSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Issue Title *</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"e.g., Broken AC in Room 201\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    required\n                    data-testid=\"input-maintenance-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"location\">Location *</Label>\n                  <Input\n                    id=\"location\"\n                    placeholder=\"e.g., Room 201, Hallway 2nd Floor\"\n                    value={location}\n                    onChange={(e) => setLocation(e.target.value)}\n                    required\n                    data-testid=\"input-maintenance-location\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"priority\">Priority *</Label>\n                  <Select value={priority} onValueChange={setPriority}>\n                    <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-maintenance-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                      <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                      <SelectItem value=\"high\">High - Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    placeholder=\"Provide detailed information about the issue...\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    rows={4}\n                    required\n                    data-testid=\"textarea-maintenance-description\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"photo\">Photo *</Label>\n                  <Input\n                    id=\"photo\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    required\n                    data-testid=\"input-maintenance-photo\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        const reader = new FileReader();\n                        reader.onloadend = () => {\n                          setPhoto(reader.result as string);\n                        };\n                        reader.readAsDataURL(file);\n                      }\n                    }}\n                  />\n                  {photo && (\n                    <div className=\"mt-2\">\n                      <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" />\n                    </div>\n                  )}\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full h-11 min-h-11\"\n                  disabled={createMaintenanceRequestMutation.isPending}\n                  data-testid=\"button-submit-maintenance\"\n                >\n                  {createMaintenanceRequestMutation.isPending ? (\n                    \"Submitting...\"\n                  ) : (\n                    <>\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      Submit Request\n                    </>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":12366},"tests/test-attack.ts":{"content":"/**\n * BRUTAL ATTACK TEST SUITE\n * This script tests the application with malicious and edge case inputs\n */\n\nconst API_BASE = process.env.REPLIT_DEV_DOMAIN \n  ? `https://${process.env.REPLIT_DEV_DOMAIN}` \n  : 'http://localhost:5000';\n\nasync function testLogin(username: string, password: string, testName: string) {\n  try {\n    const response = await fetch(`${API_BASE}/api/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n      credentials: 'include'\n    });\n    \n    const data = await response.json();\n    console.log(`✓ ${testName}:`, response.status, data);\n    return { response, data };\n  } catch (error) {\n    console.error(`✗ ${testName} CRASHED:`, error);\n    return { error };\n  }\n}\n\nasync function testEndpoint(method: string, url: string, body: any, testName: string, session?: string) {\n  try {\n    const headers: any = { 'Content-Type': 'application/json' };\n    if (session) headers['Cookie'] = session;\n    \n    const response = await fetch(`${API_BASE}${url}`, {\n      method,\n      headers,\n      body: body ? JSON.stringify(body) : undefined,\n      credentials: 'include'\n    });\n    \n    const text = await response.text();\n    let data;\n    try {\n      data = JSON.parse(text);\n    } catch {\n      data = text;\n    }\n    \n    console.log(`✓ ${testName}:`, response.status, data);\n    return { response, data };\n  } catch (error) {\n    console.error(`✗ ${testName} CRASHED:`, error);\n    return { error };\n  }\n}\n\nasync function runAttacks() {\n  console.log('🔥 STARTING BRUTAL ATTACK TEST SUITE 🔥\\n');\n  \n  // ==================== LOGIN ATTACKS ====================\n  console.log('=== ATTACKING LOGIN ENDPOINT ===\\n');\n  \n  // 1. SQL Injection attacks\n  await testLogin(\"admin'--\", \"password\", \"SQL Injection - Comment Out\");\n  await testLogin(\"admin' OR '1'='1\", \"password\", \"SQL Injection - Always True\");\n  await testLogin(\"admin' UNION SELECT * FROM users--\", \"password\", \"SQL Injection - UNION\");\n  await testLogin(\"'; DROP TABLE users;--\", \"password\", \"SQL Injection - DROP TABLE\");\n  \n  // 2. XSS attacks\n  await testLogin(\"<script>alert('XSS')</script>\", \"password\", \"XSS - Script Tag\");\n  await testLogin(\"javascript:alert(1)\", \"password\", \"XSS - Javascript Protocol\");\n  await testLogin(\"<img src=x onerror=alert(1)>\", \"password\", \"XSS - Image Tag\");\n  \n  // 3. Null byte attack (should be sanitized)\n  await testLogin(\"admin\\x00\", \"password\\x00\", \"Null Byte Attack\");\n  \n  // 4. Extremely long inputs\n  await testLogin(\"a\".repeat(10000), \"b\".repeat(10000), \"Extremely Long Input\");\n  \n  // 5. Special characters\n  await testLogin(\"admin\\n\\r\\t\", \"pass\\n\\r\\t\", \"Newline/Tab Characters\");\n  await testLogin(\"admin🔥💀👻\", \"password\", \"Emoji Characters\");\n  await testLogin(\"admin\\u0000\\u0001\\u0002\", \"password\", \"Unicode Control Characters\");\n  \n  // 6. Empty/missing fields\n  await testLogin(\"\", \"\", \"Empty Credentials\");\n  await testLogin(\"   \", \"   \", \"Whitespace Only\");\n  \n  // 7. Type confusion\n  await testEndpoint('POST', '/api/login', { username: 123, password: 456 }, \"Type Confusion - Numbers\");\n  await testEndpoint('POST', '/api/login', { username: null, password: null }, \"Type Confusion - Null\");\n  await testEndpoint('POST', '/api/login', { username: {}, password: [] }, \"Type Confusion - Objects\");\n  \n  // 8. Valid login (for baseline)\n  const validLogin = await testLogin(\"manager\", \"manager\", \"VALID LOGIN - Manager\");\n  \n  // ==================== MAINTENANCE REQUEST ATTACKS ====================\n  console.log('\\n=== ATTACKING MAINTENANCE REQUESTS ===\\n');\n  \n  // Try to create maintenance request without auth\n  await testEndpoint('POST', '/api/maintenance-requests', {\n    title: \"Test\",\n    hotelId: \"fake-id\",\n    reportedBy: \"fake-id\"\n  }, \"Maintenance - No Auth\");\n  \n  // Try with invalid UUIDs\n  await testEndpoint('PUT', '/api/maintenance-requests/not-a-uuid', {\n    status: 'completed'\n  }, \"Maintenance - Invalid UUID\");\n  \n  // Try to reassign without permission (if we had a session)\n  await testEndpoint('PUT', '/api/maintenance-requests/00000000-0000-0000-0000-000000000000', {\n    assignedTo: \"fake-id\"\n  }, \"Maintenance - Unauthorized Reassign\");\n  \n  // ==================== USER MANAGEMENT ATTACKS ====================\n  console.log('\\n=== ATTACKING USER MANAGEMENT ===\\n');\n  \n  // Try to access other hotel's users\n  await testEndpoint('GET', '/api/hotels/00000000-0000-0000-0000-000000000000/users', null, \"Users - Wrong Hotel ID\");\n  \n  // Try to create user without auth\n  await testEndpoint('POST', '/api/hotels/00000000-0000-0000-0000-000000000000/users', {\n    username: \"hacker\",\n    password: \"123456\"\n  }, \"Users - Create Without Auth\");\n  \n  // ==================== FINANCIAL ATTACKS ====================\n  console.log('\\n=== ATTACKING FINANCIAL ENDPOINTS ===\\n');\n  \n  // Try to void transaction without auth\n  await testEndpoint('POST', '/api/transactions/00000000-0000-0000-0000-000000000000/void', {\n    reason: \"Hacking attempt\"\n  }, \"Finance - Void Without Auth\");\n  \n  // Try with short void reason\n  await testEndpoint('POST', '/api/transactions/00000000-0000-0000-0000-000000000000/void', {\n    reason: \"short\"\n  }, \"Finance - Short Void Reason\");\n  \n  // Try negative amounts\n  await testEndpoint('POST', '/api/hotels/current/transactions', {\n    amount: -1000000,\n    txnType: \"expense\"\n  }, \"Finance - Negative Amount\");\n  \n  // Try massive numbers\n  await testEndpoint('POST', '/api/hotels/current/transactions', {\n    amount: 999999999999999999999999999999,\n    txnType: \"expense\"\n  }, \"Finance - Massive Number\");\n  \n  // ==================== ROOM RESERVATION ATTACKS ====================\n  console.log('\\n=== ATTACKING ROOM RESERVATIONS ===\\n');\n  \n  // Try double booking\n  await testEndpoint('POST', '/api/hotels/current/reservations', {\n    roomId: 1,\n    checkIn: \"2025-01-01\",\n    checkOut: \"2025-01-05\"\n  }, \"Reservation - No Auth\");\n  \n  // ==================== PRIVILEGE ESCALATION ATTACKS ====================\n  console.log('\\n=== ATTACKING AUTHORIZATION ===\\n');\n  \n  // Try to access super admin endpoints\n  await testEndpoint('GET', '/api/super-admin/hotels', null, \"Auth - Super Admin Without Auth\");\n  \n  // Try to deactivate self\n  await testEndpoint('PATCH', '/api/hotels/00000000-0000-0000-0000-000000000000/users/fake-id', {\n    isActive: false\n  }, \"Auth - Self Deactivation\");\n  \n  // ==================== SESSION/COOKIE ATTACKS ====================\n  console.log('\\n=== ATTACKING SESSIONS ===\\n');\n  \n  // Try with invalid session\n  await testEndpoint('GET', '/api/user', null, \"Session - Invalid Cookie\", \"connect.sid=fake-session\");\n  \n  // Try session fixation\n  await testEndpoint('POST', '/api/login', {\n    username: \"manager\",\n    password: \"manager\"\n  }, \"Session - Fixation Attempt\", \"connect.sid=attacker-session\");\n  \n  console.log('\\n🔥 ATTACK TEST SUITE COMPLETE 🔥');\n}\n\nrunAttacks().catch(console.error);\n","size_bytes":6953},"client/src/pages/dashboard/cashier/table-billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Receipt, Printer, CreditCard, Banknote, Smartphone, Plus, Minus, Trash2, History, Edit, Users, Split } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PaymentEntry {\n  id: string;\n  paymentMethod: string;\n  amount: number;\n  reference?: string;\n}\n\nexport default function CashierTableBilling() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Table selection - support multiple tables\n  const [selectedTables, setSelectedTables] = useState<string[]>([]);\n  \n  // Voucher\n  const [voucherCode, setVoucherCode] = useState(\"\");\n  const [appliedVoucher, setAppliedVoucher] = useState<any>(null);\n  \n  // Tip/Gratuity\n  const [tipType, setTipType] = useState<\"percentage\" | \"flat\">(\"percentage\");\n  const [tipValue, setTipValue] = useState<number>(0);\n  \n  // Split bill\n  const [splitMode, setSplitMode] = useState<\"none\" | \"equal\" | \"custom\">(\"none\");\n  const [splitCount, setSplitCount] = useState<number>(2);\n  const [customSplits, setCustomSplits] = useState<{ name: string; amount: number }[]>([]);\n  \n  // Payment - support multiple partial payments\n  const [payments, setPayments] = useState<PaymentEntry[]>([]);\n  const [currentPaymentMethod, setCurrentPaymentMethod] = useState(\"\");\n  const [currentPaymentAmount, setCurrentPaymentAmount] = useState(\"\");\n  const [currentPaymentReference, setCurrentPaymentReference] = useState(\"\");\n  \n  // Amendment modal\n  const [amendmentDialogOpen, setAmendmentDialogOpen] = useState(false);\n  const [amendmentNote, setAmendmentNote] = useState(\"\");\n  const [selectedBillForAmendment, setSelectedBillForAmendment] = useState<any>(null);\n  \n  // History filters\n  const [historyStartDate, setHistoryStartDate] = useState(\"\");\n  const [historyEndDate, setHistoryEndDate] = useState(\"\");\n  const [historyStatus, setHistoryStatus] = useState(\"\");\n\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"],\n    refetchInterval: 3000\n  });\n\n  const { data: tables = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 3000,\n  });\n\n  const { data: kotOrders = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000,\n  });\n\n  const { data: menuItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch bill history\n  const { data: billHistory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/bills\", historyStartDate, historyEndDate, historyStatus],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (historyStartDate) params.append(\"startDate\", historyStartDate);\n      if (historyEndDate) params.append(\"endDate\", historyEndDate);\n      if (historyStatus) params.append(\"status\", historyStatus);\n      \n      const response = await fetch(`/api/hotels/current/bills?${params.toString()}`, {\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch bills\");\n      return response.json();\n    }\n  });\n\n  const validateVoucherMutation = useMutation({\n    mutationFn: async (code: string) => {\n      if (!code || code.trim().length === 0) {\n        throw new Error(\"Please enter a voucher code\");\n      }\n      const response = await apiRequest(\"POST\", \"/api/vouchers/validate\", { code: code.trim() });\n      return response;\n    },\n    onSuccess: (data: any) => {\n      if (data.valid && data.voucher) {\n        setAppliedVoucher(data.voucher);\n        const discountText = data.voucher.discountType === 'percentage' \n          ? `${data.voucher.discountAmount}% off`\n          : `${formatCurrency(data.voucher.discountAmount)} off`;\n        toast({ \n          title: \"✓ Voucher Applied!\", \n          description: `Code: ${data.voucher.code} - ${discountText}`,\n        });\n      } else {\n        setAppliedVoucher(null);\n        toast({ \n          title: \"Invalid Voucher\", \n          description: \"Voucher code not found or expired\", \n          variant: \"destructive\" \n        });\n      }\n    },\n    onError: (error: any) => {\n      setAppliedVoucher(null);\n      toast({ \n        title: \"Validation Error\", \n        description: error?.message || \"Unable to validate voucher\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createBillMutation = useMutation({\n    mutationFn: async (billData: any) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/bills\", billData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/bills\"] });\n      toast({ title: \"Bill created and payment processed successfully\" });\n      \n      // Reset form\n      setSelectedTables([]);\n      setAppliedVoucher(null);\n      setVoucherCode(\"\");\n      setTipType(\"percentage\");\n      setTipValue(0);\n      setSplitMode(\"none\");\n      setPayments([]);\n      setCurrentPaymentMethod(\"\");\n      setCurrentPaymentAmount(\"\");\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const amendBillMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/hotels/current/bills/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/bills\"] });\n      toast({ title: \"Bill amended successfully\" });\n      setAmendmentDialogOpen(false);\n      setAmendmentNote(\"\");\n      setSelectedBillForAmendment(null);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Toggle table selection\n  const handleTableToggle = (tableId: string) => {\n    setSelectedTables(prev => \n      prev.includes(tableId) \n        ? prev.filter(id => id !== tableId)\n        : [...prev, tableId]\n    );\n  };\n\n  // Filter orders from selected tables with approved/ready items\n  const selectedTableOrders = kotOrders.filter(\n    (order: any) => {\n      if (!selectedTables.includes(order.tableId)) return false;\n      if (order.status === 'cancelled' || order.status === 'served') return false;\n      return order.items?.some((item: any) => item.status === 'approved' || item.status === 'ready');\n    }\n  );\n\n  // Calculate bill with cascading taxes\n  const calculateBill = () => {\n    let subtotal = 0;\n    const items: any[] = [];\n    \n    // Calculate subtotal from approved/ready items only\n    selectedTableOrders.forEach((order: any) => {\n      order.items?.forEach((item: any) => {\n        if (item.status === 'approved' || item.status === 'ready') {\n          const menuItem = menuItems.find((m: any) => m.id === item.menuItemId);\n          if (menuItem) {\n            subtotal += menuItem.price * item.qty;\n            items.push({\n              orderId: order.id,\n              itemId: item.id,\n              menuItemId: item.menuItemId,\n              name: menuItem.name,\n              qty: item.qty,\n              price: menuItem.price,\n              total: menuItem.price * item.qty\n            });\n          }\n        }\n      });\n    });\n\n    // Get active taxes and sort them\n    const activeTaxes = hotelTaxes.filter((tax: any) => tax.isActive);\n    const taxOrder = ['vat', 'service_tax', 'luxury_tax'];\n    const sortedTaxes = activeTaxes.sort((a: any, b: any) => {\n      const aIndex = taxOrder.indexOf(a.taxType);\n      const bIndex = taxOrder.indexOf(b.taxType);\n      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n    });\n\n    // Apply cascading taxes\n    let runningTotal = subtotal;\n    const taxBreakdown: any = {};\n    \n    sortedTaxes.forEach((tax: any) => {\n      const taxRate = parseFloat(tax.percent) / 100;\n      const taxAmount = Math.round((runningTotal * taxRate) * 100) / 100;\n      const displayName = tax.taxType === 'vat' ? 'VAT' : \n                          tax.taxType === 'service_tax' ? 'Service Tax' : \n                          tax.taxType === 'luxury_tax' ? 'Luxury Tax' : tax.taxType;\n      taxBreakdown[displayName] = {\n        rate: parseFloat(tax.percent),\n        amount: taxAmount\n      };\n      runningTotal = Math.round((runningTotal + taxAmount) * 100) / 100;\n    });\n\n    const totalTax = Object.values(taxBreakdown).reduce((sum: number, t: any) => sum + t.amount, 0);\n    let grandTotal = Math.round((subtotal + totalTax) * 100) / 100;\n    \n    // Apply voucher discount after taxes\n    let discountAmount = 0;\n    if (appliedVoucher) {\n      if (appliedVoucher.discountType === 'percentage') {\n        discountAmount = Math.round((grandTotal * (parseFloat(appliedVoucher.discountAmount) / 100)) * 100) / 100;\n      } else if (appliedVoucher.discountType === 'fixed') {\n        discountAmount = Math.min(parseFloat(appliedVoucher.discountAmount), grandTotal);\n      }\n      grandTotal = Math.round((grandTotal - discountAmount) * 100) / 100;\n    }\n\n    // Calculate tip\n    let tipAmount = 0;\n    if (tipValue > 0) {\n      if (tipType === \"percentage\") {\n        tipAmount = Math.round((grandTotal * (tipValue / 100)) * 100) / 100;\n      } else {\n        tipAmount = Math.round(tipValue * 100) / 100;\n      }\n      grandTotal = Math.round((grandTotal + tipAmount) * 100) / 100;\n    }\n\n    return {\n      subtotal,\n      taxBreakdown,\n      totalTax,\n      discountAmount,\n      tipAmount,\n      grandTotal,\n      items\n    };\n  };\n\n  const billCalc = calculateBill();\n\n  // Calculate total of payments entered\n  const totalPaymentAmount = payments.reduce((sum, p) => sum + p.amount, 0);\n  const remainingAmount = Math.max(0, billCalc.grandTotal - totalPaymentAmount);\n\n  const handleAddPayment = () => {\n    if (!currentPaymentMethod) {\n      toast({ title: \"Error\", description: \"Please select a payment method\", variant: \"destructive\" });\n      return;\n    }\n    \n    const amount = parseFloat(currentPaymentAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast({ title: \"Error\", description: \"Please enter a valid payment amount\", variant: \"destructive\" });\n      return;\n    }\n\n    if (amount > remainingAmount) {\n      toast({ title: \"Error\", description: \"Payment amount exceeds remaining balance\", variant: \"destructive\" });\n      return;\n    }\n\n    const newPayment: PaymentEntry = {\n      id: Date.now().toString(),\n      paymentMethod: currentPaymentMethod,\n      amount,\n      reference: currentPaymentReference || undefined\n    };\n\n    setPayments([...payments, newPayment]);\n    setCurrentPaymentMethod(\"\");\n    setCurrentPaymentAmount(\"\");\n    setCurrentPaymentReference(\"\");\n  };\n\n  const handleRemovePayment = (id: string) => {\n    setPayments(payments.filter(p => p.id !== id));\n  };\n\n  const handleApplyVoucher = () => {\n    if (voucherCode.trim()) {\n      validateVoucherMutation.mutate(voucherCode.trim());\n    }\n  };\n\n  const handleProcessBill = async () => {\n    if (selectedTables.length === 0) {\n      toast({ title: \"Error\", description: \"Please select at least one table\", variant: \"destructive\" });\n      return;\n    }\n\n    if (selectedTableOrders.length === 0) {\n      toast({ title: \"Error\", description: \"No orders to process\", variant: \"destructive\" });\n      return;\n    }\n\n    if (payments.length === 0) {\n      toast({ title: \"Error\", description: \"Please add at least one payment\", variant: \"destructive\" });\n      return;\n    }\n\n    if (Math.abs(remainingAmount) > 0.01) {\n      toast({ title: \"Error\", description: \"Total payments must equal the bill amount\", variant: \"destructive\" });\n      return;\n    }\n\n    // Prepare split details if applicable\n    let splitDetails = null;\n    if (splitMode === \"equal\") {\n      const splitAmount = Math.round((billCalc.grandTotal / splitCount) * 100) / 100;\n      splitDetails = {\n        mode: \"equal\",\n        count: splitCount,\n        amountPerPerson: splitAmount\n      };\n    } else if (splitMode === \"custom\" && customSplits.length > 0) {\n      splitDetails = {\n        mode: \"custom\",\n        splits: customSplits\n      };\n    }\n\n    const billData = {\n      tableIds: selectedTables,\n      orderIds: selectedTableOrders.map((o: any) => o.id),\n      subtotal: billCalc.subtotal.toString(),\n      taxBreakdown: billCalc.taxBreakdown,\n      totalTax: billCalc.totalTax.toString(),\n      discount: billCalc.discountAmount.toString(),\n      voucherId: appliedVoucher?.id || null,\n      voucherCode: appliedVoucher?.code || null,\n      tipType: tipValue > 0 ? tipType : null,\n      tipValue: tipValue > 0 ? tipValue.toString() : \"0\",\n      tipAmount: billCalc.tipAmount.toString(),\n      grandTotal: billCalc.grandTotal.toString(),\n      splitMode: splitMode !== \"none\" ? splitMode : null,\n      splitDetails,\n      items: billCalc.items,\n      status: \"final\",\n      payments: payments.map(p => ({\n        paymentMethod: p.paymentMethod,\n        amount: p.amount.toString(),\n        reference: p.reference\n      }))\n    };\n\n    createBillMutation.mutate(billData);\n  };\n\n  const handlePrintBill = (bill?: any) => {\n    const billToPrint = bill || {\n      billNumber: `PREVIEW-${Date.now().toString().slice(-6)}`,\n      ...billCalc,\n      tableNames: selectedTables.map(id => tables.find((t: any) => t.id === id)?.name).join(\", \"),\n      createdAt: new Date().toISOString(),\n      payments: payments\n    };\n\n    const hotelName = hotel?.name || \"HOTEL\";\n    const hotelAddress = hotel?.address || \"\";\n    const hotelPhone = hotel?.phone || \"\";\n    const now = new Date(billToPrint.createdAt);\n    \n    let billContent = `\n<div style=\"font-family: 'Courier New', monospace; width: 300px; padding: 10px;\">\n  <div style=\"text-align: center; font-weight: bold; font-size: 16px; border-bottom: 2px dashed #000; padding-bottom: 10px; margin-bottom: 10px;\">\n    ${hotelName}\n  </div>\n  \n  <div style=\"text-align: center; font-size: 11px; margin-bottom: 10px;\">\n    ${hotelAddress ? `${hotelAddress}<br/>` : ''}\n    ${hotelPhone ? `Tel: ${hotelPhone}<br/>` : ''}\n  </div>\n  \n  <div style=\"text-align: center; font-size: 12px; margin-bottom: 15px;\">\n    Restaurant Bill<br/>\n    ${billToPrint.tableNames || billToPrint.tableIds?.map((id: string) => tables.find((t: any) => t.id === id)?.name).join(\", \")}\n  </div>\n  \n  <div style=\"font-size: 11px; margin-bottom: 10px;\">\n    <div>Date: ${now.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' })}</div>\n    <div>Time: ${now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>\n    <div>Bill No: ${billToPrint.billNumber}</div>\n    <div>Cashier: ${user?.username}</div>\n  </div>\n  \n  <div style=\"border-top: 2px dashed #000; border-bottom: 2px dashed #000; padding: 10px 0; margin: 10px 0;\">\n    <table style=\"width: 100%; font-size: 11px;\">\n      <thead>\n        <tr style=\"border-bottom: 1px solid #000;\">\n          <th style=\"text-align: left; padding-bottom: 5px;\">Item</th>\n          <th style=\"text-align: center; padding-bottom: 5px;\">Qty</th>\n          <th style=\"text-align: right; padding-bottom: 5px;\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>`;\n\n    (billToPrint.items || []).forEach((item: any) => {\n      billContent += `\n        <tr>\n          <td style=\"padding: 3px 0;\">${item.name}</td>\n          <td style=\"text-align: center;\">${item.qty}</td>\n          <td style=\"text-align: right;\">${formatCurrency(item.total)}</td>\n        </tr>`;\n    });\n\n    billContent += `\n      </tbody>\n    </table>\n  </div>\n  \n  <div style=\"font-size: 11px; margin-top: 10px;\">\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n      <span>Subtotal:</span>\n      <span>${formatCurrency(billToPrint.subtotal)}</span>\n    </div>`;\n\n    Object.entries(billToPrint.taxBreakdown || {}).forEach(([taxName, taxInfo]: [string, any]) => {\n      billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0; padding-left: 10px;\">\n      <span>${taxName} (${taxInfo.rate}%):</span>\n      <span>${formatCurrency(taxInfo.amount)}</span>\n    </div>`;\n    });\n\n    if (billToPrint.discountAmount > 0) {\n      billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0; color: green;\">\n      <span>Discount:</span>\n      <span>-${formatCurrency(billToPrint.discountAmount)}</span>\n    </div>`;\n    }\n\n    if (billToPrint.tipAmount > 0) {\n      billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n      <span>Tip/Gratuity:</span>\n      <span>${formatCurrency(billToPrint.tipAmount)}</span>\n    </div>`;\n    }\n\n    billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 8px 0; margin-top: 5px; border-top: 2px solid #000; font-weight: bold; font-size: 13px;\">\n      <span>GRAND TOTAL:</span>\n      <span>${formatCurrency(billToPrint.grandTotal)}</span>\n    </div>\n  </div>`;\n\n    if (billToPrint.payments && billToPrint.payments.length > 0) {\n      billContent += `\n  <div style=\"font-size: 11px; margin-top: 10px; border-top: 1px dashed #000; padding-top: 10px;\">\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Payment Details:</div>`;\n      \n      billToPrint.payments.forEach((payment: any) => {\n        const methodName = payment.paymentMethod === 'cash' ? 'Cash' :\n                          payment.paymentMethod === 'pos' ? 'Card/POS' : \n                          payment.paymentMethod === 'fonepay' ? 'Fonepay' : payment.paymentMethod;\n        billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 2px 0;\">\n      <span>${methodName}:</span>\n      <span>${formatCurrency(payment.amount)}</span>\n    </div>`;\n      });\n\n      billContent += `\n  </div>`;\n    }\n\n    if (billToPrint.splitMode && billToPrint.splitDetails) {\n      billContent += `\n  <div style=\"font-size: 11px; margin-top: 10px; border-top: 1px dashed #000; padding-top: 10px;\">\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Split Bill:</div>`;\n      \n      if (billToPrint.splitMode === 'equal') {\n        billContent += `\n    <div>Split ${billToPrint.splitDetails.count} ways: ${formatCurrency(billToPrint.splitDetails.amountPerPerson)} each</div>`;\n      } else if (billToPrint.splitMode === 'custom') {\n        billToPrint.splitDetails.splits.forEach((split: any) => {\n          billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 2px 0;\">\n      <span>${split.name}:</span>\n      <span>${formatCurrency(split.amount)}</span>\n    </div>`;\n        });\n      }\n\n      billContent += `\n  </div>`;\n    }\n\n    billContent += `\n  \n  <div style=\"text-align: center; font-size: 10px; margin-top: 15px; padding-top: 10px; border-top: 2px dashed #000;\">\n    Thank you for your visit!<br/>\n    Please come again\n  </div>\n</div>`;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Bill ${billToPrint.billNumber}</title>\n          </head>\n          <body>${billContent}</body>\n        </html>\n      `);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  const handleAmendBill = () => {\n    if (!selectedBillForAmendment) return;\n    if (!amendmentNote.trim()) {\n      toast({ title: \"Error\", description: \"Please provide an amendment note\", variant: \"destructive\" });\n      return;\n    }\n\n    amendBillMutation.mutate({\n      id: selectedBillForAmendment.id,\n      data: {\n        amendmentNote: amendmentNote.trim(),\n        status: 'amended'\n      }\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"Table Billing\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold\">Table Billing</h1>\n        </div>\n\n        <Tabs defaultValue=\"billing\" className=\"w-full\">\n          <TabsList>\n            <TabsTrigger value=\"billing\" data-testid=\"tab-billing\">\n              <Receipt className=\"w-4 h-4 mr-2\" />\n              Create Bill\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n              <History className=\"w-4 h-4 mr-2\" />\n              Bill History\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"billing\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Left Column - Table Selection & Order Details */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Users className=\"w-5 h-5 mr-2\" />\n                      Select Tables\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n                      {tables.map((table: any) => {\n                        const hasOrders = kotOrders.some((order: any) => \n                          order.tableId === table.id && \n                          order.status !== 'cancelled' && \n                          order.status !== 'served' &&\n                          order.items?.some((item: any) => item.status === 'approved' || item.status === 'ready')\n                        );\n                        \n                        return (\n                          <div\n                            key={table.id}\n                            className={`flex items-center space-x-2 p-3 rounded-lg border ${\n                              selectedTables.includes(table.id) ? 'bg-blue-50 border-blue-500' : 'border-gray-200'\n                            } ${!hasOrders ? 'opacity-50' : 'cursor-pointer hover:bg-gray-50'}`}\n                            onClick={() => hasOrders && handleTableToggle(table.id)}\n                            data-testid={`table-select-${table.id}`}\n                          >\n                            <Checkbox\n                              checked={selectedTables.includes(table.id)}\n                              disabled={!hasOrders}\n                              onCheckedChange={() => hasOrders && handleTableToggle(table.id)}\n                              data-testid={`checkbox-table-${table.id}`}\n                            />\n                            <div>\n                              <div className=\"font-medium\">{table.name}</div>\n                              {hasOrders && <div className=\"text-xs text-green-600\">Active Orders</div>}\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Order Items</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {selectedTableOrders.length === 0 ? (\n                      <p className=\"text-gray-500 text-center py-4\">Select tables to view orders</p>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        {selectedTableOrders.map((order: any) => (\n                          <div key={order.id} className=\"border rounded-lg p-3\">\n                            <div className=\"font-medium text-sm mb-2\">\n                              Table: {tables.find((t: any) => t.id === order.tableId)?.name}\n                            </div>\n                            {order.items?.filter((item: any) => item.status === 'approved' || item.status === 'ready').map((item: any) => {\n                              const menuItem = menuItems.find((m: any) => m.id === item.menuItemId);\n                              if (!menuItem) return null;\n                              return (\n                                <div key={item.id} className=\"flex justify-between items-center text-sm py-1\">\n                                  <span>{menuItem.name}</span>\n                                  <span>x{item.qty}</span>\n                                  <span className=\"font-medium\">{formatCurrency(menuItem.price * item.qty)}</span>\n                                </div>\n                              );\n                            })}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Right Column - Bill Details & Payment */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Bill Summary</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Subtotal:</span>\n                        <span data-testid=\"text-subtotal\">{formatCurrency(billCalc.subtotal)}</span>\n                      </div>\n                      \n                      {Object.entries(billCalc.taxBreakdown).map(([taxName, taxInfo]: [string, any]) => (\n                        <div key={taxName} className=\"flex justify-between text-sm pl-4\">\n                          <span>{taxName} ({taxInfo.rate}%):</span>\n                          <span>{formatCurrency(taxInfo.amount)}</span>\n                        </div>\n                      ))}\n\n                      {billCalc.discountAmount > 0 && (\n                        <div className=\"flex justify-between text-sm text-green-600\">\n                          <span>Discount:</span>\n                          <span data-testid=\"text-discount\">-{formatCurrency(billCalc.discountAmount)}</span>\n                        </div>\n                      )}\n\n                      {/* Tip/Gratuity */}\n                      <div className=\"border-t pt-3 mt-3\">\n                        <Label className=\"text-sm font-medium\">Tip/Gratuity (Optional)</Label>\n                        <div className=\"flex gap-2 mt-2\">\n                          <Select value={tipType} onValueChange={(val: any) => setTipType(val)}>\n                            <SelectTrigger className=\"w-32\" data-testid=\"select-tip-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"percentage\">Percentage</SelectItem>\n                              <SelectItem value=\"flat\">Flat Amount</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Input\n                            type=\"number\"\n                            placeholder={tipType === \"percentage\" ? \"%\" : \"Amount\"}\n                            value={tipValue}\n                            onChange={(e) => setTipValue(parseFloat(e.target.value) || 0)}\n                            className=\"flex-1\"\n                            data-testid=\"input-tip-value\"\n                          />\n                        </div>\n                        {billCalc.tipAmount > 0 && (\n                          <div className=\"flex justify-between text-sm mt-2\">\n                            <span>Tip Amount:</span>\n                            <span data-testid=\"text-tip-amount\">{formatCurrency(billCalc.tipAmount)}</span>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex justify-between text-lg font-bold border-t pt-3 mt-3\">\n                        <span>GRAND TOTAL:</span>\n                        <span data-testid=\"text-grand-total\">{formatCurrency(billCalc.grandTotal)}</span>\n                      </div>\n                    </div>\n\n                    {/* Voucher */}\n                    <div className=\"border-t pt-4\">\n                      <Label className=\"text-sm font-medium\">Apply Voucher</Label>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Input\n                          placeholder=\"Voucher code\"\n                          value={voucherCode}\n                          onChange={(e) => setVoucherCode(e.target.value)}\n                          disabled={!!appliedVoucher}\n                          data-testid=\"input-voucher-code\"\n                        />\n                        <Button \n                          onClick={handleApplyVoucher}\n                          disabled={validateVoucherMutation.isPending || !!appliedVoucher}\n                          data-testid=\"button-apply-voucher\"\n                        >\n                          Apply\n                        </Button>\n                        {appliedVoucher && (\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setAppliedVoucher(null);\n                              setVoucherCode(\"\");\n                            }}\n                            data-testid=\"button-remove-voucher\"\n                          >\n                            Remove\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Split Bill */}\n                    <div className=\"border-t pt-4\">\n                      <Label className=\"text-sm font-medium flex items-center\">\n                        <Split className=\"w-4 h-4 mr-2\" />\n                        Split Bill\n                      </Label>\n                      <Select value={splitMode} onValueChange={(val: any) => setSplitMode(val)}>\n                        <SelectTrigger className=\"mt-2\" data-testid=\"select-split-mode\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">No Split</SelectItem>\n                          <SelectItem value=\"equal\">Split Equally</SelectItem>\n                          <SelectItem value=\"custom\">Custom Split</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      {splitMode === \"equal\" && (\n                        <div className=\"mt-2\">\n                          <Label className=\"text-xs\">Number of people</Label>\n                          <Input\n                            type=\"number\"\n                            min=\"2\"\n                            value={splitCount}\n                            onChange={(e) => setSplitCount(parseInt(e.target.value) || 2)}\n                            data-testid=\"input-split-count\"\n                          />\n                          <p className=\"text-sm text-gray-600 mt-2\">\n                            {formatCurrency(billCalc.grandTotal / splitCount)} per person\n                          </p>\n                        </div>\n                      )}\n\n                      {splitMode === \"custom\" && (\n                        <div className=\"mt-2 space-y-2\">\n                          {customSplits.map((split, index) => (\n                            <div key={index} className=\"flex gap-2\">\n                              <Input\n                                placeholder=\"Name\"\n                                value={split.name}\n                                onChange={(e) => {\n                                  const newSplits = [...customSplits];\n                                  newSplits[index].name = e.target.value;\n                                  setCustomSplits(newSplits);\n                                }}\n                                className=\"flex-1\"\n                                data-testid={`input-split-name-${index}`}\n                              />\n                              <Input\n                                type=\"number\"\n                                placeholder=\"Amount\"\n                                value={split.amount}\n                                onChange={(e) => {\n                                  const newSplits = [...customSplits];\n                                  newSplits[index].amount = parseFloat(e.target.value) || 0;\n                                  setCustomSplits(newSplits);\n                                }}\n                                className=\"w-32\"\n                                data-testid={`input-split-amount-${index}`}\n                              />\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => setCustomSplits(customSplits.filter((_, i) => i !== index))}\n                                data-testid={`button-remove-split-${index}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setCustomSplits([...customSplits, { name: \"\", amount: 0 }])}\n                            data-testid=\"button-add-split\"\n                          >\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Split\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Payment</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Add Payment Form */}\n                    <div className=\"space-y-3\">\n                      <div>\n                        <Label className=\"text-sm\">Payment Method</Label>\n                        <Select value={currentPaymentMethod} onValueChange={setCurrentPaymentMethod}>\n                          <SelectTrigger data-testid=\"select-payment-method\">\n                            <SelectValue placeholder=\"Select method\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"cash\">Cash</SelectItem>\n                            <SelectItem value=\"pos\">Card/POS</SelectItem>\n                            <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-sm\">Amount</Label>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter amount\"\n                          value={currentPaymentAmount}\n                          onChange={(e) => setCurrentPaymentAmount(e.target.value)}\n                          data-testid=\"input-payment-amount\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label className=\"text-sm\">Reference (Optional)</Label>\n                        <Input\n                          placeholder=\"Transaction ref\"\n                          value={currentPaymentReference}\n                          onChange={(e) => setCurrentPaymentReference(e.target.value)}\n                          data-testid=\"input-payment-reference\"\n                        />\n                      </div>\n\n                      <Button \n                        onClick={handleAddPayment} \n                        className=\"w-full\"\n                        variant=\"outline\"\n                        data-testid=\"button-add-payment\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Payment\n                      </Button>\n                    </div>\n\n                    {/* Payment List */}\n                    {payments.length > 0 && (\n                      <div className=\"border-t pt-4 space-y-2\">\n                        <Label className=\"text-sm font-medium\">Payments Added:</Label>\n                        {payments.map((payment) => (\n                          <div key={payment.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\" data-testid={`payment-entry-${payment.id}`}>\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium text-sm\">\n                                {payment.paymentMethod === 'cash' ? 'Cash' :\n                                 payment.paymentMethod === 'pos' ? 'Card/POS' : 'Fonepay'}\n                              </div>\n                              <div className=\"text-xs text-gray-600\">{formatCurrency(payment.amount)}</div>\n                              {payment.reference && <div className=\"text-xs text-gray-500\">Ref: {payment.reference}</div>}\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleRemovePayment(payment.id)}\n                              data-testid={`button-remove-payment-${payment.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                        <div className=\"flex justify-between font-medium pt-2 border-t\">\n                          <span>Total Paid:</span>\n                          <span data-testid=\"text-total-paid\">{formatCurrency(totalPaymentAmount)}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Remaining:</span>\n                          <span className={remainingAmount > 0 ? 'text-red-600' : 'text-green-600'} data-testid=\"text-remaining\">\n                            {formatCurrency(remainingAmount)}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button \n                        onClick={handleProcessBill} \n                        disabled={createBillMutation.isPending || remainingAmount !== 0 || payments.length === 0}\n                        className=\"flex-1\"\n                        data-testid=\"button-process-bill\"\n                      >\n                        <Receipt className=\"w-4 h-4 mr-2\" />\n                        Process Bill\n                      </Button>\n                      <Button \n                        onClick={() => handlePrintBill()} \n                        variant=\"outline\"\n                        data-testid=\"button-print-preview\"\n                      >\n                        <Printer className=\"w-4 h-4 mr-2\" />\n                        Preview\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Filter Bills</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div>\n                    <Label className=\"text-sm\">Start Date</Label>\n                    <Input\n                      type=\"date\"\n                      value={historyStartDate}\n                      onChange={(e) => setHistoryStartDate(e.target.value)}\n                      data-testid=\"input-history-start-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">End Date</Label>\n                    <Input\n                      type=\"date\"\n                      value={historyEndDate}\n                      onChange={(e) => setHistoryEndDate(e.target.value)}\n                      data-testid=\"input-history-end-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Status</Label>\n                    <Select value={historyStatus} onValueChange={setHistoryStatus}>\n                      <SelectTrigger data-testid=\"select-history-status\">\n                        <SelectValue placeholder=\"All\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">All</SelectItem>\n                        <SelectItem value=\"final\">Final</SelectItem>\n                        <SelectItem value=\"amended\">Amended</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex items-end\">\n                    <Button\n                      onClick={() => {\n                        setHistoryStartDate(\"\");\n                        setHistoryEndDate(\"\");\n                        setHistoryStatus(\"\");\n                      }}\n                      variant=\"outline\"\n                      data-testid=\"button-clear-filters\"\n                    >\n                      Clear Filters\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Bill History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {billHistory.length === 0 ? (\n                  <p className=\"text-center text-gray-500 py-8\">No bills found</p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {billHistory.map((bill: any) => (\n                      <div key={bill.id} className=\"border rounded-lg p-4\" data-testid={`bill-history-${bill.id}`}>\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <div className=\"font-medium\">{bill.billNumber}</div>\n                            <div className=\"text-sm text-gray-600\">\n                              {new Date(bill.createdAt).toLocaleString()}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Tables: {bill.tableIds?.map((id: string) => \n                                tables.find((t: any) => t.id === id)?.name\n                              ).join(\", \")}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-bold text-lg\">{formatCurrency(parseFloat(bill.grandTotal))}</div>\n                            <div className={`text-xs px-2 py-1 rounded ${\n                              bill.status === 'final' ? 'bg-green-100 text-green-700' :\n                              bill.status === 'amended' ? 'bg-yellow-100 text-yellow-700' : 'bg-gray-100'\n                            }`}>\n                              {bill.status}\n                            </div>\n                          </div>\n                        </div>\n\n                        {bill.amendmentNote && (\n                          <div className=\"text-xs bg-yellow-50 p-2 rounded mb-2\">\n                            <strong>Amendment:</strong> {bill.amendmentNote}\n                          </div>\n                        )}\n\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handlePrintBill(bill)}\n                            data-testid={`button-print-bill-${bill.id}`}\n                          >\n                            <Printer className=\"w-3 h-3 mr-1\" />\n                            Print\n                          </Button>\n                          {(user?.role?.name === 'manager' || user?.role?.name === 'owner') && bill.status === 'final' && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setSelectedBillForAmendment(bill);\n                                setAmendmentDialogOpen(true);\n                              }}\n                              data-testid={`button-amend-bill-${bill.id}`}\n                            >\n                              <Edit className=\"w-3 h-3 mr-1\" />\n                              Amend\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Amendment Dialog */}\n        <Dialog open={amendmentDialogOpen} onOpenChange={setAmendmentDialogOpen}>\n          <DialogContent data-testid=\"dialog-amendment\">\n            <DialogHeader>\n              <DialogTitle>Amend Bill</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Bill Number</Label>\n                <Input value={selectedBillForAmendment?.billNumber || \"\"} disabled />\n              </div>\n              <div>\n                <Label>Amendment Note (Required)</Label>\n                <Textarea\n                  placeholder=\"Explain why this bill is being amended...\"\n                  value={amendmentNote}\n                  onChange={(e) => setAmendmentNote(e.target.value)}\n                  rows={4}\n                  data-testid=\"textarea-amendment-note\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setAmendmentDialogOpen(false);\n                  setAmendmentNote(\"\");\n                  setSelectedBillForAmendment(null);\n                }}\n                data-testid=\"button-cancel-amendment\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleAmendBill}\n                disabled={!amendmentNote.trim() || amendBillMutation.isPending}\n                data-testid=\"button-confirm-amendment\"\n              >\n                Confirm Amendment\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":47891},"client/src/pages/dashboard/department-stock-requests.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { CheckCircle, Clock, Truck, Package } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function DepartmentStockRequests() {\n  const { data: inventoryItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: requests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/stock-requests/department\"],\n    refetchInterval: 3000\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-50\"><Clock className=\"w-3 h-3 mr-1\" /> Pending</Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"bg-blue-50\"><Truck className=\"w-3 h-3 mr-1\" /> Ready to Pickup</Badge>;\n      case 'delivered':\n        return <Badge variant=\"outline\" className=\"bg-green-50\"><CheckCircle className=\"w-3 h-3 mr-1\" /> Delivered</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getItemById = (itemId: string) => {\n    return inventoryItems.find((item: any) => item.id === itemId);\n  };\n\n  return (\n    <DashboardLayout title=\"Department Stock Requests\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Department Stock Requests</h1>\n          <p className=\"text-muted-foreground mt-1\">View stock requests from your department staff</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Stock Request Records</CardTitle>\n            <CardDescription>All stock requests from department staff members</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {requests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Package className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No stock requests from your department</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {requests.map((request: any) => {\n                  const item = getItemById(request.itemId);\n                  return (\n                    <div key={request.id} className=\"border rounded-lg p-4\" data-testid={`request-${request.id}`}>\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-semibold text-lg\" data-testid={`text-item-${request.id}`}>{item?.name || 'Unknown Item'}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Requested Quantity: <span className=\"font-medium\">{request.quantity} {request.unit}</span>\n                          </div>\n                          {request.notes && (\n                            <div className=\"text-sm text-muted-foreground mt-1\">\n                              Notes: {request.notes}\n                            </div>\n                          )}\n                          <div className=\"text-xs text-muted-foreground mt-2\">\n                            Requested: {new Date(request.createdAt).toLocaleString()}\n                          </div>\n                          {request.status === 'approved' && request.approvedAt && (\n                            <div className=\"text-xs text-muted-foreground\">\n                              Approved: {new Date(request.approvedAt).toLocaleString()}\n                            </div>\n                          )}\n                          {request.status === 'delivered' && request.deliveredAt && (\n                            <div className=\"text-xs text-muted-foreground\">\n                              Delivered: {new Date(request.deliveredAt).toLocaleString()}\n                            </div>\n                          )}\n                        </div>\n                        <div data-testid={`status-${request.id}`}>{getStatusBadge(request.status)}</div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":4450},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"tests/brutal-attack-test.ts":{"content":"import { db } from './server/db';\nimport { users, mealVouchers, hallBookings } from './shared/schema';\n\nasync function brutalAttackTest() {\n  console.log('🔥 BRUTAL ATTACK TESTING STARTED\\n');\n  \n  // Attack 1: Rapid-fire concurrent requests (simulating DDoS)\n  console.log('⚔️ Attack 1: Simulating 100 concurrent API requests...');\n  const start = Date.now();\n  const requests = Array.from({ length: 100 }, () => \n    db.query.users.findMany({ limit: 1 })\n  );\n  \n  try {\n    await Promise.all(requests);\n    const elapsed = Date.now() - start;\n    console.log(`✅ Handled 100 concurrent requests in ${elapsed}ms`);\n  } catch (error) {\n    console.log('❌ VULNERABILITY: Crashed under load!', error);\n  }\n  \n  // Attack 2: Extreme data range queries\n  console.log('\\n⚔️ Attack 2: Extreme date range queries...');\n  try {\n    const extremeDates = await db.query.hallBookings.findMany({\n      where: (hallBookings, { between }) => \n        between(\n          hallBookings.bookingStartTime,\n          new Date('1900-01-01'),\n          new Date('2100-12-31')\n        ),\n      limit: 1000\n    });\n    console.log(`✅ Handled extreme date range query: ${extremeDates.length} results`);\n  } catch (error) {\n    console.log('❌ VULNERABILITY: Date range query failed!', error);\n  }\n  \n  // Attack 3: Nested/complex query injection attempt\n  console.log('\\n⚔️ Attack 3: Complex nested query...');\n  try {\n    const nestedQuery = await db.query.users.findMany({\n      with: {\n        role: true,\n        hotel: true\n      },\n      limit: 100\n    });\n    console.log(`✅ Handled complex nested query: ${nestedQuery.length} results`);\n  } catch (error) {\n    console.log('❌ VULNERABILITY: Nested query failed!', error);\n  }\n  \n  // Attack 4: Edge case numeric values\n  console.log('\\n⚔️ Attack 4: Testing extreme numeric values...');\n  try {\n    // Try to create hall booking with extreme values\n    const extremeBooking = {\n      hotelId: 'fe06fdb2-1222-4ec1-be24-6048f1ac1728',\n      hallId: '232c751f-2595-4c27-b348-9eb2fe1c4b2a',\n      customerName: 'Extreme Test',\n      customerPhone: '9'.repeat(50), // Very long phone\n      bookingStartTime: new Date(),\n      bookingEndTime: new Date(Date.now() + 1000),\n      totalAmount: '999999999999.99', // Max numeric\n      numberOfPeople: 999999,\n      advancePaid: '0',\n      balanceDue: '999999999999.99'\n    };\n    \n    const result = await db.insert(hallBookings).values(extremeBooking as any).returning();\n    console.log(`✅ Handled extreme numeric values: Created booking ${result[0].id}`);\n    \n    // Cleanup\n    const { eq } = await import('drizzle-orm');\n    await db.delete(hallBookings).where(eq(hallBookings.id, result[0].id));\n  } catch (error: any) {\n    if (error.message?.includes('out of range')) {\n      console.log('✅ PROTECTED: Numeric overflow prevented');\n    } else {\n      console.log('⚠️  Extreme values error:', error.message);\n    }\n  }\n  \n  // Attack 5: Character encoding attacks\n  console.log('\\n⚔️ Attack 5: Testing special character encoding...');\n  try {\n    const specialChars = await db.query.users.findMany({\n      where: (users, { eq }) => eq(users.username, '👾🔥💀<>\"\\'/\\\\'),\n      limit: 1\n    });\n    console.log(`✅ Handled special character query safely`);\n  } catch (error) {\n    console.log('❌ VULNERABILITY: Special characters broke query!', error);\n  }\n  \n  // Attack 6: Empty/NULL attacks\n  console.log('\\n⚔️ Attack 6: Testing NULL/empty value handling...');\n  try {\n    const nullTests = await Promise.all([\n      db.query.users.findMany({ where: (users, { eq }) => eq(users.email, ''), limit: 1 }),\n      db.query.users.findMany({ where: (users, { isNull }) => isNull(users.phone), limit: 1 })\n    ]);\n    console.log(`✅ Handled NULL/empty queries: ${nullTests[0].length}, ${nullTests[1].length} results`);\n  } catch (error) {\n    console.log('❌ VULNERABILITY: NULL handling failed!', error);\n  }\n  \n  console.log('\\n🎯 BRUTAL ATTACK TEST COMPLETED!');\n}\n\nbrutalAttackTest()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error('💥 CRITICAL FAILURE:', error);\n    process.exit(1);\n  });\n","size_bytes":4152},"client/src/pages/dashboard/storekeeper.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Package, AlertTriangle, CheckSquare, ClipboardList, Settings } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function StorekeeperDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: inventoryItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: lowStockItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/low-stock-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: tasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/tasks/my-tasks\"],\n    refetchInterval: 3000\n  });\n\n  const { data: stockRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/stock-requests/pending\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates for stock requests\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/stock-requests/pending\"],\n    refetchInterval: 3000,\n    events: ['stock-request:created', 'stock-request:updated']\n  });\n\n  // Real-time updates for inventory and tasks\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000,\n    events: ['stock:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/tasks/my-tasks\"],\n    refetchInterval: 3000,\n    events: ['task:created', 'task:updated', 'task:deleted']\n  });\n\n  const pendingTasks = tasks.filter((t: any) => t.status === 'pending');\n\n  const menuItems = [\n    {\n      title: \"सामान हेर्नुहोस् / View Stock\",\n      subtitle: `${inventoryItems.length} items in store`,\n      icon: <Package className=\"h-12 w-12\" />,\n      color: \"bg-blue-50 hover:bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      route: \"/storekeeper/inventory-tracking\",\n      badge: null,\n      testId: \"button-view-stock\"\n    },\n    {\n      title: \"कम सामान / Low Stock\",\n      subtitle: lowStockItems.length > 0 ? `${lowStockItems.length} items need reorder` : \"All items are in stock\",\n      icon: <AlertTriangle className=\"h-12 w-12\" />,\n      color: lowStockItems.length > 0 ? \"bg-red-50 hover:bg-red-100\" : \"bg-gray-50 hover:bg-gray-100\",\n      iconColor: lowStockItems.length > 0 ? \"text-red-600\" : \"text-gray-400\",\n      route: \"/storekeeper/inventory-tracking\",\n      badge: lowStockItems.length > 0 ? lowStockItems.length : null,\n      testId: \"button-low-stock\"\n    },\n    {\n      title: \"सामान दिनु/लिनु / Give/Receive Stock\",\n      subtitle: \"Manage inventory in/out\",\n      icon: <Settings className=\"h-12 w-12\" />,\n      color: \"bg-green-50 hover:bg-green-100\",\n      iconColor: \"text-green-600\",\n      route: \"/storekeeper/inventory-management\",\n      badge: null,\n      testId: \"button-manage-stock\"\n    },\n    {\n      title: \"माग आएको / Stock Requests\",\n      subtitle: stockRequests.length > 0 ? `${stockRequests.length} pending requests` : \"No pending requests\",\n      icon: <ClipboardList className=\"h-12 w-12\" />,\n      color: stockRequests.length > 0 ? \"bg-orange-50 hover:bg-orange-100\" : \"bg-gray-50 hover:bg-gray-100\",\n      iconColor: stockRequests.length > 0 ? \"text-orange-600\" : \"text-gray-400\",\n      route: \"/storekeeper/stock-requests\",\n      badge: stockRequests.length > 0 ? stockRequests.length : null,\n      testId: \"button-stock-requests\"\n    },\n    {\n      title: \"मेरो काम / My Tasks\",\n      subtitle: pendingTasks.length > 0 ? `${pendingTasks.length} tasks pending` : \"No pending tasks\",\n      icon: <CheckSquare className=\"h-12 w-12\" />,\n      color: pendingTasks.length > 0 ? \"bg-purple-50 hover:bg-purple-100\" : \"bg-gray-50 hover:bg-gray-100\",\n      iconColor: pendingTasks.length > 0 ? \"text-purple-600\" : \"text-gray-400\",\n      route: \"/storekeeper/my-tasks\",\n      badge: pendingTasks.length > 0 ? pendingTasks.length : null,\n      testId: \"button-my-tasks\"\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"स्टोर व्यवस्थापक / Storekeeper\">\n      <div className=\"space-y-6 p-2 sm:p-6\">\n        {/* Status Summary */}\n        <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\">Store Status</h2>\n                <p className=\"text-blue-100\">Everything at a glance</p>\n              </div>\n              <Package className=\"h-16 w-16 opacity-50\" />\n            </div>\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 mt-6\">\n              <div className=\"bg-white/20 rounded-lg p-3\">\n                <div className=\"text-3xl font-bold\">{inventoryItems.length}</div>\n                <div className=\"text-sm text-blue-100\">Total Items</div>\n              </div>\n              <div className=\"bg-white/20 rounded-lg p-3\">\n                <div className=\"text-3xl font-bold\">{lowStockItems.length}</div>\n                <div className=\"text-sm text-blue-100\">Low Stock</div>\n              </div>\n              <div className=\"bg-white/20 rounded-lg p-3\">\n                <div className=\"text-3xl font-bold\">{stockRequests.length}</div>\n                <div className=\"text-sm text-blue-100\">Requests</div>\n              </div>\n              <div className=\"bg-white/20 rounded-lg p-3\">\n                <div className=\"text-3xl font-bold\">{pendingTasks.length}</div>\n                <div className=\"text-sm text-blue-100\">Tasks</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Menu - Large Buttons */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          {menuItems.map((item) => (\n            <Card\n              key={item.route}\n              className={`${item.color} border-2 cursor-pointer transition-all hover:scale-105 hover:shadow-lg relative`}\n              onClick={() => setLocation(item.route)}\n              data-testid={item.testId}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-4 flex-1\">\n                    <div className={`${item.iconColor} flex-shrink-0`}>\n                      {item.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-xl font-bold text-gray-900 mb-1\">\n                        {item.title}\n                      </h3>\n                      <p className=\"text-gray-600 text-base\">\n                        {item.subtitle}\n                      </p>\n                    </div>\n                  </div>\n                  {item.badge !== null && (\n                    <Badge className=\"absolute top-4 right-4 h-10 w-10 flex items-center justify-center rounded-full bg-red-500 text-white text-lg font-bold\">\n                      {item.badge}\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Quick Alerts */}\n        {lowStockItems.length > 0 && (\n          <Card className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <AlertTriangle className=\"h-8 w-8 text-red-600 flex-shrink-0\" />\n                <div>\n                  <h4 className=\"font-bold text-red-900 text-lg\">\n                    ⚠️ Attention! / ध्यान दिनुहोस्!\n                  </h4>\n                  <p className=\"text-red-700 text-base\">\n                    {lowStockItems.length} items are running low. Please check and reorder.\n                  </p>\n                  <p className=\"text-red-600 text-sm mt-1\">\n                    {lowStockItems.length} सामान सकिँदै छ। कृपया जाँच गर्नुहोस्।\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Pending Requests Alert */}\n        {stockRequests.length > 0 && (\n          <Card className=\"border-orange-200 bg-orange-50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <ClipboardList className=\"h-8 w-8 text-orange-600 flex-shrink-0\" />\n                <div>\n                  <h4 className=\"font-bold text-orange-900 text-lg\">\n                    📋 New Requests / नयाँ माग\n                  </h4>\n                  <p className=\"text-orange-700 text-base\">\n                    {stockRequests.length} staff members are waiting for stock. Click \"Stock Requests\" above.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":9185},"client/src/pages/dashboard/waiter/food-search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Utensils, Coffee, Wine } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\n\nexport default function WaiterFoodSearch() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: menuItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"],\n    refetchInterval: 3000,\n  });\n\n  const filteredItems = menuItems.filter((item: any) =>\n    item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.category?.name?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getCategoryIcon = (categoryName: string) => {\n    const name = categoryName?.toLowerCase() || '';\n    if (name.includes('coffee') || name.includes('beverage')) return <Coffee className=\"h-4 w-4\" />;\n    if (name.includes('wine') || name.includes('alcohol') || name.includes('drink')) return <Wine className=\"h-4 w-4\" />;\n    return <Utensils className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <DashboardLayout title=\"Food Search\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Search className=\"h-5 w-5 mr-2\" />\n              Search Menu Items\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name, description, or category...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\">\n              Found {filteredItems.length} item(s)\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredItems.map((item: any) => (\n                <Card key={item.id} className={!item.active ? 'opacity-50' : ''}>\n                  <CardContent className=\"p-4 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-foreground\">{item.name}</h3>\n                        {item.category && (\n                          <div className=\"flex items-center space-x-1 text-sm text-muted-foreground mt-1\">\n                            {getCategoryIcon(item.category.name)}\n                            <span>{item.category.name}</span>\n                          </div>\n                        )}\n                      </div>\n                      <Badge variant={item.active ? \"default\" : \"secondary\"}>\n                        {item.active ? \"Available\" : \"Unavailable\"}\n                      </Badge>\n                    </div>\n\n                    {item.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {item.description}\n                      </p>\n                    )}\n\n                    <div className=\"flex items-center justify-between pt-2 border-t\">\n                      <span className=\"text-lg font-bold text-primary\">\n                        {formatCurrency(item.price)}\n                      </span>\n                      {item.preparationTime && (\n                        <span className=\"text-xs text-muted-foreground\">\n                          ~{item.preparationTime} min\n                        </span>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {filteredItems.length === 0 && searchTerm && (\n              <div className=\"text-center py-12\">\n                <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No items found matching \"{searchTerm}\"</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":4515},"replit.md":{"content":"# Hotel Management System\n\n## Overview\nThis project is a comprehensive hotel management system designed to streamline hotel operations. It provides a multi-role, integrated platform for managing guest services, room/hall, restaurant/bar operations, inventory, staff, tasks, maintenance, finance, and vendor management. The system aims to enhance efficiency across all hotel departments.\n\n## User Preferences\nI prefer detailed explanations and an iterative development approach. Please ask before making major changes. Do not make changes to the `shared/` folder unless absolutely necessary and with prior approval. Do not modify the core authentication logic in `server/auth.ts` without explicit instruction.\n\n## System Architecture\nThe system is a full-stack application built with React and TypeScript for the frontend, and Express.js with Node.js for the backend. PostgreSQL is used as the primary database, managed with Drizzle ORM.\n\n**Frontend:**\n-   **Framework**: React 18 with Vite.\n-   **Styling**: TailwindCSS, shadcn/ui, and Radix UI.\n-   **Routing**: Wouter.\n-   **State Management**: TanStack Query.\n\n**Backend:**\n-   **Framework**: Express.js.\n-   **Authentication**: Passport.js with multi-role support (17 distinct roles).\n-   **Database ORM**: Drizzle ORM for type-safe PostgreSQL interactions.\n\n**Key Features:**\n-   **Comprehensive Management Modules**: Guest/customer, room/hall, restaurant/bar operations, inventory, staff, task assignment, maintenance, financial, and vendor management.\n-   **UI/UX**: Role-specific dashboards focusing on functionality and clarity.\n-   **API Design**: All API routes are prefixed with `/api`.\n-   **Database Management**: Drizzle Kit for schema migrations; manual SQL changes are prohibited.\n-   **Unified Development Server**: Single server on port 5000 for both frontend and backend.\n-   **Hierarchical Leave Approval System**: Multi-level workflow with subordinate filtering and role-based access.\n-   **Room Reservation & Check-in/Check-out System**: Includes double-booking prevention and automatic cleaning queue integration.\n-   **Restaurant Billing System**: Features multi-table selection, cascading tax, split bills, multiple payment methods, and audit trails.\n-   **Immutable Financial System**: Transactions are permanent with void-only functionality requiring justification and approval.\n-   **Enterprise-Grade Security**: Production-ready API authentication/authorization with hotel ownership verification.\n-   **Dual Reporting System**: Separate dashboards for financial analytics and complete operational transparency.\n-   **Security Hardening**: Includes fixes for null byte injection, authorization bypass, input validation (SQL injection, XSS, type coercion), secure financial transactions, maintenance request reassignment security, and room status manipulation prevention with audit logging.\n-   **Password Security**: Passwords can only be changed via a dedicated reset endpoint, preventing direct modification via user update routes.\n\n## External Dependencies\n-   **PostgreSQL**: Relational database.\n-   **Vite**: Frontend build tool.\n-   **Wouter**: Frontend routing library.\n-   **TailwindCSS**: CSS framework.\n-   **shadcn/ui & Radix UI**: UI component libraries.\n-   **TanStack Query**: Data fetching and state management.\n-   **Express.js**: Backend web framework.\n-   **Node.js**: JavaScript runtime.\n-   **Drizzle ORM**: TypeScript ORM for PostgreSQL.\n-   **Passport.js**: Authentication middleware.\n-   **Lucide icons**: Icon library.\n\n## Replit Environment Setup (October 12, 2025)\n\n### Fresh Clone Setup - Completed ✅\nThe project has been successfully imported from GitHub and configured to run in the Replit environment:\n\n1. **Dependencies Installed**: ✅\n   - All Node.js packages installed via npm (507 packages)\n   - TypeScript, Vite, Express, Drizzle ORM, and all UI libraries ready\n   - No missing dependencies\n\n2. **Database**: ✅ PostgreSQL database configured and seeded with test data\n   - Database URL: Available via environment variable `DATABASE_URL`\n   - Schema pushed successfully using Drizzle Kit\n   - 17 distinct user roles (super_admin, owner, manager, etc.)\n   - Test hotel with rooms, halls, restaurant tables, and menu items\n   - Sample users, guests, vendors, and financial transactions\n   - 20 international guests, 6 rooms, 7 halls, 13 menu items, 10 restaurant tables\n\n3. **Development Workflow**: ✅ Configured to run `npm run dev` on port 5000\n   - Frontend and backend served from single Express server\n   - Vite dev server configured with HMR for Replit proxy environment\n   - Vite configured with `allowedHosts: true` in server/vite.ts for Replit proxy\n   - WebSocket support for real-time updates on `/ws` path\n   - Server binds to 0.0.0.0:5000 for Replit compatibility\n   - Workflow \"Server\" running and verified working\n\n4. **Deployment**: ✅ Configured for autoscale deployment\n   - Build: `npm run build` (compiles Vite frontend + esbuild backend)\n   - Run: `npm start` (production server)\n   - Deployment target: autoscale (stateless web app)\n\n5. **Git Configuration**: ✅\n   - .gitignore file created for Node.js project\n   - Excludes node_modules, dist, .env files, migrations, and IDE configs\n\n### Scripts Available\n- `npm run dev` - Development server with hot reload\n- `npm run build` - Production build\n- `npm start` - Start production server\n- `npm run db:push` - Push database schema changes\n- `npm run db:seed` - Seed database with test data\n\n### Test Credentials\n- **Superadmin**: username `superadmin`, password `aef009750905865270b03eb27ceba80e`\n- **Owner**: username `owner`, password `owner123`\n- **Manager**: username `manager`, password `manager`\n- **Waiter**: username `waiter`, password `waiter`\n- **Barista**: username `barista`, password `barista`\n- **Storekeeper**: username `store`, password `storekeeper`\n- See seed script output for all test users\n\n### Recent Updates\n\n**October 12, 2025 - Production Readiness Optimization:**\n- **Code Optimization**: Implemented React.lazy() code splitting for 100+ dashboard pages to reduce bundle size from 2.8MB\n  - All dashboard pages now load on-demand with Suspense fallback\n  - AuthPage remains eager-loaded for immediate login access\n  - Significant reduction in initial bundle size for faster load times\n- **Bug Fixes**: Fixed audit logging UUID issue - now correctly stores null instead of \"unknown\" string for unauthenticated events\n- **Build Configuration**: Fixed Vite dev plugins to only load in development environment\n  - Runtime error overlay, dev banner, and cartographer now excluded from production builds\n  - Prevents dev-time overlays from being bundled into production\n- **Security & Safety**: Enhanced .gitignore with production safety patterns\n  - Added test file patterns (*.test.*, *.spec.*, __tests__, __mocks__)\n  - Added certificate and key file patterns (*.pem, *.key, *.cert)\n  - Added secrets directories and Replit runtime files\n  - Removed migrations/ from ignore to ensure proper deployment\n- **Code Quality**: Removed all client-side console statements from 8 files for cleaner production code\n- **Tax Configuration**: Verified complete tax system with toggle switches and adjustable rates for VAT, Service Tax, and Luxury Tax\n\n**October 12, 2025 - UI/UX Bug Fixes:**\n- Fixed Security Head \"View Vehicles\" button to navigate to dedicated vehicle logs page at `/security-head/vehicles`\n- Added Attendance Reports page for Owner role with full navigation integration at `/owner/attendance`\n- Extended duty toggle functionality to management roles: Manager, Restaurant & Bar Manager, Housekeeping Supervisor, Finance, and Security Head can now clock in/out from their dashboards\n- Fixed Manager's Attendance Report columns to display name and username separately with proper labels\n\n**October 11, 2025 - Manager Role Enhancements:**\n- Added \"Leave Requests\" navigation option for managers to submit leave requests to owner\n- Leave requests follow the approval hierarchy: Manager → Owner\n\n**Real-time Updates:**\n- Front desk checkout now displays real-time updates for room service charges\n- When services are added/removed to a guest's reservation, the payment summary updates instantly without manual refresh\n- WebSocket events broadcast to front_desk, manager, and owner roles for room service charge changes\n\n### Known Issues\n- Vite HMR WebSocket may show connection warnings in browser console (fallback to localhost:undefined)\n- This is cosmetic and doesn't affect application functionality\n- The app's own WebSocket server on `/ws` works correctly for real-time updates","size_bytes":8604},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/dashboard/housekeeping-supervisor/staff-tracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Clock, CheckSquare } from \"lucide-react\";\n\nexport default function HousekeepingSupervisorStaffTracking() {\n  const { data: staff = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/users\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch staff\");\n      return response.json();\n    },\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n    refetchIntervalInBackground: true\n  });\n\n  const { data: tasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/tasks\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/tasks\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch tasks\");\n      return response.json();\n    },\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n    refetchIntervalInBackground: true\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"]\n  });\n\n  const housekeepingStaff = staff.filter(s => s.role?.name === 'housekeeping_staff');\n\n  const getStaffTasks = (staffId: string) => {\n    return tasks.filter(t => t.assignedTo === staffId);\n  };\n\n  const getStaffCurrentTask = (staffId: string) => {\n    const staffTasks = getStaffTasks(staffId);\n    return staffTasks.find(t => t.status === 'performing') || staffTasks.find(t => t.status === 'pending');\n  };\n\n  return (\n    <DashboardLayout title=\"Staff Tracking\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Staff Activity Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <p className=\"text-muted-foreground\">Loading...</p>\n            ) : housekeepingStaff.length === 0 ? (\n              <p className=\"text-muted-foreground\" data-testid=\"no-staff\">No housekeeping staff found</p>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {housekeepingStaff.map((member, index) => {\n                  const currentTask = getStaffCurrentTask(member.id);\n                  const completedTasks = getStaffTasks(member.id).filter(t => t.status === 'completed').length;\n\n                  return (\n                    <Card key={member.id} data-testid={`staff-card-${index}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-semibold text-foreground\">{member.username}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{member.phone}</p>\n                          </div>\n                          <Badge \n                            className={dailyAttendance.some(a => a.userId === member.id && a.status === 'active') ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} \n                            variant=\"secondary\"\n                          >\n                            {dailyAttendance.some(a => a.userId === member.id && a.status === 'active') ? 'On Duty' : 'Off Duty'}\n                          </Badge>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center text-sm\">\n                            <Clock className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                            <span className=\"text-muted-foreground\">\n                              Last Active: {member.lastLogin ? new Date(member.lastLogin).toLocaleTimeString('en-GB', { timeZone: 'Asia/Kathmandu' }) : 'Never'}\n                            </span>\n                          </div>\n\n                          <div className=\"flex items-center text-sm\">\n                            <CheckSquare className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                            <span className=\"text-muted-foreground\">\n                              Completed: {completedTasks} tasks\n                            </span>\n                          </div>\n\n                          {currentTask && (\n                            <div className=\"mt-3 p-2 bg-blue-50 rounded border border-blue-200\">\n                              <div className=\"flex items-start\">\n                                <MapPin className=\"h-4 w-4 mr-2 text-blue-600 mt-0.5\" />\n                                <div className=\"flex-1\">\n                                  <p className=\"text-sm font-medium text-blue-900\">Current Task</p>\n                                  <p className=\"text-xs text-blue-700\">{currentTask.title}</p>\n                                  <Badge className=\"mt-1 bg-blue-100 text-blue-800 text-xs\" variant=\"secondary\">\n                                    {currentTask.status}\n                                  </Badge>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n\n                          {!currentTask && dailyAttendance.some(a => a.userId === member.id && a.status === 'active') && (\n                            <div className=\"mt-3 p-2 bg-gray-50 rounded border border-gray-200\">\n                              <p className=\"text-xs text-gray-600\">No active tasks</p>\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":5951},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/dashboard/waiter/billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Receipt, Printer, CreditCard, Banknote, Smartphone, CheckCircle2 } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function WaiterBilling() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTable, setSelectedTable] = useState<string>(\"\");\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>(\"\");\n  const [voucherCode, setVoucherCode] = useState<string>(\"\");\n  const [appliedVoucher, setAppliedVoucher] = useState<any>(null);\n\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"]\n  });\n\n  const { data: tables = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: kotOrders = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: menuItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"]\n  });\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"]\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (transactionData: any) => {\n      await apiRequest(\"POST\", \"/api/transactions\", transactionData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Payment processed successfully\" });\n    }\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/kot-orders/${orderId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n    }\n  });\n\n  const [isValidatingVoucher, setIsValidatingVoucher] = useState(false);\n\n  const handleValidateVoucher = async () => {\n    if (!voucherCode.trim()) {\n      toast({ title: \"Please enter a voucher code\", variant: \"destructive\" });\n      return;\n    }\n\n    setIsValidatingVoucher(true);\n    try {\n      const response = await fetch('/api/vouchers/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ code: voucherCode.trim() }),\n        credentials: 'include'\n      });\n      const data = await response.json();\n      \n      if (data.valid && data.voucher) {\n        setAppliedVoucher(data.voucher);\n        toast({ title: \"Voucher applied successfully!\" });\n      } else {\n        setAppliedVoucher(null);\n        toast({ title: \"Invalid voucher\", description: data.message || \"Voucher code is invalid\", variant: \"destructive\" });\n      }\n    } catch (error) {\n      setAppliedVoucher(null);\n      toast({ title: \"Error validating voucher\", variant: \"destructive\" });\n    } finally {\n      setIsValidatingVoucher(false);\n    }\n  };\n\n  const redeemVoucherMutation = useMutation({\n    mutationFn: async (voucherId: string) => {\n      await apiRequest(\"POST\", \"/api/vouchers/redeem\", { voucherId });\n    }\n  });\n\n\n  // Filter orders that have approved or ready items\n  const selectedTableOrders = kotOrders.filter(\n    (order: any) => {\n      if (order.tableId !== selectedTable) return false;\n      if (order.status === 'cancelled' || order.status === 'served') return false;\n      // Only show orders with approved or ready items\n      return order.items?.some((item: any) => item.status === 'approved' || item.status === 'ready');\n    }\n  );\n\n  // Calculate bill with cascading taxes\n  const calculateBill = () => {\n    let subtotal = 0;\n    \n    // Calculate subtotal from approved/ready items only\n    selectedTableOrders.forEach((order: any) => {\n      order.items?.forEach((item: any) => {\n        if (item.status === 'approved' || item.status === 'ready') {\n          const menuItem = menuItems.find((m: any) => m.id === item.menuItemId);\n          if (menuItem) {\n            subtotal += menuItem.price * item.qty;\n          }\n        }\n      });\n    });\n\n    // Get active taxes\n    const activeTaxes = hotelTaxes.filter((tax: any) => tax.isActive);\n    \n    // Sort taxes to apply VAT first, then service tax, then luxury tax\n    // Tax types in DB are: 'vat', 'service_tax', 'luxury_tax'\n    const taxOrder = ['vat', 'service_tax', 'luxury_tax'];\n    const sortedTaxes = activeTaxes.sort((a: any, b: any) => {\n      const aIndex = taxOrder.indexOf(a.taxType);\n      const bIndex = taxOrder.indexOf(b.taxType);\n      // Handle unknown tax types by putting them at the end\n      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n    });\n\n    // Apply cascading taxes\n    let runningTotal = subtotal;\n    const taxBreakdown: any = {};\n    \n    sortedTaxes.forEach((tax: any) => {\n      const taxRate = parseFloat(tax.percent) / 100;\n      const taxAmount = Math.round((runningTotal * taxRate) * 100) / 100;\n      // Use display name for breakdown\n      const displayName = tax.taxType === 'vat' ? 'VAT' : \n                          tax.taxType === 'service_tax' ? 'Service Tax' : \n                          tax.taxType === 'luxury_tax' ? 'Luxury Tax' : tax.taxType;\n      taxBreakdown[displayName] = {\n        rate: parseFloat(tax.percent),\n        amount: taxAmount\n      };\n      runningTotal = Math.round((runningTotal + taxAmount) * 100) / 100;\n    });\n\n    const totalTax = Object.values(taxBreakdown).reduce((sum: number, t: any) => sum + t.amount, 0);\n    let grandTotal = Math.round((subtotal + totalTax) * 100) / 100;\n    \n    // Apply voucher discount (same logic as hotel billing)\n    let discountAmount = 0;\n    if (appliedVoucher) {\n      if (appliedVoucher.discountType === 'percentage') {\n        discountAmount = Math.round((grandTotal * (parseFloat(appliedVoucher.discountAmount) / 100)) * 100) / 100;\n      } else if (appliedVoucher.discountType === 'fixed') {\n        discountAmount = Math.min(parseFloat(appliedVoucher.discountAmount), grandTotal);\n      }\n      grandTotal = Math.round((grandTotal - discountAmount) * 100) / 100;\n    }\n\n    return {\n      subtotal,\n      taxBreakdown,\n      totalTax,\n      discountAmount,\n      grandTotal\n    };\n  };\n\n  const billCalc = calculateBill();\n\n  const handleProcessPayment = async () => {\n    if (!selectedPaymentMethod) {\n      toast({ title: \"Error\", description: \"Please select a payment method\", variant: \"destructive\" });\n      return;\n    }\n\n    if (selectedTableOrders.length === 0) {\n      toast({ title: \"Error\", description: \"No orders to process\", variant: \"destructive\" });\n      return;\n    }\n\n    try {\n      // Redeem voucher if applied\n      if (appliedVoucher) {\n        await redeemVoucherMutation.mutateAsync(appliedVoucher.id);\n      }\n\n      // Create transaction\n      await createTransactionMutation.mutateAsync({\n        txnType: selectedPaymentMethod === 'cash' ? 'cash_in' : selectedPaymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n        amount: billCalc.grandTotal.toFixed(2),\n        paymentMethod: selectedPaymentMethod,\n        purpose: 'restaurant_sale',\n        reference: `Table: ${tables.find((t: any) => t.id === selectedTable)?.name || selectedTable}${appliedVoucher ? ` | Voucher: ${appliedVoucher.code}` : ''}`\n      });\n\n      // Mark all orders as served\n      for (const order of selectedTableOrders) {\n        await updateOrderStatusMutation.mutateAsync({\n          orderId: order.id,\n          status: 'served'\n        });\n      }\n\n      handlePrintBill();\n      \n      // Reset selection\n      setSelectedTable(\"\");\n      setSelectedPaymentMethod(\"\");\n      setVoucherCode(\"\");\n      setAppliedVoucher(null);\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to process payment\", variant: \"destructive\" });\n    }\n  };\n\n\n  const handleRemoveVoucher = () => {\n    setAppliedVoucher(null);\n    setVoucherCode(\"\");\n    toast({ title: \"Voucher removed\" });\n  };\n\n\n  const handlePrintBill = () => {\n    const hotelName = hotel?.name || \"HOTEL\";\n    const hotelAddress = hotel?.address || \"\";\n    const hotelPhone = hotel?.phone || \"\";\n    const tableName = tables.find((t: any) => t.id === selectedTable)?.name || \"Unknown\";\n    const now = new Date();\n    \n    let billContent = `\n<div style=\"font-family: 'Courier New', monospace; width: 300px; padding: 10px;\">\n  <div style=\"text-align: center; font-weight: bold; font-size: 16px; border-bottom: 2px dashed #000; padding-bottom: 10px; margin-bottom: 10px;\">\n    ${hotelName}\n  </div>\n  \n  <div style=\"text-align: center; font-size: 11px; margin-bottom: 10px;\">\n    ${hotelAddress ? `${hotelAddress}<br/>` : ''}\n    ${hotelPhone ? `Tel: ${hotelPhone}<br/>` : ''}\n  </div>\n  \n  <div style=\"text-align: center; font-size: 12px; margin-bottom: 15px;\">\n    Restaurant Bill<br/>\n    ${tableName}\n  </div>\n  \n  <div style=\"font-size: 11px; margin-bottom: 10px;\">\n    <div>Date: ${now.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' })}</div>\n    <div>Time: ${now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>\n    <div>Bill No: ${now.getTime().toString().slice(-8)}</div>\n    <div>Waiter: ${user?.username}</div>\n  </div>\n  \n  <div style=\"border-top: 2px dashed #000; border-bottom: 2px dashed #000; padding: 10px 0; margin: 10px 0;\">\n    <table style=\"width: 100%; font-size: 11px;\">\n      <thead>\n        <tr style=\"border-bottom: 1px solid #000;\">\n          <th style=\"text-align: left; padding-bottom: 5px;\">Item</th>\n          <th style=\"text-align: center; padding-bottom: 5px;\">Qty</th>\n          <th style=\"text-align: right; padding-bottom: 5px;\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n`;\n\n    selectedTableOrders.forEach((order: any) => {\n      order.items?.forEach((item: any) => {\n        if (item.status === 'approved' || item.status === 'ready') {\n          const menuItem = menuItems.find((m: any) => m.id === item.menuItemId);\n          if (menuItem) {\n            billContent += `\n        <tr>\n          <td style=\"padding: 3px 0;\">${menuItem.name}</td>\n          <td style=\"text-align: center;\">${item.qty}</td>\n          <td style=\"text-align: right;\">${formatCurrency(menuItem.price * item.qty)}</td>\n        </tr>`;\n          }\n        }\n      });\n    });\n\n    billContent += `\n      </tbody>\n    </table>\n  </div>\n  \n  <div style=\"font-size: 11px; margin-top: 10px;\">\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n      <span>Subtotal:</span>\n      <span>${formatCurrency(billCalc.subtotal)}</span>\n    </div>\n`;\n\n    Object.entries(billCalc.taxBreakdown).forEach(([taxType, details]: [string, any]) => {\n      billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n      <span>${taxType} (${details.rate}%):</span>\n      <span>${formatCurrency(details.amount)}</span>\n    </div>`;\n    });\n\n    if (billCalc.discountAmount > 0 && appliedVoucher) {\n      billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 3px 0; color: #16a34a;\">\n      <span>Discount (${appliedVoucher.code}):</span>\n      <span>-${formatCurrency(billCalc.discountAmount)}</span>\n    </div>`;\n    }\n\n    billContent += `\n    <div style=\"display: flex; justify-content: space-between; padding: 10px 0 5px 0; margin-top: 5px; border-top: 2px dashed #000; font-weight: bold; font-size: 14px;\">\n      <span>GRAND TOTAL:</span>\n      <span>${formatCurrency(billCalc.grandTotal)}</span>\n    </div>\n    \n    <div style=\"display: flex; justify-content: space-between; padding: 5px 0; font-weight: bold;\">\n      <span>Payment Method:</span>\n      <span>${selectedPaymentMethod.toUpperCase()}</span>\n    </div>\n  </div>\n  \n  <div style=\"text-align: center; margin-top: 20px; padding-top: 10px; border-top: 2px dashed #000; font-size: 12px;\">\n    Thank You! Visit Again<br/>\n    <div style=\"margin-top: 5px; font-size: 10px;\">\n      This is a computer generated bill\n    </div>\n  </div>\n</div>\n    `;\n\n    const printWindow = window.open('', '_blank', 'width=400,height=600');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Bill - ${hotelName}</title>\n            <style>\n              @media print {\n                body { margin: 0; }\n              }\n              body {\n                margin: 0;\n                padding: 20px;\n                font-family: 'Courier New', monospace;\n              }\n            </style>\n          </head>\n          <body onload=\"window.print(); window.close();\">\n            ${billContent}\n          </body>\n        </html>\n      `);\n      printWindow.document.close();\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Billing\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Receipt className=\"h-5 w-5 mr-2\" />\n              Generate Bill\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                Select Table\n              </label>\n              <Select value={selectedTable} onValueChange={setSelectedTable}>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Choose a table\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {tables.map((table: any) => (\n                    <SelectItem key={table.id} value={table.id}>\n                      {table.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedTable && (\n              <div className=\"space-y-4\">\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h3 className=\"font-semibold text-lg\">Order Items (Approved/Ready)</h3>\n                  {selectedTableOrders.length === 0 ? (\n                    <p className=\"text-muted-foreground text-sm\">No approved orders for this table</p>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {selectedTableOrders.map((order: any) => (\n                        <div key={order.id} className=\"text-sm\">\n                          {order.items?.map((item: any, idx: number) => {\n                            if (item.status === 'approved' || item.status === 'ready') {\n                              const menuItem = menuItems.find((m: any) => m.id === item.menuItemId);\n                              if (!menuItem) return null;\n                              return (\n                                <div key={idx} className=\"flex justify-between py-1\">\n                                  <span>{menuItem.name} x {item.qty}</span>\n                                  <span>{formatCurrency(menuItem.price * item.qty)}</span>\n                                </div>\n                              );\n                            }\n                            return null;\n                          })}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {selectedTableOrders.length > 0 && (\n                  <>\n                    <div className=\"border rounded-lg p-4 space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Subtotal:</span>\n                        <span>{formatCurrency(billCalc.subtotal)}</span>\n                      </div>\n                      {Object.entries(billCalc.taxBreakdown).map(([taxType, details]: [string, any]) => (\n                        <div key={taxType} className=\"flex justify-between text-sm\">\n                          <span>{taxType} ({details.rate}%):</span>\n                          <span>{formatCurrency(details.amount)}</span>\n                        </div>\n                      ))}\n                      {billCalc.discountAmount > 0 && appliedVoucher && (\n                        <div className=\"flex justify-between text-sm text-green-600\">\n                          <span>Discount ({appliedVoucher.code}):</span>\n                          <span>-{formatCurrency(billCalc.discountAmount)}</span>\n                        </div>\n                      )}\n                      <div className=\"flex justify-between text-lg font-bold pt-2 border-t\">\n                        <span>Total:</span>\n                        <span>{formatCurrency(billCalc.grandTotal)}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"border rounded-lg p-4 space-y-3\">\n                      <label className=\"text-sm font-medium text-foreground\">\n                        Discount Voucher (Optional)\n                      </label>\n                      {!appliedVoucher ? (\n                        <div className=\"flex gap-2\">\n                          <input\n                            type=\"text\"\n                            placeholder=\"Enter voucher code\"\n                            value={voucherCode}\n                            onChange={(e) => setVoucherCode(e.target.value.toUpperCase())}\n                            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                            data-testid=\"input-voucher-code\"\n                          />\n                          <Button \n                            onClick={handleValidateVoucher}\n                            disabled={!voucherCode.trim() || isValidatingVoucher}\n                            data-testid=\"button-apply-voucher\"\n                          >\n                            Apply\n                          </Button>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg\">\n                          <div className=\"flex items-center gap-2\">\n                            <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                                Voucher Applied: {appliedVoucher.code}\n                              </p>\n                              <p className=\"text-xs text-green-700 dark:text-green-300\">\n                                {appliedVoucher.discountType === 'percentage' \n                                  ? `${appliedVoucher.discountAmount}% discount` \n                                  : `${formatCurrency(parseFloat(appliedVoucher.discountAmount))} off`}\n                              </p>\n                            </div>\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={handleRemoveVoucher}\n                            data-testid=\"button-remove-voucher\"\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                        Payment Method\n                      </label>\n                      <Select value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod}>\n                        <SelectTrigger className=\"w-full\">\n                          <SelectValue placeholder=\"Choose payment method\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"pos\">POS</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex gap-3\">\n                      <Button className=\"flex-1\" onClick={handlePrintBill} variant=\"outline\">\n                        <Printer className=\"h-4 w-4 mr-2\" />\n                        Print Bill\n                      </Button>\n                      <Button \n                        className=\"flex-1\" \n                        onClick={handleProcessPayment}\n                        disabled={!selectedPaymentMethod || createTransactionMutation.isPending}\n                      >\n                        {selectedPaymentMethod === 'cash' && <Banknote className=\"h-4 w-4 mr-2\" />}\n                        {selectedPaymentMethod === 'pos' && <CreditCard className=\"h-4 w-4 mr-2\" />}\n                        {selectedPaymentMethod === 'fonepay' && <Smartphone className=\"h-4 w-4 mr-2\" />}\n                        Process Payment\n                      </Button>\n                    </div>\n                  </>\n                )}\n\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":22063},"server/update-measurement-categories.ts":{"content":"import { db } from './db';\nimport { inventoryItems } from '@shared/schema';\nimport { getCategoryForUnit } from '@shared/measurements';\nimport { eq, isNull } from 'drizzle-orm';\n\nasync function updateMeasurementCategories() {\n  console.log('🔄 Updating measurement categories for existing inventory items...');\n\n  try {\n    const items = await db\n      .select()\n      .from(inventoryItems)\n      .where(isNull(inventoryItems.deletedAt));\n\n    console.log(`Found ${items.length} inventory items`);\n\n    for (const item of items) {\n      if (item.baseUnit) {\n        const category = getCategoryForUnit(item.baseUnit);\n        \n        await db\n          .update(inventoryItems)\n          .set({ measurementCategory: category })\n          .where(eq(inventoryItems.id, item.id));\n        \n        console.log(`✓ Updated ${item.name}: ${item.baseUnit} → ${category}`);\n      }\n    }\n\n    console.log('✅ Measurement categories updated successfully!');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Update failed:', error);\n    process.exit(1);\n  }\n}\n\nupdateMeasurementCategories();\n","size_bytes":1103},"client/src/pages/dashboard/manager.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, CreditCard, Tag, DoorOpen, Receipt, TrendingUp, BarChart3, Building2 } from \"lucide-react\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\n\nexport default function ManagerDashboard() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const ws = useWebSocket();\n  \n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000\n  });\n\n  const { data: vouchers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vouchers\"],\n    refetchInterval: 3000\n  });\n\n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/rooms\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates via WebSocket\n  useEffect(() => {\n    const unsubscribers = [\n      ws.on('transaction:created', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      }),\n      ws.on('transaction:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      }),\n      ws.on('room:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/rooms\"] });\n      }),\n      ws.on('attendance:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/attendance/daily\"] });\n      })\n    ];\n\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n    };\n  }, [ws, queryClient]);\n\n  const cashTransactions = transactions.filter(t => t.paymentMethod === 'cash').reduce((sum, t) => sum + Number(t.amount), 0);\n  const posTransactions = transactions.filter(t => t.paymentMethod === 'pos').reduce((sum, t) => sum + Number(t.amount), 0);\n  const fonepayTransactions = transactions.filter(t => t.paymentMethod === 'fonepay').reduce((sum, t) => sum + Number(t.amount), 0);\n\n  const staffColumns = [\n    { key: \"username\", label: \"Name\", sortable: true },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())\n    },\n    { \n      key: \"id\", \n      label: \"Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n            {isOnDuty ? 'On Duty' : 'Off Duty'}\n          </span>\n        );\n      }\n    },\n    { key: \"createdAt\", label: \"Hired\", sortable: true }\n  ];\n\n  const voucherColumns = [\n    { key: \"code\", label: \"Code\", sortable: true },\n    { key: \"discountAmount\", label: \"Discount\", sortable: true },\n    { key: \"discountType\", label: \"Type\", sortable: true },\n    { key: \"validUntil\", label: \"Expires\", sortable: true },\n    { key: \"usedCount\", label: \"Used\", sortable: true },\n    { key: \"maxUses\", label: \"Max Uses\", sortable: true }\n  ];\n\n  const roomColumns = [\n    { key: \"roomNumber\", label: \"Room\", sortable: true },\n    { \n      key: \"roomType\", \n      label: \"Type\", \n      render: (value: any, row: any) => row.roomType?.name || \"Standard\"\n    },\n    { \n      key: \"isOccupied\", \n      label: \"Status\", \n      render: (value: boolean) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${value ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}>\n          {value ? 'Occupied' : 'Available'}\n        </span>\n      )\n    }\n  ];\n\n  const staffActions = [\n    { label: \"View\", action: (row: any) => setLocation(\"/manager/staff\") },\n    { label: \"Manage\", action: (row: any) => setLocation(\"/manager/staff\"), variant: \"outline\" as const }\n  ];\n\n  const voucherActions = [\n    { label: \"View\", action: (row: any) => setLocation(\"/manager/discount-vouchers\") },\n    { label: \"Manage\", action: (row: any) => setLocation(\"/manager/discount-vouchers\"), variant: \"outline\" as const }\n  ];\n\n  const roomActions = [\n    { label: \"View\", action: (row: any) => setLocation(\"/manager/room-setup\") },\n    { label: \"Manage\", action: (row: any) => setLocation(\"/manager/room-setup\"), variant: \"outline\" as const }\n  ];\n\n  return (\n    <DashboardLayout title=\"Manager Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Transaction Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Cash Transactions\"\n            value={`रु${cashTransactions.toLocaleString()}`}\n            icon={<Receipt />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"POS Transactions\"\n            value={`रु${posTransactions.toLocaleString()}`}\n            icon={<CreditCard />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Fonepay Transactions\"\n            value={`रु${fonepayTransactions.toLocaleString()}`}\n            icon={<TrendingUp />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Active Vouchers\"\n            value={vouchers.length}\n            icon={<Tag />}\n            iconColor=\"text-orange-500\"\n          />\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Manager Operations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-add-staff\" onClick={() => setLocation(\"/manager/staff\")}>\n                <Users className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Add Staff</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-vendor-payment\" onClick={() => setLocation(\"/manager/vendor-payments\")}>\n                <CreditCard className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Vendor Payment</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-create-voucher\" onClick={() => setLocation(\"/manager/discount-vouchers\")}>\n                <Tag className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Create Voucher</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-room-setup\" onClick={() => setLocation(\"/manager/room-setup\")}>\n                <DoorOpen className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Room Setup</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-amenities\" onClick={() => setLocation(\"/manager/amenities\")}>\n                <Receipt className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Amenities</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-hall-bookings\" onClick={() => setLocation(\"/hall-bookings\")}>\n                <Building2 className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Hall Bookings</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-transactions\" onClick={() => setLocation(\"/manager/transactions\")}>\n                <BarChart3 className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Transactions</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Staff Management */}\n        <DataTable\n          title=\"Staff Management\"\n          data={staff}\n          columns={staffColumns}\n          actions={staffActions}\n          onAdd={() => setLocation(\"/manager/staff\")}\n          addButtonLabel=\"Add Staff Member\"\n          searchPlaceholder=\"Search staff...\"\n        />\n\n        {/* Voucher Management */}\n        <DataTable\n          title=\"Discount Vouchers\"\n          data={vouchers}\n          columns={voucherColumns}\n          actions={voucherActions}\n          onAdd={() => setLocation(\"/manager/discount-vouchers\")}\n          addButtonLabel=\"Create Voucher\"\n          searchPlaceholder=\"Search vouchers...\"\n        />\n\n        {/* Room Management */}\n        <DataTable\n          title=\"Room Management\"\n          data={rooms}\n          columns={roomColumns}\n          actions={roomActions}\n          onAdd={() => setLocation(\"/manager/room-setup\")}\n          addButtonLabel=\"Add Room\"\n          searchPlaceholder=\"Search rooms...\"\n        />\n\n        {/* Vendor Payments */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Vendor Payments</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {transactions.filter(t => t.txnType === 'vendor_payment').slice(0, 5).map((payment, index) => (\n                <div key={payment.id || index} className=\"flex items-center justify-between p-3 bg-secondary rounded\" data-testid={`payment-item-${index}`}>\n                  <div className=\"flex items-center\">\n                    <CreditCard className=\"text-blue-500 mr-3 h-5 w-5\" />\n                    <div>\n                      <span className=\"font-medium\">{payment.purpose || 'Vendor Payment'}</span>\n                      <p className=\"text-sm text-muted-foreground\">Payment method: {payment.paymentMethod}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"font-bold\">रु{Number(payment.amount).toLocaleString()}</span>\n                    <p className=\"text-xs text-muted-foreground\">{new Date(payment.createdAt).toLocaleDateString()}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":11025},"client/src/pages/dashboard/restaurant-bar-manager/task-assignment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ClipboardList, Plus, Users, CheckCircle, Clock, AlertCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nexport default function TaskAssignment() {\n  const { confirm } = useConfirmDialog();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    description: \"\",\n    assignedTo: \"\",\n    priority: \"medium\",\n    dueDateTime: \"\"\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch restaurant staff\n  const { data: allStaff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  // Filter for restaurant staff only\n  const restaurantStaff = allStaff.filter(staff => \n    ['waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier'].includes(staff.role?.name || '')\n  );\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch tasks\n  const { data: tasks = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/tasks\"],\n    refetchInterval: 3000\n  });\n\n  // Filter for restaurant tasks only\n  const restaurantTasks = tasks.filter(task => \n    restaurantStaff.some(staff => staff.id === task.assignedTo)\n  );\n\n  // Create task mutation\n  const createTaskMutation = useMutation({\n    mutationFn: async (taskData: any) => {\n      const response = await fetch(\"/api/hotels/current/tasks\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(taskData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create task\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/tasks\"] });\n      setIsAddDialogOpen(false);\n      setNewTask({ title: \"\", description: \"\", assignedTo: \"\", priority: \"medium\", dueDateTime: \"\" });\n      toast.success(\"Task assigned successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Update task status mutation\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      const response = await fetch(`/api/hotels/current/tasks/${taskId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status })\n      });\n      if (!response.ok) throw new Error(\"Failed to update task\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/tasks\"] });\n      toast.success(\"Task status updated\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateTask = () => {\n    if (!newTask.title || !newTask.assignedTo) {\n      toast.error(\"Please fill in title and assign to a staff member\");\n      return;\n    }\n\n    const { dueDateTime, ...taskData } = newTask;\n    createTaskMutation.mutate({\n      ...taskData,\n      dueDate: dueDateTime || null\n    });\n  };\n\n  const handleStatusChange = (task: any, status: string) => {\n    updateTaskMutation.mutate({ taskId: task.id, status });\n  };\n\n  const handleDeleteTask = async (task: any) => {\n    await confirm({\n      title: \"Delete Task\",\n      description: `Are you sure you want to delete \"${task.title}\"?`,\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: async () => {\n        try {\n          const response = await fetch(`/api/hotels/current/tasks/${task.id}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n          });\n          if (!response.ok) throw new Error(\"Failed to delete task\");\n          queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/tasks\"] });\n          toast.success(\"Task deleted successfully\");\n        } catch (error: any) {\n          toast.error(error.message);\n        }\n      }\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'performing': return <Clock className=\"h-4 w-4 text-orange-500\" />;\n      default: return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600 bg-red-100';\n      case 'medium': return 'text-orange-600 bg-orange-100';\n      case 'low': return 'text-green-600 bg-green-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const columns = [\n    { key: \"title\", label: \"Task\", sortable: true },\n    { \n      key: \"assignedTo\", \n      label: \"Assigned To\", \n      render: (value: any, row: any) => {\n        const staff = restaurantStaff.find(s => s.id === row.assignedTo);\n        return staff ? (\n          <div>\n            <div className=\"font-medium\">{staff.username}</div>\n            <div className=\"text-sm text-muted-foreground\">\n              {staff.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}\n            </div>\n          </div>\n        ) : 'Unknown Staff';\n      }\n    },\n    { \n      key: \"priority\", \n      label: \"Priority\", \n      render: (value: string) => (\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(value)}`}>\n          {value?.charAt(0).toUpperCase() + value?.slice(1)}\n        </span>\n      )\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string, row: any) => (\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon(value)}\n          <Select \n            value={value} \n            onValueChange={(newStatus) => handleStatusChange(row, newStatus)}\n          >\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"performing\">In Progress</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      )\n    },\n    { \n      key: \"dueDateTime\", \n      label: \"Due Date\", \n      sortable: true,\n      render: (value: string) => value ? new Date(value).toLocaleDateString() : 'No due date'\n    }\n  ];\n\n  const actions = [\n    { \n      label: \"Delete\", \n      action: handleDeleteTask, \n      variant: \"destructive\" as const \n    }\n  ];\n\n  const pendingTasks = restaurantTasks.filter(t => t.status === 'pending').length;\n  const inProgressTasks = restaurantTasks.filter(t => t.status === 'performing').length;\n  const completedTasks = restaurantTasks.filter(t => t.status === 'completed').length;\n  const onDutyStaff = restaurantStaff.filter(s => \n    dailyAttendance.some(a => a.userId === s.id && a.status === 'active')\n  ).length;\n\n  return (\n    <DashboardLayout title=\"Task Assignment\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending Tasks</p>\n                  <p className=\"text-2xl font-bold\">{pendingTasks}</p>\n                </div>\n                <AlertCircle className=\"h-8 w-8 text-gray-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">In Progress</p>\n                  <p className=\"text-2xl font-bold\">{inProgressTasks}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Completed Today</p>\n                  <p className=\"text-2xl font-bold\">{completedTasks}</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Staff On Duty</p>\n                  <p className=\"text-2xl font-bold\">{onDutyStaff}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tasks Table */}\n        <DataTable\n          title=\"Restaurant Tasks\"\n          data={restaurantTasks}\n          columns={columns}\n          actions={actions}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Assign New Task\"\n          searchPlaceholder=\"Search tasks...\"\n        />\n\n        {/* Add Task Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Assign New Task</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Task Title *</Label>\n                <Input\n                  id=\"title\"\n                  value={newTask.title}\n                  onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\n                  placeholder=\"Enter task title\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={newTask.description}\n                  onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n                  placeholder=\"Enter task description\"\n                  rows={3}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"assignedTo\">Assign To *</Label>\n                <Select \n                  value={newTask.assignedTo} \n                  onValueChange={(value) => setNewTask({ ...newTask, assignedTo: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select staff member\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {restaurantStaff.map((staff) => {\n                      const isOnDuty = dailyAttendance.some(a => a.userId === staff.id && a.status === 'active');\n                      return (\n                        <SelectItem key={staff.id} value={staff.id}>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{staff.username}</span>\n                            <span className=\"text-sm text-muted-foreground\">\n                              ({staff.role?.name?.replace(/_/g, ' ')})\n                            </span>\n                            {isOnDuty && (\n                              <div className=\"h-2 w-2 rounded-full bg-green-500\" />\n                            )}\n                          </div>\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"priority\">Priority</Label>\n                <Select \n                  value={newTask.priority} \n                  onValueChange={(value) => setNewTask({ ...newTask, priority: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"dueDateTime\">Due Date & Time</Label>\n                <Input\n                  id=\"dueDateTime\"\n                  type=\"datetime-local\"\n                  value={newTask.dueDateTime}\n                  onChange={(e) => setNewTask({ ...newTask, dueDateTime: e.target.value })}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateTask}\n                  disabled={createTaskMutation.isPending}\n                >\n                  {createTaskMutation.isPending ? \"Assigning...\" : \"Assign Task\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":14450},"client/src/pages/dashboard/booking-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { ArrowLeft, DollarSign, Clock, User, Calendar, CheckCircle, Receipt } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { z } from \"zod\";\nimport type { SelectHallBooking, SelectBookingPayment, Hall } from \"@shared/schema\";\n\nconst paymentSchema = z.object({\n  amount: z.number().positive(\"Amount must be greater than 0\"),\n  paymentMethod: z.string().min(1, \"Payment method is required\"),\n  notes: z.string().optional(),\n  receiptNumber: z.string().optional()\n});\n\nexport default function BookingDetail() {\n  const [, params] = useRoute(\"/dashboard/bookings/:id\");\n  const bookingId = params?.id;\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);\n\n  const { data: booking } = useQuery<SelectHallBooking>({\n    queryKey: [\"/api/hall-bookings\", bookingId],\n    refetchInterval: 3000,\n    enabled: !!bookingId\n  });\n\n  const { data: payments = [] } = useQuery<SelectBookingPayment[]>({\n    queryKey: [\"/api/bookings\", bookingId, \"payments\"],\n    refetchInterval: 3000,\n    enabled: !!bookingId\n  });\n\n  const { data: hall } = useQuery<Hall>({\n    queryKey: [\"/api/halls\", booking?.hallId],\n    refetchInterval: 3000,\n    enabled: !!booking?.hallId\n  });\n\n  const paymentForm = useForm({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      amount: 0,\n      paymentMethod: \"\",\n      notes: \"\",\n      receiptNumber: \"\"\n    }\n  });\n\n  const recordPaymentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof paymentSchema>) => {\n      // Validate payment amount doesn't exceed balance\n      const totalPaid = payments.reduce((sum, p) => sum + Number(p.amount || 0), 0);\n      const balanceRemaining = Number(booking?.totalAmount) - totalPaid;\n      \n      if (data.amount > balanceRemaining) {\n        throw new Error(`Payment amount (${data.amount}) cannot exceed balance due (${balanceRemaining.toFixed(2)})`);\n      }\n      \n      await apiRequest(\"POST\", `/api/bookings/${bookingId}/payments`, {\n        ...data,\n        amount: data.amount.toString()\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\", bookingId, \"payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hall-bookings\", bookingId] });\n      toast({ title: \"Payment recorded successfully\" });\n      paymentForm.reset();\n      setIsPaymentModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to record payment\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getStatusBadge = (status: string) => {\n    const colors: Record<string, string> = {\n      quotation: \"bg-blue-500\",\n      deposit_pending: \"bg-orange-500\",\n      confirmed: \"bg-green-500\",\n      in_progress: \"bg-yellow-500\",\n      completed: \"bg-gray-500\",\n      cancelled: \"bg-red-500\"\n    };\n    return <Badge className={colors[status] || \"bg-gray-500\"}>{status.replace(/_/g, \" \").toUpperCase()}</Badge>;\n  };\n\n  const formatPaymentMethod = (method: string | undefined | null) => {\n    if (!method) return \"Unknown\";\n    const methodMap: Record<string, string> = {\n      cash: \"Cash\",\n      pos: \"POS/Card\",\n      fonepay: \"Fonepay\",\n      bank_transfer: \"Bank Transfer\"\n    };\n    return methodMap[method] || method;\n  };\n\n  const userRole = user?.role?.name || '';\n  const canRecordPayment = ['manager', 'owner', 'super_admin', 'front_desk', 'cashier', 'finance'].includes(userRole);\n\n  if (!booking) {\n    return (\n      <DashboardLayout title=\"Loading...\">\n        <div className=\"p-6\">\n          <p className=\"text-center text-muted-foreground\">Loading booking details...</p>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  const totalPaid = payments.reduce((sum, p) => sum + Number(p.amount || 0), 0);\n  const balanceRemaining = Number(booking.totalAmount) - totalPaid;\n\n  return (\n    <DashboardLayout title=\"Booking Details\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/dashboard/hall-bookings\">\n              <Button variant=\"outline\" size=\"icon\" data-testid=\"button-back\">\n                <ArrowLeft className=\"h-4 h-4\" />\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"heading-booking-detail\">Booking Details</h1>\n              <p className=\"text-muted-foreground\">View and manage booking information</p>\n            </div>\n          </div>\n          {getStatusBadge(booking.status!)}\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Booking Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Hall</p>\n                <p className=\"font-medium\" data-testid=\"text-hall-name\">{hall?.name || \"Unknown\"}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Customer</p>\n                <p className=\"font-medium\" data-testid=\"text-customer-name\">{booking.customerName}</p>\n                <p className=\"text-sm\">{booking.customerPhone}</p>\n                {booking.customerEmail && <p className=\"text-sm text-muted-foreground\">{booking.customerEmail}</p>}\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Start Time</p>\n                  <p className=\"font-medium\" data-testid=\"text-start-time\">\n                    {booking.bookingStartTime ? format(new Date(booking.bookingStartTime), \"PPp\") : \"N/A\"}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">End Time</p>\n                  <p className=\"font-medium\" data-testid=\"text-end-time\">\n                    {booking.bookingEndTime ? format(new Date(booking.bookingEndTime), \"PPp\") : \"N/A\"}\n                  </p>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Number of People</p>\n                <p className=\"font-medium\" data-testid=\"text-num-people\">{booking.numberOfPeople || 0}</p>\n              </div>\n              {booking.specialRequests && (\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Special Requests</p>\n                  <p className=\"text-sm\" data-testid=\"text-special-requests\">{booking.specialRequests}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Total Amount:</span>\n                <span className=\"font-medium\" data-testid=\"text-total-amount\">{formatCurrency(Number(booking.totalAmount))}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Total Paid:</span>\n                <span className=\"font-medium text-green-600\" data-testid=\"text-total-paid\">{formatCurrency(totalPaid)}</span>\n              </div>\n              <div className=\"flex justify-between text-lg font-bold\">\n                <span>Balance Due:</span>\n                <span className={balanceRemaining > 0 ? \"text-red-600\" : \"text-green-600\"} data-testid=\"text-balance-due\">\n                  {formatCurrency(balanceRemaining)}\n                </span>\n              </div>\n              {canRecordPayment && balanceRemaining > 0 && (\n                <Button className=\"w-full\" onClick={() => setIsPaymentModalOpen(true)} data-testid=\"button-record-payment\">\n                  <DollarSign className=\"w-4 h-4 mr-2\" />\n                  Record Payment\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {payments.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-payments\">\n                No payments recorded yet\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {payments.map((payment) => (\n                  <div key={payment.id} className=\"flex items-center justify-between border-b pb-4 last:border-0\" data-testid={`payment-record-${payment.id}`}>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-10 h-10 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{formatCurrency(Number(payment.amount))}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {format(new Date(payment.createdAt!), \"PPp\")} • {formatPaymentMethod(payment.paymentMethod)}\n                        </p>\n                        {payment.receiptNumber && (\n                          <p className=\"text-xs text-muted-foreground\">Receipt: {payment.receiptNumber}</p>\n                        )}\n                        {payment.notes && (\n                          <p className=\"text-xs text-muted-foreground\">{payment.notes}</p>\n                        )}\n                      </div>\n                    </div>\n                    <Receipt className=\"w-5 h-5 text-muted-foreground\" />\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Timeline</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center\">\n                  <Calendar className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Booking Created</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {booking.createdAt ? format(new Date(booking.createdAt), \"PPp\") : \"N/A\"}\n                  </p>\n                </div>\n              </div>\n              {booking.confirmedAt && (\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Booking Confirmed</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {format(new Date(booking.confirmedAt), \"PPp\")}\n                    </p>\n                  </div>\n                </div>\n              )}\n              {booking.cancelledAt && (\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-red-100 dark:bg-red-900 flex items-center justify-center\">\n                    <Clock className=\"w-5 h-5 text-red-600 dark:text-red-400\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Booking Cancelled</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {format(new Date(booking.cancelledAt), \"PPp\")}\n                    </p>\n                    {booking.cancellationReason && (\n                      <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                        Reason: {booking.cancellationReason}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Dialog open={isPaymentModalOpen} onOpenChange={setIsPaymentModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Record Payment</DialogTitle>\n            </DialogHeader>\n            <Form {...paymentForm}>\n              <form onSubmit={paymentForm.handleSubmit((data) => recordPaymentMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={paymentForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount (Max: {formatCurrency(balanceRemaining)})</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          value={field.value}\n                          onChange={(e) => field.onChange(Number(e.target.value || 0))}\n                          data-testid=\"input-payment-amount\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={paymentForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-payment-method\">\n                            <SelectValue placeholder=\"Select method\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"pos\">POS/Card</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                          <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={paymentForm.control}\n                  name=\"receiptNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Receipt Number (Optional)</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter receipt number\" data-testid=\"input-receipt-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={paymentForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Additional notes\" rows={3} data-testid=\"textarea-payment-notes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsPaymentModalOpen(false)} data-testid=\"button-cancel-payment\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={recordPaymentMutation.isPending} data-testid=\"button-submit-payment\">\n                    {recordPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":17705},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { \n      server,\n    },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n    \n    // Skip API routes - let them be handled by our API handlers\n    if (url.startsWith('/api')) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2406},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/pages/dashboard/storekeeper/inventory-management.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Package, Plus, TrendingUp, ArrowRightLeft, History, AlertTriangle, Edit } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function StorekeeperInventoryManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState(false);\n  const [isEditItemModalOpen, setIsEditItemModalOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  const [isReceiveStockModalOpen, setIsReceiveStockModalOpen] = useState(false);\n  const [isIssueStockModalOpen, setIsIssueStockModalOpen] = useState(false);\n  const [receiveStockMode, setReceiveStockMode] = useState<'package' | 'base'>('package');\n  const [issueStockMode, setIssueStockMode] = useState<'package' | 'base'>('base');\n  const [departmentFilter, setDepartmentFilter] = useState<string>(\"all\");\n  const [selectedDepartments, setSelectedDepartments] = useState<string[]>([]);\n\n  const { data: allInventoryItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    events: ['inventory:created', 'inventory:updated', 'inventory:deleted']\n  });\n\n  // Filter items by department\n  const inventoryItems = allInventoryItems.filter((item: any) => {\n    if (departmentFilter === \"all\") return true;\n    const departments = item.departments || [];\n    return departments.includes('all') || departments.includes(departmentFilter);\n  });\n\n  const { data: hotelUsers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"]\n  });\n\n  const { data: inventoryTransactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-transactions\"],\n    refetchInterval: 3000\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/inventory-transactions\"],\n    events: ['inventory_transaction:created', 'inventory_transaction:updated']\n  });\n\n  const addItemForm = useForm({\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      sku: \"\",\n      baseUnit: \"piece\",\n      packageUnit: \"\",\n      baseUnitsPerPackage: 0,\n      reorderLevel: 0,\n      storageLocation: \"\",\n      costPerUnit: 0,\n      department: \"\",\n      expiryDate: \"\",\n      hasExpiry: false\n    }\n  });\n\n  const editItemForm = useForm({\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      sku: \"\",\n      baseUnit: \"piece\",\n      packageUnit: \"\",\n      baseUnitsPerPackage: 0,\n      reorderLevel: 0,\n      storageLocation: \"\",\n      costPerUnit: 0,\n      expiryDate: \"\",\n      hasExpiry: false\n    }\n  });\n\n  const receiveStockForm = useForm({\n    defaultValues: {\n      qtyPackage: 0,\n      qtyBase: 0,\n      supplierName: \"\",\n      referenceNumber: \"\",\n      notes: \"\"\n    }\n  });\n\n  const issueStockForm = useForm({\n    defaultValues: {\n      issuedToUserId: \"\",\n      department: \"\",\n      qtyPackage: 0,\n      qtyBase: 0,\n      notes: \"\"\n    }\n  });\n\n  const createItemMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (selectedDepartments.length === 0) {\n        throw new Error(\"Please select at least one department\");\n      }\n      \n      const baseUnitsPerPackage = data.packageUnit ? parseFloat(data.baseUnitsPerPackage) || 0 : 0;\n      // Auto-generate SKU if not provided\n      const sku = data.sku.trim() || `SKU-${Date.now()}`;\n      \n      await apiRequest(\"POST\", \"/api/hotels/current/inventory-items\", {\n        hotelId: user?.hotelId,\n        name: data.name,\n        description: data.description || \"\",\n        sku: sku,\n        unit: data.baseUnit,\n        baseUnit: data.baseUnit,\n        packageUnit: data.packageUnit || null,\n        baseUnitsPerPackage: baseUnitsPerPackage > 0 ? baseUnitsPerPackage.toString() : '0',\n        packageStockQty: '0',\n        baseStockQty: '0',\n        reorderLevel: data.reorderLevel.toString(),\n        storageLocation: data.storageLocation || \"\",\n        costPerUnit: data.costPerUnit.toString(),\n        departments: selectedDepartments\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({ title: \"Inventory item created successfully\" });\n      addItemForm.reset();\n      setSelectedDepartments([]);\n      setIsAddItemModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create inventory item\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const editItemMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (selectedDepartments.length === 0) {\n        throw new Error(\"Please select at least one department\");\n      }\n      \n      const baseUnitsPerPackage = data.packageUnit ? parseFloat(data.baseUnitsPerPackage) || 0 : 0;\n      \n      await apiRequest(\"PUT\", `/api/hotels/current/inventory-items/${selectedItem.id}`, {\n        name: data.name,\n        description: data.description || \"\",\n        sku: data.sku,\n        unit: data.baseUnit,\n        baseUnit: data.baseUnit,\n        packageUnit: data.packageUnit || null,\n        baseUnitsPerPackage: baseUnitsPerPackage > 0 ? baseUnitsPerPackage.toString() : '0',\n        reorderLevel: data.reorderLevel.toString(),\n        storageLocation: data.storageLocation || \"\",\n        costPerUnit: data.costPerUnit.toString(),\n        departments: selectedDepartments\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({ title: \"Inventory item updated successfully\" });\n      editItemForm.reset();\n      setSelectedDepartments([]);\n      setSelectedItem(null);\n      setIsEditItemModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update inventory item\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const receiveStockMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const item = selectedItem;\n      const hasPackageUnit = item.packageUnit && parseFloat(item.baseUnitsPerPackage) > 0;\n      const baseUnitsPerPackage = parseFloat(item.baseUnitsPerPackage) || 1;\n      \n      let qtyPackage = 0;\n      let qtyBase = 0;\n      \n      if (hasPackageUnit && receiveStockMode === 'package') {\n        qtyPackage = parseFloat(data.qtyPackage) || 0;\n        qtyBase = qtyPackage * baseUnitsPerPackage;\n      } else {\n        qtyBase = parseFloat(data.qtyBase) || 0;\n        if (hasPackageUnit) {\n          qtyPackage = qtyBase / baseUnitsPerPackage;\n        }\n      }\n      \n      const currentPackageQty = parseFloat(item.packageStockQty) || 0;\n      const currentBaseQty = parseFloat(item.baseStockQty) || 0;\n      \n      const updateData: any = {\n        baseStockQty: (currentBaseQty + qtyBase).toFixed(3)\n      };\n      \n      if (hasPackageUnit) {\n        updateData.packageStockQty = (currentPackageQty + qtyPackage).toFixed(3);\n      }\n      \n      await apiRequest(\"PUT\", `/api/hotels/current/inventory-items/${item.id}`, updateData);\n      \n      const transactionData: any = {\n        hotelId: user?.hotelId,\n        itemId: item.id,\n        transactionType: 'receive',\n        qtyBase: qtyBase.toFixed(3),\n        recordedBy: user?.id,\n        supplierName: data.supplierName || \"\",\n        referenceNumber: data.referenceNumber || \"\",\n        notes: data.notes || \"\"\n      };\n      \n      if (hasPackageUnit) {\n        transactionData.qtyPackage = qtyPackage.toFixed(3);\n      }\n      \n      await apiRequest(\"POST\", \"/api/hotels/current/inventory-transactions\", transactionData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-transactions\"] });\n      toast({ title: \"Stock received successfully\" });\n      receiveStockForm.reset();\n      setSelectedItem(null);\n      setIsReceiveStockModalOpen(false);\n    }\n  });\n\n  const issueStockMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const item = selectedItem;\n      const hasPackageUnit = item.packageUnit && parseFloat(item.baseUnitsPerPackage) > 0;\n      const baseUnitsPerPackage = parseFloat(item.baseUnitsPerPackage) || 1;\n      \n      let qtyPackage = 0;\n      let qtyBase = 0;\n      \n      if (hasPackageUnit && issueStockMode === 'package') {\n        qtyPackage = parseFloat(data.qtyPackage) || 0;\n        qtyBase = qtyPackage * baseUnitsPerPackage;\n      } else {\n        qtyBase = parseFloat(data.qtyBase) || 0;\n        if (hasPackageUnit) {\n          qtyPackage = qtyBase / baseUnitsPerPackage;\n        }\n      }\n      \n      const currentBaseStock = parseFloat(item.baseStockQty) || 0;\n      if (qtyBase > currentBaseStock) {\n        throw new Error(`Insufficient stock. Available: ${currentBaseStock} ${item.baseUnit}`);\n      }\n      \n      const currentPackageQty = parseFloat(item.packageStockQty) || 0;\n      \n      const updateData: any = {\n        baseStockQty: Math.max(0, currentBaseStock - qtyBase).toFixed(3)\n      };\n      \n      if (hasPackageUnit) {\n        updateData.packageStockQty = Math.max(0, currentPackageQty - qtyPackage).toFixed(3);\n      }\n      \n      await apiRequest(\"PUT\", `/api/hotels/current/inventory-items/${item.id}`, updateData);\n      \n      const transactionData: any = {\n        hotelId: user?.hotelId,\n        itemId: item.id,\n        transactionType: 'issue',\n        qtyBase: qtyBase.toFixed(3),\n        issuedToUserId: data.issuedToUserId || null,\n        department: data.department || null,\n        recordedBy: user?.id,\n        notes: data.notes\n      };\n      \n      if (hasPackageUnit) {\n        transactionData.qtyPackage = qtyPackage.toFixed(3);\n      }\n      \n      await apiRequest(\"POST\", \"/api/hotels/current/inventory-transactions\", transactionData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-transactions\"] });\n      toast({ title: \"Stock issued successfully\" });\n      issueStockForm.reset();\n      setSelectedItem(null);\n      setIsIssueStockModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to issue stock\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const onAddItem = (data: any) => {\n    if (data.packageUnit && (!data.baseUnitsPerPackage || data.baseUnitsPerPackage <= 0)) {\n      toast({\n        title: \"Invalid input\",\n        description: \"Please specify how many base units are in one package\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    createItemMutation.mutate(data);\n  };\n\n  const onReceiveStock = (data: any) => {\n    receiveStockMutation.mutate(data);\n  };\n\n  const onIssueStock = (data: any) => {\n    if (!data.issuedToUserId && !data.department) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please select a user or enter a department\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    issueStockMutation.mutate(data);\n  };\n\n  const getUserName = (userId: string) => {\n    const foundUser = hotelUsers.find((u: any) => u.id === userId);\n    return foundUser ? foundUser.username : 'Unknown User';\n  };\n\n  return (\n    <DashboardLayout title=\"Inventory Management\">\n      <Tabs defaultValue=\"items\" className=\"space-y-4 sm:space-y-6 p-4 sm:p-6\">\n        <TabsList className=\"grid w-full grid-cols-3 max-w-full sm:max-w-[500px]\">\n          <TabsTrigger value=\"items\" className=\"text-xs sm:text-sm\">Inventory Items</TabsTrigger>\n          <TabsTrigger value=\"transactions\" className=\"text-xs sm:text-sm\">Transactions</TabsTrigger>\n          <TabsTrigger value=\"low-stock\" className=\"text-xs sm:text-sm\">Low Stock</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"items\" className=\"space-y-4 sm:space-y-6\">\n          <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n            <h2 className=\"text-xl sm:text-2xl font-bold\">Manage Inventory Items</h2>\n            <div className=\"flex gap-2 w-full sm:w-auto\">\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder=\"Filter by Department\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Departments</SelectItem>\n                  <SelectItem value=\"kitchen\">Kitchen</SelectItem>\n                  <SelectItem value=\"restaurant\">Restaurant</SelectItem>\n                  <SelectItem value=\"bar\">Bar</SelectItem>\n                  <SelectItem value=\"housekeeping\">Housekeeping</SelectItem>\n                  <SelectItem value=\"laundry\">Laundry</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"front_desk\">Front Desk</SelectItem>\n                  <SelectItem value=\"security\">Security</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button \n                onClick={() => setIsAddItemModalOpen(true)}\n                data-testid=\"button-add-item\"\n                className=\"w-full sm:w-auto\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add New Item\n              </Button>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Inventory Items ({inventoryItems.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {inventoryItems.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"no-items-message\">\n                  No inventory items. Add your first item to get started.\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {inventoryItems.map((item: any) => {\n                    const baseStock = parseFloat(item.baseStockQty) || 0;\n                    const packageStock = parseFloat(item.packageStockQty) || 0;\n                    const reorderLevel = parseFloat(item.reorderLevel) || 0;\n                    const isLowStock = baseStock <= reorderLevel;\n                    \n                    return (\n                      <div\n                        key={item.id}\n                        className={`p-3 sm:p-4 border rounded-lg hover:bg-accent transition-colors ${isLowStock ? 'border-red-300 bg-red-50 dark:bg-red-950/20' : ''}`}\n                        data-testid={`manage-item-${item.id}`}\n                      >\n                        <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex flex-col sm:flex-row sm:items-center gap-2\">\n                              <h3 className=\"font-semibold text-base\">{item.name}</h3>\n                              {isLowStock && (\n                                <Badge variant=\"destructive\" className=\"text-xs w-fit\">\n                                  <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                                  Low Stock\n                                </Badge>\n                              )}\n                            </div>\n                            {item.description && (\n                              <p className=\"text-sm text-muted-foreground mt-1\">{item.description}</p>\n                            )}\n                            <div className=\"mt-2 flex flex-wrap gap-2 sm:gap-3 text-xs sm:text-sm\">\n                              <span className=\"font-medium\">\n                                Stock: {baseStock.toFixed(2)} {item.baseUnit}\n                                {item.packageUnit && ` (${packageStock.toFixed(2)} ${item.packageUnit})`}\n                              </span>\n                              {item.storageLocation && (\n                                <span className=\"text-muted-foreground\">\n                                  Location: {item.storageLocation}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex flex-row sm:flex-row gap-2 w-full sm:w-auto\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedItem(item);\n                                // Handle both new departments array and legacy department string\n                                const depts = item.departments ?? (item.department ? [item.department] : []);\n                                setSelectedDepartments(depts);\n                                editItemForm.reset({\n                                  name: item.name,\n                                  description: item.description || \"\",\n                                  sku: item.sku,\n                                  baseUnit: item.baseUnit,\n                                  packageUnit: item.packageUnit || \"\",\n                                  baseUnitsPerPackage: parseFloat(item.baseUnitsPerPackage) || 0,\n                                  reorderLevel: parseFloat(item.reorderLevel) || 0,\n                                  storageLocation: item.storageLocation || \"\",\n                                  costPerUnit: parseFloat(item.costPerUnit) || 0\n                                });\n                                setIsEditItemModalOpen(true);\n                              }}\n                              data-testid={`button-edit-item-${item.id}`}\n                              className=\"flex-1 sm:flex-none\"\n                            >\n                              <Package className=\"w-4 h-4 sm:mr-1\" />\n                              <span className=\"hidden sm:inline\">Edit</span>\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedItem(item);\n                                setIsReceiveStockModalOpen(true);\n                                receiveStockForm.reset();\n                              }}\n                              data-testid={`button-receive-stock-${item.id}`}\n                              className=\"flex-1 sm:flex-none\"\n                            >\n                              <TrendingUp className=\"w-4 h-4 sm:mr-1\" />\n                              <span className=\"hidden sm:inline\">Receive</span>\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedItem(item);\n                                setIsIssueStockModalOpen(true);\n                                issueStockForm.reset();\n                              }}\n                              data-testid={`button-issue-stock-${item.id}`}\n                              className=\"flex-1 sm:flex-none\"\n                            >\n                              <ArrowRightLeft className=\"w-4 h-4 sm:mr-1\" />\n                              <span className=\"hidden sm:inline\">Issue</span>\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transactions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <History className=\"w-5 h-5 mr-2\" />\n                Transaction History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {inventoryTransactions.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No transactions recorded yet\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {inventoryTransactions.map((transaction: any) => {\n                    const item = inventoryItems.find((i: any) => i.id === transaction.itemId);\n                    const isReceive = transaction.transactionType === 'receive';\n                    const isWastage = transaction.transactionType === 'wastage';\n                    \n                    const getBadgeVariant = () => {\n                      if (isReceive) return \"default\";\n                      if (isWastage) return \"destructive\";\n                      return \"secondary\";\n                    };\n                    \n                    return (\n                      <div\n                        key={transaction.id}\n                        className=\"p-4 border rounded-lg space-y-2\"\n                        data-testid={`transaction-${transaction.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant={getBadgeVariant()}>\n                                {transaction.transactionType.toUpperCase()}\n                              </Badge>\n                              <span className=\"font-medium\">{item?.name || 'Unknown Item'}</span>\n                            </div>\n                            <div className=\"mt-2 text-sm space-y-1\">\n                              <p>\n                                Quantity: {parseFloat(transaction.qtyBase).toFixed(2)} {item?.baseUnit}\n                                {item?.packageUnit && transaction.qtyPackage && \n                                  ` (${parseFloat(transaction.qtyPackage).toFixed(2)} ${item.packageUnit})`\n                                }\n                              </p>\n                              {transaction.issuedToUserId && (\n                                <p className=\"text-muted-foreground\">\n                                  Issued to: {getUserName(transaction.issuedToUserId)}\n                                </p>\n                              )}\n                              {transaction.department && (\n                                <p className=\"text-muted-foreground\">\n                                  Department: {transaction.department}\n                                </p>\n                              )}\n                              {transaction.notes && (\n                                <p className=\"text-muted-foreground\">Notes: {transaction.notes}</p>\n                              )}\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(transaction.createdAt).toLocaleString()} by {getUserName(transaction.recordedBy)}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"low-stock\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"w-5 h-5 mr-2 text-red-500\" />\n                Low Stock Items\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {inventoryItems.filter((item: any) => \n                (parseFloat(item.baseStockQty) || 0) <= (parseFloat(item.reorderLevel) || 0)\n              ).length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No items are low on stock\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {inventoryItems\n                    .filter((item: any) => \n                      (parseFloat(item.baseStockQty) || 0) <= (parseFloat(item.reorderLevel) || 0)\n                    )\n                    .map((item: any) => (\n                      <div\n                        key={item.id}\n                        className=\"p-4 border border-red-300 bg-red-50 dark:bg-red-950/20 rounded-lg\"\n                        data-testid={`low-stock-item-${item.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold\">{item.name}</h4>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              Current: {parseFloat(item.baseStockQty).toFixed(2)} {item.baseUnit} | \n                              Reorder Level: {parseFloat(item.reorderLevel).toFixed(2)} {item.baseUnit}\n                            </p>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedItem(item);\n                              setIsReceiveStockModalOpen(true);\n                              receiveStockForm.reset();\n                            }}\n                          >\n                            <Plus className=\"w-4 h-4 mr-1\" />\n                            Restock\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Add Item Modal - Matching Owner Design */}\n      <Dialog open={isAddItemModalOpen} onOpenChange={setIsAddItemModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add Inventory Item</DialogTitle>\n            <p className=\"text-sm text-muted-foreground\">Create a new inventory item</p>\n          </DialogHeader>\n          <Form {...addItemForm}>\n            <form onSubmit={addItemForm.handleSubmit(onAddItem)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={addItemForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Item Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Enter item name\" \n                          data-testid=\"input-item-name\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={addItemForm.control}\n                  name=\"sku\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>SKU</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter SKU\" data-testid=\"input-sku\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={addItemForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        placeholder=\"Enter description\" \n                        rows={3}\n                        data-testid=\"input-item-description\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={addItemForm.control}\n                  name=\"baseUnit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Unit *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-base-unit\">\n                            <SelectValue placeholder=\"Select unit\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"piece\">Piece</SelectItem>\n                          <SelectItem value=\"kg\">Kilogram (kg)</SelectItem>\n                          <SelectItem value=\"g\">Gram (g)</SelectItem>\n                          <SelectItem value=\"L\">Liter (L)</SelectItem>\n                          <SelectItem value=\"ml\">Milliliter (ml)</SelectItem>\n                          <SelectItem value=\"pack\">Pack</SelectItem>\n                          <SelectItem value=\"dozen\">Dozen</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={addItemForm.control}\n                  name=\"reorderLevel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reorder Level</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\" \n                          value={field.value || ''} \n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          placeholder=\"Minimum stock level\" \n                          data-testid=\"input-reorder-level\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={addItemForm.control}\n                  name=\"storageLocation\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Storage Location</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Storage location\" \n                          data-testid=\"input-storage-location\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={addItemForm.control}\n                  name=\"costPerUnit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cost Per Unit</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\" \n                          value={field.value || ''}\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          placeholder=\"Cost per unit\" \n                          data-testid=\"input-cost-per-unit\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"space-y-3\">\n                <FormLabel>Departments * (Select one or more)</FormLabel>\n                <div className=\"grid grid-cols-2 gap-3 p-4 border rounded-md\">\n                  {[\n                    { value: \"all\", label: \"All Departments\" },\n                    { value: \"kitchen\", label: \"Kitchen\" },\n                    { value: \"restaurant\", label: \"Restaurant\" },\n                    { value: \"bar\", label: \"Bar\" },\n                    { value: \"housekeeping\", label: \"Housekeeping\" },\n                    { value: \"laundry\", label: \"Laundry\" },\n                    { value: \"maintenance\", label: \"Maintenance\" },\n                    { value: \"front_desk\", label: \"Front Desk\" },\n                    { value: \"security\", label: \"Security\" }\n                  ].map((dept) => (\n                    <div key={dept.value} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`dept-${dept.value}`}\n                        checked={selectedDepartments.includes(dept.value)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedDepartments([...selectedDepartments, dept.value]);\n                          } else {\n                            setSelectedDepartments(selectedDepartments.filter(d => d !== dept.value));\n                          }\n                        }}\n                        data-testid={`checkbox-dept-${dept.value}`}\n                      />\n                      <label\n                        htmlFor={`dept-${dept.value}`}\n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                      >\n                        {dept.label}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n                {selectedDepartments.length === 0 && (\n                  <p className=\"text-sm text-red-500\">Please select at least one department</p>\n                )}\n              </div>\n\n              <div className=\"flex gap-2 justify-end\">\n                <Button \n                  type=\"button\"\n                  variant=\"outline\" \n                  onClick={() => setIsAddItemModalOpen(false)}\n                  data-testid=\"button-cancel-add\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createItemMutation.isPending}\n                  data-testid=\"button-submit-item\"\n                >\n                  {createItemMutation.isPending ? 'Adding...' : 'Add Item'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Item Modal */}\n      <Dialog open={isEditItemModalOpen} onOpenChange={setIsEditItemModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Inventory Item</DialogTitle>\n            <p className=\"text-sm text-muted-foreground\">Update inventory item details</p>\n          </DialogHeader>\n          <Form {...editItemForm}>\n            <form onSubmit={editItemForm.handleSubmit((data) => editItemMutation.mutate(data))} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={editItemForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Item Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter item name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editItemForm.control}\n                  name=\"sku\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>SKU *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter SKU\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editItemForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Enter description\" rows={3} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={editItemForm.control}\n                  name=\"baseUnit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Unit *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select unit\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"piece\">Piece</SelectItem>\n                          <SelectItem value=\"kg\">Kilogram (kg)</SelectItem>\n                          <SelectItem value=\"g\">Gram (g)</SelectItem>\n                          <SelectItem value=\"L\">Liter (L)</SelectItem>\n                          <SelectItem value=\"ml\">Milliliter (ml)</SelectItem>\n                          <SelectItem value=\"pack\">Pack</SelectItem>\n                          <SelectItem value=\"dozen\">Dozen</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editItemForm.control}\n                  name=\"reorderLevel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reorder Level</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\" \n                          value={field.value || ''} \n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          placeholder=\"Minimum stock level\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={editItemForm.control}\n                  name=\"storageLocation\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Storage Location</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Storage location\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editItemForm.control}\n                  name=\"costPerUnit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cost Per Unit</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\" \n                          value={field.value || ''}\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          placeholder=\"Cost per unit\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"space-y-3\">\n                <FormLabel>Departments * (Select one or more)</FormLabel>\n                <div className=\"grid grid-cols-2 gap-3 p-4 border rounded-md\">\n                  {[\n                    { value: \"all\", label: \"All Departments\" },\n                    { value: \"kitchen\", label: \"Kitchen\" },\n                    { value: \"restaurant\", label: \"Restaurant\" },\n                    { value: \"bar\", label: \"Bar\" },\n                    { value: \"housekeeping\", label: \"Housekeeping\" },\n                    { value: \"laundry\", label: \"Laundry\" },\n                    { value: \"maintenance\", label: \"Maintenance\" },\n                    { value: \"front_desk\", label: \"Front Desk\" },\n                    { value: \"security\", label: \"Security\" }\n                  ].map((dept) => (\n                    <div key={dept.value} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`edit-dept-${dept.value}`}\n                        checked={selectedDepartments.includes(dept.value)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedDepartments([...selectedDepartments, dept.value]);\n                          } else {\n                            setSelectedDepartments(selectedDepartments.filter(d => d !== dept.value));\n                          }\n                        }}\n                      />\n                      <label\n                        htmlFor={`edit-dept-${dept.value}`}\n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                      >\n                        {dept.label}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n                {selectedDepartments.length === 0 && (\n                  <p className=\"text-sm text-red-500\">Please select at least one department</p>\n                )}\n              </div>\n\n              <div className=\"flex gap-2 justify-end\">\n                <Button \n                  type=\"button\"\n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsEditItemModalOpen(false);\n                    setSelectedDepartments([]);\n                    setSelectedItem(null);\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={editItemMutation.isPending}\n                >\n                  {editItemMutation.isPending ? 'Updating...' : 'Update Item'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Receive Stock Modal */}\n      <Dialog open={isReceiveStockModalOpen} onOpenChange={setIsReceiveStockModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Receive Stock: {selectedItem?.name}</DialogTitle>\n          </DialogHeader>\n          <Form {...receiveStockForm}>\n            <form onSubmit={receiveStockForm.handleSubmit(onReceiveStock)} className=\"space-y-4\">\n              <div className=\"flex gap-2 mb-4\">\n                <Button\n                  type=\"button\"\n                  variant={receiveStockMode === 'package' ? 'default' : 'outline'}\n                  onClick={() => setReceiveStockMode('package')}\n                  disabled={!selectedItem?.packageUnit}\n                  className=\"flex-1\"\n                  data-testid=\"button-mode-package\"\n                >\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  By Package\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant={receiveStockMode === 'base' ? 'default' : 'outline'}\n                  onClick={() => setReceiveStockMode('base')}\n                  className=\"flex-1\"\n                  data-testid=\"button-mode-base\"\n                >\n                  By {selectedItem?.baseUnit || 'Unit'}\n                </Button>\n              </div>\n\n              {receiveStockMode === 'package' ? (\n                <FormField\n                  control={receiveStockForm.control}\n                  name=\"qtyPackage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity ({selectedItem?.packageUnit})</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\"\n                          step=\"0.001\"\n                          onChange={(e) => {\n                            const pkg = parseFloat(e.target.value) || 0;\n                            field.onChange(pkg);\n                            const baseUnitsPerPkg = parseFloat(selectedItem?.baseUnitsPerPackage) || 1;\n                            receiveStockForm.setValue('qtyBase', pkg * baseUnitsPerPkg);\n                          }}\n                          data-testid=\"input-receive-qty-package\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        = {(receiveStockForm.watch('qtyPackage') * (parseFloat(selectedItem?.baseUnitsPerPackage) || 1)).toFixed(2)} {selectedItem?.baseUnit}\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              ) : (\n                <FormField\n                  control={receiveStockForm.control}\n                  name=\"qtyBase\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity ({selectedItem?.baseUnit})</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\"\n                          step=\"0.001\"\n                          onChange={(e) => {\n                            const base = parseFloat(e.target.value) || 0;\n                            field.onChange(base);\n                            const baseUnitsPerPkg = parseFloat(selectedItem?.baseUnitsPerPackage) || 1;\n                            receiveStockForm.setValue('qtyPackage', base / baseUnitsPerPkg);\n                          }}\n                          data-testid=\"input-receive-qty-base\"\n                        />\n                      </FormControl>\n                      {selectedItem?.packageUnit && (\n                        <FormDescription>\n                          = {(receiveStockForm.watch('qtyBase') / (parseFloat(selectedItem?.baseUnitsPerPackage) || 1)).toFixed(3)} {selectedItem?.packageUnit}\n                        </FormDescription>\n                      )}\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={receiveStockForm.control}\n                name=\"supplierName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Supplier Name *</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Enter supplier/vendor name\" data-testid=\"input-supplier-name\" />\n                    </FormControl>\n                    <FormDescription>Required for purchase tracking</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={receiveStockForm.control}\n                name=\"referenceNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bill/Invoice Number</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Enter bill or invoice number\" data-testid=\"input-reference-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={receiveStockForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Additional Notes</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Any additional details...\" data-testid=\"input-receive-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={receiveStockMutation.isPending}\n                data-testid=\"button-submit-receive\"\n              >\n                {receiveStockMutation.isPending ? 'Processing...' : 'Receive Stock'}\n              </Button>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Issue Stock Modal */}\n      <Dialog open={isIssueStockModalOpen} onOpenChange={setIsIssueStockModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Issue Stock: {selectedItem?.name}</DialogTitle>\n          </DialogHeader>\n          <Form {...issueStockForm}>\n            <form onSubmit={issueStockForm.handleSubmit(onIssueStock)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={issueStockForm.control}\n                  name=\"issuedToUserId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Issued To (User)</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-issued-to-user\">\n                            <SelectValue placeholder=\"Select user\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {hotelUsers.map((user: any) => (\n                            <SelectItem key={user.id} value={user.id}>\n                              {user.username} - {user.roleName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={issueStockForm.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Department</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-department\">\n                            <SelectValue placeholder=\"Select department\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"kitchen\">Kitchen</SelectItem>\n                          <SelectItem value=\"housekeeping\">Housekeeping</SelectItem>\n                          <SelectItem value=\"front_desk\">Front Desk</SelectItem>\n                          <SelectItem value=\"restaurant\">Restaurant</SelectItem>\n                          <SelectItem value=\"bar\">Bar</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                          <SelectItem value=\"security\">Security</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex gap-2 mb-4\">\n                <Button\n                  type=\"button\"\n                  variant={issueStockMode === 'package' ? 'default' : 'outline'}\n                  onClick={() => setIssueStockMode('package')}\n                  disabled={!selectedItem?.packageUnit}\n                  className=\"flex-1\"\n                  data-testid=\"button-issue-mode-package\"\n                >\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  By Package\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant={issueStockMode === 'base' ? 'default' : 'outline'}\n                  onClick={() => setIssueStockMode('base')}\n                  className=\"flex-1\"\n                  data-testid=\"button-issue-mode-base\"\n                >\n                  By {selectedItem?.baseUnit || 'Unit'}\n                </Button>\n              </div>\n\n              {issueStockMode === 'package' ? (\n                <FormField\n                  control={issueStockForm.control}\n                  name=\"qtyPackage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity ({selectedItem?.packageUnit})</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\"\n                          step=\"0.001\"\n                          onChange={(e) => {\n                            const pkg = parseFloat(e.target.value) || 0;\n                            field.onChange(pkg);\n                            const baseUnitsPerPkg = parseFloat(selectedItem?.baseUnitsPerPackage) || 1;\n                            issueStockForm.setValue('qtyBase', pkg * baseUnitsPerPkg);\n                          }}\n                          data-testid=\"input-issue-qty-package\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        = {(issueStockForm.watch('qtyPackage') * (parseFloat(selectedItem?.baseUnitsPerPackage) || 1)).toFixed(2)} {selectedItem?.baseUnit}\n                        <br />\n                        Available: {parseFloat(selectedItem?.baseStockQty || 0).toFixed(2)} {selectedItem?.baseUnit}\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              ) : (\n                <FormField\n                  control={issueStockForm.control}\n                  name=\"qtyBase\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity ({selectedItem?.baseUnit})</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\"\n                          step=\"0.001\"\n                          onChange={(e) => {\n                            const base = parseFloat(e.target.value) || 0;\n                            field.onChange(base);\n                            const baseUnitsPerPkg = parseFloat(selectedItem?.baseUnitsPerPackage) || 1;\n                            issueStockForm.setValue('qtyPackage', base / baseUnitsPerPkg);\n                          }}\n                          data-testid=\"input-issue-qty-base\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Available: {parseFloat(selectedItem?.baseStockQty || 0).toFixed(2)} {selectedItem?.baseUnit}\n                        {selectedItem?.packageUnit && (\n                          <><br />= {(issueStockForm.watch('qtyBase') / (parseFloat(selectedItem?.baseUnitsPerPackage) || 1)).toFixed(3)} {selectedItem?.packageUnit}</>\n                        )}\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={issueStockForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Purpose, reason...\" data-testid=\"input-issue-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={issueStockMutation.isPending}\n                data-testid=\"button-submit-issue\"\n              >\n                {issueStockMutation.isPending ? 'Processing...' : 'Issue Stock'}\n              </Button>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":58798},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { UserWithRole as SelectUser } from \"@shared/schema\";\nimport { logAudit } from \"./audit\";\n\n// Sanitize user object for API responses - remove sensitive fields\nfunction sanitizeUser(user: SelectUser): Omit<SelectUser, 'passwordHash'> {\n  const { passwordHash, ...sanitizedUser } = user;\n  return sanitizedUser;\n}\n\n// Sanitize input to prevent null byte attacks and other injection attempts\nfunction sanitizeInput(input: any): string {\n  // CRITICAL: Handle type coercion attacks - reject non-string inputs\n  if (typeof input !== 'string') {\n    return '';\n  }\n  \n  if (!input) return '';\n  \n  // Remove null bytes (\\x00) that crash PostgreSQL\n  let sanitized = input.replace(/\\x00/g, '');\n  \n  // Limit length to prevent DoS\n  sanitized = sanitized.substring(0, 1000);\n  \n  return sanitized.trim();\n}\n\n// Middleware to ensure user is active\nexport function requireActiveUser(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  \n  const user = req.user as any;\n  \n  // CRITICAL: Block deactivated users\n  if (!user.isActive) {\n    // Log them out\n    req.logout((err: any) => {\n      if (err) console.error('Logout error:', err);\n    });\n    \n    return res.status(403).json({ \n      message: \"Your account has been deactivated. Please contact your hotel manager.\" \n    });\n  }\n  \n  next();\n}\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      httpOnly: true, // Prevents client-side JS from accessing the cookie\n      secure: process.env.NODE_ENV === 'production', // Only send cookie over HTTPS in production\n      sameSite: 'lax', // CSRF protection - prevents cookie from being sent with cross-site requests\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      // SECURITY: Sanitize input to prevent null byte attacks and injection\n      const sanitizedUsername = sanitizeInput(username);\n      const sanitizedPassword = sanitizeInput(password);\n      \n      // Validate credentials\n      if (!sanitizedUsername || !sanitizedPassword) {\n        return done(null, false, { message: \"Missing credentials\" });\n      }\n      \n      const user = await storage.getUserByUsername(sanitizedUsername);\n      if (!user || !(await comparePasswords(sanitizedPassword, user.passwordHash))) {\n        return done(null, false, { message: \"Invalid username or password\" });\n      }\n      \n      // CRITICAL: Block deactivated users from logging in\n      if (!user.isActive) {\n        return done(null, false, { message: \"Your account has been deactivated. Please contact your manager.\" });\n      }\n      \n      // Check if hotel is deactivated (except for super_admin)\n      if (user.hotelId && user.role?.name !== 'super_admin') {\n        const hotel = await storage.getHotel(user.hotelId);\n        if (hotel && !hotel.isActive) {\n          return done(null, false, { message: \"This hotel has been deactivated. Please contact support.\" });\n        }\n      }\n      \n      return done(null, user);\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    // CRITICAL: Block deactivated users from using existing sessions\n    if (user && !user.isActive) {\n      return done(null, false);\n    }\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).json({ message: \"Username already exists\" });\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      passwordHash: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(sanitizeUser(user));\n    });\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", async (err: any, user: SelectUser | false, info: any) => {\n      if (err) {\n        return next(err);\n      }\n      \n      if (!user) {\n        // Log failed login attempt\n        await logAudit({\n          userId: null,\n          action: 'login_failed',\n          resourceType: 'user',\n          details: { username: req.body.username, reason: info?.message },\n          ipAddress: req.ip,\n          userAgent: req.headers['user-agent'],\n          success: false,\n          errorMessage: info?.message || \"Invalid username or password\"\n        });\n        \n        return res.status(401).json({ \n          message: info?.message || \"Invalid username or password\" \n        });\n      }\n      \n      req.login(user, async (err) => {\n        if (err) {\n          return next(err);\n        }\n        \n        // Log successful login\n        await logAudit({\n          userId: user.id,\n          hotelId: user.hotelId || undefined,\n          action: 'login',\n          resourceType: 'user',\n          resourceId: user.id,\n          details: { username: user.username },\n          ipAddress: req.ip,\n          userAgent: req.headers['user-agent'],\n          success: true\n        });\n        \n        return res.status(200).json(sanitizeUser(user));\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", async (req, res, next) => {\n    const user = req.user as SelectUser | undefined;\n    \n    req.logout(async (err) => {\n      if (err) return next(err);\n      \n      // Log logout\n      if (user) {\n        await logAudit({\n          userId: user.id,\n          hotelId: user.hotelId || undefined,\n          action: 'logout',\n          resourceType: 'user',\n          resourceId: user.id,\n          details: { username: user.username },\n          ipAddress: req.ip,\n          userAgent: req.headers['user-agent'],\n          success: true\n        });\n      }\n      \n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    res.json(sanitizeUser(req.user as SelectUser));\n  });\n\n  // Password change endpoint\n  app.post(\"/api/reset-password\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const { oldPassword, newPassword } = req.body;\n      const user = req.user as SelectUser;\n      \n      // Verify old password\n      const isOldPasswordValid = await comparePasswords(oldPassword, user.passwordHash);\n      if (!isOldPasswordValid) {\n        // Log failed password change attempt\n        await logAudit({\n          userId: user.id,\n          hotelId: user.hotelId || undefined,\n          action: 'password_change_failed',\n          resourceType: 'user',\n          resourceId: user.id,\n          details: { reason: 'incorrect_old_password' },\n          ipAddress: req.ip,\n          userAgent: req.headers['user-agent'],\n          success: false,\n          errorMessage: 'Current password is incorrect'\n        });\n        \n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n      \n      // Hash the new password\n      const hashedPassword = await hashPassword(newPassword);\n      \n      // Update user's password in database\n      await storage.updateUser(user.id, { passwordHash: hashedPassword });\n      \n      // Log successful password change\n      await logAudit({\n        userId: user.id,\n        hotelId: user.hotelId || undefined,\n        action: 'password_change',\n        resourceType: 'user',\n        resourceId: user.id,\n        details: { username: user.username },\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'],\n        success: true\n      });\n      \n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      console.error(\"Password change error:\", error);\n      res.status(400).json({ message: \"Failed to change password\" });\n    }\n  });\n}\n","size_bytes":9267},"client/src/pages/dashboard/barista.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Coffee, Clock, CheckCircle, XCircle, Package, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useState } from \"react\";\n\ninterface KotItem {\n  id: string;\n  menuItemId: string;\n  qty: number;\n  notes: string | null;\n  status: string;\n  declineReason: string | null;\n  menuItem?: { name: string };\n}\n\ninterface KotOrder {\n  id: string;\n  tableId: string;\n  status: string;\n  createdAt: string;\n  items?: KotItem[];\n}\n\ninterface RestaurantTable {\n  id: string;\n  name: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  unit: string;\n}\n\nexport default function BaristaDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [declineDialogOpen, setDeclineDialogOpen] = useState(false);\n  const [wastageDialogOpen, setWastageDialogOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<KotItem | null>(null);\n  const [declineReason, setDeclineReason] = useState(\"\");\n  const [wastageData, setWastageData] = useState({\n    itemId: \"\",\n    qty: \"\",\n    unit: \"\",\n    reason: \"\"\n  });\n\n  const { data: kotOrders = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: tables = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"]\n  });\n\n  const updateKotItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/kot-items/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"KOT item updated successfully\" });\n      setDeclineDialogOpen(false);\n      setDeclineReason(\"\");\n      setSelectedItem(null);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const createWastageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/wastages\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Wastage recorded successfully\" });\n      setWastageDialogOpen(false);\n      setWastageData({ itemId: \"\", qty: \"\", unit: \"\", reason: \"\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleApprove = (item: KotItem) => {\n    updateKotItemMutation.mutate({\n      id: item.id,\n      data: { status: \"approved\" }\n    });\n  };\n\n  const handleDecline = (item: KotItem) => {\n    setSelectedItem(item);\n    setDeclineDialogOpen(true);\n  };\n\n  const handleSetReady = (item: KotItem) => {\n    updateKotItemMutation.mutate({\n      id: item.id,\n      data: { status: \"ready\" }\n    });\n  };\n\n  const submitDecline = () => {\n    if (!selectedItem || !declineReason.trim()) {\n      toast({ title: \"Please provide a reason for declining\", variant: \"destructive\" });\n      return;\n    }\n    if (declineReason.trim().length < 10) {\n      toast({ title: \"Decline reason must be at least 10 characters\", variant: \"destructive\" });\n      return;\n    }\n    updateKotItemMutation.mutate({\n      id: selectedItem.id,\n      data: { status: \"declined\", declineReason: declineReason.trim() }\n    });\n  };\n\n  const submitWastage = () => {\n    if (!wastageData.itemId || !wastageData.qty || !wastageData.reason.trim()) {\n      toast({ title: \"Please fill all wastage fields\", variant: \"destructive\" });\n      return;\n    }\n    const qty = parseFloat(wastageData.qty);\n    if (isNaN(qty) || qty <= 0) {\n      toast({ title: \"Please enter a valid quantity\", variant: \"destructive\" });\n      return;\n    }\n    createWastageMutation.mutate({\n      itemId: wastageData.itemId,\n      qty: qty.toString(),\n      unit: wastageData.unit,\n      reason: wastageData.reason.trim()\n    });\n  };\n\n  const pendingOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'pending')\n  ) : [];\n  \n  const approvedOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'approved')\n  ) : [];\n  \n  const readyOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.every((item: KotItem) => item.status === 'ready')\n  ) : [];\n  \n  const declinedOrders = Array.isArray(kotOrders) ? (kotOrders as KotOrder[]).filter((order: KotOrder) => \n    order.items?.some((item: KotItem) => item.status === 'declined')\n  ) : [];\n\n  const getTableNumber = (tableId: string) => {\n    if (!Array.isArray(tables)) return tableId;\n    const table = (tables as RestaurantTable[]).find((t: RestaurantTable) => t.id === tableId);\n    return table?.name || tableId;\n  };\n\n  const renderKotCard = (order: KotOrder) => (\n    <Card key={order.id}>\n      <CardHeader>\n        <CardTitle className=\"flex justify-between items-center\">\n          <span>{getTableNumber(order.tableId)}</span>\n          <span className=\"text-sm text-gray-500\">\n            {new Date(order.createdAt).toLocaleTimeString()}\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {order.items?.map((item: KotItem) => (\n          <div key={item.id} className=\"mb-4 p-3 border rounded\">\n            <div className=\"flex justify-between items-start mb-2\">\n              <div>\n                <p className=\"font-semibold\">{item.menuItem?.name}</p>\n                <p className=\"text-sm text-gray-600\">Quantity: {item.qty}</p>\n                {item.notes && <p className=\"text-sm text-gray-500\">Notes: {item.notes}</p>}\n                {item.declineReason && (\n                  <p className=\"text-sm text-red-600\">Declined: {item.declineReason}</p>\n                )}\n              </div>\n              <Badge variant={\n                item.status === 'approved' ? 'default' :\n                item.status === 'ready' ? 'default' :\n                item.status === 'declined' ? 'destructive' : 'secondary'\n              }>\n                {item.status}\n              </Badge>\n            </div>\n            {item.status === 'pending' && (\n              <div className=\"flex gap-2 mt-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => handleApprove(item)}\n                  className=\"flex-1\"\n                >\n                  <CheckCircle className=\"w-4 h-4 mr-1\" /> Approve\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => handleDecline(item)}\n                  className=\"flex-1\"\n                >\n                  <XCircle className=\"w-4 h-4 mr-1\" /> Decline\n                </Button>\n              </div>\n            )}\n            {item.status === 'approved' && (\n              <Button\n                size=\"sm\"\n                onClick={() => handleSetReady(item)}\n                className=\"w-full mt-2\"\n              >\n                <Clock className=\"w-4 h-4 mr-1\" /> Set Ready\n              </Button>\n            )}\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <DashboardLayout title=\"Barista Dashboard\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Pending Orders\"\n            value={pendingOrders.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"Brewing\"\n            value={approvedOrders.length}\n            icon={<Coffee />}\n            iconColor=\"text-brown-500\"\n          />\n          <StatsCard\n            title=\"Ready to Serve\"\n            value={readyOrders.length}\n            icon={<CheckCircle />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Declined\"\n            value={declinedOrders.length}\n            icon={<XCircle />}\n            iconColor=\"text-red-500\"\n          />\n        </div>\n\n        <div className=\"flex gap-2 justify-end\">\n          <Dialog open={wastageDialogOpen} onOpenChange={setWastageDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Package className=\"w-4 h-4 mr-2\" /> Record Wastage\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Record Wastage</DialogTitle>\n                <DialogDescription>Record inventory wastage with reason</DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Inventory Item</Label>\n                  <Select\n                    value={wastageData.itemId}\n                    onValueChange={(value) => {\n                      const selectedInventoryItem = (inventoryItems as InventoryItem[]).find(item => item.id === value);\n                      setWastageData({ \n                        ...wastageData, \n                        itemId: value,\n                        unit: selectedInventoryItem?.unit || 'piece'\n                      });\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select item\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.isArray(inventoryItems) && (inventoryItems as InventoryItem[]).map((item: InventoryItem) => (\n                        <SelectItem key={item.id} value={item.id}>\n                          {item.name} ({item.unit})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Quantity</Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={wastageData.qty}\n                    onChange={(e) => setWastageData({ ...wastageData, qty: e.target.value })}\n                    placeholder=\"Enter quantity\"\n                  />\n                </div>\n                <div>\n                  <Label>Reason</Label>\n                  <Textarea\n                    value={wastageData.reason}\n                    onChange={(e) => setWastageData({ ...wastageData, reason: e.target.value })}\n                    placeholder=\"Explain reason for wastage\"\n                  />\n                </div>\n                <Button onClick={submitWastage} className=\"w-full\" disabled={createWastageMutation.isPending}>\n                  Record Wastage\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Coffee className=\"h-5 w-5 text-brown-500\" />\n              <span>Coffee Orders</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold mb-2\">Pending Orders ({pendingOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {pendingOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No pending orders</p>\n                  ) : (\n                    pendingOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Brewing ({approvedOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {approvedOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No orders brewing</p>\n                  ) : (\n                    approvedOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Ready ({readyOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {readyOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No ready orders</p>\n                  ) : (\n                    readyOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Declined ({declinedOrders.length})</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {declinedOrders.length === 0 ? (\n                    <p className=\"text-gray-500 col-span-full text-center py-4\">No declined orders</p>\n                  ) : (\n                    declinedOrders.map(renderKotCard)\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={declineDialogOpen} onOpenChange={setDeclineDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Decline KOT Item</DialogTitle>\n            <DialogDescription>Please provide a reason for declining this item</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Reason for Decline</Label>\n              <Textarea\n                value={declineReason}\n                onChange={(e) => setDeclineReason(e.target.value)}\n                placeholder=\"e.g., Out of stock, Machine malfunction\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setDeclineDialogOpen(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={submitDecline} className=\"flex-1\" variant=\"destructive\" disabled={updateKotItemMutation.isPending}>\n                Decline\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":15529},"client/src/pages/dashboard/owner/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { BarChart, FileText, Download, TrendingUp, DollarSign } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function Reports() {\n  const { toast } = useToast();\n  const [dateRange, setDateRange] = useState({\n    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    to: new Date().toISOString().split('T')[0]\n  });\n  \n  const [reportType, setReportType] = useState('financial');\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000\n  });\n\n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/rooms\"],\n    refetchInterval: 3000\n  });\n\n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: inventory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  const { data: vendors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vendors\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/rooms\"],\n    refetchInterval: 3000,\n    events: ['room:updated', 'room:created']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000,\n    events: ['user:created', 'user:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000,\n    events: ['inventory:created', 'inventory:updated', 'inventory:deleted']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000,\n    events: ['attendance:updated']\n  });\n\n  const filteredTransactions = transactions.filter(t => {\n    const txnDate = new Date(t.createdAt);\n    const fromDate = new Date(dateRange.from);\n    const toDate = new Date(dateRange.to);\n    toDate.setHours(23, 59, 59, 999);\n    return txnDate >= fromDate && txnDate <= toDate;\n  });\n\n  const totalRevenue = filteredTransactions\n    .filter(t => t.txnType === 'revenue')\n    .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n\n  const totalExpenses = filteredTransactions\n    .filter(t => t.txnType === 'expense')\n    .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n\n  const occupancyRate = rooms.length > 0 ? \n    (rooms.filter(r => r.isOccupied).length / rooms.length) * 100 : 0;\n\n  const activeStaff = staff.filter(s => s.isActive).length;\n\n  const downloadCSV = (csvContent: string, filename: string) => {\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const exportReport = (format: string) => {\n    const dateFrom = new Date(dateRange.from).toLocaleDateString();\n    const dateTo = new Date(dateRange.to).toLocaleDateString();\n    \n    if (format === 'financial') {\n      let csv = `Financial Report (${dateFrom} - ${dateTo})\\n\\n`;\n      csv += `SUMMARY\\n`;\n      csv += `Total Revenue,${totalRevenue}\\n`;\n      csv += `Total Expenses,${totalExpenses}\\n`;\n      csv += `Net Profit,${totalRevenue - totalExpenses}\\n`;\n      csv += `Profit Margin,${totalRevenue > 0 ? ((totalRevenue - totalExpenses) / totalRevenue * 100).toFixed(1) : 0}%\\n\\n`;\n      \n      csv += `TRANSACTIONS\\n`;\n      csv += `Date,Type,Purpose,Amount,Payment Method\\n`;\n      filteredTransactions.forEach(txn => {\n        csv += `${new Date(txn.createdAt).toLocaleDateString()},${txn.txnType},\"${txn.purpose || ''}\",${txn.amount},${txn.paymentMethod || ''}\\n`;\n      });\n      \n      downloadCSV(csv, `financial_report_${dateRange.from}_to_${dateRange.to}.csv`);\n      toast({ title: \"Financial Report Exported\", description: \"CSV file downloaded successfully\" });\n    } else if (format === 'occupancy') {\n      let csv = `Occupancy Report (${dateFrom} - ${dateTo})\\n\\n`;\n      csv += `Room Number,Type,Status,Occupied\\n`;\n      rooms.forEach(room => {\n        csv += `${room.roomNumber},${room.type || 'Standard'},${room.isOccupied ? 'Occupied' : 'Available'},${room.isOccupied ? 'Yes' : 'No'}\\n`;\n      });\n      csv += `\\nSUMMARY\\n`;\n      csv += `Total Rooms,${rooms.length}\\n`;\n      csv += `Occupied Rooms,${rooms.filter(r => r.isOccupied).length}\\n`;\n      csv += `Available Rooms,${rooms.filter(r => !r.isOccupied).length}\\n`;\n      csv += `Occupancy Rate,${occupancyRate.toFixed(1)}%\\n`;\n      \n      downloadCSV(csv, `occupancy_report_${dateRange.from}_to_${dateRange.to}.csv`);\n      toast({ title: \"Occupancy Report Exported\", description: \"CSV file downloaded successfully\" });\n    } else if (format === 'staff') {\n      let csv = `Staff Report (${dateFrom} - ${dateTo})\\n\\n`;\n      csv += `Username,Full Name,Role,Status,Email\\n`;\n      staff.forEach(member => {\n        csv += `${member.username},${member.fullName || ''},${member.role?.name || ''},${member.isActive ? 'Active' : 'Inactive'},${member.email || ''}\\n`;\n      });\n      csv += `\\nSUMMARY\\n`;\n      csv += `Total Staff,${staff.length}\\n`;\n      csv += `Active Staff,${activeStaff}\\n`;\n      csv += `Inactive Staff,${staff.length - activeStaff}\\n`;\n      \n      downloadCSV(csv, `staff_report_${dateRange.from}_to_${dateRange.to}.csv`);\n      toast({ title: \"Staff Report Exported\", description: \"CSV file downloaded successfully\" });\n    }\n  };\n\n  const generateReport = () => {\n    exportReport(reportType);\n  };\n\n  return (\n    <DashboardLayout title=\"Financial Report\">\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Financial Reports</h2>\n          <p className=\"text-muted-foreground\">Comprehensive financial insights and analytics</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Revenue\"\n            value={formatCurrency(totalRevenue)}\n            icon={<DollarSign />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Total Expenses\"\n            value={formatCurrency(totalExpenses)}\n            icon={<TrendingUp />}\n            iconColor=\"text-red-500\"\n          />\n          <StatsCard\n            title=\"Occupancy Rate\"\n            value={`${occupancyRate.toFixed(1)}%`}\n            icon={<BarChart />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Active Staff\"\n            value={activeStaff}\n            icon={<FileText />}\n            iconColor=\"text-purple-500\"\n          />\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Generate Report\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"report-type\">Report Type</Label>\n                <Select value={reportType} onValueChange={setReportType}>\n                  <SelectTrigger data-testid=\"select-report-type\">\n                    <SelectValue placeholder=\"Select report type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"financial\">Financial Report</SelectItem>\n                    <SelectItem value=\"occupancy\">Occupancy Report</SelectItem>\n                    <SelectItem value=\"staff\">Staff Report</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"date-from\">From Date</Label>\n                <Input\n                  id=\"date-from\"\n                  type=\"date\"\n                  value={dateRange.from}\n                  onChange={(e) => setDateRange(prev => ({ ...prev, from: e.target.value }))}\n                  data-testid=\"input-date-from\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"date-to\">To Date</Label>\n                <Input\n                  id=\"date-to\"\n                  type=\"date\"\n                  value={dateRange.to}\n                  onChange={(e) => setDateRange(prev => ({ ...prev, to: e.target.value }))}\n                  data-testid=\"input-date-to\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Actions</Label>\n                <div className=\"flex gap-2\">\n                  <Button onClick={generateReport} className=\"flex-1\" data-testid=\"button-generate\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Generate\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Financial Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Revenue:</span>\n                  <span className=\"font-bold text-green-600\">{formatCurrency(totalRevenue)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Total Expenses:</span>\n                  <span className=\"font-bold text-red-600\">{formatCurrency(totalExpenses)}</span>\n                </div>\n                <div className=\"flex justify-between border-t pt-2\">\n                  <span>Net Profit:</span>\n                  <span className=\"font-bold\">{formatCurrency(totalRevenue - totalExpenses)}</span>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => exportReport('financial')}\n                  data-testid=\"button-export-financial\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Financial Report\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Occupancy Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Rooms:</span>\n                  <span className=\"font-bold\">{rooms.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Occupied:</span>\n                  <span className=\"font-bold\">{rooms.filter(r => r.isOccupied).length}</span>\n                </div>\n                <div className=\"flex justify-between border-t pt-2\">\n                  <span>Occupancy Rate:</span>\n                  <span className=\"font-bold\">{occupancyRate.toFixed(1)}%</span>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => exportReport('occupancy')}\n                  data-testid=\"button-export-occupancy\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Occupancy Report\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Staff Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Staff:</span>\n                  <span className=\"font-bold\">{staff.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Active:</span>\n                  <span className=\"font-bold text-green-600\">{activeStaff}</span>\n                </div>\n                <div className=\"flex justify-between border-t pt-2\">\n                  <span>On Duty Now:</span>\n                  <span className=\"font-bold\">{staff.filter(s => dailyAttendance.some(a => a.userId === s.id && a.status === 'active')).length}</span>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => exportReport('staff')}\n                  data-testid=\"button-export-staff\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Staff Report\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Recent Transactions</h4>\n                  <div className=\"space-y-2\">\n                    {filteredTransactions.length > 0 ? (\n                      filteredTransactions.slice(0, 5).map((transaction, index) => (\n                        <div key={transaction.id || index} className=\"flex justify-between text-sm\">\n                          <span className=\"truncate\">{transaction.purpose || transaction.txnType?.replace(/_/g, ' ')}</span>\n                          <span className={`font-medium ${\n                            transaction.txnType === 'revenue' ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {formatCurrency(Number(transaction.amount))}\n                          </span>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground\">No transactions in selected date range</p>\n                    )}\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">Low Stock Items</h4>\n                  <div className=\"space-y-2\">\n                    {inventory\n                      .filter(item => Number(item.stockQty) <= Number(item.reorderLevel))\n                      .slice(0, 5)\n                      .map((item, index) => (\n                        <div key={item.id || index} className=\"flex justify-between text-sm\">\n                          <span className=\"truncate\">{item.name}</span>\n                          <span className=\"text-orange-600 font-medium\">\n                            {item.stockQty} {item.unit}\n                          </span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":16361},"client/src/pages/dashboard/owner/room-occupancy.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Bed, Users, DoorOpen, Calendar as CalendarIcon } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn, formatCurrency } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nexport default function RoomOccupancy() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { confirm } = useConfirmDialog();\n  const queryClient = useQueryClient();\n  const ws = useWebSocket();\n  \n  const [checkInDialog, setCheckInDialog] = useState(false);\n  const [checkOutDialog, setCheckOutDialog] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [addDialog, setAddDialog] = useState(false);\n  const [selectedRoom, setSelectedRoom] = useState<any>(null);\n  \n  // Room type management\n  const [roomTypeDialog, setRoomTypeDialog] = useState(false);\n  const [editRoomTypeDialog, setEditRoomTypeDialog] = useState(false);\n  const [selectedRoomType, setSelectedRoomType] = useState<any>(null);\n  const [roomTypeName, setRoomTypeName] = useState(\"\");\n  const [priceWalkin, setPriceWalkin] = useState(\"\");\n  const [priceInhouse, setPriceInhouse] = useState(\"\");\n  \n  // Room form states\n  const [roomNumber, setRoomNumber] = useState(\"\");\n  const [selectedRoomTypeId, setSelectedRoomTypeId] = useState(\"\");\n  \n  // Check-in form states\n  const [guestName, setGuestName] = useState(\"\");\n  const [guestEmail, setGuestEmail] = useState(\"\");\n  const [guestPhone, setGuestPhone] = useState(\"\");\n  const [idNumber, setIdNumber] = useState(\"\");\n  const [nationality, setNationality] = useState(\"\");\n  const [checkInDate, setCheckInDate] = useState<Date | undefined>(new Date());\n  const [checkOutDate, setCheckOutDate] = useState<Date | undefined>();\n  const [advancePayment, setAdvancePayment] = useState(\"\");\n  const [selectedMealPlanId, setSelectedMealPlanId] = useState(\"\");\n  const [numberOfPersons, setNumberOfPersons] = useState(\"\");\n  const [guestType, setGuestType] = useState<\"inhouse\" | \"walkin\">(\"walkin\");\n  const [officeName, setOfficeName] = useState(\"\");\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n  \n  // Checkout states\n  const [selectedCheckoutPaymentMethod, setSelectedCheckoutPaymentMethod] = useState(\"\");\n  const [voucherCode, setVoucherCode] = useState(\"\");\n  const [validatedVoucher, setValidatedVoucher] = useState<any>(null);\n  const [isValidatingVoucher, setIsValidatingVoucher] = useState(false);\n  \n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/rooms\"],\n    refetchInterval: 3000\n  });\n\n  const { data: roomTypes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/room-types\"],\n    refetchInterval: 3000\n  });\n\n  const { data: reservations = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/reservations\"],\n    refetchInterval: 3000\n  });\n\n  const { data: mealPlans = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"meal-plans\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Real-time updates via WebSocket\n  useEffect(() => {\n    const unsubscribers = [\n      ws.on('room:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/rooms\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/reservations\"] });\n      }),\n      ws.on('transaction:created', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      }),\n      ws.on('transaction:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      })\n    ];\n\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n    };\n  }, [ws, queryClient]);\n\n  // Helper functions\n  const resetRoomTypeForm = () => {\n    setRoomTypeName(\"\");\n    setPriceWalkin(\"\");\n    setPriceInhouse(\"\");\n    setSelectedRoomType(null);\n  };\n\n  // Populate form when editing\n  useEffect(() => {\n    if (selectedRoom && editDialog) {\n      setRoomNumber(selectedRoom.roomNumber || \"\");\n      setSelectedRoomTypeId(selectedRoom.roomTypeId?.toString() || \"\");\n    } else if (addDialog && !selectedRoom) {\n      setRoomNumber(\"\");\n      setSelectedRoomTypeId(\"\");\n    } else if (!editDialog && !addDialog) {\n      setRoomNumber(\"\");\n      setSelectedRoomTypeId(\"\");\n      setSelectedRoom(null);\n    }\n  }, [selectedRoom, editDialog, addDialog]);\n\n  // Populate room type form when editing\n  useEffect(() => {\n    if (selectedRoomType && editRoomTypeDialog) {\n      setRoomTypeName(selectedRoomType.name || \"\");\n      setPriceWalkin(selectedRoomType.priceWalkin || \"\");\n      setPriceInhouse(selectedRoomType.priceInhouse || \"\");\n    } else if (!editRoomTypeDialog && !roomTypeDialog) {\n      resetRoomTypeForm();\n    }\n  }, [selectedRoomType, editRoomTypeDialog, roomTypeDialog]);\n\n  // Mutations\n  const createRoomMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/rooms\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/rooms\"] });\n      toast({ title: \"Success\", description: \"Room created successfully!\" });\n      setAddDialog(false);\n      setRoomNumber(\"\");\n      setSelectedRoomTypeId(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create room\", variant: \"destructive\" });\n    }\n  });\n\n  const updateRoomMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest(\"PUT\", `/api/rooms/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/rooms\"] });\n      toast({ title: \"Success\", description: \"Room updated successfully!\" });\n      setEditDialog(false);\n      setRoomNumber(\"\");\n      setSelectedRoomTypeId(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update room\", variant: \"destructive\" });\n    }\n  });\n\n  // Room Type Mutations\n  const createRoomTypeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/room-types\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/room-types\"] });\n      toast({ title: \"Success\", description: \"Room type created successfully!\" });\n      setRoomTypeDialog(false);\n      resetRoomTypeForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create room type\", variant: \"destructive\" });\n    }\n  });\n\n  const updateRoomTypeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest(\"PUT\", `/api/room-types/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/room-types\"] });\n      toast({ title: \"Success\", description: \"Room type updated successfully!\" });\n      setEditRoomTypeDialog(false);\n      resetRoomTypeForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update room type\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteRoomTypeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/room-types/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/room-types\"] });\n      toast({ title: \"Success\", description: \"Room type deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete room type\", variant: \"destructive\" });\n    }\n  });\n\n  const checkInGuestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const selectedMealPlan = mealPlans.find((plan) => plan.id === data.mealPlanId);\n      const room = rooms.find(r => r.id === data.roomId);\n      const roomType = roomTypes.find(rt => rt.id === room?.roomTypeId);\n      \n      if (!roomType) {\n        throw new Error('Room type information is missing. Please ensure the room is properly configured.');\n      }\n      \n      const price = data.guestType === \"inhouse\" ? roomType.priceInhouse : roomType.priceWalkin;\n      const roomPrice = price ? Number(price) : 0;\n      \n      if (roomPrice <= 0) {\n        throw new Error(`Room price is not configured for ${data.guestType} guests. Please configure room pricing first.`);\n      }\n      \n      await apiRequest(\"PUT\", `/api/rooms/${data.roomId}`, {\n        isOccupied: true,\n        occupantDetails: {\n          name: data.guestName,\n          email: data.guestEmail,\n          phone: data.guestPhone,\n          idNumber: data.idNumber,\n          nationality: data.nationality,\n          checkInDate: data.checkInDate,\n          checkOutDate: data.checkOutDate,\n          guestType: data.guestType || \"walkin\",\n          officeName: data.officeName || null,\n          roomTypeId: roomType?.id || null,\n          roomTypeName: roomType?.name || null,\n          roomPrice: roomPrice,\n          mealPlan: selectedMealPlan ? {\n            planId: selectedMealPlan.id,\n            planType: selectedMealPlan.planType,\n            planName: selectedMealPlan.planName,\n            pricePerPerson: selectedMealPlan.pricePerPerson,\n            numberOfPersons: Number(data.numberOfPersons) || 0,\n            totalCost: Number(selectedMealPlan.pricePerPerson) * (Number(data.numberOfPersons) || 0)\n          } : null\n        }\n      });\n\n      if (data.advancePayment && Number(data.advancePayment) > 0) {\n        await apiRequest(\"POST\", \"/api/transactions\", {\n          hotelId: user?.hotelId,\n          txnType: data.paymentMethod === 'cash' ? 'cash_in' : data.paymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n          amount: String(Number(data.advancePayment)),\n          paymentMethod: data.paymentMethod,\n          purpose: 'room_advance_payment',\n          reference: `Room ${selectedRoom?.roomNumber} - ${data.guestName}`,\n          details: {\n            roomId: data.roomId,\n            roomNumber: selectedRoom?.roomNumber,\n            guestName: data.guestName,\n            checkInDate: data.checkInDate\n          },\n          createdBy: user?.id\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Guest checked in successfully\" });\n      resetCheckInForm();\n      setCheckInDialog(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Check-in failed\", \n        description: error.message || \"Failed to check in guest\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const checkOutGuestMutation = useMutation({\n    mutationFn: async (data: { \n      roomId: string; \n      roomNumber: string;\n      guestName: string;\n      totalAmount: number; \n      discountAmount: number; \n      finalAmount: number; \n      voucherId?: string;\n      billingDetails?: any;\n    }) => {\n      if (!selectedCheckoutPaymentMethod || !['cash', 'pos', 'fonepay'].includes(selectedCheckoutPaymentMethod)) {\n        throw new Error('Please select a payment method (Cash, POS, or Fonepay) before checking out');\n      }\n\n      await apiRequest(\"PUT\", `/api/rooms/${data.roomId}`, {\n        isOccupied: false,\n        occupantDetails: null\n      });\n\n      if (data.finalAmount > 0) {\n        await apiRequest(\"POST\", \"/api/transactions\", {\n          hotelId: user?.hotelId,\n          txnType: selectedCheckoutPaymentMethod === 'cash' ? 'cash_in' : selectedCheckoutPaymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n          amount: String(data.finalAmount),\n          paymentMethod: selectedCheckoutPaymentMethod,\n          purpose: 'room_checkout_payment',\n          reference: `Checkout - Room ${data.roomNumber} - ${data.guestName}${data.voucherId ? ` (Voucher Applied)` : ''}`,\n          details: {\n            roomNumber: data.roomNumber,\n            guestName: data.guestName,\n            checkInDate: selectedRoom?.occupantDetails?.checkInDate,\n            checkOutDate: selectedRoom?.occupantDetails?.checkOutDate,\n            numberOfDays: data.billingDetails?.numberOfDays || 1,\n            subtotal: data.billingDetails?.subtotal || 0,\n            roomCharges: data.billingDetails?.totalRoomCharges || 0,\n            mealPlanCharges: data.billingDetails?.totalMealPlanCharges || 0,\n            totalTax: data.billingDetails?.totalTax || 0,\n            discountAmount: data.discountAmount,\n            voucherCode: validatedVoucher?.code || null,\n            grandTotal: data.finalAmount,\n            paymentMethod: selectedCheckoutPaymentMethod\n          },\n          createdBy: user?.id\n        });\n      }\n\n      if (data.voucherId) {\n        await apiRequest(\"POST\", `/api/vouchers/redeem`, { voucherId: data.voucherId });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Guest checked out successfully\" });\n      resetCheckoutForm();\n      setCheckOutDialog(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Checkout failed\", \n        description: error.message || \"Failed to check out guest\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSaveRoom = () => {\n    if (!roomNumber.trim()) {\n      toast({ title: \"Error\", description: \"Room number is required\", variant: \"destructive\" });\n      return;\n    }\n\n    const data = {\n      roomNumber,\n      roomTypeId: selectedRoomTypeId ? parseInt(selectedRoomTypeId) : null\n    };\n\n    if (selectedRoom && editDialog) {\n      updateRoomMutation.mutate({ id: selectedRoom.id, data });\n    } else {\n      createRoomMutation.mutate(data);\n    }\n  };\n\n  const resetCheckInForm = () => {\n    setGuestName(\"\");\n    setGuestEmail(\"\");\n    setGuestPhone(\"\");\n    setIdNumber(\"\");\n    setNationality(\"\");\n    setCheckInDate(new Date());\n    setCheckOutDate(undefined);\n    setAdvancePayment(\"\");\n    setSelectedMealPlanId(\"\");\n    setNumberOfPersons(\"\");\n    setGuestType(\"walkin\");\n    setOfficeName(\"\");\n    setSelectedPaymentMethod(\"\");\n  };\n\n  const resetCheckoutForm = () => {\n    setVoucherCode(\"\");\n    setValidatedVoucher(null);\n    setSelectedCheckoutPaymentMethod(\"\");\n  };\n\n  const handleCheckIn = (room: any) => {\n    setSelectedRoom(room);\n    resetCheckInForm();\n    setCheckInDialog(true);\n  };\n\n  const handleCheckOut = (room: any) => {\n    setSelectedRoom(room);\n    resetCheckoutForm();\n    setCheckOutDialog(true);\n  };\n\n  const handleValidateVoucher = async () => {\n    if (!voucherCode.trim()) {\n      toast({ title: \"Please enter a voucher code\", variant: \"destructive\" });\n      return;\n    }\n\n    setIsValidatingVoucher(true);\n    try {\n      const response = await fetch('/api/vouchers/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ code: voucherCode }),\n        credentials: 'include'\n      });\n      const data = await response.json();\n      \n      if (data.valid) {\n        setValidatedVoucher(data.voucher);\n        toast({ title: \"Voucher applied successfully!\" });\n      } else {\n        setValidatedVoucher(null);\n        toast({ title: \"Invalid voucher\", description: data.message || \"Voucher code is invalid\", variant: \"destructive\" });\n      }\n    } catch (error) {\n      toast({ title: \"Error validating voucher\", variant: \"destructive\" });\n    } finally {\n      setIsValidatingVoucher(false);\n    }\n  };\n\n  const calculateCheckoutBill = (room: any) => {\n    const roomPricePerDay = room.occupantDetails?.roomPrice ? Number(room.occupantDetails.roomPrice) : 0;\n    const checkInDateObj = room.occupantDetails?.checkInDate ? new Date(room.occupantDetails.checkInDate) : null;\n    const actualCheckOutDate = new Date();\n    \n    let numberOfDays = 1;\n    if (checkInDateObj) {\n      const timeDiff = actualCheckOutDate.getTime() - checkInDateObj.getTime();\n      const gracePeriodMs = 2 * 60 * 60 * 1000;\n      const adjustedTimeDiff = Math.max(0, timeDiff - gracePeriodMs);\n      numberOfDays = Math.max(1, Math.ceil(adjustedTimeDiff / (1000 * 3600 * 24)));\n    }\n    \n    const totalRoomCharges = roomPricePerDay * numberOfDays;\n    const mealPlanCostPerDay = room.occupantDetails?.mealPlan?.totalCost || 0;\n    const totalMealPlanCharges = parseFloat(mealPlanCostPerDay.toString()) * numberOfDays;\n    const subtotal = totalRoomCharges + totalMealPlanCharges;\n\n    let discountAmount = 0;\n    let discountedSubtotal = subtotal;\n    \n    if (validatedVoucher) {\n      if (validatedVoucher.discountType === 'percentage') {\n        discountAmount = Math.round((subtotal * (parseFloat(validatedVoucher.discountAmount) / 100)) * 100) / 100;\n        discountedSubtotal = Math.round((subtotal - discountAmount) * 100) / 100;\n      } else if (validatedVoucher.discountType === 'fixed') {\n        discountAmount = Math.min(parseFloat(validatedVoucher.discountAmount), subtotal);\n        discountedSubtotal = Math.round((subtotal - discountAmount) * 100) / 100;\n      }\n    }\n\n    const activeTaxes = hotelTaxes.filter((tax: any) => tax.isActive);\n    const taxOrder = ['vat', 'service_tax', 'luxury_tax'];\n    const sortedTaxes = activeTaxes.sort((a: any, b: any) => {\n      const aIndex = taxOrder.indexOf(a.taxType);\n      const bIndex = taxOrder.indexOf(b.taxType);\n      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n    });\n\n    let runningTotal = discountedSubtotal;\n    const taxBreakdown: any = {};\n    \n    sortedTaxes.forEach((tax: any) => {\n      const taxRate = parseFloat(tax.percent) / 100;\n      const taxAmount = Math.round((runningTotal * taxRate) * 100) / 100;\n      const displayName = tax.taxType === 'vat' ? 'VAT' : \n                          tax.taxType === 'service_tax' ? 'Service Tax' : \n                          tax.taxType === 'luxury_tax' ? 'Luxury Tax' : tax.taxType;\n      taxBreakdown[displayName] = {\n        rate: parseFloat(tax.percent),\n        amount: taxAmount\n      };\n      runningTotal = Math.round((runningTotal + taxAmount) * 100) / 100;\n    });\n\n    const totalTax = Object.values(taxBreakdown).reduce((sum: number, t: any) => sum + t.amount, 0);\n    let grandTotal = Math.round((discountedSubtotal + totalTax) * 100) / 100;\n\n    const roomId = room.id;\n    const guestName = room.occupantDetails?.name || '';\n    const roomNumber = room.roomNumber || '';\n    \n    const advancePayments = transactions.filter((txn: any) => {\n      const isAdvancePayment = txn.purpose === 'room_advance_payment';\n      if (txn.details?.roomId) {\n        return isAdvancePayment && txn.details.roomId === roomId;\n      }\n      const matchesRoom = txn.reference?.includes(`Room ${roomNumber}`);\n      const matchesGuest = txn.reference?.includes(guestName);\n      return isAdvancePayment && matchesRoom && matchesGuest;\n    });\n    \n    const totalAdvancePayment = advancePayments.reduce((sum: number, txn: any) => {\n      return sum + (parseFloat(txn.amount) || 0);\n    }, 0);\n\n    const finalAmount = Math.max(0, Math.round((grandTotal - totalAdvancePayment) * 100) / 100);\n\n    return {\n      subtotal,\n      discountedSubtotal,\n      taxBreakdown,\n      totalTax,\n      discountAmount,\n      advancePayment: totalAdvancePayment,\n      grandTotal,\n      finalAmount,\n      numberOfDays,\n      totalRoomCharges,\n      mealPlanCostPerDay: parseFloat(mealPlanCostPerDay.toString()),\n      totalMealPlanCharges: parseFloat(totalMealPlanCharges.toString())\n    };\n  };\n\n  const handleSubmitCheckIn = () => {\n    if (!guestName.trim() || !guestPhone.trim() || !checkInDate || !checkOutDate) {\n      toast({ title: \"Error\", description: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    if (!selectedPaymentMethod && advancePayment && Number(advancePayment) > 0) {\n      toast({ title: \"Error\", description: \"Please select payment method for advance payment\", variant: \"destructive\" });\n      return;\n    }\n\n    if (guestType === \"inhouse\" && !officeName.trim()) {\n      toast({ title: \"Error\", description: \"Office name is required for in-house guests\", variant: \"destructive\" });\n      return;\n    }\n\n    checkInGuestMutation.mutate({\n      roomId: selectedRoom?.id,\n      guestName,\n      guestEmail,\n      guestPhone,\n      idNumber,\n      nationality,\n      checkInDate: checkInDate.toISOString(),\n      checkOutDate: checkOutDate.toISOString(),\n      advancePayment,\n      mealPlanId: selectedMealPlanId,\n      numberOfPersons,\n      guestType,\n      officeName: guestType === \"inhouse\" ? officeName : null,\n      paymentMethod: selectedPaymentMethod\n    });\n  };\n\n  const handleSubmitCheckout = () => {\n    if (!selectedRoom) return;\n\n    const billCalc = calculateCheckoutBill(selectedRoom);\n    \n    checkOutGuestMutation.mutate({\n      roomId: selectedRoom.id,\n      roomNumber: selectedRoom.roomNumber,\n      guestName: selectedRoom.occupantDetails?.name || '',\n      totalAmount: billCalc.grandTotal,\n      discountAmount: billCalc.discountAmount,\n      finalAmount: billCalc.finalAmount,\n      voucherId: validatedVoucher?.id,\n      billingDetails: billCalc\n    });\n  };\n\n  const handleSaveRoomType = () => {\n    if (!roomTypeName.trim()) {\n      toast({ title: \"Error\", description: \"Room type name is required\", variant: \"destructive\" });\n      return;\n    }\n    const data = {\n      hotelId: user?.hotelId,\n      name: roomTypeName,\n      priceWalkin: priceWalkin || \"0\",\n      priceInhouse: priceInhouse || \"0\"\n    };\n    if (selectedRoomType && editRoomTypeDialog) {\n      updateRoomTypeMutation.mutate({ id: selectedRoomType.id, data });\n    } else {\n      createRoomTypeMutation.mutate(data);\n    }\n  };\n\n  // Calculate room metrics\n  const totalRooms = rooms.length;\n  const occupiedRooms = rooms.filter(r => r.isOccupied).length;\n  const availableRooms = totalRooms - occupiedRooms;\n  const occupancyRate = totalRooms > 0 ? (occupiedRooms / totalRooms) * 100 : 0;\n\n  const roomColumns = [\n    { key: \"roomNumber\", label: \"Room Number\", sortable: true },\n    { \n      key: \"roomType\", \n      label: \"Room Type\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        const roomType = roomTypes.find(rt => rt.id === row.roomTypeId);\n        return roomType?.name || 'Unknown';\n      }\n    },\n    { \n      key: \"isOccupied\", \n      label: \"Status\", \n      render: (value: boolean) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${\n          value ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'\n        }`}>\n          {value ? 'Occupied' : 'Available'}\n        </span>\n      )\n    },\n    { \n      key: \"occupantDetails\", \n      label: \"Guest Details\", \n      render: (value: any) => value ? value.name || 'N/A' : 'N/A'\n    }\n  ];\n\n  const roomActions = [\n    { \n      label: \"Check In\", \n      action: (row: any) => handleCheckIn(row),\n      show: (row: any) => !row.isOccupied\n    },\n    { \n      label: \"Check Out\", \n      action: (row: any) => handleCheckOut(row),\n      show: (row: any) => row.isOccupied\n    },\n    { \n      label: \"Edit\", \n      action: (row: any) => {\n        setSelectedRoom(row);\n        setEditDialog(true);\n      }\n    }\n  ];\n\n  const roomTypeColumns = [\n    { key: \"name\", label: \"Room Type Name\", sortable: true },\n    { \n      key: \"priceWalkin\", \n      label: \"Walk-in Price\", \n      sortable: true,\n      render: (value: any) => `NPR ${Number(value || 0).toFixed(2)}`\n    },\n    { \n      key: \"priceInhouse\", \n      label: \"In-house Price\", \n      sortable: true,\n      render: (value: any) => `NPR ${Number(value || 0).toFixed(2)}`\n    }\n  ];\n\n  const roomTypeActions = [\n    { \n      label: \"Edit\", \n      action: (row: any) => {\n        setSelectedRoomType(row);\n        setEditRoomTypeDialog(true);\n      }\n    },\n    { \n      label: \"Delete\", \n      action: async (row: any) => {\n        await confirm({\n          title: \"Delete Room Type\",\n          description: `Are you sure you want to delete room type \"${row.name}\"?`,\n          confirmText: \"Delete\",\n          cancelText: \"Cancel\",\n          variant: \"destructive\",\n          onConfirm: () => {\n            deleteRoomTypeMutation.mutate(row.id);\n          }\n        });\n      }, \n      variant: \"destructive\" as const \n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Room Occupancy\">\n      <div className=\"space-y-6\">\n        {/* Room Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Rooms\"\n            value={totalRooms}\n            icon={<Bed />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Occupancy Rate\"\n            value={`${occupancyRate.toFixed(1)}%`}\n            icon={<Users />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Available Rooms\"\n            value={availableRooms}\n            icon={<DoorOpen />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Reservations\"\n            value={reservations.length}\n            icon={<CalendarIcon />}\n            iconColor=\"text-orange-500\"\n          />\n        </div>\n\n        {/* Room Type Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Room Types</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {roomTypes.map((type) => {\n                const typeRooms = rooms.filter(r => r.roomTypeId === type.id);\n                const typeOccupied = typeRooms.filter(r => r.isOccupied).length;\n                const typeOccupancyRate = typeRooms.length > 0 ? (typeOccupied / typeRooms.length) * 100 : 0;\n                \n                return (\n                  <div key={type.id} className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg\">{type.name}</h3>\n                    <div className=\"mt-2 space-y-1\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        Total: {typeRooms.length} rooms\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Occupied: {typeOccupied} rooms\n                      </div>\n                      <div className=\"text-sm font-medium\">\n                        Occupancy: {typeOccupancyRate.toFixed(1)}%\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Room Types & Pricing Management */}\n        <DataTable\n          title=\"Room Types & Pricing\"\n          data={roomTypes}\n          columns={roomTypeColumns}\n          actions={roomTypeActions}\n          onAdd={() => setRoomTypeDialog(true)}\n          addButtonLabel=\"Add Room Type\"\n          searchPlaceholder=\"Search room types...\"\n        />\n\n        {/* Rooms Table */}\n        <DataTable\n          title=\"All Rooms\"\n          data={rooms}\n          columns={roomColumns}\n          actions={roomActions}\n          onAdd={() => setAddDialog(true)}\n          addButtonLabel=\"Add Room\"\n          searchPlaceholder=\"Search rooms...\"\n        />\n\n        {/* Check-In Dialog */}\n        <Dialog open={checkInDialog} onOpenChange={(open) => {\n          setCheckInDialog(open);\n          if (!open) {\n            setSelectedRoom(null);\n            resetCheckInForm();\n          }\n        }}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Check In - Room {selectedRoom?.roomNumber}</DialogTitle>\n              <DialogDescription>Enter guest information to check in</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Guest Type</Label>\n                <Select value={guestType} onValueChange={(value: any) => setGuestType(value)}>\n                  <SelectTrigger data-testid=\"select-guest-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"walkin\">Walk-in Guest</SelectItem>\n                    <SelectItem value=\"inhouse\">In-House Guest</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {guestType === \"inhouse\" && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"office-name\">Office/Company Name *</Label>\n                  <Input\n                    id=\"office-name\"\n                    value={officeName}\n                    onChange={(e) => setOfficeName(e.target.value)}\n                    placeholder=\"Enter office or company name\"\n                    data-testid=\"input-office-name\"\n                  />\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guest-name\">Guest Name *</Label>\n                  <Input\n                    id=\"guest-name\"\n                    value={guestName}\n                    onChange={(e) => setGuestName(e.target.value)}\n                    placeholder=\"Enter guest name\"\n                    data-testid=\"input-guest-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guest-phone\">Phone Number *</Label>\n                  <Input\n                    id=\"guest-phone\"\n                    value={guestPhone}\n                    onChange={(e) => setGuestPhone(e.target.value)}\n                    placeholder=\"Enter phone number\"\n                    data-testid=\"input-guest-phone\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guest-email\">Email</Label>\n                  <Input\n                    id=\"guest-email\"\n                    type=\"email\"\n                    value={guestEmail}\n                    onChange={(e) => setGuestEmail(e.target.value)}\n                    placeholder=\"Enter email\"\n                    data-testid=\"input-guest-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"id-number\">ID Number</Label>\n                  <Input\n                    id=\"id-number\"\n                    value={idNumber}\n                    onChange={(e) => setIdNumber(e.target.value)}\n                    placeholder=\"Enter ID number\"\n                    data-testid=\"input-id-number\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"nationality\">Nationality</Label>\n                  <Input\n                    id=\"nationality\"\n                    value={nationality}\n                    onChange={(e) => setNationality(e.target.value)}\n                    placeholder=\"Enter nationality\"\n                    data-testid=\"input-nationality\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Meal Plan</Label>\n                  <Select value={selectedMealPlanId} onValueChange={setSelectedMealPlanId}>\n                    <SelectTrigger data-testid=\"select-meal-plan\">\n                      <SelectValue placeholder=\"Select meal plan (optional)\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {mealPlans.map((plan: any) => (\n                        <SelectItem key={plan.id} value={plan.id}>\n                          {plan.planName} ({plan.planType}) - NPR {plan.pricePerPerson}/person\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {selectedMealPlanId && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"num-persons\">Number of Persons</Label>\n                  <Input\n                    id=\"num-persons\"\n                    type=\"number\"\n                    value={numberOfPersons}\n                    onChange={(e) => setNumberOfPersons(e.target.value)}\n                    placeholder=\"Enter number of persons\"\n                    data-testid=\"input-num-persons\"\n                  />\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Check-In Date *</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={cn(\n                          \"w-full justify-start text-left font-normal\",\n                          !checkInDate && \"text-muted-foreground\"\n                        )}\n                        data-testid=\"button-checkin-date\"\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {checkInDate ? format(checkInDate, \"PPP\") : \"Select date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={checkInDate}\n                        onSelect={setCheckInDate}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Check-Out Date *</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={cn(\n                          \"w-full justify-start text-left font-normal\",\n                          !checkOutDate && \"text-muted-foreground\"\n                        )}\n                        data-testid=\"button-checkout-date\"\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {checkOutDate ? format(checkOutDate, \"PPP\") : \"Select date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={checkOutDate}\n                        onSelect={setCheckOutDate}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"advance-payment\">Advance Payment</Label>\n                  <Input\n                    id=\"advance-payment\"\n                    type=\"number\"\n                    value={advancePayment}\n                    onChange={(e) => setAdvancePayment(e.target.value)}\n                    placeholder=\"Enter advance amount\"\n                    data-testid=\"input-advance-payment\"\n                  />\n                </div>\n                {advancePayment && Number(advancePayment) > 0 && (\n                  <div className=\"space-y-2\">\n                    <Label>Payment Method</Label>\n                    <Select value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod}>\n                      <SelectTrigger data-testid=\"select-payment-method\">\n                        <SelectValue placeholder=\"Select payment method\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"pos\">POS</SelectItem>\n                        <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex gap-2 justify-end pt-4\">\n                <Button variant=\"outline\" onClick={() => setCheckInDialog(false)} data-testid=\"button-cancel-checkin\">\n                  Cancel\n                </Button>\n                <Button onClick={handleSubmitCheckIn} disabled={checkInGuestMutation.isPending} data-testid=\"button-submit-checkin\">\n                  {checkInGuestMutation.isPending ? \"Checking in...\" : \"Check In\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Check-Out Dialog */}\n        <Dialog open={checkOutDialog} onOpenChange={(open) => {\n          setCheckOutDialog(open);\n          if (!open) {\n            setSelectedRoom(null);\n            resetCheckoutForm();\n          }\n        }}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Check Out - Room {selectedRoom?.roomNumber}</DialogTitle>\n              <DialogDescription>Review bill and complete checkout</DialogDescription>\n            </DialogHeader>\n            {selectedRoom && (\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-muted rounded-lg space-y-2\">\n                  <h3 className=\"font-semibold\">Guest Information</h3>\n                  <div className=\"text-sm\">\n                    <p><span className=\"font-medium\">Name:</span> {selectedRoom.occupantDetails?.name}</p>\n                    <p><span className=\"font-medium\">Phone:</span> {selectedRoom.occupantDetails?.phone}</p>\n                    {selectedRoom.occupantDetails?.email && (\n                      <p><span className=\"font-medium\">Email:</span> {selectedRoom.occupantDetails?.email}</p>\n                    )}\n                  </div>\n                </div>\n\n                {(() => {\n                  const billCalc = calculateCheckoutBill(selectedRoom);\n                  return (\n                    <>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span>Room Charges ({billCalc.numberOfDays} nights):</span>\n                          <span>{formatCurrency(billCalc.totalRoomCharges)}</span>\n                        </div>\n                        {billCalc.totalMealPlanCharges > 0 && (\n                          <div className=\"flex justify-between\">\n                            <span>Meal Plan ({billCalc.numberOfDays} nights):</span>\n                            <span>{formatCurrency(billCalc.totalMealPlanCharges)}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between font-semibold pt-2 border-t\">\n                          <span>Subtotal:</span>\n                          <span>{formatCurrency(billCalc.subtotal)}</span>\n                        </div>\n\n                        {billCalc.discountAmount > 0 && (\n                          <>\n                            <div className=\"flex justify-between text-green-600\">\n                              <span>Discount:</span>\n                              <span>-{formatCurrency(billCalc.discountAmount)}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>Discounted Subtotal:</span>\n                              <span>{formatCurrency(billCalc.discountedSubtotal)}</span>\n                            </div>\n                          </>\n                        )}\n\n                        {Object.entries(billCalc.taxBreakdown).map(([name, details]: any) => (\n                          <div key={name} className=\"flex justify-between text-sm\">\n                            <span>{name} ({details.rate}%):</span>\n                            <span>{formatCurrency(details.amount)}</span>\n                          </div>\n                        ))}\n\n                        <div className=\"flex justify-between font-semibold pt-2 border-t\">\n                          <span>Grand Total:</span>\n                          <span>{formatCurrency(billCalc.grandTotal)}</span>\n                        </div>\n\n                        {billCalc.advancePayment > 0 && (\n                          <>\n                            <div className=\"flex justify-between text-blue-600\">\n                              <span>Advance Payment:</span>\n                              <span>-{formatCurrency(billCalc.advancePayment)}</span>\n                            </div>\n                            <div className=\"flex justify-between font-bold text-lg pt-2 border-t\">\n                              <span>Amount Due:</span>\n                              <span>{formatCurrency(billCalc.finalAmount)}</span>\n                            </div>\n                          </>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"voucher-code\">Apply Voucher Code</Label>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            id=\"voucher-code\"\n                            value={voucherCode}\n                            onChange={(e) => setVoucherCode(e.target.value)}\n                            placeholder=\"Enter voucher code\"\n                            disabled={!!validatedVoucher}\n                            data-testid=\"input-voucher-code\"\n                          />\n                          {validatedVoucher ? (\n                            <Button \n                              variant=\"outline\" \n                              onClick={() => {\n                                setVoucherCode(\"\");\n                                setValidatedVoucher(null);\n                              }}\n                              data-testid=\"button-remove-voucher\"\n                            >\n                              Remove\n                            </Button>\n                          ) : (\n                            <Button \n                              onClick={handleValidateVoucher} \n                              disabled={isValidatingVoucher}\n                              data-testid=\"button-apply-voucher\"\n                            >\n                              {isValidatingVoucher ? \"Validating...\" : \"Apply\"}\n                            </Button>\n                          )}\n                        </div>\n                        {validatedVoucher && (\n                          <p className=\"text-sm text-green-600\">\n                            Voucher \"{validatedVoucher.code}\" applied!\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Payment Method *</Label>\n                        <Select value={selectedCheckoutPaymentMethod} onValueChange={setSelectedCheckoutPaymentMethod}>\n                          <SelectTrigger data-testid=\"select-checkout-payment\">\n                            <SelectValue placeholder=\"Select payment method\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"cash\">Cash</SelectItem>\n                            <SelectItem value=\"pos\">POS</SelectItem>\n                            <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"flex gap-2 justify-end pt-4\">\n                        <Button variant=\"outline\" onClick={() => setCheckOutDialog(false)} data-testid=\"button-cancel-checkout\">\n                          Cancel\n                        </Button>\n                        <Button \n                          onClick={handleSubmitCheckout} \n                          disabled={checkOutGuestMutation.isPending || !selectedCheckoutPaymentMethod}\n                          data-testid=\"button-submit-checkout\"\n                        >\n                          {checkOutGuestMutation.isPending ? \"Checking out...\" : \"Check Out\"}\n                        </Button>\n                      </div>\n                    </>\n                  );\n                })()}\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Room Dialog */}\n        <Dialog open={editDialog} onOpenChange={(open) => {\n          setEditDialog(open);\n          if (!open) {\n            setSelectedRoom(null);\n            setRoomNumber(\"\");\n            setSelectedRoomTypeId(\"\");\n          }\n        }}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Room {selectedRoom?.roomNumber}</DialogTitle>\n              <DialogDescription>Update room details</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-room-number\">Room Number</Label>\n                <Input\n                  id=\"edit-room-number\"\n                  value={roomNumber}\n                  onChange={(e) => setRoomNumber(e.target.value)}\n                  placeholder=\"Enter room number\"\n                  data-testid=\"input-room-number\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-room-type\">Room Type</Label>\n                <Select value={selectedRoomTypeId} onValueChange={setSelectedRoomTypeId}>\n                  <SelectTrigger id=\"edit-room-type\" data-testid=\"select-room-type\">\n                    <SelectValue placeholder=\"Select room type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roomTypes.map((type: any) => (\n                      <SelectItem key={type.id} value={type.id.toString()}>\n                        {type.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setEditDialog(false)} data-testid=\"button-cancel-edit\">Cancel</Button>\n                <Button onClick={handleSaveRoom} disabled={updateRoomMutation.isPending} data-testid=\"button-save-room\">\n                  {updateRoomMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Add Room Dialog */}\n        <Dialog open={addDialog} onOpenChange={(open) => {\n          setAddDialog(open);\n          if (!open) {\n            setRoomNumber(\"\");\n            setSelectedRoomTypeId(\"\");\n          }\n        }}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Room</DialogTitle>\n              <DialogDescription>Create a new room</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"add-room-number\">Room Number</Label>\n                <Input\n                  id=\"add-room-number\"\n                  value={roomNumber}\n                  onChange={(e) => setRoomNumber(e.target.value)}\n                  placeholder=\"Enter room number\"\n                  data-testid=\"input-room-number\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"add-room-type\">Room Type</Label>\n                <Select value={selectedRoomTypeId} onValueChange={setSelectedRoomTypeId}>\n                  <SelectTrigger id=\"add-room-type\" data-testid=\"select-room-type\">\n                    <SelectValue placeholder=\"Select room type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roomTypes.map((type: any) => (\n                      <SelectItem key={type.id} value={type.id.toString()}>\n                        {type.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setAddDialog(false)} data-testid=\"button-cancel-add\">Cancel</Button>\n                <Button onClick={handleSaveRoom} disabled={createRoomMutation.isPending} data-testid=\"button-create-room\">\n                  {createRoomMutation.isPending ? \"Creating...\" : \"Create Room\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Add/Edit Room Type Dialog */}\n        <Dialog open={roomTypeDialog || editRoomTypeDialog} onOpenChange={(open) => {\n          if (!open) {\n            setRoomTypeDialog(false);\n            setEditRoomTypeDialog(false);\n            resetRoomTypeForm();\n          }\n        }}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editRoomTypeDialog ? 'Edit Room Type' : 'Add Room Type'}</DialogTitle>\n              <DialogDescription>\n                {editRoomTypeDialog ? 'Update room type and pricing information' : 'Create a new room type with pricing'}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"room-type-name\">Room Type Name *</Label>\n                <Input\n                  id=\"room-type-name\"\n                  value={roomTypeName}\n                  onChange={(e) => setRoomTypeName(e.target.value)}\n                  placeholder=\"e.g., Deluxe, Standard, Suite\"\n                  data-testid=\"input-room-type-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"price-walkin\">Walk-in Price (NPR) *</Label>\n                <Input\n                  id=\"price-walkin\"\n                  type=\"number\"\n                  value={priceWalkin}\n                  onChange={(e) => setPriceWalkin(e.target.value)}\n                  placeholder=\"Enter walk-in price\"\n                  data-testid=\"input-price-walkin\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"price-inhouse\">In-house Price (NPR) *</Label>\n                <Input\n                  id=\"price-inhouse\"\n                  type=\"number\"\n                  value={priceInhouse}\n                  onChange={(e) => setPriceInhouse(e.target.value)}\n                  placeholder=\"Enter in-house price\"\n                  data-testid=\"input-price-inhouse\"\n                />\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => {\n                  setRoomTypeDialog(false);\n                  setEditRoomTypeDialog(false);\n                  resetRoomTypeForm();\n                }} data-testid=\"button-cancel-room-type\">\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSaveRoomType} \n                  disabled={createRoomTypeMutation.isPending || updateRoomTypeMutation.isPending}\n                  data-testid=\"button-save-room-type\"\n                >\n                  {(createRoomTypeMutation.isPending || updateRoomTypeMutation.isPending) ? \"Saving...\" : editRoomTypeDialog ? \"Update\" : \"Create\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":53759},"client/src/pages/dashboard/housekeeping-staff/my-tasks.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getStatusColor } from \"@/lib/utils\";\nimport { CheckSquare, Clock } from \"lucide-react\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\n\nexport default function HousekeepingStaffMyTasks() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tasks = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/users\", user?.id, \"tasks\"],\n    enabled: !!user?.id,\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/hotels/current/tasks/${taskId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", user?.id, \"tasks\"] });\n      toast({ title: \"Task updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: error.message || \"Failed to update task\", variant: \"destructive\" });\n    }\n  });\n\n  const pendingTasks = tasks.filter((t: any) => t.status === 'pending');\n  const performingTasks = tasks.filter((t: any) => t.status === 'in_progress');\n  const completedTasks = tasks.filter((t: any) => t.status === 'completed' || t.status === 'pending_review');\n\n  const handleTaskStatusUpdate = (task: any, newStatus: string) => {\n    updateTaskMutation.mutate({ taskId: task.id, status: newStatus });\n  };\n\n  return (\n    <DashboardLayout title=\"My Tasks\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <StatsCard\n            title=\"Pending Tasks\"\n            value={pendingTasks.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"In Progress\"\n            value={performingTasks.length}\n            icon={<CheckSquare />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Completed\"\n            value={completedTasks.length}\n            icon={<CheckSquare />}\n            iconColor=\"text-green-500\"\n          />\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All My Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <p className=\"text-muted-foreground\">Loading tasks...</p>\n            ) : tasks.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-tasks-message\">\n                No tasks assigned\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {tasks.map((task, index) => (\n                  <div key={task.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`task-item-${index}`}>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-foreground\">{task.title}</h4>\n                      {task.description && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">{task.description}</p>\n                      )}\n                      <div className=\"flex items-center space-x-3 mt-2\">\n                        <Badge className={getStatusColor(task.status)} variant=\"secondary\">\n                          {task.status}\n                        </Badge>\n                        {task.priority && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Priority: {task.priority}\n                          </Badge>\n                        )}\n                        <span className=\"text-xs text-muted-foreground\">\n                          Created: {new Date(task.createdAt).toLocaleDateString('en-GB', { timeZone: 'Asia/Kathmandu' })}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col space-y-2 ml-4\">\n                      {task.status === 'pending' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleTaskStatusUpdate(task, 'in_progress')}\n                          disabled={updateTaskMutation.isPending}\n                          data-testid={`button-start-task-${index}`}\n                        >\n                          Start Task\n                        </Button>\n                      )}\n                      {task.status === 'in_progress' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleTaskStatusUpdate(task, 'completed')}\n                          disabled={updateTaskMutation.isPending}\n                          data-testid={`button-complete-task-${index}`}\n                        >\n                          Mark Complete\n                        </Button>\n                      )}\n                      {task.status === 'pending_review' && (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\" variant=\"secondary\">\n                          Pending Approval\n                        </Badge>\n                      )}\n                      {task.status === 'completed' && (\n                        <Badge className=\"bg-green-100 text-green-800\" variant=\"secondary\">\n                          Done ✓\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":6036},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/dashboard/manager/room-setup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Trash2, Edit, Plus, DoorOpen, Building2 } from \"lucide-react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\ninterface RoomType {\n  id: number;\n  hotelId: string;\n  name: string;\n  description?: string;\n}\n\ninterface Room {\n  id: string;\n  hotelId: string;\n  roomNumber: string;\n  roomTypeId?: number;\n  isOccupied: boolean;\n  occupantDetails?: any;\n  createdAt: string;\n  updatedAt: string;\n  deletedAt?: string;\n}\n\nexport default function RoomSetupPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { confirm } = useConfirmDialog();\n  \n  const [roomTypes, setRoomTypes] = useState<RoomType[]>([]);\n  const [rooms, setRooms] = useState<Room[]>([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Room Type Dialog States\n  const [isRoomTypeDialogOpen, setIsRoomTypeDialogOpen] = useState(false);\n  const [editingRoomType, setEditingRoomType] = useState<RoomType | null>(null);\n  const [roomTypeName, setRoomTypeName] = useState(\"\");\n  const [roomTypeDescription, setRoomTypeDescription] = useState(\"\");\n  \n  // Room Dialog States\n  const [isRoomDialogOpen, setIsRoomDialogOpen] = useState(false);\n  const [isBulkRoomDialogOpen, setIsBulkRoomDialogOpen] = useState(false);\n  const [editingRoom, setEditingRoom] = useState<Room | null>(null);\n  const [roomNumber, setRoomNumber] = useState(\"\");\n  const [selectedRoomTypeId, setSelectedRoomTypeId] = useState<string>(\"\");\n  \n  // Bulk Room Creation States\n  const [bulkRoomType, setBulkRoomType] = useState<string>(\"\");\n  const [roomPrefix, setRoomPrefix] = useState(\"\");\n  const [startNumber, setStartNumber] = useState(\"\");\n  const [endNumber, setEndNumber] = useState(\"\");\n\n  // Default room types for hotels\n  const defaultRoomTypes = [\n    { name: \"Standard\", description: \"Basic comfortable rooms with essential amenities\" },\n    { name: \"Deluxe\", description: \"Spacious rooms with premium amenities and city view\" },\n    { name: \"Suite\", description: \"Luxury rooms with separate living area and premium services\" },\n    { name: \"Presidential\", description: \"Ultimate luxury suites with exclusive amenities and services\" },\n    { name: \"Executive\", description: \"Business-class rooms with work facilities and executive lounge access\" }\n  ];\n\n  useEffect(() => {\n    if (user?.hotelId) {\n      fetchRoomTypes();\n      fetchRooms();\n    }\n  }, [user?.hotelId]);\n\n  const fetchRoomTypes = async () => {\n    try {\n      const response = await fetch(\"/api/hotels/current/room-types\");\n      if (response.ok) {\n        const data = await response.json();\n        setRoomTypes(data);\n      }\n    } catch (error) {\n      // Silent error handling\n    }\n  };\n\n  const fetchRooms = async () => {\n    try {\n      const response = await fetch(\"/api/hotels/current/rooms\");\n      if (response.ok) {\n        const data = await response.json();\n        setRooms(data);\n      }\n    } catch (error) {\n      // Silent error handling\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateDefaultRoomTypes = async () => {\n    try {\n      for (const roomType of defaultRoomTypes) {\n        await fetch(\"/api/room-types\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(roomType)\n        });\n      }\n      toast({ title: \"Success\", description: \"Default room types created successfully!\" });\n      fetchRoomTypes();\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to create default room types\", variant: \"destructive\" });\n    }\n  };\n\n  const handleSaveRoomType = async () => {\n    if (!roomTypeName.trim()) {\n      toast({ title: \"Error\", description: \"Room type name is required\", variant: \"destructive\" });\n      return;\n    }\n\n    try {\n      const data = {\n        name: roomTypeName,\n        description: roomTypeDescription\n      };\n\n      const response = editingRoomType\n        ? await fetch(`/api/room-types/${editingRoomType.id}`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data)\n          })\n        : await fetch(\"/api/room-types\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast({ \n          title: \"Success\", \n          description: `Room type ${editingRoomType ? 'updated' : 'created'} successfully!` \n        });\n        fetchRoomTypes();\n        resetRoomTypeForm();\n        setIsRoomTypeDialogOpen(false);\n      } else {\n        throw new Error(\"Failed to save room type\");\n      }\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to save room type\", variant: \"destructive\" });\n    }\n  };\n\n  const handleDeleteRoomType = async (id: number) => {\n    await confirm({\n      title: \"Delete Room Type\",\n      description: \"Are you sure you want to delete this room type?\",\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: async () => {\n        try {\n          const response = await fetch(`/api/room-types/${id}`, { method: \"DELETE\" });\n          if (response.ok) {\n            toast({ title: \"Success\", description: \"Room type deleted successfully!\" });\n            fetchRoomTypes();\n          }\n        } catch (error) {\n          toast({ title: \"Error\", description: \"Failed to delete room type\", variant: \"destructive\" });\n        }\n      }\n    });\n  };\n\n  const handleSaveRoom = async () => {\n    if (!roomNumber.trim()) {\n      toast({ title: \"Error\", description: \"Room number is required\", variant: \"destructive\" });\n      return;\n    }\n\n    try {\n      const data = {\n        roomNumber,\n        roomTypeId: selectedRoomTypeId ? parseInt(selectedRoomTypeId) : null\n      };\n\n      const response = editingRoom\n        ? await fetch(`/api/rooms/${editingRoom.id}`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data)\n          })\n        : await fetch(\"/api/rooms\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast({ \n          title: \"Success\", \n          description: `Room ${editingRoom ? 'updated' : 'created'} successfully!` \n        });\n        fetchRooms();\n        resetRoomForm();\n        setIsRoomDialogOpen(false);\n      } else {\n        throw new Error(\"Failed to save room\");\n      }\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to save room\", variant: \"destructive\" });\n    }\n  };\n\n  const handleBulkCreateRooms = async () => {\n    if (!bulkRoomType || !roomPrefix || !startNumber || !endNumber) {\n      toast({ title: \"Error\", description: \"All fields are required for bulk creation\", variant: \"destructive\" });\n      return;\n    }\n\n    const start = parseInt(startNumber);\n    const end = parseInt(endNumber);\n\n    if (start > end) {\n      toast({ title: \"Error\", description: \"Start number must be less than end number\", variant: \"destructive\" });\n      return;\n    }\n\n    try {\n      const promises = [];\n      for (let i = start; i <= end; i++) {\n        const roomNumber = `${roomPrefix}${i.toString().padStart(3, '0')}`;\n        promises.push(\n          fetch(\"/api/rooms\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              roomNumber,\n              roomTypeId: parseInt(bulkRoomType)\n            })\n          })\n        );\n      }\n\n      await Promise.all(promises);\n      toast({ title: \"Success\", description: `${end - start + 1} rooms created successfully!` });\n      fetchRooms();\n      resetBulkRoomForm();\n      setIsBulkRoomDialogOpen(false);\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to create rooms\", variant: \"destructive\" });\n    }\n  };\n\n  const handleDeleteRoom = async (id: string) => {\n    await confirm({\n      title: \"Delete Room\",\n      description: \"Are you sure you want to delete this room?\",\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: async () => {\n        try {\n          const response = await fetch(`/api/rooms/${id}`, { method: \"DELETE\" });\n          if (response.ok) {\n            toast({ title: \"Success\", description: \"Room deleted successfully!\" });\n            fetchRooms();\n          }\n        } catch (error) {\n          toast({ title: \"Error\", description: \"Failed to delete room\", variant: \"destructive\" });\n        }\n      }\n    });\n  };\n\n  const resetRoomTypeForm = () => {\n    setEditingRoomType(null);\n    setRoomTypeName(\"\");\n    setRoomTypeDescription(\"\");\n  };\n\n  const resetRoomForm = () => {\n    setEditingRoom(null);\n    setRoomNumber(\"\");\n    setSelectedRoomTypeId(\"\");\n  };\n\n  const resetBulkRoomForm = () => {\n    setBulkRoomType(\"\");\n    setRoomPrefix(\"\");\n    setStartNumber(\"\");\n    setEndNumber(\"\");\n  };\n\n  const editRoomType = (roomType: RoomType) => {\n    setEditingRoomType(roomType);\n    setRoomTypeName(roomType.name);\n    setRoomTypeDescription(roomType.description || \"\");\n    setIsRoomTypeDialogOpen(true);\n  };\n\n  const editRoom = (room: Room) => {\n    setEditingRoom(room);\n    setRoomNumber(room.roomNumber);\n    setSelectedRoomTypeId(room.roomTypeId?.toString() || \"\");\n    setIsRoomDialogOpen(true);\n  };\n\n  const getRoomTypeName = (roomTypeId?: number) => {\n    const roomType = roomTypes.find(rt => rt.id === roomTypeId);\n    return roomType?.name || \"Unassigned\";\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout title=\"Room Setup\">\n        <div className=\"flex items-center justify-center h-64\">Loading...</div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Room Setup\">\n      <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Room Setup</h1>\n          <p className=\"text-muted-foreground\">Manage room types and room configurations</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Room Types Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building2 className=\"w-5 h-5\" />\n              Room Types\n            </CardTitle>\n            <CardDescription>\n              Define different categories of rooms (Standard, Deluxe, Suite, etc.)\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <Dialog open={isRoomTypeDialogOpen} onOpenChange={setIsRoomTypeDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button onClick={resetRoomTypeForm} className=\"flex items-center gap-2\">\n                    <Plus className=\"w-4 h-4\" />\n                    Add Room Type\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingRoomType ? \"Edit Room Type\" : \"Create Room Type\"}\n                    </DialogTitle>\n                    <DialogDescription>\n                      Add a new category of rooms for your hotel\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"roomTypeName\">Name</Label>\n                      <Input\n                        id=\"roomTypeName\"\n                        value={roomTypeName}\n                        onChange={(e) => setRoomTypeName(e.target.value)}\n                        placeholder=\"e.g., Deluxe, Suite, Presidential\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"roomTypeDescription\">Description</Label>\n                      <Textarea\n                        id=\"roomTypeDescription\"\n                        value={roomTypeDescription}\n                        onChange={(e) => setRoomTypeDescription(e.target.value)}\n                        placeholder=\"Describe the features and amenities of this room type\"\n                        rows={3}\n                      />\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button onClick={handleSaveRoomType}>\n                        {editingRoomType ? \"Update\" : \"Create\"}\n                      </Button>\n                      <Button variant=\"outline\" onClick={() => setIsRoomTypeDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              {roomTypes.length === 0 && (\n                <Button variant=\"outline\" onClick={handleCreateDefaultRoomTypes}>\n                  Create Default Types\n                </Button>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              {roomTypes.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground\">\n                  No room types found. Create some room types to get started.\n                </p>\n              ) : (\n                roomTypes.map((roomType) => (\n                  <div key={roomType.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">{roomType.name}</h4>\n                      {roomType.description && (\n                        <p className=\"text-sm text-muted-foreground\">{roomType.description}</p>\n                      )}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => editRoomType(roomType)}>\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => handleDeleteRoomType(roomType.id)}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Rooms Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <DoorOpen className=\"w-5 h-5\" />\n              Rooms\n            </CardTitle>\n            <CardDescription>\n              Manage individual rooms and assign them to room types\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <Dialog open={isRoomDialogOpen} onOpenChange={setIsRoomDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button onClick={resetRoomForm} className=\"flex items-center gap-2\">\n                    <Plus className=\"w-4 h-4\" />\n                    Add Room\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingRoom ? \"Edit Room\" : \"Create Room\"}\n                    </DialogTitle>\n                    <DialogDescription>\n                      Add a new room to your hotel\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"roomNumber\">Room Number</Label>\n                      <Input\n                        id=\"roomNumber\"\n                        value={roomNumber}\n                        onChange={(e) => setRoomNumber(e.target.value)}\n                        placeholder=\"e.g., 101, A-101, Presidential-01\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"roomType\">Room Type</Label>\n                      <Select value={selectedRoomTypeId} onValueChange={setSelectedRoomTypeId}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a room type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {roomTypes.map((roomType) => (\n                            <SelectItem key={roomType.id} value={roomType.id.toString()}>\n                              {roomType.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button onClick={handleSaveRoom}>\n                        {editingRoom ? \"Update\" : \"Create\"}\n                      </Button>\n                      <Button variant=\"outline\" onClick={() => setIsRoomDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              <Dialog open={isBulkRoomDialogOpen} onOpenChange={setIsBulkRoomDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" disabled={roomTypes.length === 0}>\n                    Bulk Create\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Bulk Create Rooms</DialogTitle>\n                    <DialogDescription>\n                      Create multiple rooms with sequential numbering\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"bulkRoomType\">Room Type</Label>\n                      <Select value={bulkRoomType} onValueChange={setBulkRoomType}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a room type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {roomTypes.map((roomType) => (\n                            <SelectItem key={roomType.id} value={roomType.id.toString()}>\n                              {roomType.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"roomPrefix\">Room Prefix</Label>\n                      <Input\n                        id=\"roomPrefix\"\n                        value={roomPrefix}\n                        onChange={(e) => setRoomPrefix(e.target.value)}\n                        placeholder=\"e.g., A, B, FL1, etc.\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"startNumber\">Start Number</Label>\n                        <Input\n                          id=\"startNumber\"\n                          type=\"number\"\n                          value={startNumber}\n                          onChange={(e) => setStartNumber(e.target.value)}\n                          placeholder=\"1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"endNumber\">End Number</Label>\n                        <Input\n                          id=\"endNumber\"\n                          type=\"number\"\n                          value={endNumber}\n                          onChange={(e) => setEndNumber(e.target.value)}\n                          placeholder=\"50\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button onClick={handleBulkCreateRooms}>\n                        Create Rooms\n                      </Button>\n                      <Button variant=\"outline\" onClick={() => setIsBulkRoomDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {rooms.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground\">\n                  No rooms found. Create some rooms to get started.\n                </p>\n              ) : (\n                rooms.map((room) => (\n                  <div key={room.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <div>\n                        <h4 className=\"font-medium\">{room.roomNumber}</h4>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\">\n                            {getRoomTypeName(room.roomTypeId)}\n                          </Badge>\n                          {room.isOccupied && (\n                            <Badge variant=\"destructive\">Occupied</Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => editRoom(room)}>\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => handleDeleteRoom(room.id)}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">{roomTypes.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Room Types</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">{rooms.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Total Rooms</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">{rooms.filter(r => r.isOccupied).length}</div>\n            <p className=\"text-sm text-muted-foreground\">Occupied</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">{rooms.filter(r => !r.isOccupied).length}</div>\n            <p className=\"text-sm text-muted-foreground\">Available</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n    </DashboardLayout>\n  );\n}","size_bytes":24305},"client/src/pages/auth-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Hotel, LogIn } from \"lucide-react\";\nimport { ROLE_DASHBOARDS } from \"@/lib/constants\";\nimport { useEffect } from \"react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\")\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\"\n    }\n  });\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      const role = user.role?.name;\n      if (role && ROLE_DASHBOARDS[role as keyof typeof ROLE_DASHBOARDS]) {\n        setLocation(ROLE_DASHBOARDS[role as keyof typeof ROLE_DASHBOARDS]);\n      }\n    }\n  }, [user, setLocation]);\n\n  const onLogin = async (data: LoginData) => {\n    try {\n      const result = await loginMutation.mutateAsync({\n        username: data.username,\n        password: data.password\n      });\n      \n      // Redirect to appropriate dashboard based on user's role\n      if (result && result.role?.name) {\n        const dashboardPath = ROLE_DASHBOARDS[result.role.name as keyof typeof ROLE_DASHBOARDS];\n        setLocation(dashboardPath || '/');\n      } else {\n        setLocation('/');\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-slate-100 p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Hotel className=\"h-8 w-8 text-primary\" />\n              <CardTitle className=\"text-2xl font-bold text-foreground\">Hotel Management</CardTitle>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Sign in to access your dashboard\n            </p>\n          </CardHeader>\n          <CardContent>\n            <Form {...loginForm}>\n              <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                <FormField\n                  control={loginForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Enter your username\" \n                          className=\"h-11\"\n                          autoComplete=\"username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={loginForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\" \n                          placeholder=\"Enter your password\" \n                          className=\"h-11\"\n                          autoComplete=\"current-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full h-11 mt-6\" \n                  disabled={loginMutation.isPending}\n                >\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n            \n            {loginMutation.error && (\n              <div className=\"mt-4 p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded\">\n                Invalid username or password. Please try again.\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4876},"client/src/pages/dashboard/finance/revenue.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { Bed, UtensilsCrossed, Wine, DollarSign, TrendingUp, Calendar } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function FinanceRevenuePage() {\n  const { user } = useAuth();\n  const [period, setPeriod] = useState(\"month\");\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Listen for real-time transaction updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  // Filter revenue transactions by type and period\n  const getDateFilter = () => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    \n    switch (period) {\n      case 'today':\n        return (t: any) => {\n          const txnDate = new Date(t.createdAt);\n          return txnDate >= today;\n        };\n      case 'week':\n        const weekStart = new Date(today);\n        weekStart.setDate(today.getDate() - today.getDay());\n        return (t: any) => new Date(t.createdAt) >= weekStart;\n      case 'month':\n        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n        return (t: any) => new Date(t.createdAt) >= monthStart;\n      case 'year':\n        const yearStart = new Date(now.getFullYear(), 0, 1);\n        return (t: any) => new Date(t.createdAt) >= yearStart;\n      default:\n        return () => true;\n    }\n  };\n\n  const dateFilter = getDateFilter();\n  const revenueTransactions = transactions.filter(t => \n    (t.txnType === 'cash_in' || t.txnType === 'pos_in' || t.txnType === 'fonepay_in' || t.txnType?.includes('_in')) &&\n    dateFilter(t)\n  );\n\n  // Categorize revenue by department based on purpose\n  const roomRevenue = revenueTransactions.filter(t => \n    t.purpose?.toLowerCase().includes('room') || t.purpose?.toLowerCase().includes('checkout')\n  );\n  const restaurantRevenue = revenueTransactions.filter(t => \n    t.purpose?.toLowerCase().includes('restaurant') || t.purpose?.toLowerCase().includes('food')\n  );\n  const barRevenue = revenueTransactions.filter(t => \n    t.purpose?.toLowerCase().includes('bar') || t.purpose?.toLowerCase().includes('drink')\n  );\n  const otherRevenue = revenueTransactions.filter(t => \n    !roomRevenue.includes(t) && !restaurantRevenue.includes(t) && !barRevenue.includes(t)\n  );\n\n  const totalRoomRevenue = roomRevenue.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalRestaurantRevenue = restaurantRevenue.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalBarRevenue = barRevenue.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalOtherRevenue = otherRevenue.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalRevenue = totalRoomRevenue + totalRestaurantRevenue + totalBarRevenue + totalOtherRevenue;\n\n  // Calculate percentages\n  const roomPercent = totalRevenue > 0 ? (totalRoomRevenue / totalRevenue) * 100 : 0;\n  const restaurantPercent = totalRevenue > 0 ? (totalRestaurantRevenue / totalRevenue) * 100 : 0;\n  const barPercent = totalRevenue > 0 ? (totalBarRevenue / totalRevenue) * 100 : 0;\n  const otherPercent = totalRevenue > 0 ? (totalOtherRevenue / totalRevenue) * 100 : 0;\n\n  return (\n    <DashboardLayout title=\"Revenue Reports\">\n      <div className=\"space-y-6\">\n        {/* Header with Period Selector */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n              <CardTitle>Revenue Analysis by Department</CardTitle>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <Select value={period} onValueChange={setPeriod}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-period\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                    <SelectItem value=\"year\">This Year</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Total Revenue Card */}\n        <Card className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm opacity-90\">Total Revenue</p>\n                <p className=\"text-4xl font-bold mt-2\">{formatCurrency(totalRevenue)}</p>\n                <p className=\"text-sm opacity-90 mt-1\">{revenueTransactions.length} transactions</p>\n              </div>\n              <TrendingUp className=\"h-16 w-16 opacity-50\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Department Revenue Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Bed className=\"h-10 w-10 text-blue-500\" />\n                <span className=\"text-2xl font-bold text-blue-600\">{roomPercent.toFixed(1)}%</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Rooms Revenue</h3>\n              <p className=\"text-2xl font-bold\">{formatCurrency(totalRoomRevenue)}</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">{roomRevenue.length} transactions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <UtensilsCrossed className=\"h-10 w-10 text-orange-500\" />\n                <span className=\"text-2xl font-bold text-orange-600\">{restaurantPercent.toFixed(1)}%</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Restaurant Revenue</h3>\n              <p className=\"text-2xl font-bold\">{formatCurrency(totalRestaurantRevenue)}</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">{restaurantRevenue.length} transactions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Wine className=\"h-10 w-10 text-purple-500\" />\n                <span className=\"text-2xl font-bold text-purple-600\">{barPercent.toFixed(1)}%</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Bar Revenue</h3>\n              <p className=\"text-2xl font-bold\">{formatCurrency(totalBarRevenue)}</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">{barRevenue.length} transactions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <DollarSign className=\"h-10 w-10 text-green-500\" />\n                <span className=\"text-2xl font-bold text-green-600\">{otherPercent.toFixed(1)}%</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Other Revenue</h3>\n              <p className=\"text-2xl font-bold\">{formatCurrency(totalOtherRevenue)}</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">{otherRevenue.length} transactions</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Meal Plan Revenue Analysis */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UtensilsCrossed className=\"h-5 w-5\" />\n              Meal Plan Revenue Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {(() => {\n                const mealPlanTransactions = revenueTransactions.filter(t => \n                  t.details?.mealPlanCharges && Number(t.details.mealPlanCharges) > 0\n                );\n                \n                const totalMealPlanRevenue = mealPlanTransactions.reduce((sum, t) => \n                  sum + Number(t.details?.mealPlanCharges || 0), 0\n                );\n                \n                if (totalMealPlanRevenue === 0) {\n                  return (\n                    <p className=\"text-center text-muted-foreground py-8\">No meal plan revenue data available</p>\n                  );\n                }\n                \n                return (\n                  <>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">Total Meal Plan Revenue</p>\n                        <p className=\"text-2xl font-bold text-blue-600 mt-1\">{formatCurrency(totalMealPlanRevenue)}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">{mealPlanTransactions.length} reservations</p>\n                      </div>\n                      <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">Average per Guest</p>\n                        <p className=\"text-2xl font-bold text-green-600 mt-1\">\n                          {formatCurrency(mealPlanTransactions.length > 0 ? totalMealPlanRevenue / mealPlanTransactions.length : 0)}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">per reservation</p>\n                      </div>\n                      <div className=\"p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">% of Total Revenue</p>\n                        <p className=\"text-2xl font-bold text-orange-600 mt-1\">\n                          {totalRevenue > 0 ? ((totalMealPlanRevenue / totalRevenue) * 100).toFixed(1) : 0}%\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">of {formatCurrency(totalRevenue)}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-4\">\n                      <h4 className=\"font-semibold mb-3\">Recent Meal Plan Transactions</h4>\n                      <div className=\"space-y-2\">\n                        {mealPlanTransactions.slice(0, 5).map((t, i) => (\n                          <div key={i} className=\"flex justify-between items-center p-2 hover:bg-muted rounded\">\n                            <div className=\"flex-1\">\n                              <p className=\"text-sm font-medium\">{t.details?.guestName || 'Guest'}</p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {t.details?.numberOfDays || 1} days × {formatCurrency(Number(t.details?.mealPlanCharges || 0) / (t.details?.numberOfDays || 1))}/day\n                              </p>\n                            </div>\n                            <span className=\"font-bold text-green-600\">{formatCurrency(Number(t.details?.mealPlanCharges || 0))}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </>\n                );\n              })()}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Revenue Distribution Chart (Visual Representation) */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Revenue Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"font-medium\">Rooms</span>\n                  <span className=\"text-muted-foreground\">{formatCurrency(totalRoomRevenue)} ({roomPercent.toFixed(1)}%)</span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n                  <div className=\"bg-blue-500 h-3 rounded-full\" style={{ width: `${roomPercent}%` }}></div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"font-medium\">Restaurant</span>\n                  <span className=\"text-muted-foreground\">{formatCurrency(totalRestaurantRevenue)} ({restaurantPercent.toFixed(1)}%)</span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n                  <div className=\"bg-orange-500 h-3 rounded-full\" style={{ width: `${restaurantPercent}%` }}></div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"font-medium\">Bar</span>\n                  <span className=\"text-muted-foreground\">{formatCurrency(totalBarRevenue)} ({barPercent.toFixed(1)}%)</span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n                  <div className=\"bg-purple-500 h-3 rounded-full\" style={{ width: `${barPercent}%` }}></div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"font-medium\">Other</span>\n                  <span className=\"text-muted-foreground\">{formatCurrency(totalOtherRevenue)} ({otherPercent.toFixed(1)}%)</span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n                  <div className=\"bg-green-500 h-3 rounded-full\" style={{ width: `${otherPercent}%` }}></div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Department-wise Transaction Details */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bed className=\"h-5 w-5\" />\n                Room Revenue Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {roomRevenue.slice(0, 5).map((t, i) => (\n                  <div key={i} className=\"flex justify-between items-center p-2 hover:bg-muted rounded\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">{t.purpose || 'Room Charge'}</p>\n                      <p className=\"text-xs text-muted-foreground\">{t.paymentMethod?.toUpperCase()}</p>\n                    </div>\n                    <span className=\"font-bold text-green-600\">{formatCurrency(Number(t.amount))}</span>\n                  </div>\n                ))}\n                {roomRevenue.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-4\">No room revenue transactions</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <UtensilsCrossed className=\"h-5 w-5\" />\n                Restaurant Revenue Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {restaurantRevenue.slice(0, 5).map((t, i) => (\n                  <div key={i} className=\"flex justify-between items-center p-2 hover:bg-muted rounded\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">{t.purpose || 'Restaurant Sale'}</p>\n                      <p className=\"text-xs text-muted-foreground\">{t.paymentMethod?.toUpperCase()}</p>\n                    </div>\n                    <span className=\"font-bold text-green-600\">{formatCurrency(Number(t.amount))}</span>\n                  </div>\n                ))}\n                {restaurantRevenue.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-4\">No restaurant revenue transactions</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":17061},"client/src/hooks/use-realtime-query.ts":{"content":"import { useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useWebSocket } from './use-websocket';\n\ninterface UseRealtimeQueryOptions {\n  queryKey: string | string[];\n  events: string[];\n}\n\n/**\n * Hook to automatically invalidate and refetch queries when real-time events occur\n * \n * @example\n * // Refetch tasks when task events occur\n * useRealtimeQuery({\n *   queryKey: '/api/hotels/current/tasks',\n *   events: ['task:created', 'task:updated', 'task:deleted']\n * });\n * \n * @example\n * // Refetch KOT orders when order events occur\n * useRealtimeQuery({\n *   queryKey: ['/api/hotels', hotelId, 'kot-orders'],\n *   events: ['kot:created', 'kot:updated']\n * });\n */\nexport function useRealtimeQuery({ queryKey, events }: UseRealtimeQueryOptions) {\n  const { on } = useWebSocket();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const unsubscribers: (() => void)[] = [];\n\n    events.forEach(event => {\n      const unsubscribe = on(event, () => {\n        // Invalidate the query to trigger a refetch\n        queryClient.invalidateQueries({ queryKey: Array.isArray(queryKey) ? queryKey : [queryKey] });\n      });\n      unsubscribers.push(unsubscribe);\n    });\n\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n    };\n  }, [on, queryClient, queryKey, events]);\n}\n","size_bytes":1337},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/dashboard/barista/maintenance.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function BaristaMaintenance() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    enabled: !!user,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy?.id === user?.id);\n    }\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    events: ['maintenance:created', 'maintenance:updated', 'maintenance:deleted']\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit New Request\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Espresso machine malfunction\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Coffee Bar, Service Counter\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                  data-testid=\"input-location\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                  data-testid=\"input-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  data-testid=\"input-photo\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" data-testid=\"img-photo-preview\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-request\"\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit Request\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-requests\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                    data-testid={`card-request-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\" data-testid={`text-title-${request.id}`}>\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`text-location-${request.id}`}>\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\" data-testid={`text-description-${request.id}`}>\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\" data-testid={`badge-priority-${request.id}`}>\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\" data-testid={`badge-status-${request.id}`}>\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\" data-testid={`text-date-${request.id}`}>\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 pl-8\" data-testid={`text-resolved-${request.id}`}>\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10568},"client/src/pages/dashboard/waiter/duty-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, LogIn, LogOut, Calendar } from \"lucide-react\";\nimport { formatDateTime } from \"@/lib/utils\";\n\nexport default function WaiterDutyStatus() {\n  const { data: attendanceStatus } = useQuery<any>({\n    queryKey: [\"/api/attendance/status\"],\n    refetchInterval: 3000\n  });\n\n  const { data: attendanceHistory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/history\"],\n    refetchInterval: 3000\n  });\n\n  const isOnDuty = attendanceStatus?.isOnDuty || false;\n  const activeAttendance = attendanceStatus?.attendance;\n  const recentAttendance = attendanceHistory.slice(0, 5);\n\n  return (\n    <DashboardLayout title=\"Duty Status\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>My Duty Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"h-8 w-8 text-blue-500\" />\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Current Status</h4>\n                    <p className=\"text-sm text-muted-foreground\">Your duty status for today</p>\n                  </div>\n                </div>\n                <Badge \n                  className={isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} \n                  variant=\"secondary\"\n                  data-testid=\"duty-status-badge\"\n                >\n                  {isOnDuty ? 'On Duty' : 'Off Duty'}\n                </Badge>\n              </div>\n\n              {activeAttendance && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <LogIn className=\"h-6 w-6 text-green-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Clock In Time</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-time\">\n                            {formatDateTime(activeAttendance.clockInTime)}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Calendar className=\"h-6 w-6 text-blue-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Location</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-location\">\n                            {activeAttendance.clockInLocation || 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n                    <strong>Note:</strong> Use the duty toggle in the top navigation bar to clock in or clock out. \n                    When on duty, you can receive task assignments and take orders from customers.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Attendance History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {recentAttendance.length === 0 ? (\n              <p className=\"text-muted-foreground\">No attendance records found</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentAttendance.map((record: any, index: number) => (\n                  <div key={record.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`attendance-record-${index}`}>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <LogIn className=\"h-4 w-4 text-green-500\" />\n                        <p className=\"text-sm font-medium text-foreground\">{formatDateTime(record.clockInTime)}</p>\n                      </div>\n                      {record.clockOutTime && (\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <LogOut className=\"h-4 w-4 text-gray-500\" />\n                          <p className=\"text-sm text-muted-foreground\">{formatDateTime(record.clockOutTime)}</p>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={record.status === 'active' ? 'default' : 'secondary'}>\n                        {record.status === 'active' ? 'Active' : 'Completed'}\n                      </Badge>\n                      {record.totalHours && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">{parseFloat(record.totalHours).toFixed(2)} hours</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":5833},"client/src/pages/dashboard/housekeeping-supervisor/staff-management.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nconst staffSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\").optional().or(z.literal(\"\")),\n  phone: z.string().min(10, \"Phone number must be at least 10 characters\"),\n  fullName: z.string().min(2, \"Full name is required\"),\n  address: z.string().min(5, \"Address is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\")\n});\n\nexport default function HousekeepingSupervisorStaffManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { confirm } = useConfirmDialog();\n  const queryClient = useQueryClient();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(staffSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      phone: \"\",\n      fullName: \"\",\n      address: \"\",\n      password: \"\"\n    }\n  });\n\n  const { data: allStaff = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/users\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch staff\");\n      return response.json();\n    }\n  });\n\n  const { data: roles = [], isLoading: rolesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/roles\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/roles\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch roles\");\n      return response.json();\n    }\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  const housekeepingStaff = allStaff.filter(s => s.role?.name === 'housekeeping_staff');\n  const housekeepingStaffRole = roles.find(r => r.name === 'housekeeping_staff');\n\n  const createStaffMutation = useMutation({\n    mutationFn: async (staffData: any) => {\n      const response = await fetch(\"/api/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(staffData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create staff member\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({ title: \"Staff member created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteStaffMutation = useMutation({\n    mutationFn: async (staffId: string) => {\n      const response = await fetch(`/api/users/${staffId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to delete staff member\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      toast({ title: \"Staff member removed successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleCreateStaff = (data: any) => {\n    if (!housekeepingStaffRole) {\n      toast({ title: \"Housekeeping staff role not found\", variant: \"destructive\" });\n      return;\n    }\n\n    createStaffMutation.mutate({\n      ...data,\n      roleId: housekeepingStaffRole.id,\n      hotelId: user?.hotelId\n    });\n  };\n\n  const handleDeleteStaff = async (staffId: string) => {\n    await confirm({\n      title: \"Remove Staff Member\",\n      description: \"Are you sure you want to remove this staff member?\",\n      confirmText: \"Remove\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: () => {\n        deleteStaffMutation.mutate(staffId);\n      }\n    });\n  };\n\n  const staffColumns = [\n    { key: \"fullName\", label: \"Name\", sortable: true },\n    { key: \"username\", label: \"Username\", sortable: true },\n    { key: \"address\", label: \"Address\", sortable: true },\n    { key: \"phone\", label: \"Phone\", sortable: true },\n    { key: \"email\", label: \"Email\", sortable: true },\n    { \n      key: \"id\", \n      label: \"Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n            {isOnDuty ? 'On Duty' : 'Off Duty'}\n          </span>\n        );\n      }\n    },\n    { \n      key: \"lastLogin\", \n      label: \"Last Active\", \n      sortable: true,\n      render: (value: string) => value ? new Date(value).toLocaleString('en-GB', { timeZone: 'Asia/Kathmandu' }) : 'Never'\n    }\n  ];\n\n  const staffActions = [\n    { \n      label: \"Remove\", \n      action: (row: any) => handleDeleteStaff(row.id), \n      variant: \"destructive\" as const\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Housekeeping Staff Management\">\n      <DataTable\n        title=\"Housekeeping Staff\"\n        data={housekeepingStaff}\n        columns={staffColumns}\n        actions={staffActions}\n        onAdd={() => setIsAddDialogOpen(true)}\n        addButtonLabel=\"Add Staff Member\"\n        searchPlaceholder=\"Search staff...\"\n        isLoading={isLoading}\n      />\n\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add New Staff Member</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleCreateStaff)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-username\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-fullname\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-address\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email (Optional)</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"password\" data-testid=\"input-password\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createStaffMutation.isPending || rolesLoading || !housekeepingStaffRole} \n                  data-testid=\"button-submit\"\n                >\n                  {createStaffMutation.isPending ? \"Creating...\" : rolesLoading ? \"Loading...\" : !housekeepingStaffRole ? \"Role Not Found\" : \"Create Staff\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10050},"tests/test-buttons-and-logic.js":{"content":"#!/usr/bin/env node\n\nimport http from 'http';\n\nconst BASE_URL = 'http://localhost:5000';\n\n// Helper to make API requests\nasync function request(path, options = {}) {\n  return new Promise((resolve, reject) => {\n    const url = new URL(path, BASE_URL);\n    const req = http.request(url, {\n      method: options.method || 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    }, (res) => {\n      let body = '';\n      res.on('data', chunk => body += chunk);\n      res.on('end', () => {\n        try {\n          const data = body ? JSON.parse(body) : null;\n          resolve({ status: res.statusCode, data, headers: res.headers });\n        } catch (e) {\n          resolve({ status: res.statusCode, data: body, headers: res.headers });\n        }\n      });\n    });\n\n    req.on('error', reject);\n    if (options.body) {\n      req.write(options.body);\n    }\n    req.end();\n  });\n}\n\n// Store session cookie\nlet sessionCookie = '';\n\nasync function login(username, password) {\n  const res = await request('/api/login', {\n    method: 'POST',\n    body: JSON.stringify({ username, password })\n  });\n  \n  if (res.status === 200 && res.headers['set-cookie']) {\n    sessionCookie = res.headers['set-cookie'][0].split(';')[0];\n    return res.data;\n  }\n  return null;\n}\n\nasync function testEndpoint(method, endpoint, data, description) {\n  const res = await request(endpoint, {\n    method,\n    headers: { 'Cookie': sessionCookie },\n    body: data ? JSON.stringify(data) : undefined\n  });\n  \n  const success = res.status >= 200 && res.status < 300;\n  const status = success ? '✅' : '❌';\n  console.log(`${status} ${description}: ${method} ${endpoint} (${res.status})`);\n  \n  if (!success && res.data) {\n    console.log(`   ⚠️  Error: ${JSON.stringify(res.data).substring(0, 100)}`);\n  }\n  \n  return res;\n}\n\nasync function checkBusinessLogic() {\n  console.log('\\n🔍 CHECKING BUSINESS LOGIC LOOPS & ISSUES\\n');\n  console.log('='.repeat(60));\n  \n  // Login as manager\n  const manager = await login('manager', 'manager');\n  if (!manager) {\n    console.log('❌ Cannot test - manager login failed');\n    return;\n  }\n  \n  console.log('\\n📝 TEST 1: Vendor Payment Creation & Void');\n  console.log('-'.repeat(60));\n  \n  // Test vendor payment creation\n  const vendorPayment = await testEndpoint('POST', '/api/transactions', {\n    hotelId: manager.hotelId,\n    txnType: 'vendor_payment',\n    amount: '100.00',\n    currency: 'NPR',\n    paymentMethod: 'cash',\n    purpose: 'Test vendor payment',\n    reference: 'TEST-REF-001',\n    createdBy: manager.id\n  }, 'Create vendor payment');\n  \n  // Check if payment was created successfully\n  if (vendorPayment.status === 201) {\n    // Try to void with short reason (should fail)\n    await testEndpoint('POST', `/api/transactions/${vendorPayment.data.id}/void`, {\n      reason: 'short'\n    }, 'Void with short reason (should fail)');\n    \n    // Void with proper reason (should succeed)\n    await testEndpoint('POST', `/api/transactions/${vendorPayment.data.id}/void`, {\n      reason: 'This is a test void with proper reason length'\n    }, 'Void with proper reason (should succeed)');\n  }\n  \n  console.log('\\n📝 TEST 2: Cash Deposit Request Loop Check');\n  console.log('-'.repeat(60));\n  \n  // Create cash deposit request\n  const cashDeposit = await testEndpoint('POST', '/api/transactions', {\n    hotelId: manager.hotelId,\n    txnType: 'cash_deposit_request',\n    amount: '500.00',\n    currency: 'NPR',\n    paymentMethod: 'cash',\n    purpose: 'Cash deposit to bank',\n    reference: 'DEPOSIT-TEST-001',\n    createdBy: manager.id\n  }, 'Create cash deposit request');\n  \n  // Login as finance to approve\n  const finance = await login('finance', 'finance');\n  if (finance && cashDeposit.status === 201) {\n    // Approve cash deposit\n    await testEndpoint('PUT', `/api/transactions/${cashDeposit.data.id}`, {\n      reference: `${cashDeposit.data.reference} - APPROVED by ${finance.username}`\n    }, 'Approve cash deposit request');\n    \n    // Try to approve again (check for double-approval loop)\n    await testEndpoint('PUT', `/api/transactions/${cashDeposit.data.id}`, {\n      reference: `${cashDeposit.data.reference} - APPROVED by ${finance.username} - APPROVED by ${finance.username}`\n    }, 'Try double-approval (business logic check)');\n  }\n  \n  console.log('\\n📝 TEST 3: User Creation & Deletion Loop');\n  console.log('-'.repeat(60));\n  \n  // Create test user\n  const newUser = await testEndpoint('POST', '/api/users', {\n    username: 'test_temp_user_' + Date.now(),\n    password: 'test123456',\n    email: 'test@example.com',\n    phone: '1234567890',\n    fullName: 'Test User',\n    address: 'Test Address',\n    roleId: 11, // waiter role\n    hotelId: manager.hotelId\n  }, 'Create test user');\n  \n  if (newUser.status === 201) {\n    // Delete the user\n    await testEndpoint('DELETE', `/api/users/${newUser.data.id}`, null, 'Delete test user');\n    \n    // Try to delete again (should fail)\n    await testEndpoint('DELETE', `/api/users/${newUser.data.id}`, null, 'Try to delete non-existent user (should fail)');\n  }\n  \n  console.log('\\n📝 TEST 4: Room Status Loop Check');\n  console.log('-'.repeat(60));\n  \n  // Get first room\n  const roomsRes = await request('/api/hotels/current/rooms', {\n    headers: { 'Cookie': sessionCookie }\n  });\n  \n  if (roomsRes.data && roomsRes.data.length > 0) {\n    const room = roomsRes.data[0];\n    \n    // Try to update room status multiple times\n    await testEndpoint('PATCH', `/api/hotels/${manager.hotelId}/rooms/${room.id}/status`, {\n      status: 'clean'\n    }, 'Update room to clean');\n    \n    await testEndpoint('PATCH', `/api/hotels/${manager.hotelId}/rooms/${room.id}/status`, {\n      status: 'dirty'\n    }, 'Update room to dirty');\n    \n    await testEndpoint('PATCH', `/api/hotels/${manager.hotelId}/rooms/${room.id}/status`, {\n      status: 'maintenance'\n    }, 'Update room to maintenance');\n  }\n  \n  console.log('\\n📝 TEST 5: Inventory Stock Update Loop');\n  console.log('-'.repeat(60));\n  \n  // Login as owner\n  const owner = await login('owner', 'owner123');\n  if (owner) {\n    // Create test inventory item\n    const inventory = await testEndpoint('POST', '/api/hotels/current/inventory-items', {\n      name: 'Test Item ' + Date.now(),\n      sku: 'TEST-' + Date.now(),\n      baseUnit: 'kg',\n      baseStockQty: '10.000',\n      reorderLevel: '5.000',\n      costPerUnit: '100.00'\n    }, 'Create test inventory item');\n    \n    if (inventory.status === 201) {\n      // Update stock multiple times\n      await testEndpoint('PUT', `/api/hotels/current/inventory-items/${inventory.data.id}`, {\n        baseStockQty: '20.000'\n      }, 'Increase inventory stock');\n      \n      await testEndpoint('PUT', `/api/hotels/current/inventory-items/${inventory.data.id}`, {\n        baseStockQty: '5.000'\n      }, 'Decrease inventory stock');\n      \n      await testEndpoint('PUT', `/api/hotels/current/inventory-items/${inventory.data.id}`, {\n        baseStockQty: '0.000'\n      }, 'Set inventory to zero');\n      \n      // Delete test item\n      await testEndpoint('DELETE', `/api/hotels/current/inventory-items/${inventory.data.id}`, null, 'Delete test inventory item');\n    }\n  }\n  \n  console.log('\\n' + '='.repeat(60));\n  console.log('✨ Business Logic Test Complete!\\n');\n}\n\ncheckBusinessLogic().catch(console.error);\n","size_bytes":7366},"client/src/pages/dashboard/super-admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreateHotelModal } from \"@/components/modals/create-hotel-modal\";\nimport { CreateOwnerModal } from \"@/components/modals/create-owner-modal\";\nimport { Hotel, Users, Shield, TrendingUp, Plus, Power, PowerOff } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\n\nexport default function SuperAdminDashboard() {\n  const [isCreateHotelModalOpen, setIsCreateHotelModalOpen] = useState(false);\n  const [isCreateOwnerModalOpen, setIsCreateOwnerModalOpen] = useState(false);\n  const [selectedHotel, setSelectedHotel] = useState<any>(null);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [confirmAction, setConfirmAction] = useState<'activate' | 'deactivate' | null>(null);\n  const queryClient = useQueryClient();\n\n  const { data: hotels = [], isLoading: hotelsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels\"],\n    refetchInterval: 3000,\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n    refetchInterval: 3000,\n  });\n\n  const toggleHotelStatus = useMutation({\n    mutationFn: async ({ hotelId, activate }: { hotelId: string, activate: boolean }) => {\n      const endpoint = activate ? `/api/hotels/${hotelId}/activate` : `/api/hotels/${hotelId}/deactivate`;\n      const response = await fetch(endpoint, {\n        method: \"PATCH\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(`Failed to ${activate ? 'activate' : 'deactivate'} hotel`);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\"] });\n      toast.success(`Hotel ${variables.activate ? 'activated' : 'deactivated'} successfully`);\n      setShowConfirmDialog(false);\n      setSelectedHotel(null);\n      setConfirmAction(null);\n    },\n    onError: () => {\n      toast.error(\"Failed to update hotel status\");\n    }\n  });\n\n  const handleToggleHotel = (hotel: any, activate: boolean) => {\n    setSelectedHotel(hotel);\n    setConfirmAction(activate ? 'activate' : 'deactivate');\n    setShowConfirmDialog(true);\n  };\n\n  const confirmToggle = () => {\n    if (selectedHotel && confirmAction) {\n      toggleHotelStatus.mutate({\n        hotelId: selectedHotel.id,\n        activate: confirmAction === 'activate'\n      });\n    }\n  };\n\n  const hotelColumns = [\n    { key: \"name\", label: \"Hotel Name\", sortable: true },\n    { key: \"address\", label: \"Address\", sortable: true },\n    { key: \"vatNo\", label: \"VAT No\", sortable: true },\n    { key: \"createdAt\", label: \"Created\", sortable: true },\n    { \n      key: \"isActive\", \n      label: \"Status\", \n      render: (value: boolean) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${value ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n          {value ? 'Active' : 'Inactive'}\n        </span>\n      )\n    }\n  ];\n\n  const ownerColumns = [\n    { key: \"username\", label: \"Username\", sortable: true },\n    { key: \"email\", label: \"Email\", sortable: true },\n    { key: \"createdAt\", label: \"Created\", sortable: true },\n    { \n      key: \"isActive\", \n      label: \"Status\", \n      render: (value: boolean) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${value ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n          {value ? 'Active' : 'Inactive'}\n        </span>\n      )\n    }\n  ];\n\n  const hotelActions = [\n    { \n      label: \"Activate\", \n      action: (row: any) => handleToggleHotel(row, true),\n      variant: \"default\" as const,\n      show: (row: any) => !row.isActive\n    },\n    { \n      label: \"Deactivate\", \n      action: (row: any) => handleToggleHotel(row, false),\n      variant: \"destructive\" as const,\n      show: (row: any) => row.isActive\n    }\n  ];\n\n  const ownerActions = [\n    { label: \"View Details\", action: (row: any) => {/* TODO: Implement view details */} }\n  ];\n\n  const owners = users.filter(user => user.role?.name === 'owner');\n\n  return (\n    <DashboardLayout title=\"Super Admin Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Hotels\"\n            value={hotels.length}\n            icon={<Hotel />}\n            iconColor=\"text-primary\"\n          />\n          <StatsCard\n            title=\"Active Hotels\"\n            value={hotels.filter(h => h.isActive).length}\n            icon={<Power />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Total Owners\"\n            value={owners.length}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Super Admins\"\n            value={users.filter(u => u.role?.name === 'super_admin').length}\n            icon={<Shield />}\n            iconColor=\"text-orange-500\"\n          />\n        </div>\n\n        {/* Hotel Management */}\n        <DataTable\n          title=\"Hotel Management\"\n          data={hotels}\n          columns={hotelColumns}\n          actions={hotelActions}\n          onAdd={() => setIsCreateHotelModalOpen(true)}\n          addButtonLabel=\"Create Hotel\"\n          searchPlaceholder=\"Search hotels...\"\n        />\n\n        {/* Owner Management */}\n        <DataTable\n          title=\"Owner Management\"\n          data={owners}\n          columns={ownerColumns}\n          actions={ownerActions}\n          onAdd={() => setIsCreateOwnerModalOpen(true)}\n          addButtonLabel=\"Create Owner\"\n          searchPlaceholder=\"Search owners...\"\n        />\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col\" \n                data-testid=\"button-create-hotel\"\n                onClick={() => setIsCreateHotelModalOpen(true)}\n              >\n                <Hotel className=\"h-6 w-6 mb-2\" />\n                <span className=\"text-sm\">Create Hotel</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col\" \n                data-testid=\"button-manage-owners\"\n                onClick={() => setIsCreateOwnerModalOpen(true)}\n              >\n                <Users className=\"h-6 w-6 mb-2\" />\n                <span className=\"text-sm\">Create Owner</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-system-analytics\">\n                <TrendingUp className=\"h-6 w-6 mb-2\" />\n                <span className=\"text-sm\">System Analytics</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-create-superadmin\">\n                <Plus className=\"h-6 w-6 mb-2\" />\n                <span className=\"text-sm\">Create Super Admin</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Modals */}\n      <CreateHotelModal \n        isOpen={isCreateHotelModalOpen} \n        onClose={() => setIsCreateHotelModalOpen(false)} \n      />\n      <CreateOwnerModal \n        isOpen={isCreateOwnerModalOpen} \n        onClose={() => setIsCreateOwnerModalOpen(false)} \n      />\n\n      {/* Confirmation Dialog */}\n      <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {confirmAction === 'activate' ? 'Activate Hotel' : 'Deactivate Hotel'}\n            </DialogTitle>\n            <DialogDescription>\n              {confirmAction === 'activate' \n                ? `Are you sure you want to activate \"${selectedHotel?.name}\"? Users will be able to log in again.`\n                : `Are you sure you want to deactivate \"${selectedHotel?.name}\"? All users from this hotel will be unable to log in, but their data will be preserved.`\n              }\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowConfirmDialog(false);\n                setSelectedHotel(null);\n                setConfirmAction(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant={confirmAction === 'activate' ? 'default' : 'destructive'}\n              onClick={confirmToggle}\n              disabled={toggleHotelStatus.isPending}\n            >\n              {toggleHotelStatus.isPending ? 'Processing...' : confirmAction === 'activate' ? 'Activate' : 'Deactivate'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":9470},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/dashboard/restaurant-bar-manager/maintenance-requests.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wrench, AlertCircle, CheckCircle, Clock, ThumbsUp, ThumbsDown } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function MaintenanceRequests() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Fetch maintenance requests from restaurant staff\n  const { data: maintenanceRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    select: (data) => {\n      // Filter only requests from restaurant staff\n      const restaurantStaffRoles = ['waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier'];\n      return data.filter((request: any) => \n        restaurantStaffRoles.includes(request.reportedBy?.role?.name || '')\n      );\n    }\n  });\n\n  // Update maintenance request status\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, status, notes }: { id: string; status: string; notes?: string }) => {\n      const response = await fetch(`/api/maintenance-requests/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status, notes })\n      });\n      if (!response.ok) throw new Error(\"Failed to update request\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast.success(\"Request status updated\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'approved': return 'bg-blue-100 text-blue-800';\n      case 'in_progress': return 'bg-blue-100 text-blue-800';\n      case 'resolved': return 'bg-green-100 text-green-800';\n      case 'declined': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-orange-100 text-orange-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const columns = [\n    { \n      key: \"title\", \n      label: \"Issue\", \n      sortable: true \n    },\n    { \n      key: \"location\", \n      label: \"Location\", \n      sortable: true \n    },\n    { \n      key: \"reportedBy\", \n      label: \"Reported By\", \n      render: (value: any) => (\n        <div>\n          <div className=\"font-medium\">{value?.username || 'Unknown'}</div>\n          <div className=\"text-xs text-gray-500\">\n            {value?.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}\n          </div>\n        </div>\n      )\n    },\n    { \n      key: \"priority\", \n      label: \"Priority\", \n      render: (value: string) => (\n        <Badge className={getPriorityColor(value)}>\n          {value?.toUpperCase()}\n        </Badge>\n      )\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string) => (\n        <Badge className={getStatusColor(value)}>\n          {value?.replace(/_/g, ' ').toUpperCase()}\n        </Badge>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Date\", \n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleDateString('en-GB')\n    },\n    {\n      key: \"actions\",\n      label: \"Actions\",\n      render: (_: any, row: any) => (\n        <div className=\"flex gap-2\">\n          {row.status === 'pending' && (\n            <>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                onClick={() => updateRequestMutation.mutate({ id: row.id, status: 'approved' })}\n                data-testid={`button-approve-${row.id}`}\n              >\n                <ThumbsUp className=\"h-4 w-4 mr-1\" />\n                Approve\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                onClick={() => updateRequestMutation.mutate({ id: row.id, status: 'declined' })}\n                data-testid={`button-decline-${row.id}`}\n              >\n                <ThumbsDown className=\"h-4 w-4 mr-1\" />\n                Decline\n              </Button>\n            </>\n          )}\n          {row.status === 'approved' && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => updateRequestMutation.mutate({ id: row.id, status: 'resolved' })}\n              data-testid={`button-resolve-${row.id}`}\n            >\n              <CheckCircle className=\"h-4 w-4 mr-1\" />\n              Resolve\n            </Button>\n          )}\n        </div>\n      )\n    }\n  ];\n\n  const pendingRequests = maintenanceRequests.filter(r => r.status === 'pending');\n  const approvedRequests = maintenanceRequests.filter(r => r.status === 'approved');\n  const resolvedRequests = maintenanceRequests.filter(r => r.status === 'resolved');\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pendingRequests.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Awaiting action</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n            <ThumbsUp className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{approvedRequests.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Being handled</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Resolved</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{resolvedRequests.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Completed</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Maintenance Requests Table */}\n      <DataTable \n        data={maintenanceRequests} \n        columns={columns} \n        title=\"Staff Maintenance Requests\"\n        isLoading={isLoading}\n      />\n    </DashboardLayout>\n  );\n}\n","size_bytes":7522},"client/src/pages/dashboard/owner/tax-configuration.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calculator, Save, Settings } from \"lucide-react\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\ninterface TaxSetting {\n  id?: string;\n  taxType: string;\n  percent: number;\n  isActive: boolean;\n}\n\nexport default function TaxConfiguration() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    refetchInterval: 3000\n  });\n\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates for tax configuration changes\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    events: ['tax:updated', 'tax:created']\n  });\n\n  // Initialize tax settings with default values\n  const [taxSettings, setTaxSettings] = useState<Record<string, TaxSetting>>({\n    vat: { taxType: 'vat', percent: 13, isActive: false },\n    service_tax: { taxType: 'service_tax', percent: 10, isActive: false },\n    luxury_tax: { taxType: 'luxury_tax', percent: 5, isActive: false }\n  });\n\n  // Update tax settings when hotel taxes data is loaded\n  useEffect(() => {\n    if (hotelTaxes && hotelTaxes.length > 0) {\n      const updatedSettings = { ...taxSettings };\n      hotelTaxes.forEach((tax: any) => {\n        if (tax.taxType in updatedSettings) {\n          updatedSettings[tax.taxType] = {\n            id: tax.id,\n            taxType: tax.taxType,\n            percent: parseFloat(tax.percent) || 0,\n            isActive: tax.isActive || false\n          };\n        }\n      });\n      setTaxSettings(updatedSettings);\n    }\n  }, [hotelTaxes]);\n\n  const updateTaxMutation = useMutation({\n    mutationFn: async (taxData: TaxSetting) => {\n      const response = await fetch(\"/api/hotels/current/taxes\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...taxData,\n          percentType: 'number'\n        }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update tax settings\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/taxes\"] });\n      toast({\n        title: \"Success\",\n        description: \"Tax settings updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update tax settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTaxToggle = (taxType: string, enabled: boolean) => {\n    const updatedTax = { ...taxSettings[taxType], isActive: enabled };\n    setTaxSettings(prev => ({\n      ...prev,\n      [taxType]: updatedTax\n    }));\n    // Automatically save when toggled\n    updateTaxMutation.mutate(updatedTax);\n  };\n\n  const handlePercentChange = (taxType: string, percent: number) => {\n    setTaxSettings(prev => ({\n      ...prev,\n      [taxType]: { ...prev[taxType], percent }\n    }));\n    // Note: Don't auto-save on percent change to allow user to finish typing\n  };\n\n  const handleSaveTax = (taxType: string) => {\n    const taxData = taxSettings[taxType];\n    updateTaxMutation.mutate(taxData);\n  };\n\n  const calculateTaxExample = (amount: number) => {\n    let runningTotal = amount;\n    let breakdown: any = { subtotal: amount };\n\n    // Apply taxes in order: VAT -> Service Tax -> Luxury Tax (cascading)\n    const taxOrder = ['vat', 'service_tax', 'luxury_tax'];\n    \n    taxOrder.forEach((key) => {\n      const tax = taxSettings[key];\n      if (tax && tax.isActive) {\n        const taxAmount = Math.round((runningTotal * tax.percent) / 100 * 100) / 100;\n        breakdown[key] = taxAmount;\n        runningTotal = Math.round((runningTotal + taxAmount) * 100) / 100;\n      }\n    });\n\n    return { total: runningTotal, breakdown };\n  };\n\n  const exampleAmount = 1000;\n  const taxExample = calculateTaxExample(exampleAmount);\n\n  return (\n    <DashboardLayout title=\"Tax Configuration\">\n      <div className=\"space-y-6\">\n        {/* Tax Configuration Header */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calculator className=\"h-5 w-5\" />\n              Tax Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {/* VAT Configuration */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">VAT</h4>\n                    <p className=\"text-sm text-muted-foreground\">Value Added Tax</p>\n                  </div>\n                  <Switch\n                    checked={taxSettings.vat.isActive}\n                    onCheckedChange={(checked) => handleTaxToggle('vat', checked)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"vat-percent\">Tax Percentage</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"vat-percent\"\n                      type=\"number\"\n                      value={taxSettings.vat.percent}\n                      onChange={(e) => handlePercentChange('vat', Number(e.target.value))}\n                      disabled={!taxSettings.vat.isActive}\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.1\"\n                    />\n                    <Button \n                      size=\"sm\" \n                      onClick={() => handleSaveTax('vat')}\n                      disabled={updateTaxMutation.isPending}\n                    >\n                      <Save className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Service Tax Configuration */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Service Tax</h4>\n                    <p className=\"text-sm text-muted-foreground\">Service charge</p>\n                  </div>\n                  <Switch\n                    checked={taxSettings.service_tax.isActive}\n                    onCheckedChange={(checked) => handleTaxToggle('service_tax', checked)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"service-percent\">Tax Percentage</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"service-percent\"\n                      type=\"number\"\n                      value={taxSettings.service_tax.percent}\n                      onChange={(e) => handlePercentChange('service_tax', Number(e.target.value))}\n                      disabled={!taxSettings.service_tax.isActive}\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.1\"\n                    />\n                    <Button \n                      size=\"sm\" \n                      onClick={() => handleSaveTax('service_tax')}\n                      disabled={updateTaxMutation.isPending}\n                    >\n                      <Save className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Luxury Tax Configuration */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Luxury Tax</h4>\n                    <p className=\"text-sm text-muted-foreground\">Premium services</p>\n                  </div>\n                  <Switch\n                    checked={taxSettings.luxury_tax.isActive}\n                    onCheckedChange={(checked) => handleTaxToggle('luxury_tax', checked)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"luxury-percent\">Tax Percentage</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"luxury-percent\"\n                      type=\"number\"\n                      value={taxSettings.luxury_tax.percent}\n                      onChange={(e) => handlePercentChange('luxury_tax', Number(e.target.value))}\n                      disabled={!taxSettings.luxury_tax.isActive}\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.1\"\n                    />\n                    <Button \n                      size=\"sm\" \n                      onClick={() => handleSaveTax('luxury_tax')}\n                      disabled={updateTaxMutation.isPending}\n                    >\n                      <Save className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tax Calculation Example */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Tax Calculation Example</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Example calculation for NPR {exampleAmount.toLocaleString()}:\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal:</span>\n                  <span>NPR {taxExample.breakdown.subtotal.toLocaleString()}</span>\n                </div>\n                \n                {Object.entries(taxSettings).map(([key, tax]) => {\n                  if (!tax.isActive) return null;\n                  const taxAmount = taxExample.breakdown[key] || 0;\n                  return (\n                    <div key={key} className=\"flex justify-between text-sm\">\n                      <span>{tax.taxType.replace('_', ' ').toUpperCase()} ({tax.percent}%):</span>\n                      <span>NPR {taxAmount.toLocaleString()}</span>\n                    </div>\n                  );\n                })}\n                \n                <div className=\"border-t pt-2 flex justify-between font-bold\">\n                  <span>Total:</span>\n                  <span>NPR {taxExample.total.toLocaleString()}</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Hotel Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Hotel Tax Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"vat-number\">VAT Number</Label>\n                  <Input \n                    id=\"vat-number\" \n                    placeholder=\"Enter VAT registration number\" \n                    defaultValue={hotel?.vatNo || ''}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"business-address\">Business Address</Label>\n                  <Input \n                    id=\"business-address\" \n                    placeholder=\"Enter business address\" \n                    defaultValue={hotel?.address || ''}\n                  />\n                </div>\n              </div>\n              <Button className=\"mt-4\" onClick={() => {\n                const vatNumber = (document.getElementById('vat-number') as HTMLInputElement)?.value;\n                const address = (document.getElementById('business-address') as HTMLInputElement)?.value;\n                // TODO: Add hotel update mutation\n                toast({\n                  title: \"Feature Coming Soon\",\n                  description: \"Hotel information update will be implemented\",\n                });\n              }}>\n                Update Hotel Information\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":12990},"client/src/pages/dashboard/manager/attendance-reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, Users, UserCheck } from \"lucide-react\";\nimport { formatDateTime, cn } from \"@/lib/utils\";\nimport { format, startOfMonth, endOfMonth, parseISO } from \"date-fns\";\n\nexport default function AttendanceReports() {\n  const [selectedMonth, setSelectedMonth] = useState(new Date());\n\n  const { data: allStaff = [], isLoading: staffLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [], isLoading: attendanceLoading } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  const { data: allAttendance = [], isLoading: allAttendanceLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/attendance\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/attendance\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch attendance\");\n      return response.json();\n    },\n    refetchInterval: 3000\n  });\n\n  const activeAttendanceUserIds = dailyAttendance\n    .filter(a => a.status === 'active')\n    .map(a => a.userId);\n\n  const onDutyStaff = allStaff.filter(s => activeAttendanceUserIds.includes(s.id));\n  const offDutyStaff = allStaff.filter(s => !activeAttendanceUserIds.includes(s.id));\n\n  const monthStart = startOfMonth(selectedMonth);\n  const monthEnd = endOfMonth(selectedMonth);\n\n  const monthlyAttendance = allAttendance.filter(record => {\n    if (!record.clockInTime) return false;\n    const clockInDate = parseISO(record.clockInTime);\n    return clockInDate >= monthStart && clockInDate <= monthEnd;\n  });\n\n  const totalHoursWorked = monthlyAttendance.reduce((sum, record) => {\n    return sum + (Number(record.totalHours) || 0);\n  }, 0);\n\n  const avgHoursPerDay = monthlyAttendance.length > 0 \n    ? totalHoursWorked / monthlyAttendance.length \n    : 0;\n\n  const columns = [\n    { \n      key: \"clockInTime\", \n      label: \"Date\", \n      sortable: true,\n      render: (value: any) => value ? format(parseISO(value), 'MMM dd, yyyy') : \"N/A\"\n    },\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        const user = allStaff.find(s => s.id === row.userId);\n        return user?.fullName || \"N/A\";\n      }\n    },\n    { \n      key: \"username\", \n      label: \"Username\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        const user = allStaff.find(s => s.id === row.userId);\n        return user?.username || \"Unknown\";\n      }\n    },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (_: any, row: any) => {\n        const user = allStaff.find(s => s.id === row.userId);\n        return user?.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || \"N/A\";\n      }\n    },\n    { \n      key: \"clockInTime\", \n      label: \"Clock In\", \n      sortable: true,\n      render: (value: any) => value ? formatDateTime(value) : \"N/A\"\n    },\n    { \n      key: \"clockOutTime\", \n      label: \"Clock Out\", \n      sortable: true,\n      render: (value: any) => value ? formatDateTime(value) : \"Still on duty\"\n    },\n    { \n      key: \"totalHours\", \n      label: \"Total Hours\", \n      sortable: true,\n      render: (value: any) => {\n        const hours = Number(value) || 0;\n        return hours > 0 ? `${hours.toFixed(2)} hrs` : \"N/A\";\n      }\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: any) => (\n        <Badge \n          variant={value === 'active' ? 'default' : 'secondary'}\n          className={cn(\n            value === 'active' \n              ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' \n              : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'\n          )}\n        >\n          {value === 'active' ? 'Active' : 'Completed'}\n        </Badge>\n      )\n    }\n  ];\n\n  const currentAttendanceColumns = [\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true \n    },\n    { \n      key: \"username\", \n      label: \"Username\", \n      sortable: true \n    },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())\n    },\n    { \n      key: \"id\", \n      label: \"Duty Status\", \n      render: (_: any, row: any) => {\n        const isOnDuty = activeAttendanceUserIds.includes(row.id);\n        const attendance = dailyAttendance.find(a => a.userId === row.id && a.status === 'active');\n        return (\n          <div className=\"space-y-1\">\n            <Badge \n              variant={isOnDuty ? 'default' : 'secondary'}\n              className={cn(\n                isOnDuty \n                  ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' \n                  : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'\n              )}\n            >\n              {isOnDuty ? 'On Duty' : 'Off Duty'}\n            </Badge>\n            {attendance && (\n              <div className=\"text-xs text-muted-foreground\">\n                Since {formatDateTime(attendance.clockInTime)}\n              </div>\n            )}\n          </div>\n        );\n      }\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Attendance Reports\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Staff\"\n            value={allStaff.length}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n            data-testid=\"stats-total-staff\"\n          />\n          <StatsCard\n            title=\"On Duty\"\n            value={onDutyStaff.length}\n            icon={<UserCheck />}\n            iconColor=\"text-green-500\"\n            data-testid=\"stats-on-duty\"\n          />\n          <StatsCard\n            title=\"Total Hours (This Month)\"\n            value={`${totalHoursWorked.toFixed(1)} hrs`}\n            icon={<Clock />}\n            iconColor=\"text-purple-500\"\n            data-testid=\"stats-total-hours\"\n          />\n          <StatsCard\n            title=\"Avg Hours/Day\"\n            value={`${avgHoursPerDay.toFixed(1)} hrs`}\n            icon={<Calendar />}\n            iconColor=\"text-orange-500\"\n            data-testid=\"stats-avg-hours\"\n          />\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserCheck className=\"w-5 h-5\" />\n              Current Duty Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <DataTable\n              title=\"Staff Duty Status\"\n              data={allStaff}\n              columns={currentAttendanceColumns}\n              searchPlaceholder=\"Search staff...\"\n              isLoading={staffLoading}\n              data-testid=\"table-current-duty\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              Attendance Records - {format(selectedMonth, 'MMMM yyyy')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <DataTable\n              title=\"Attendance History\"\n              data={monthlyAttendance}\n              columns={columns}\n              searchPlaceholder=\"Search attendance records...\"\n              isLoading={allAttendanceLoading}\n              data-testid=\"table-attendance-records\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":8054},"client/src/pages/dashboard/manager/leave-approvals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, User, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function LeaveApprovals() {\n  const [selectedRequest, setSelectedRequest] = useState<any>(null);\n  const [isActionDialogOpen, setIsActionDialogOpen] = useState(false);\n  const [actionType, setActionType] = useState<'approve' | 'reject'>('approve');\n  const [managerNotes, setManagerNotes] = useState(\"\");\n\n  const queryClient = useQueryClient();\n\n  // Fetch pending leave requests for approval\n  const { data: pendingRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests/pending-approvals\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/leave-requests/pending-approvals\", { \n        credentials: \"include\" \n      });\n      if (!response.ok) throw new Error(\"Failed to fetch pending leave requests\");\n      return response.json();\n    }\n  });\n\n  // Fetch all leave requests for overview\n  const { data: allRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/leave-requests\", { \n        credentials: \"include\" \n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave requests\");\n      return response.json();\n    }\n  });\n\n  // Real-time updates for leave requests\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/leave-requests/pending-approvals\"],\n    refetchInterval: 3000,\n    events: ['leave:created', 'leave:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/leave-requests\"],\n    refetchInterval: 3000,\n    events: ['leave:created', 'leave:updated']\n  });\n\n  // Approve leave request mutation\n  const approveRequestMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes?: string }) => {\n      const response = await fetch(`/api/leave-requests/${id}/approve`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ managerNotes: notes })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to approve leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/pending-approvals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests\"] });\n      setIsActionDialogOpen(false);\n      setSelectedRequest(null);\n      setManagerNotes(\"\");\n      toast.success(\"Leave request approved successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  // Reject leave request mutation\n  const rejectRequestMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes: string }) => {\n      const response = await fetch(`/api/leave-requests/${id}/reject`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ managerNotes: notes })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to reject leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/pending-approvals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests\"] });\n      setIsActionDialogOpen(false);\n      setSelectedRequest(null);\n      setManagerNotes(\"\");\n      toast.success(\"Leave request rejected\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleApprovalAction = (request: any, action: 'approve' | 'reject') => {\n    setSelectedRequest(request);\n    setActionType(action);\n    setManagerNotes(\"\");\n    setIsActionDialogOpen(true);\n  };\n\n  const handleConfirmAction = () => {\n    if (!selectedRequest) return;\n    \n    if (actionType === 'approve') {\n      approveRequestMutation.mutate({\n        id: selectedRequest.id,\n        notes: managerNotes\n      });\n    } else {\n      rejectRequestMutation.mutate({\n        id: selectedRequest.id,\n        notes: managerNotes\n      });\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected': return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default: return <Clock className=\"h-4 w-4 text-orange-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-orange-100 text-orange-800 border-orange-200';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDaysDifference = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n    return diffDays;\n  };\n\n  const pendingColumns = [\n    { \n      key: \"requestedBy\", \n      label: \"Employee\", \n      render: (value: string, row: any) => (\n        <div className=\"flex items-center space-x-2\">\n          <User className=\"h-4 w-4 text-muted-foreground\" />\n          <span>{row.requestedByUser?.username || 'Unknown User'}</span>\n        </div>\n      )\n    },\n    { \n      key: \"leaveType\", \n      label: \"Type\", \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium capitalize\">\n          {value?.replace(/_/g, ' ')}\n        </span>\n      )\n    },\n    { \n      key: \"startDate\", \n      label: \"Start Date\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    },\n    { \n      key: \"endDate\", \n      label: \"End Date\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    },\n    {\n      key: \"duration\",\n      label: \"Duration\",\n      render: (value: any, row: any) => (\n        <span className=\"text-sm text-muted-foreground\">\n          {getDaysDifference(row.startDate, row.endDate)} day(s)\n        </span>\n      )\n    },\n    { \n      key: \"reason\", \n      label: \"Reason\", \n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\">\n          {value || 'No reason provided'}\n        </span>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Submitted\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    }\n  ];\n\n  const allRequestsColumns = [\n    ...pendingColumns,\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon(value)}\n          <Badge variant=\"outline\" className={getStatusColor(value)}>\n            {value?.charAt(0).toUpperCase() + value?.slice(1)}\n          </Badge>\n        </div>\n      )\n    },\n    {\n      key: \"managerNotes\",\n      label: \"Notes\",\n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\">\n          {value || '-'}\n        </span>\n      )\n    }\n  ];\n\n  const pendingActions = [\n    { \n      label: \"Approve\", \n      action: (row: any) => handleApprovalAction(row, 'approve'),\n      variant: \"default\" as const \n    },\n    { \n      label: \"Reject\", \n      action: (row: any) => handleApprovalAction(row, 'reject'),\n      variant: \"destructive\" as const \n    }\n  ];\n\n  const approvedRequests = allRequests.filter(r => r.status === 'approved').length;\n  const rejectedRequests = allRequests.filter(r => r.status === 'rejected').length;\n\n  return (\n    <DashboardLayout title=\"Leave Request Approvals\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending Approval</p>\n                  <p className=\"text-2xl font-bold\">{pendingRequests.length}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                  <p className=\"text-2xl font-bold\">{approvedRequests}</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                  <p className=\"text-2xl font-bold\">{rejectedRequests}</p>\n                </div>\n                <XCircle className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Pending Requests Table */}\n        <DataTable\n          title=\"Pending Leave Requests\"\n          data={pendingRequests}\n          columns={pendingColumns}\n          actions={pendingActions}\n          isLoading={isLoading}\n          searchPlaceholder=\"Search pending requests...\"\n        />\n\n        {/* All Requests Table */}\n        <DataTable\n          title=\"All Leave Requests\"\n          data={allRequests}\n          columns={allRequestsColumns}\n          isLoading={isLoading}\n          searchPlaceholder=\"Search all requests...\"\n        />\n\n        {/* Approval/Rejection Dialog */}\n        <Dialog open={isActionDialogOpen} onOpenChange={setIsActionDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {actionType === 'approve' ? 'Approve' : 'Reject'} Leave Request\n              </DialogTitle>\n            </DialogHeader>\n            {selectedRequest && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Request Details</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <p><strong>Employee:</strong> {selectedRequest.requestedByUser?.username || 'Unknown'}</p>\n                    <p><strong>Type:</strong> {selectedRequest.leaveType?.replace(/_/g, ' ')}</p>\n                    <p><strong>Period:</strong> {formatDate(selectedRequest.startDate)} - {formatDate(selectedRequest.endDate)}</p>\n                    <p><strong>Duration:</strong> {getDaysDifference(selectedRequest.startDate, selectedRequest.endDate)} day(s)</p>\n                    {selectedRequest.reason && (\n                      <p><strong>Reason:</strong> {selectedRequest.reason}</p>\n                    )}\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"managerNotes\">\n                    Manager Notes {actionType === 'reject' ? '(Required)' : '(Optional)'}\n                  </Label>\n                  <Textarea\n                    id=\"managerNotes\"\n                    value={managerNotes}\n                    onChange={(e) => setManagerNotes(e.target.value)}\n                    placeholder={`Add notes for the ${actionType} decision...`}\n                    rows={3}\n                  />\n                </div>\n                \n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setIsActionDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleConfirmAction}\n                    disabled={approveRequestMutation.isPending || rejectRequestMutation.isPending || (actionType === 'reject' && !managerNotes.trim())}\n                    variant={actionType === 'approve' ? 'default' : 'destructive'}\n                  >\n                    {(approveRequestMutation.isPending || rejectRequestMutation.isPending) \n                      ? (actionType === 'approve' ? \"Approving...\" : \"Rejecting...\") \n                      : (actionType === 'approve' ? \"Approve Request\" : \"Reject Request\")\n                    }\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":13912},"client/src/pages/dashboard/finance/maintenance-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function FinanceMaintenanceRequests() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy?.id === user?.id || req.reportedBy === user?.id);\n    }\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully to Manager\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600 dark:text-green-400\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500 dark:text-orange-400\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit Request to Manager\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Office AC Not Working\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-maintenance-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Finance Office, Accounting Department\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                  data-testid=\"input-maintenance-location\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-maintenance-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                  data-testid=\"input-maintenance-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  data-testid=\"input-maintenance-photo\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-maintenance\"\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit to Manager\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                    data-testid={`maintenance-request-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\">\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\">\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\">\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\">\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 dark:text-green-400 pl-8\">\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10368},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, requireActiveUser } from \"./auth\";\nimport { logAudit } from \"./audit\";\nimport { db } from \"./db\";\nimport { wsEvents } from \"./websocket\";\nimport { users, roles, auditLogs, maintenanceStatusHistory, priceChangeLogs, taxChangeLogs, roomStatusLogs, inventoryTransactions, inventoryItems, transactions, vendors } from \"@shared/schema\";\nimport { eq, and, isNull, asc, desc, sql, ne } from \"drizzle-orm\";\nimport { sanitizeObject } from \"./sanitize\";\nimport {\n  insertUserSchema,\n  insertHotelSchema,\n  insertRoomSchema,\n  insertMenuItemSchema,\n  insertTaskSchema,\n  insertTransactionSchema,\n  insertMaintenanceRequestSchema,\n  insertVoucherSchema,\n  insertVendorSchema,\n  insertRoomTypeSchema,\n  insertHallSchema,\n  insertPoolSchema,\n  insertServiceSchema,\n  insertLeaveRequestSchema,\n  insertLeavePolicySchema,\n  insertWastageSchema,\n  insertVehicleLogSchema,\n  updateKotItemSchema,\n  insertMealPlanSchema,\n  insertGuestSchema,\n  insertStockRequestSchema,\n  insertHallBookingSchema,\n  insertServicePackageSchema,\n  insertBookingPaymentSchema,\n  insertRoomReservationSchema,\n  insertRoomServiceChargeSchema,\n  vouchers,\n  guests,\n  hallBookings,\n  halls,\n  servicePackages,\n  bookingPayments,\n  roomServiceCharges\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Hotel routes\n  app.get(\"/api/hotels\", async (req, res) => {\n    try {\n      const hotels = await storage.getAllHotels();\n      res.json(hotels);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hotels\" });\n    }\n  });\n\n  app.post(\"/api/hotels\", async (req, res) => {\n    try {\n      const { ownerId, ...hotelFields } = req.body;\n      const hotelData = insertHotelSchema.parse(hotelFields);\n      const hotel = await storage.createHotel(hotelData);\n      \n      // If this request includes an ownerId, update that user with the hotelId\n      if (ownerId) {\n        await storage.updateUser(ownerId, { hotelId: hotel.id });\n        \n        // If the current user is the owner, refresh their session data\n        if (req.isAuthenticated() && req.user?.id === ownerId) {\n          const updatedUser = await storage.getUser(ownerId);\n          if (updatedUser) {\n            req.user = updatedUser;\n          }\n        }\n      }\n      \n      res.status(201).json(hotel);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid hotel data\" });\n    }\n  });\n\n  app.put(\"/api/hotels/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const hotelData = insertHotelSchema.partial().parse(req.body);\n      const hotel = await storage.updateHotel(id, hotelData);\n      res.json(hotel);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update hotel\" });\n    }\n  });\n\n  app.patch(\"/api/hotels/:id/activate\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const hotel = await storage.updateHotel(id, { isActive: true });\n      res.json(hotel);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to activate hotel\" });\n    }\n  });\n\n  app.patch(\"/api/hotels/:id/deactivate\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const hotel = await storage.updateHotel(id, { isActive: false });\n      res.json(hotel);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to deactivate hotel\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteHotel(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete hotel\" });\n    }\n  });\n\n  // Current hotel endpoints (uses authenticated user's hotel) - MUST be before parameterized routes\n  app.get(\"/api/hotels/current\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const hotel = await storage.getHotel(user.hotelId);\n      res.json(hotel);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch current hotel\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/users\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const users = await storage.getUsersByHotel(user.hotelId);\n      const sanitizedUsers = users.map(user => {\n        const { passwordHash: _, ...sanitizedUser } = user;\n        return sanitizedUser;\n      });\n      res.json(sanitizedUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/rooms\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const rooms = await storage.getRoomsByHotel(user.hotelId);\n      res.json(rooms);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch rooms\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/transactions\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const { startDate, endDate } = req.query;\n      let transactions = await storage.getTransactionsByHotel(user.hotelId);\n      \n      // Apply date filtering if provided\n      if (startDate && typeof startDate === 'string') {\n        const start = new Date(startDate);\n        transactions = transactions.filter((t: any) => new Date(t.createdAt) >= start);\n      }\n      if (endDate && typeof endDate === 'string') {\n        const end = new Date(endDate);\n        transactions = transactions.filter((t: any) => new Date(t.createdAt) <= end);\n      }\n      \n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/vendors\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const vendors = await storage.getVendorsByHotel(user.hotelId);\n      res.json(vendors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vendors\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/vendors\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // CRITICAL VALIDATION: Validate vendor data\n      const { name } = req.body;\n      if (!name || name.trim().length === 0) {\n        return res.status(400).json({ message: \"Vendor name is required\" });\n      }\n      \n      const vendorData = insertVendorSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId\n      });\n      const vendor = await storage.createVendor(vendorData);\n      res.status(201).json(vendor);\n    } catch (error) {\n      console.error(\"Vendor creation error:\", error);\n      res.status(400).json({ message: \"Invalid vendor data\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/vendors/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const vendorData = insertVendorSchema.partial().parse(req.body);\n      const vendor = await storage.updateVendor(id, vendorData);\n      res.json(vendor);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update vendor\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/vendors/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      await storage.deleteVendor(id);\n      res.json({ message: \"Vendor deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete vendor\" });\n    }\n  });\n\n  // Guest routes\n  app.get(\"/api/hotels/current/guests\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const guests = await storage.getGuestsByHotel(user.hotelId);\n      res.json(guests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch guests\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/guests/search\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const searchTerm = req.query.q as string;\n      if (!searchTerm) {\n        return res.status(400).json({ message: \"Search term required\" });\n      }\n      const guests = await storage.searchGuests(user.hotelId, searchTerm);\n      res.json(guests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search guests\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/guests/:id\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const guest = await storage.getGuest(id);\n      if (!guest) {\n        return res.status(404).json({ message: \"Guest not found\" });\n      }\n      res.json(guest);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch guest\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/guests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const bodyData = {\n        ...req.body,\n        hotelId: user.hotelId,\n        createdBy: user.id\n      };\n      \n      // Convert dateOfBirth string to Date if provided\n      if (bodyData.dateOfBirth && typeof bodyData.dateOfBirth === 'string') {\n        bodyData.dateOfBirth = new Date(bodyData.dateOfBirth);\n      }\n      \n      const guestData = insertGuestSchema.parse(bodyData);\n      const guest = await storage.createGuest(guestData);\n      \n      // Broadcast guest creation to relevant users\n      wsEvents.guestCreated(user.hotelId, guest);\n      \n      res.status(201).json(guest);\n    } catch (error) {\n      console.error(\"Guest creation error:\", error);\n      res.status(400).json({ message: \"Invalid guest data\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/guests/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const bodyData = { ...req.body };\n      \n      // Convert dateOfBirth string to Date if provided\n      if (bodyData.dateOfBirth && typeof bodyData.dateOfBirth === 'string') {\n        bodyData.dateOfBirth = new Date(bodyData.dateOfBirth);\n      }\n      \n      const guestData = insertGuestSchema.partial().parse(bodyData);\n      const guest = await storage.updateGuest(id, guestData);\n      \n      // Broadcast guest update to relevant users\n      wsEvents.guestUpdated(user.hotelId, guest);\n      \n      res.json(guest);\n    } catch (error) {\n      console.error(\"Guest update error:\", error);\n      res.status(400).json({ message: \"Failed to update guest\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/guests/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      await storage.deleteGuest(id);\n      res.json({ message: \"Guest deleted successfully (soft delete)\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete guest\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/guests/:id/restore\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const { id } = req.params;\n      \n      if (!currentUser?.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // CRITICAL: Only managers can restore deleted guests\n      const canRestore = ['manager', 'owner', 'super_admin'].includes(currentUser.role?.name || '');\n      if (!canRestore) {\n        return res.status(403).json({ \n          message: \"Only managers can restore deleted guest records\" \n        });\n      }\n      \n      const guest = await storage.restoreGuest(id, currentUser.hotelId);\n      res.json({ \n        ...guest,\n        message: \"Guest record restored successfully\" \n      });\n    } catch (error) {\n      console.error(\"Guest restore error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to restore guest\" \n      });\n    }\n  });\n\n  app.get(\"/api/hotels/current/vouchers\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const vouchers = await storage.getVouchersByHotel(user.hotelId);\n      res.json(vouchers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vouchers\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/inventory-items\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      let items = await storage.getInventoryItemsByHotel(user.hotelId);\n      \n      // Filter items by department for restaurant_bar_manager\n      const userRole = user.role?.name || '';\n      if (userRole === 'restaurant_bar_manager') {\n        // Restaurant bar manager can see items for kitchen, bar, and barista departments\n        const allowedDepartments = ['kitchen', 'bar', 'barista'];\n        items = items.filter((item: any) => {\n          if (!item.departments || item.departments.length === 0) return true; // Show items with no department restriction\n          return item.departments.some((dept: string) => allowedDepartments.includes(dept.toLowerCase()));\n        });\n      }\n      \n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching inventory items:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory items\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/low-stock-items\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const items = await storage.getLowStockItems(user.hotelId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch low stock items\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/inventory/consumptions\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const consumptions = await storage.getInventoryConsumptionsByHotel(user.hotelId);\n      res.json(consumptions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory consumptions\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/inventory-consumptions\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const consumptions = await storage.getInventoryConsumptionsByHotel(user.hotelId);\n      res.json(consumptions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory consumptions\" });\n    }\n  });\n\n  // Restaurant functionality for current hotel\n  app.get(\"/api/hotels/current/menu-items\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const menuItems = await storage.getMenuItemsByHotel(user.hotelId);\n      res.json(menuItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch menu items\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/restaurant-tables\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const tables = await storage.getRestaurantTablesByHotel(user.hotelId);\n      res.json(tables);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch restaurant tables\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/kot-orders\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const kotOrders = await storage.getKotOrdersByHotel(user.hotelId);\n      res.json(kotOrders);\n    } catch (error) {\n      console.error(\"Error fetching KOT orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch KOT orders\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/menu-categories\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const categories = await storage.getMenuCategoriesByHotel(user.hotelId);\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch menu categories\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/menu-categories\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { name } = req.body;\n      if (!name || name.trim().length === 0) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n      \n      // CRITICAL SECURITY: Prevent XSS by rejecting HTML tags\n      const htmlTagPattern = /<[^>]*>/g;\n      if (htmlTagPattern.test(name)) {\n        return res.status(400).json({ message: \"Category name cannot contain HTML tags\" });\n      }\n      \n      const category = await storage.createMenuCategory({\n        hotelId: user.hotelId,\n        name: name.trim()\n      });\n      res.status(201).json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create menu category\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/menu-categories/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const { name } = req.body;\n      if (!name || name.trim().length === 0) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n      \n      // CRITICAL SECURITY: Prevent XSS by rejecting HTML tags\n      const htmlTagPattern = /<[^>]*>/g;\n      if (htmlTagPattern.test(name)) {\n        return res.status(400).json({ message: \"Category name cannot contain HTML tags\" });\n      }\n      \n      // Verify category belongs to user's hotel\n      const categories = await storage.getMenuCategoriesByHotel(user.hotelId);\n      const existingCategory = categories.find(cat => cat.id === id);\n      if (!existingCategory) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      const category = await storage.updateMenuCategory(id, { name: name.trim() });\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update menu category\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/menu-categories/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      \n      // Verify category belongs to user's hotel\n      const categories = await storage.getMenuCategoriesByHotel(user.hotelId);\n      const existingCategory = categories.find(cat => cat.id === id);\n      if (!existingCategory) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      await storage.deleteMenuCategory(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete menu category\" });\n    }\n  });\n\n  // Hotel-scoped restaurant endpoints for current user's hotel\n  app.post(\"/api/hotels/current/menu-items\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      // Sanitize input to prevent XSS\n      const sanitizedBody = sanitizeObject(req.body);\n      const itemData = insertMenuItemSchema.parse({\n        ...sanitizedBody,\n        hotelId: user.hotelId\n      });\n      const item = await storage.createMenuItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      console.error(\"Menu item creation error:\", error);\n      res.status(400).json({ message: \"Invalid menu item data\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/menu-items/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const itemData = insertMenuItemSchema.partial().parse(req.body);\n      \n      // Verify the menu item belongs to current hotel\n      const existingItem = await storage.getMenuItem(id);\n      if (!existingItem || existingItem.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Menu item not found\" });\n      }\n      \n      // CRITICAL: Price changes require manager approval\n      if ('price' in itemData && itemData.price !== undefined && String(itemData.price) !== String(existingItem.price)) {\n        const canChangePrice = ['manager', 'owner', 'restaurant_bar_manager', 'super_admin'].includes(user.role?.name || '');\n        \n        if (!canChangePrice) {\n          return res.status(403).json({ \n            message: \"Only managers can change menu item prices\" \n          });\n        }\n        \n        // Log price change for audit trail\n        await storage.createPriceChangeLog({\n          hotelId: user.hotelId,\n          itemId: id,\n          itemType: 'menu_item',\n          itemName: existingItem.name || 'Unknown Item',\n          previousPrice: existingItem.price || '0',\n          newPrice: itemData.price,\n          changedBy: user.id\n        });\n      }\n      \n      const item = await storage.updateMenuItem(id, itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Menu item update error:\", error);\n      res.status(400).json({ message: \"Failed to update menu item\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/menu-items/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      // Verify the menu item belongs to current hotel\n      const existingItem = await storage.getMenuItem(id);\n      if (!existingItem || existingItem.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Menu item not found\" });\n      }\n      await storage.deleteMenuItem(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete menu item\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/restaurant-tables\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // CRITICAL VALIDATION: Validate table data\n      const { name, capacity, status } = req.body;\n      \n      // Validate name is required and non-empty\n      if (!name || name.trim().length === 0) {\n        return res.status(400).json({ message: \"Table name is required\" });\n      }\n      \n      // Validate capacity is a positive integer\n      const capacityNum = Number(capacity);\n      if (!Number.isInteger(capacityNum) || capacityNum <= 0) {\n        return res.status(400).json({ message: \"Capacity must be a positive integer\" });\n      }\n      \n      // Validate status is one of the allowed values\n      const validStatuses = ['available', 'occupied', 'reserved'];\n      if (status && !validStatuses.includes(status)) {\n        return res.status(400).json({ \n          message: `Status must be one of: ${validStatuses.join(', ')}` \n        });\n      }\n      \n      const tableData = {\n        ...req.body,\n        hotelId: user.hotelId,\n        status: status || 'available' // Default to available if not provided\n      };\n      const table = await storage.createRestaurantTable(tableData);\n      res.status(201).json(table);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create table\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/restaurant-tables/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const { name, capacity, status } = req.body;\n      \n      // Verify the table belongs to current hotel\n      const existingTable = await storage.getRestaurantTable(id);\n      if (!existingTable || existingTable.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Table not found\" });\n      }\n      \n      // CRITICAL VALIDATION: Validate update data\n      // Validate name if provided\n      if (name !== undefined && (!name || name.trim().length === 0)) {\n        return res.status(400).json({ message: \"Table name cannot be empty\" });\n      }\n      \n      // Validate capacity if provided\n      if (capacity !== undefined) {\n        const capacityNum = Number(capacity);\n        if (!Number.isInteger(capacityNum) || capacityNum <= 0) {\n          return res.status(400).json({ message: \"Capacity must be a positive integer\" });\n        }\n      }\n      \n      // Validate status if provided\n      if (status !== undefined) {\n        const validStatuses = ['available', 'occupied', 'reserved'];\n        if (!validStatuses.includes(status)) {\n          return res.status(400).json({ \n            message: `Status must be one of: ${validStatuses.join(', ')}` \n          });\n        }\n      }\n      \n      const table = await storage.updateRestaurantTable(id, req.body);\n      res.json(table);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update table\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/restaurant-tables/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      // Verify the table belongs to current hotel\n      const existingTable = await storage.getRestaurantTable(id);\n      if (!existingTable || existingTable.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Table not found\" });\n      }\n      await storage.deleteRestaurantTable(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete table\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/tasks\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const tasks = await storage.getTasksByHotel(user.hotelId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/tasks\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const taskData = insertTaskSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId,\n        createdBy: user.id,\n        assignedTo: req.body.assignedTo || req.body.assignedToId // Handle both field names for compatibility\n      });\n      const task = await storage.createTask(taskData);\n      \n      // Broadcast real-time update\n      wsEvents.taskCreated(user.hotelId, task);\n      \n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Task creation error:\", error);\n      if (error && typeof error === 'object' && 'errors' in error) {\n        // Zod validation errors\n        res.status(400).json({ \n          message: \"Invalid task data\", \n          errors: (error.errors as any[]).map((e: any) => `${e.path.join('.')}: ${e.message}`)\n        });\n      } else {\n        res.status(400).json({ message: (error as any)?.message || \"Invalid task data\" });\n      }\n    }\n  });\n\n  app.put(\"/api/hotels/current/tasks/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      const { id } = req.params;\n      const taskData = req.body;\n      \n      const existingTask = await storage.getTask(id);\n      if (!existingTask || existingTask.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      const isManager = ['manager', 'owner', 'security_head', 'housekeeping_supervisor'].includes(user.role?.name || '');\n      const isAssignedUser = existingTask.assignedTo === user.id;\n      \n      let updateData: any = {};\n      \n      if (isAssignedUser && !isManager) {\n        // CRITICAL: Non-managers can only update status to 'in_progress' or 'pending_review'\n        if (taskData.status === 'completed') {\n          // Change status to 'pending_review' instead\n          updateData = { \n            status: 'pending_review',\n            completionNotes: taskData.completionNotes || taskData.notes,\n            updatedAt: new Date()\n          };\n        } else if (taskData.status === 'in_progress') {\n          updateData = { status: 'in_progress', updatedAt: new Date() };\n        } else {\n          return res.status(403).json({ \n            message: \"You can only mark tasks as in progress. Completion requires manager approval.\" \n          });\n        }\n      } else if (isManager) {\n        // Managers can update anything\n        updateData = taskData;\n        \n        // If manager is approving completion\n        if (taskData.status === 'completed' && existingTask.status === 'pending_review') {\n          updateData.approvedBy = user.id;\n          updateData.approvedAt = new Date();\n        }\n      } else {\n        return res.status(403).json({ \n          message: \"You can only update tasks assigned to you\" \n        });\n      }\n      \n      const task = await storage.updateTask(id, updateData);\n      \n      // Broadcast real-time update\n      wsEvents.taskUpdated(user.hotelId, task);\n      \n      res.json(task);\n    } catch (error) {\n      console.error(\"Task update error:\", error);\n      res.status(400).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/tasks/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      // Verify the task belongs to current hotel\n      const existingTask = await storage.getTask(id);\n      if (!existingTask || existingTask.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      await storage.deleteTask(id);\n      \n      // Broadcast real-time update\n      wsEvents.taskDeleted(user.hotelId, id);\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/room-cleaning-queue\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const queue = await storage.getRoomCleaningQueueByHotel(user.hotelId);\n      res.json(queue);\n    } catch (error) {\n      console.error(\"Room cleaning queue fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch room cleaning queue\" });\n    }\n  });\n\n  app.patch(\"/api/room-cleaning-queue/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const { id } = req.params;\n      const { status, taskId } = req.body;\n      const updateData: any = {};\n      if (status) updateData.status = status;\n      if (taskId !== undefined) updateData.taskId = taskId;\n      \n      const queue = await storage.updateRoomCleaningQueue(id, updateData);\n      res.json(queue);\n    } catch (error) {\n      console.error(\"Room cleaning queue update error:\", error);\n      res.status(400).json({ message: \"Failed to update room cleaning queue\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/maintenance-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const requests = await storage.getMaintenanceRequestsByHotel(user.hotelId);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch maintenance requests\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/maintenance-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // Auto-assign maintenance requests based on reporter role\n      let assignedTo = req.body.assignedTo;\n      const userRole = user.role?.name || '';\n      const rolesAssignedToSecurityHead = ['waiter', 'kitchen_staff', 'bartender', 'barista', 'security_guard', 'surveillance_officer'];\n      const rolesAssignedToManager = ['front_desk', 'storekeeper'];\n      const rolesAssignedToHousekeepingSupervisor = ['housekeeping_staff'];\n      \n      if (rolesAssignedToSecurityHead.includes(userRole)) {\n        // Find security head for this hotel\n        const securityHeadRole = await storage.getRoleByName('security_head');\n        if (securityHeadRole) {\n          const users = await storage.getUsersByHotel(user.hotelId);\n          const securityHead = users.find((u: any) => u.roleId === securityHeadRole.id && u.isActive);\n          if (securityHead) {\n            assignedTo = securityHead.id;\n          }\n        }\n      } else if (rolesAssignedToManager.includes(userRole)) {\n        // Find manager for this hotel\n        const managerRole = await storage.getRoleByName('manager');\n        if (managerRole) {\n          const users = await storage.getUsersByHotel(user.hotelId);\n          const manager = users.find((u: any) => u.roleId === managerRole.id && u.isActive);\n          if (manager) {\n            assignedTo = manager.id;\n          }\n        }\n      } else if (rolesAssignedToHousekeepingSupervisor.includes(userRole)) {\n        // Find housekeeping supervisor for this hotel\n        const housekeepingSupervisorRole = await storage.getRoleByName('housekeeping_supervisor');\n        if (housekeepingSupervisorRole) {\n          const users = await storage.getUsersByHotel(user.hotelId);\n          const housekeepingSupervisor = users.find((u: any) => u.roleId === housekeepingSupervisorRole.id && u.isActive);\n          if (housekeepingSupervisor) {\n            assignedTo = housekeepingSupervisor.id;\n          }\n        }\n      }\n      \n      const requestData = insertMaintenanceRequestSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId,\n        reportedBy: user.id,\n        assignedTo\n      });\n      const request = await storage.createMaintenanceRequest(requestData);\n      res.status(201).json(request);\n    } catch (error: any) {\n      console.error('Maintenance request creation error:', error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors \n        });\n      }\n      res.status(400).json({ \n        message: error.message || \"Invalid maintenance request data\" \n      });\n    }\n  });\n\n  app.put(\"/api/hotels/current/maintenance-requests/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const currentUser = req.user as any;\n      if (!currentUser || !currentUser.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Verify the maintenance request belongs to current hotel\n      const existingRequest = await storage.getMaintenanceRequest(id);\n      if (!existingRequest || existingRequest.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Maintenance request not found\" });\n      }\n      \n      // CRITICAL: Reassignment requires supervisor approval\n      if ('assignedTo' in updateData && updateData.assignedTo !== existingRequest.assignedTo) {\n        const canReassign = ['manager', 'owner', 'security_head', 'housekeeping_supervisor', 'restaurant_bar_manager'].includes(currentUser.role?.name || '');\n        \n        if (!canReassign) {\n          return res.status(403).json({ \n            message: \"Only supervisors can reassign maintenance requests\" \n          });\n        }\n        \n        // Log reassignment for audit\n        await storage.createAuditLog({\n          hotelId: currentUser.hotelId,\n          resourceType: 'maintenance_request',\n          resourceId: id,\n          action: 'reassigned',\n          userId: currentUser.id,\n          details: {\n            previousAssignee: existingRequest.assignedTo,\n            newAssignee: updateData.assignedTo,\n            timestamp: new Date()\n          }\n        });\n      }\n      \n      // Verify assigned user can update their own requests\n      const isAssigned = existingRequest.assignedTo === currentUser.id;\n      const isSupervisor = ['manager', 'owner', 'security_head', 'housekeeping_supervisor', 'restaurant_bar_manager'].includes(currentUser.role?.name || '');\n      \n      if (!isAssigned && !isSupervisor) {\n        return res.status(403).json({ \n          message: \"You can only update requests assigned to you\" \n        });\n      }\n      \n      // Automatically set timestamps based on status changes\n      if (updateData.status === 'resolved' && !updateData.resolvedAt) {\n        updateData.resolvedAt = new Date();\n      }\n      if (updateData.status === 'approved' && !updateData.approvedAt) {\n        updateData.approvedAt = new Date();\n        updateData.approvedBy = currentUser.id;\n      }\n      if (updateData.status === 'declined' && !updateData.declinedAt) {\n        updateData.declinedAt = new Date();\n        updateData.declinedBy = currentUser.id;\n      }\n      \n      const requestData = insertMaintenanceRequestSchema.partial().parse(updateData);\n      const request = await storage.updateMaintenanceRequest(id, requestData);\n      res.json(request);\n    } catch (error) {\n      console.error(\"Maintenance request update error:\", error);\n      res.status(400).json({ message: \"Failed to update maintenance request\" });\n    }\n  });\n\n  // Hotel-scoped user management endpoints\n  app.post(\"/api/hotels/current/users\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // CRITICAL: Define role hierarchy and creation permissions\n      const rolePermissions: Record<string, string[]> = {\n        owner: ['manager', 'restaurant_bar_manager', 'storekeeper', 'front_desk', \n                'housekeeping_supervisor', 'security_head', 'waiter', 'kitchen_staff', \n                'housekeeping_staff', 'security_guard', 'cashier', 'finance', 'bartender', 'barista'],\n        manager: ['waiter', 'kitchen_staff', 'housekeeping_staff', 'security_guard', 'cashier', 'front_desk'],\n        restaurant_bar_manager: ['waiter', 'kitchen_staff', 'bartender', 'barista'],\n        security_head: ['security_guard', 'surveillance_officer'],\n        housekeeping_supervisor: ['housekeeping_staff'],\n        // Other roles cannot create users\n      };\n      \n      const currentRole = currentUser.role?.name || '';\n      const allowedRoles = rolePermissions[currentRole] || [];\n      \n      if (allowedRoles.length === 0) {\n        return res.status(403).json({ \n          message: \"You don't have permission to create users\" \n        });\n      }\n      \n      // Handle role conversion and password hashing\n      const { role, password, confirmPassword, ...userData } = req.body;\n      \n      // Get role ID from role name\n      let roleId = userData.roleId;\n      let targetRoleName = role;\n      if (role && !roleId) {\n        const roleRecord = await storage.getRoleByName(role);\n        if (roleRecord) {\n          roleId = roleRecord.id;\n          targetRoleName = roleRecord.name;\n        } else {\n          return res.status(400).json({ message: `Role '${role}' not found` });\n        }\n      }\n\n      // CRITICAL: Verify current user can create this role\n      if (!allowedRoles.includes(targetRoleName)) {\n        return res.status(403).json({ \n          message: `You don't have permission to create users with role '${targetRoleName}'` \n        });\n      }\n      \n      // Password validation\n      if (!password || password.length < 8) {\n        return res.status(400).json({ \n          message: \"Password must be at least 8 characters\" \n        });\n      }\n      \n      if (password !== confirmPassword) {\n        return res.status(400).json({ \n          message: \"Passwords don't match\" \n        });\n      }\n      \n      // Check for duplicate username\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ \n          message: \"Username already exists\" \n        });\n      }\n      \n      // Hash password\n      const { hashPassword } = await import(\"./auth.js\");\n      const hashedPassword = await hashPassword(password);\n\n      // Auto-assign hotel from current user\n      const finalUserData = insertUserSchema.parse({\n        ...userData,\n        roleId,\n        hotelId: currentUser.hotelId,\n        passwordHash: hashedPassword,\n        createdBy: currentUser.id,\n        isActive: true\n      });\n\n      const user = await storage.createUser(finalUserData);\n      \n      // Return sanitized user\n      const { passwordHash: _, ...sanitizedUser } = user;\n      res.status(201).json(sanitizedUser);\n    } catch (error) {\n      console.error(\"User creation error:\", error);\n      res.status(400).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/users/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const userData = req.body;\n      \n      // CRITICAL SECURITY: Block password changes through this endpoint\n      // Passwords can ONLY be changed via /api/reset-password with old password verification\n      if ('passwordHash' in userData) {\n        return res.status(403).json({ \n          message: \"Cannot change passwords through this endpoint. Use the password reset functionality.\" \n        });\n      }\n      \n      // Verify the user belongs to current hotel\n      const existingUser = await storage.getUser(id);\n      if (!existingUser || existingUser.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // CRITICAL: Prevent users from updating their own protected fields\n      if (currentUser.id === id) {\n        // Users CANNOT update their own:\n        const protectedFields = ['roleId', 'isActive', 'hotelId', 'createdBy', 'verification'];\n        const attemptedProtectedUpdate = protectedFields.some(field => field in userData);\n        \n        if (attemptedProtectedUpdate) {\n          return res.status(403).json({ \n            message: \"Cannot modify your own role, status, or hotel assignment. Contact your manager.\" \n          });\n        }\n      }\n\n      // CRITICAL: Verify permission to update other users\n      if (currentUser.id !== id) {\n        const currentRole = currentUser.role?.name || '';\n        \n        // Only managers, owners, and security_head can update other users\n        const canUpdateUsers = ['owner', 'manager', 'security_head'].includes(currentRole);\n        \n        if (!canUpdateUsers) {\n          return res.status(403).json({ \n            message: \"You don't have permission to update other users\" \n          });\n        }\n        \n        // CRITICAL: Prevent updating protected fields without proper authorization\n        if ('roleId' in userData || 'isActive' in userData) {\n          // Only owner can change roles or activation status\n          if (currentRole !== 'owner') {\n            return res.status(403).json({ \n              message: \"Only the hotel owner can change user roles or activation status\" \n            });\n          }\n        }\n      }\n\n      const user = await storage.updateUser(id, userData);\n      \n      // Return sanitized user\n      const { passwordHash: _, ...sanitizedUser } = user;\n      res.json(sanitizedUser);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/users/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      \n      // Verify the user belongs to current hotel\n      const existingUser = await storage.getUser(id);\n      if (!existingUser || existingUser.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // CRITICAL: Prevent users from deleting themselves\n      if (currentUser.id === id) {\n        return res.status(403).json({ \n          message: \"Cannot delete your own account. Contact your manager.\" \n        });\n      }\n\n      // CRITICAL: Only managers and owners can delete users\n      const currentRole = currentUser.role?.name || '';\n      const canDeleteUsers = ['owner', 'manager'].includes(currentRole);\n      \n      if (!canDeleteUsers) {\n        return res.status(403).json({ \n          message: \"You don't have permission to delete users\" \n        });\n      }\n\n      await storage.deleteUser(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Hotel-scoped inventory management endpoints\n  app.post(\"/api/hotels/current/inventory-items\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // CRITICAL VALIDATION: Validate inventory item data\n      const { name, sku, unit, baseStockQty, costPerUnit } = req.body;\n      \n      // Validate required fields\n      if (!name || name.trim().length === 0) {\n        return res.status(400).json({ message: \"Item name is required\" });\n      }\n      \n      if (!sku || sku.trim().length === 0) {\n        return res.status(400).json({ message: \"SKU is required\" });\n      }\n      \n      if (!unit || unit.trim().length === 0) {\n        return res.status(400).json({ message: \"Unit is required\" });\n      }\n      \n      // Validate stock quantity is non-negative\n      if (baseStockQty !== undefined && baseStockQty !== null) {\n        const stockNum = Number(baseStockQty);\n        if (!Number.isFinite(stockNum) || stockNum < 0) {\n          return res.status(400).json({ message: \"Stock quantity must be a non-negative number\" });\n        }\n      }\n      \n      // Validate cost per unit is non-negative\n      if (costPerUnit !== undefined && costPerUnit !== null) {\n        const costNum = Number(costPerUnit);\n        if (!Number.isFinite(costNum) || costNum < 0) {\n          return res.status(400).json({ message: \"Cost per unit must be a non-negative number\" });\n        }\n      }\n      \n      const itemData = {\n        ...req.body,\n        hotelId: user.hotelId\n      };\n      const item = await storage.createInventoryItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create inventory item\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/inventory-items/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      const itemData = req.body;\n      // Verify the inventory item belongs to current hotel\n      const existingItem = await storage.getInventoryItem(id);\n      if (!existingItem || existingItem.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      const item = await storage.updateInventoryItem(id, itemData);\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update inventory item\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/inventory-items/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      // Verify the inventory item belongs to current hotel\n      const existingItem = await storage.getInventoryItem(id);\n      if (!existingItem || existingItem.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      await storage.deleteInventoryItem(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete inventory item\" });\n    }\n  });\n\n  // Inventory transactions routes\n  app.get(\"/api/hotels/current/inventory-transactions\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      \n      const transactions = await storage.getInventoryTransactionsByHotel(user.hotelId);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory transactions\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/inventory-transactions\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const transactionData = req.body;\n      const transactionType = transactionData.transactionType;\n      \n      // CRITICAL: Validate transaction type\n      const validTypes = ['receive', 'issue', 'return', 'adjustment', 'wastage'];\n      if (!validTypes.includes(transactionType)) {\n        return res.status(400).json({ message: \"Invalid transaction type\" });\n      }\n      \n      // CRITICAL: Validate quantity is present and numeric\n      const qtyBase = Number(transactionData.qtyBase);\n      if (isNaN(qtyBase) || transactionData.qtyBase === null || transactionData.qtyBase === undefined) {\n        return res.status(400).json({ message: \"Valid quantity (qtyBase) is required\" });\n      }\n      \n      // CRITICAL: For non-adjustment types, quantity must be POSITIVE\n      // (adjustment can be negative as it's a delta)\n      if (transactionType !== 'adjustment') {\n        if (qtyBase <= 0) {\n          return res.status(400).json({ \n            message: `Quantity must be positive for ${transactionType} transactions` \n          });\n        }\n      } else {\n        // For adjustment, prevent zero (pointless)\n        if (qtyBase === 0) {\n          return res.status(400).json({ \n            message: \"Adjustment quantity cannot be zero\" \n          });\n        }\n      }\n      \n      // CRITICAL: For 'receive' transactions, require purchase verification\n      if (transactionType === 'receive') {\n        // Only storekeeper or manager can receive inventory\n        const canReceive = ['storekeeper', 'manager', 'owner', 'super_admin'].includes(user.role?.name || '');\n        if (!canReceive) {\n          return res.status(403).json({ \n            message: \"Only storekeeper or manager can receive inventory\" \n          });\n        }\n        \n        // Require supplier reference or purchase order\n        const supplierName = transactionData.supplierName?.trim();\n        const referenceNumber = transactionData.referenceNumber?.trim();\n        if ((!supplierName || supplierName.length === 0) && (!referenceNumber || referenceNumber.length === 0)) {\n          return res.status(400).json({ \n            message: \"Supplier name or purchase reference required for receiving inventory\" \n          });\n        }\n      }\n      \n      // CRITICAL: For 'issue' or 'wastage', verify sufficient stock\n      if (transactionType === 'issue' || transactionType === 'wastage') {\n        const item = await storage.getInventoryItem(transactionData.itemId);\n        \n        if (!item) {\n          return res.status(404).json({ message: \"Inventory item not found\" });\n        }\n        \n        const currentStock = Number(item.baseStockQty || item.stockQty || 0);\n        const requestedQty = Number(transactionData.qtyBase || 0);\n        \n        if (requestedQty > currentStock) {\n          return res.status(400).json({ \n            message: `Insufficient stock. Available: ${currentStock}, Requested: ${requestedQty}` \n          });\n        }\n        \n        // Wastage requires notes explaining the reason\n        if (transactionType === 'wastage') {\n          const notes = transactionData.notes?.trim();\n          if (!notes || notes.length === 0) {\n            return res.status(400).json({ \n              message: \"Wastage requires detailed notes explaining the reason\" \n            });\n          }\n        }\n      }\n      \n      // CRITICAL: Large quantity adjustments require manager approval\n      if (transactionType === 'adjustment') {\n        const item = await storage.getInventoryItem(transactionData.itemId);\n        const currentStock = Number(item?.baseStockQty || item?.stockQty || 0);\n        // Adjustment is a DELTA (can be positive or negative)\n        const adjustmentDelta = Number(transactionData.qtyBase || 0);\n        const adjustmentMagnitude = Math.abs(adjustmentDelta);\n        \n        // If adjustment magnitude is more than 50% of current stock\n        if (adjustmentMagnitude > currentStock * 0.5) {\n          const isManager = ['manager', 'owner', 'super_admin'].includes(user.role?.name || '');\n          if (!isManager) {\n            return res.status(403).json({ \n              message: \"Large inventory adjustments require manager approval\" \n            });\n          }\n        }\n        \n        // Adjustments require notes\n        const notes = transactionData.notes?.trim();\n        if (!notes || notes.length === 0) {\n          return res.status(400).json({ \n            message: \"Inventory adjustments require detailed notes\" \n          });\n        }\n        \n        // Prevent adjustments that would result in negative stock\n        if (currentStock + adjustmentDelta < 0) {\n          return res.status(400).json({ \n            message: `Adjustment would result in negative stock: Current ${currentStock}, Delta ${adjustmentDelta}` \n          });\n        }\n      }\n      \n      const finalTransactionData = {\n        ...transactionData,\n        hotelId: user.hotelId,\n        createdBy: user.id,\n        recordedBy: user.id\n      };\n      \n      const transaction = await storage.createInventoryTransaction(finalTransactionData);\n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Inventory transaction error:\", error);\n      res.status(400).json({ message: \"Failed to create inventory transaction\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/room-types\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const roomTypes = await storage.getRoomTypesByHotel(user.hotelId);\n      res.json(roomTypes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch room types\" });\n    }\n  });\n\n  app.post(\"/api/room-types\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const roomTypeData = insertRoomTypeSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId\n      });\n      \n      const roomType = await storage.createRoomType(roomTypeData);\n      res.status(201).json(roomType);\n    } catch (error) {\n      console.error(\"Room type creation error:\", error);\n      res.status(400).json({ message: \"Invalid room type data\" });\n    }\n  });\n\n  app.put(\"/api/room-types/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const roomTypeData = insertRoomTypeSchema.partial().parse(req.body);\n      \n      // Strip hotelId to prevent cross-tenant tampering\n      delete (roomTypeData as any).hotelId;\n      \n      const roomType = await storage.updateRoomType(parseInt(id), user.hotelId, roomTypeData);\n      \n      if (!roomType) {\n        return res.status(404).json({ message: \"Room type not found\" });\n      }\n      \n      res.json(roomType);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update room type\" });\n    }\n  });\n\n  app.delete(\"/api/room-types/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deleteRoomType(parseInt(id), user.hotelId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Room type not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete room type\" });\n    }\n  });\n\n  // Amenity routes - Halls\n  app.get(\"/api/halls\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const halls = await storage.getHallsByHotel(user.hotelId);\n      res.json(halls);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch halls\" });\n    }\n  });\n\n  // Alias route for consistency with other endpoints\n  app.get(\"/api/hotels/current/halls\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const halls = await storage.getHallsByHotel(user.hotelId);\n      res.json(halls);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch halls\" });\n    }\n  });\n\n  app.get(\"/api/halls/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const { id } = req.params;\n      const hall = await storage.getHall(id);\n      \n      if (!hall) {\n        return res.status(404).json({ message: \"Hall not found\" });\n      }\n\n      res.json(hall);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hall\" });\n    }\n  });\n\n  app.post(\"/api/halls\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const hallData = insertHallSchema.parse(req.body);\n      hallData.hotelId = user.hotelId;\n      const hall = await storage.createHall(hallData);\n      res.status(201).json(hall);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create hall\" });\n    }\n  });\n\n  app.put(\"/api/halls/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const hallData = insertHallSchema.partial().parse(req.body);\n      \n      // Strip hotelId to prevent cross-tenant tampering\n      delete (hallData as any).hotelId;\n      \n      const hall = await storage.updateHall(id, user.hotelId, hallData);\n      \n      if (!hall) {\n        return res.status(404).json({ message: \"Hall not found\" });\n      }\n      \n      res.json(hall);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update hall\" });\n    }\n  });\n\n  app.delete(\"/api/halls/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deleteHall(id, user.hotelId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Hall not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete hall\" });\n    }\n  });\n\n  // Amenity routes - Pools\n  app.get(\"/api/pools\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const pools = await storage.getPoolsByHotel(user.hotelId);\n      res.json(pools);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pools\" });\n    }\n  });\n\n  app.post(\"/api/pools\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const poolData = insertPoolSchema.parse(req.body);\n      poolData.hotelId = user.hotelId;\n      const pool = await storage.createPool(poolData);\n      res.status(201).json(pool);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create pool\" });\n    }\n  });\n\n  app.put(\"/api/pools/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const poolData = insertPoolSchema.partial().parse(req.body);\n      \n      // Strip hotelId to prevent cross-tenant tampering\n      delete (poolData as any).hotelId;\n      \n      const pool = await storage.updatePool(id, user.hotelId, poolData);\n      \n      if (!pool) {\n        return res.status(404).json({ message: \"Pool not found\" });\n      }\n      \n      res.json(pool);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update pool\" });\n    }\n  });\n\n  app.delete(\"/api/pools/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deletePool(id, user.hotelId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Pool not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete pool\" });\n    }\n  });\n\n  // Amenity routes - Services\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const services = await storage.getServicesByHotel(user.hotelId);\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.post(\"/api/services\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const serviceData = insertServiceSchema.parse(req.body);\n      serviceData.hotelId = user.hotelId;\n      const service = await storage.createService(serviceData);\n      \n      // Broadcast WebSocket event\n      wsEvents.serviceCreated(user.hotelId, service);\n      \n      res.status(201).json(service);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put(\"/api/services/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const serviceData = insertServiceSchema.partial().parse(req.body);\n      \n      // Strip hotelId to prevent cross-tenant tampering\n      delete (serviceData as any).hotelId;\n      \n      const service = await storage.updateService(id, user.hotelId, serviceData);\n      \n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      res.json(service);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete(\"/api/services/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deleteService(id, user.hotelId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/reservations\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const reservations = await storage.getRoomReservationsByHotel(user.hotelId);\n      res.json(reservations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reservations\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/taxes\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const taxes = await storage.getHotelTaxes(user.hotelId);\n      res.json(taxes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hotel taxes\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/taxes\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // CRITICAL: Only owner can modify tax settings to prevent tax evasion\n      if (user.role?.name !== 'owner' && user.role?.name !== 'super_admin') {\n        return res.status(403).json({ \n          message: \"Only the hotel owner can modify tax settings\" \n        });\n      }\n      \n      const { taxType, percent, isActive } = req.body;\n      \n      console.log(\"Tax update request:\", { taxType, percent, isActive, percentType: typeof percent });\n      \n      // Log tax configuration changes for audit trail\n      const existingTax = await storage.getHotelTax(user.hotelId, taxType);\n      await storage.createTaxChangeLog({\n        hotelId: user.hotelId,\n        taxType,\n        previousPercent: existingTax?.percent || null,\n        newPercent: percent !== undefined ? percent : null,\n        previousActive: existingTax?.isActive ?? undefined,\n        newActive: isActive,\n        changedBy: user.id\n      });\n      \n      const tax = await storage.updateHotelTax(user.hotelId, taxType, isActive, percent);\n      res.json(tax);\n    } catch (error) {\n      console.error(\"Tax update error:\", error);\n      res.status(400).json({ message: \"Failed to update tax\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/payments\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const payments = await storage.getPaymentsByHotel(user.hotelId);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  // Get single hotel by ID (after all /current routes to avoid conflicts)\n  app.get(\"/api/hotels/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const hotel = await storage.getHotel(id);\n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n      res.json(hotel);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hotel\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/hotels/:hotelId/users\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's users\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const users = await storage.getUsersByHotel(hotelId);\n      const sanitizedUsers = users.map(user => {\n        const { passwordHash: _, ...sanitizedUser } = user;\n        return sanitizedUser;\n      });\n      res.json(sanitizedUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      \n      // Handle role conversion and password hashing\n      const { role, password, confirmPassword, firstName, lastName, ...userData } = req.body;\n      \n      // Get role ID from role name, or role name from role ID\n      let roleId = userData.roleId;\n      let targetRoleName = role;\n      \n      if (role && !roleId) {\n        // Case 1: role name provided, get role ID\n        const roleRecord = await storage.getRoleByName(role);\n        if (roleRecord) {\n          roleId = roleRecord.id;\n          targetRoleName = roleRecord.name;\n        } else {\n          return res.status(400).json({ message: `Role '${role}' not found` });\n        }\n      } else if (roleId && !role) {\n        // Case 2: role ID provided, get role name\n        const roleRecord = await storage.getRole(roleId);\n        if (roleRecord) {\n          targetRoleName = roleRecord.name;\n        } else {\n          return res.status(400).json({ message: `Role with ID '${roleId}' not found` });\n        }\n      }\n\n      // Role-based authorization - check what roles current user can create\n      const currentUserRoleName = currentUser.role?.name || '';\n      const rolePermissions = {\n        super_admin: ['super_admin', 'owner'],\n        owner: ['manager', 'housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance'],\n        manager: ['housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance', 'front_desk', 'storekeeper'],\n        housekeeping_supervisor: ['housekeeping_staff'],\n        restaurant_bar_manager: ['waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier'],\n        security_head: ['security_guard', 'surveillance_officer']\n      };\n\n      const allowedRoles = rolePermissions[currentUserRoleName as keyof typeof rolePermissions] || [];\n      if (!allowedRoles.includes(targetRoleName)) {\n        return res.status(403).json({ \n          message: `You do not have permission to create users with role '${targetRoleName}'`,\n          allowedRoles \n        });\n      }\n      \n      // Hash password if provided\n      let hashedPassword = userData.passwordHash;\n      if (password) {\n        const { hashPassword } = await import(\"./auth.js\");\n        hashedPassword = await hashPassword(password);\n      }\n\n      // Auto-assign hotel based on current user (except for super_admin)\n      let hotelId = userData.hotelId;\n      \n      if (currentUserRoleName === 'super_admin') {\n        // Super admin must provide hotelId explicitly\n        if (!hotelId) {\n          return res.status(400).json({ \n            message: \"Super admin must specify a hotelId when creating users\" \n          });\n        }\n      } else {\n        // Non-super-admin users inherit hotelId from current user\n        if (!hotelId && currentUser.hotelId) {\n          hotelId = currentUser.hotelId;\n        }\n        \n        // Non-super-admin users must have a hotelId to create other users\n        if (!hotelId) {\n          return res.status(400).json({ \n            message: \"User not associated with a hotel\" \n          });\n        }\n      }\n      \n      const processedUserData = {\n        ...userData,\n        roleId,\n        hotelId,\n        passwordHash: hashedPassword,\n        verification: userData.verification || {},\n        createdBy: currentUser.id\n      };\n      \n      const validatedData = insertUserSchema.parse(processedUserData);\n      const user = await storage.createUser(validatedData);\n      const { passwordHash: _, ...sanitizedUser } = user;\n      res.status(201).json(sanitizedUser);\n    } catch (error) {\n      console.error(\"User creation error:\", error);\n      if (error && typeof error === 'object' && 'errors' in error) {\n        // Zod validation errors\n        res.status(400).json({ \n          message: \"Invalid user data\", \n          errors: (error.errors as any[]).map((e: any) => `${e.path.join('.')}: ${e.message}`)\n        });\n      } else {\n        res.status(400).json({ message: (error as any)?.message || \"Invalid user data\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      const { id } = req.params;\n      \n      // Get target user to check their role\n      const targetUser = await storage.getUser(id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const currentUserRoleName = currentUser.role?.name || '';\n      const targetUserRoleName = targetUser.role?.name || '';\n\n      // Role-based authorization - check what roles current user can delete\n      const roleDeletionPermissions = {\n        super_admin: ['super_admin', 'owner', 'manager', 'housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance', 'front_desk', 'housekeeping_staff', 'waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier', 'security_guard'],\n        owner: ['manager', 'housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance', 'front_desk', 'housekeeping_staff', 'waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier', 'security_guard'],\n        manager: ['housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance', 'front_desk', 'housekeeping_staff', 'waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier', 'security_guard'],\n        housekeeping_supervisor: ['housekeeping_staff'],\n        restaurant_bar_manager: ['waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier'],\n        security_head: ['security_guard']\n      };\n\n      const allowedRolesToDelete = roleDeletionPermissions[currentUserRoleName as keyof typeof roleDeletionPermissions] || [];\n      if (!allowedRolesToDelete.includes(targetUserRoleName)) {\n        return res.status(403).json({ \n          message: `You do not have permission to delete users with role '${targetUserRoleName}'` \n        });\n      }\n      \n      // Prevent deleting users from other hotels (except super_admin)\n      if (currentUser.role?.name !== 'super_admin') {\n        if (targetUser.hotelId !== currentUser.hotelId) {\n          return res.status(403).json({ message: \"Cannot delete users from other hotels\" });\n        }\n      }\n\n      await storage.deleteUser(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"User deletion error:\", error);\n      res.status(400).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      // CRITICAL: Require authentication\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const userData = insertUserSchema.partial().parse(req.body);\n      \n      // CRITICAL SECURITY: Block password changes through this endpoint\n      // Passwords can ONLY be changed via /api/reset-password with old password verification\n      if ('passwordHash' in userData) {\n        return res.status(403).json({ \n          message: \"Cannot change passwords through this endpoint. Use the password reset functionality.\" \n        });\n      }\n      \n      // Get target user to verify hotel and role\n      const targetUser = await storage.getUser(id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // CRITICAL: Hotel isolation check MUST come FIRST (before any other authorization)\n      // Prevents cross-hotel privilege escalation - managers/owners can only affect their own hotel\n      const currentRole = currentUser.role?.name || '';\n      if (currentRole !== 'super_admin') {\n        if (!targetUser.hotelId || targetUser.hotelId !== currentUser.hotelId) {\n          return res.status(403).json({ message: \"Cannot update users from other hotels\" });\n        }\n      }\n      \n      // CRITICAL: Prevent users from updating their own protected fields\n      if (currentUser.id === id) {\n        const protectedFields = ['roleId', 'isActive', 'hotelId', 'createdBy', 'verification'];\n        const attemptedProtectedUpdate = protectedFields.some(field => field in userData);\n        \n        if (attemptedProtectedUpdate) {\n          return res.status(403).json({ \n            message: \"Cannot modify your own role, status, or hotel assignment. Contact your manager.\" \n          });\n        }\n      }\n      \n      // CRITICAL: Verify permission to update other users\n      if (currentUser.id !== id) {\n        \n        // Only managers, owners, and super_admins can update other users\n        const canUpdateUsers = ['owner', 'manager', 'super_admin'].includes(currentRole);\n        \n        if (!canUpdateUsers) {\n          return res.status(403).json({ \n            message: \"You don't have permission to update other users\" \n          });\n        }\n        \n        // CRITICAL: Prevent updating protected fields without proper authorization\n        if ('roleId' in userData || 'isActive' in userData) {\n          // Only owner and super_admin can change roles or activation status\n          if (!['owner', 'super_admin'].includes(currentRole)) {\n            return res.status(403).json({ \n              message: \"Only the hotel owner can change user roles or activation status\" \n            });\n          }\n        }\n      }\n      \n      const user = await storage.updateUser(id, userData);\n      const { passwordHash: _, ...sanitizedUser } = user;\n      res.json(sanitizedUser);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Get all users with role information\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const allUsers = await db\n        .select({\n          id: users.id,\n          hotelId: users.hotelId,\n          roleId: users.roleId,\n          username: users.username,\n          email: users.email,\n          phone: users.phone,\n          passwordHash: users.passwordHash,\n          isActive: users.isActive,\n          isOnline: users.isOnline,\n          lastLogin: users.lastLogin,\n          lastLogout: users.lastLogout,\n          createdBy: users.createdBy,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n          deletedAt: users.deletedAt,\n          verification: users.verification,\n          role: roles\n        })\n        .from(users)\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .where(isNull(users.deletedAt))\n        .orderBy(asc(users.username));\n      \n      res.json(allUsers.map((user: any) => {\n        const { passwordHash: _, ...sanitizedUser } = user;\n        return {\n          ...sanitizedUser,\n          role: user.role || undefined\n        };\n      }));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users/:id/duty\", async (req, res) => {\n    try {\n      // CRITICAL: Require authentication\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const { isOnline } = req.body;\n      \n      // Users can only update their own duty status\n      if (currentUser.id !== id) {\n        return res.status(403).json({ message: \"Cannot update another user's duty status\" });\n      }\n      \n      // CRITICAL: Verify user is still active\n      const user = await storage.getUser(id);\n      if (!user || !user.isActive) {\n        return res.status(403).json({ \n          message: \"Your account has been deactivated. Contact your manager.\" \n        });\n      }\n      \n      await storage.updateUserOnlineStatus(id, isOnline);\n      res.status(200).json({ success: true });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update duty status\" });\n    }\n  });\n\n  // Manager password reset endpoint (for when staff forget their password)\n  app.post(\"/api/manager/reset-staff-password\", async (req, res) => {\n    try {\n      // CRITICAL: Require authentication\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      const { targetUserId, newPassword } = req.body;\n\n      // Validate required fields\n      if (!targetUserId || !newPassword) {\n        return res.status(400).json({ \n          message: \"Target user ID and new password are required\" \n        });\n      }\n\n      // CRITICAL: Only managers and owners can reset staff passwords\n      const currentRole = currentUser.role?.name || '';\n      if (!['manager', 'owner'].includes(currentRole)) {\n        return res.status(403).json({ \n          message: \"Only managers and owners can reset staff passwords\" \n        });\n      }\n\n      // Get target user\n      const targetUser = await storage.getUser(targetUserId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"Target user not found\" });\n      }\n\n      // CRITICAL: Hotel isolation - can only reset passwords within same hotel\n      if (currentRole !== 'super_admin' && targetUser.hotelId !== currentUser.hotelId) {\n        return res.status(403).json({ \n          message: \"Cannot reset passwords for users in other hotels\" \n        });\n      }\n\n      // CRITICAL: Define which roles can be reset by managers and owners\n      const targetRole = targetUser.role?.name || '';\n      const managerCanReset = ['waiter', 'kitchen_staff', 'housekeeping_staff', 'security_guard', 'cashier', 'front_desk', 'storekeeper'];\n      const ownerCanReset = [...managerCanReset, 'manager', 'housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance'];\n\n      let canResetThisRole = false;\n      if (currentRole === 'owner') {\n        canResetThisRole = ownerCanReset.includes(targetRole);\n      } else if (currentRole === 'manager') {\n        canResetThisRole = managerCanReset.includes(targetRole);\n      }\n\n      if (!canResetThisRole) {\n        return res.status(403).json({ \n          message: `You do not have permission to reset passwords for ${targetRole} role` \n        });\n      }\n\n      // Validate new password\n      if (newPassword.length < 8) {\n        return res.status(400).json({ \n          message: \"New password must be at least 8 characters\" \n        });\n      }\n\n      // Hash the new password\n      const { hashPassword } = await import(\"./auth.js\");\n      const hashedPassword = await hashPassword(newPassword);\n\n      // Update target user's password\n      await storage.updateUser(targetUserId, { passwordHash: hashedPassword });\n\n      // Log successful password reset\n      await logAudit({\n        userId: currentUser.id,\n        hotelId: currentUser.hotelId || undefined,\n        action: 'manager_reset_staff_password',\n        resourceType: 'user',\n        resourceId: targetUserId,\n        details: { \n          managerUsername: currentUser.username,\n          targetUsername: targetUser.username,\n          targetRole: targetRole\n        },\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'],\n        success: true\n      });\n\n      res.json({ \n        message: \"Password reset successfully\",\n        username: targetUser.username\n      });\n    } catch (error) {\n      console.error(\"Manager password reset error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  // Role routes\n  app.get(\"/api/roles\", async (req, res) => {\n    try {\n      const roles = await storage.getAllRoles();\n      res.json(roles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  // Room routes\n  app.get(\"/api/hotels/:hotelId/rooms\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's rooms\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const rooms = await storage.getRoomsByHotel(hotelId);\n      res.json(rooms);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch rooms\" });\n    }\n  });\n\n  app.post(\"/api/rooms\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const roomData = insertRoomSchema.parse({\n        ...req.body,\n        hotelId: currentUser.hotelId\n      });\n      const room = await storage.createRoom(roomData);\n      res.status(201).json(room);\n    } catch (error) {\n      console.error(\"Room creation error:\", error);\n      res.status(400).json({ message: \"Failed to create room\" });\n    }\n  });\n\n  app.put(\"/api/rooms/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Get existing room to detect checkout\n      const existingRoom = await storage.getRoom(id);\n      if (!existingRoom || existingRoom.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n      \n      // CRITICAL: Status changes require authorization\n      const isStatusChange = 'status' in updateData && updateData.status !== existingRoom.status;\n      \n      if (isStatusChange) {\n        const canChangeStatus = ['manager', 'owner', 'housekeeping_supervisor'].includes(currentUser.role?.name || '');\n        \n        if (!canChangeStatus) {\n          return res.status(403).json({ \n            message: \"Only supervisors can change room status\" \n          });\n        }\n        \n        // 'maintenance' status requires reason\n        if (updateData.status === 'maintenance' && !updateData.maintenanceReason) {\n          return res.status(400).json({ \n            message: \"Maintenance status requires a reason\" \n          });\n        }\n      }\n      \n      // Extract occupantDetails separately since it's a jsonb field that may not validate properly\n      const { occupantDetails, maintenanceReason, statusChangeReason, ...restBody } = updateData;\n      const validatedData = insertRoomSchema.partial().parse(restBody);\n      // Add occupantDetails back if it exists\n      const roomData = occupantDetails !== undefined \n        ? { ...validatedData, occupantDetails } \n        : validatedData;\n      \n      // Detect checkout: room was occupied and is now being set to unoccupied\n      const isCheckout = existingRoom.isOccupied && roomData.isOccupied === false;\n      \n      if (isCheckout && existingRoom.occupantDetails) {\n        // Extract guest information before it's cleared\n        const occupant = existingRoom.occupantDetails as any;\n        const guestName = occupant?.guestName || occupant?.firstName \n          ? `${occupant.firstName || ''} ${occupant.lastName || ''}`.trim()\n          : 'Guest';\n        \n        // Create room cleaning queue entry\n        await storage.createRoomCleaningQueue({\n          hotelId: existingRoom.hotelId,\n          roomId: existingRoom.id,\n          roomNumber: existingRoom.roomNumber || 'Unknown',\n          guestName: guestName,\n          guestId: occupant?.guestId || null,\n          status: 'pending'\n        });\n      }\n      \n      // Update room first\n      const room = await storage.updateRoom(id, roomData);\n      \n      // Log status change AFTER successful update\n      if (isStatusChange) {\n        await storage.createRoomStatusLog({\n          roomId: id,\n          roomNumber: existingRoom.roomNumber || 'Unknown',\n          previousStatus: existingRoom.status || '',\n          newStatus: updateData.status,\n          reason: updateData.maintenanceReason || updateData.statusChangeReason || null,\n          changedBy: currentUser.id\n        });\n      }\n      \n      // Broadcast room updates to front desk role in real-time\n      wsEvents.roomStatusUpdated(currentUser.hotelId, room);\n      \n      res.json(room);\n    } catch (error) {\n      console.error(\"Room update error:\", error);\n      res.status(400).json({ message: \"Failed to update room\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/rooms/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteRoom(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete room\" });\n    }\n  });\n\n  // Room Reservations routes\n  app.post(\"/api/reservations\", async (req, res) => {\n    try {\n      const reservationData = insertRoomReservationSchema.parse(req.body);\n      \n      // Create reservation with atomic transaction and locking\n      // The storage method handles availability checking within the transaction\n      const reservation = await storage.createRoomReservation(reservationData);\n      \n      // Update room status to reserved\n      await storage.updateRoom(reservationData.roomId, {\n        status: 'reserved',\n        currentReservationId: reservation.id\n      });\n\n      res.status(201).json(reservation);\n    } catch (error) {\n      console.error(\"Reservation creation error:\", error);\n      \n      // Check if it's a double booking error\n      if (error instanceof Error && error.message.includes('already booked')) {\n        return res.status(409).json({ \n          message: \"Room is not available for the selected dates. Please choose different dates or another room.\" \n        });\n      }\n      \n      res.status(400).json({ \n        message: \"Failed to create reservation\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.post(\"/api/reservations/:id/check-in\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const reservation = await storage.checkInGuest(id);\n      \n      // Broadcast check-in event to front desk role in real-time\n      wsEvents.roomStatusUpdated(currentUser.hotelId, { \n        id: reservation.roomId, \n        status: 'occupied',\n        isOccupied: true \n      });\n      \n      res.json(reservation);\n    } catch (error) {\n      console.error(\"Check-in error:\", error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Failed to check in guest\" \n      });\n    }\n  });\n\n  app.patch(\"/api/reservations/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const { paidAmount } = req.body;\n\n      const reservation = await storage.getRoomReservation(id);\n      if (!reservation) {\n        return res.status(404).json({ message: \"Reservation not found\" });\n      }\n\n      if (reservation.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Reservation not found\" });\n      }\n\n      // Update the paid amount\n      const updated = await storage.updateRoomReservation(id, { paidAmount });\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Update reservation error:\", error);\n      res.status(500).json({ message: \"Failed to update reservation\" });\n    }\n  });\n\n  app.post(\"/api/reservations/:id/check-out\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const { overrideBalance, overrideReason } = req.body;\n      \n      const reservation = await storage.getRoomReservation(id);\n      if (!reservation) {\n        return res.status(404).json({ message: \"Reservation not found\" });\n      }\n      \n      if (reservation.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Reservation not found\" });\n      }\n      \n      // CRITICAL: Check for outstanding balance\n      const totalAmount = Number(reservation.totalPrice || 0);\n      const paidAmount = Number(reservation.paidAmount || 0);\n      const balanceDue = totalAmount - paidAmount;\n      \n      if (balanceDue > 0) {\n        // Only managers can override balance requirement\n        if (!overrideBalance) {\n          return res.status(400).json({ \n            message: `Cannot check out with outstanding balance of ${balanceDue}. Please collect payment first.`,\n            balanceDue \n          });\n        }\n        \n        const canOverride = ['manager', 'owner'].includes(currentUser.role?.name || '');\n        if (!canOverride) {\n          return res.status(403).json({ \n            message: `Outstanding balance of ${balanceDue} must be cleared. Contact your manager to override.`,\n            balanceDue \n          });\n        }\n        \n        // Log manager override for audit\n        await storage.createCheckoutOverrideLog({\n          reservationId: id,\n          balanceDue: String(balanceDue),\n          overriddenBy: currentUser.id,\n          reason: overrideReason || 'Manager override'\n        });\n      }\n      \n      // Process checkout\n      const checkedOutReservation = await storage.checkOutGuest(id);\n      \n      // Broadcast checkout event to front desk role in real-time\n      wsEvents.roomStatusUpdated(currentUser.hotelId, { \n        id: checkedOutReservation.roomId, \n        status: 'available',\n        isOccupied: false \n      });\n      \n      res.json(checkedOutReservation);\n    } catch (error) {\n      console.error(\"Checkout error:\", error);\n      res.status(500).json({ message: \"Failed to check out guest\" });\n    }\n  });\n\n  app.get(\"/api/rooms/availability\", async (req, res) => {\n    try {\n      const { hotelId, roomId, checkIn, checkOut } = req.query;\n      \n      if (!hotelId || !roomId || !checkIn || !checkOut) {\n        return res.status(400).json({ message: \"Missing required parameters\" });\n      }\n\n      const isAvailable = await storage.checkRoomAvailability(\n        hotelId as string,\n        roomId as string,\n        new Date(checkIn as string),\n        new Date(checkOut as string)\n      );\n\n      res.json({ available: isAvailable });\n    } catch (error) {\n      console.error(\"Availability check error:\", error);\n      res.status(500).json({ message: \"Failed to check availability\" });\n    }\n  });\n\n  app.get(\"/api/reservations/date-range\", async (req, res) => {\n    try {\n      const { hotelId, startDate, endDate } = req.query;\n      \n      if (!hotelId || !startDate || !endDate) {\n        return res.status(400).json({ message: \"Missing required parameters\" });\n      }\n\n      const reservations = await storage.getReservationsByDateRange(\n        hotelId as string,\n        new Date(startDate as string),\n        new Date(endDate as string)\n      );\n\n      res.json(reservations);\n    } catch (error) {\n      console.error(\"Get reservations error:\", error);\n      res.status(500).json({ message: \"Failed to get reservations\" });\n    }\n  });\n\n  // Room Service Charges routes\n  app.post(\"/api/hotels/current/room-service-charges\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const chargeData = insertRoomServiceChargeSchema.parse({\n        ...req.body,\n        hotelId: currentUser.hotelId,\n        addedBy: currentUser.id\n      });\n\n      const charge = await storage.createRoomServiceCharge(chargeData);\n      \n      // Emit WebSocket event for real-time updates\n      wsEvents.roomServiceChargeCreated(currentUser.hotelId, charge);\n      \n      res.json(charge);\n    } catch (error) {\n      console.error(\"Create room service charge error:\", error);\n      res.status(500).json({ message: \"Failed to add service charge\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/room-service-charges\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { reservationId } = req.query;\n      \n      if (reservationId) {\n        // SECURITY: Verify reservation belongs to user's hotel before returning charges\n        const reservation = await storage.getRoomReservation(reservationId as string);\n        if (!reservation || reservation.hotelId !== currentUser.hotelId) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n        const charges = await storage.getRoomServiceCharges(reservationId as string);\n        res.json(charges);\n      } else {\n        // Get all charges for the hotel\n        const charges = await storage.getAllRoomServiceChargesByHotel(currentUser.hotelId);\n        res.json(charges);\n      }\n    } catch (error) {\n      console.error(\"Get room service charges error:\", error);\n      res.status(500).json({ message: \"Failed to get service charges\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/current/room-service-charges/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { id } = req.params;\n      await storage.deleteRoomServiceCharge(id);\n      \n      // Emit WebSocket event for real-time updates\n      wsEvents.roomServiceChargeDeleted(currentUser.hotelId, id);\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Delete room service charge error:\", error);\n      res.status(500).json({ message: \"Failed to delete service charge\" });\n    }\n  });\n\n  // Menu routes\n  app.get(\"/api/hotels/:hotelId/menu-items\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's menu items\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const menuItems = await storage.getMenuItemsByHotel(hotelId);\n      res.json(menuItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch menu items\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/menu-categories\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's menu categories\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const categories = await storage.getMenuCategoriesByHotel(hotelId);\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch menu categories\" });\n    }\n  });\n\n  app.post(\"/api/menu-items\", async (req, res) => {\n    try {\n      const itemData = insertMenuItemSchema.parse(req.body);\n      const item = await storage.createMenuItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid menu item data\" });\n    }\n  });\n\n  app.put(\"/api/menu-items/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const itemData = insertMenuItemSchema.partial().parse(req.body);\n      const item = await storage.updateMenuItem(id, itemData);\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update menu item\" });\n    }\n  });\n\n  app.delete(\"/api/menu-items/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteMenuItem(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete menu item\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks/my-tasks\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.id) {\n        return res.status(400).json({ message: \"User not found\" });\n      }\n      const tasks = await storage.getTasksByUser(user.id);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/tasks\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const tasks = await storage.getTasksByUser(userId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/tasks\", async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const tasks = await storage.getTasksByHotel(hotelId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(taskData);\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid task data\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const taskData = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(id, taskData);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTask(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Transaction routes\n  app.get(\"/api/hotels/:hotelId/transactions\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's transactions\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const transactions = await storage.getTransactionsByHotel(hotelId);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post(\"/api/transactions\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      if (!currentUser?.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { hotelId: _, createdBy: __, ...sanitizedBody } = req.body;\n      \n      // CRITICAL: Validate vendor payments - prevent unauthorized payments\n      const isVendorPayment = sanitizedBody.vendorId || \n        (sanitizedBody.purpose && String(sanitizedBody.purpose).toLowerCase().includes('vendor'));\n      \n      if (isVendorPayment) {\n        // Require invoice or PO reference for vendor payments\n        if (!sanitizedBody.reference) {\n          return res.status(400).json({ \n            message: \"Vendor payments require invoice or purchase order reference\" \n          });\n        }\n        \n        // Only manager, owner, or finance can approve vendor payments\n        const canApprove = ['manager', 'owner', 'super_admin', 'finance'].includes(currentUser.role?.name || '');\n        if (!canApprove) {\n          return res.status(403).json({ \n            message: \"Only managers and finance can approve vendor payments\" \n          });\n        }\n      }\n      \n      const transactionData = insertTransactionSchema.parse({\n        ...sanitizedBody,\n        hotelId: currentUser.hotelId,\n        createdBy: currentUser.id\n      });\n      const transaction = await storage.createTransaction(transactionData);\n      \n      // Broadcast transaction creation to relevant users\n      wsEvents.transactionCreated(currentUser.hotelId, transaction);\n      \n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Transaction creation error:\", error);\n      res.status(400).json({ message: \"Invalid transaction data\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/transactions/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const updatedTransaction = await storage.updateTransaction(id, updateData);\n      \n      // Broadcast transaction update to relevant users\n      if (updatedTransaction && (req.user as any)?.hotelId) {\n        wsEvents.transactionUpdated((req.user as any).hotelId, updatedTransaction);\n      }\n      \n      res.json(updatedTransaction);\n    } catch (error) {\n      console.error(\"Transaction update error:\", error);\n      res.status(400).json({ message: \"Failed to update transaction\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/transactions/:id\", requireActiveUser, async (req, res) => {\n    return res.status(403).json({ \n      message: \"Transactions cannot be deleted. Use void functionality instead.\" \n    });\n  });\n\n  app.post(\"/api/transactions/:id/void\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const { reason } = req.body;\n      \n      // Only managers and owners can void transactions\n      const canVoid = ['manager', 'owner'].includes(currentUser.role?.name || '');\n      if (!canVoid) {\n        return res.status(403).json({ \n          message: \"Only managers and owners can void transactions\" \n        });\n      }\n      \n      // Require detailed reason\n      if (!reason || reason.trim().length < 15) {\n        return res.status(400).json({ \n          message: \"Void reason required (minimum 15 characters)\" \n        });\n      }\n      \n      const transaction = await storage.getTransaction(id);\n      if (!transaction || transaction.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      if (transaction.isVoided) {\n        return res.status(400).json({ message: \"Transaction already voided\" });\n      }\n      \n      // Void the transaction\n      const voidedTransaction = await storage.voidTransaction(id, currentUser.id, reason);\n      \n      res.json({ success: true, transaction: voidedTransaction });\n    } catch (error) {\n      console.error(\"Transaction void error:\", error);\n      res.status(500).json({ message: \"Failed to void transaction\" });\n    }\n  });\n\n  // Maintenance routes\n  app.get(\"/api/hotels/:hotelId/maintenance-requests\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's maintenance requests\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const requests = await storage.getMaintenanceRequestsByHotel(hotelId);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch maintenance requests\" });\n    }\n  });\n\n  app.post(\"/api/maintenance-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const requestData = insertMaintenanceRequestSchema.parse(req.body);\n      const request = await storage.createMaintenanceRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      console.error(\"Maintenance request creation error:\", error);\n      res.status(400).json({ message: \"Invalid maintenance request data\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/maintenance-requests/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      const existingRequest = await storage.getMaintenanceRequest(id);\n      if (!existingRequest || existingRequest.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Maintenance request not found\" });\n      }\n      \n      // CRITICAL: Reassignment requires supervisor approval\n      if ('assignedTo' in updateData && updateData.assignedTo !== existingRequest.assignedTo) {\n        const canReassign = ['manager', 'owner', 'security_head', 'housekeeping_supervisor', 'restaurant_bar_manager'].includes(currentUser.role?.name || '');\n        \n        if (!canReassign) {\n          return res.status(403).json({ \n            message: \"Only supervisors can reassign maintenance requests\" \n          });\n        }\n        \n        // Log reassignment for audit\n        await storage.createAuditLog({\n          hotelId: currentUser.hotelId,\n          resourceType: 'maintenance_request',\n          resourceId: id,\n          action: 'reassigned',\n          userId: currentUser.id,\n          details: {\n            previousAssignee: existingRequest.assignedTo,\n            newAssignee: updateData.assignedTo,\n            timestamp: new Date()\n          }\n        });\n      }\n      \n      // Verify assigned user can update their own requests\n      const isAssigned = existingRequest.assignedTo === currentUser.id;\n      const isSupervisor = ['manager', 'owner', 'security_head', 'housekeeping_supervisor', 'restaurant_bar_manager'].includes(currentUser.role?.name || '');\n      \n      if (!isAssigned && !isSupervisor) {\n        return res.status(403).json({ \n          message: \"You can only update requests assigned to you\" \n        });\n      }\n      \n      // Log status changes (approve/decline) for audit\n      if ('status' in updateData && updateData.status !== existingRequest.status) {\n        const statusActions: { [key: string]: string } = {\n          'approved': 'approved',\n          'declined': 'declined',\n          'resolved': 'resolved',\n          'in_progress': 'started'\n        };\n        \n        const action = statusActions[updateData.status] || 'updated';\n        \n        await storage.createAuditLog({\n          hotelId: currentUser.hotelId,\n          resourceType: 'maintenance_request',\n          resourceId: id,\n          action,\n          userId: currentUser.id,\n          details: {\n            previousStatus: existingRequest.status,\n            newStatus: updateData.status,\n            requestTitle: existingRequest.title,\n            requestLocation: existingRequest.location,\n            timestamp: new Date()\n          }\n        });\n      }\n      \n      const requestData = insertMaintenanceRequestSchema.partial().parse(updateData);\n      const updatedRequest = await storage.updateMaintenanceRequest(id, requestData);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error(\"Maintenance request update error:\", error);\n      res.status(400).json({ message: \"Failed to update maintenance request\" });\n    }\n  });\n\n  // KOT routes\n  app.get(\"/api/hotels/:hotelId/kot-orders\", async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const kotOrders = await storage.getKotOrdersByHotel(hotelId);\n      res.json(kotOrders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch KOT orders\" });\n    }\n  });\n\n  app.get(\"/api/kot-orders/:kotId/items\", async (req, res) => {\n    try {\n      const { kotId } = req.params;\n      const items = await storage.getKotItems(kotId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch KOT items\" });\n    }\n  });\n\n  app.post(\"/api/kot-orders\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      if (!currentUser || !currentUser.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const { items, ...kotData } = req.body;\n      \n      // CRITICAL: Always set hotelId and createdBy from authenticated user\n      const enrichedKotData = {\n        ...kotData,\n        hotelId: currentUser.hotelId,\n        createdBy: currentUser.id\n      };\n      \n      if (items && items.length > 0) {\n        const kot = await storage.createKotOrderWithItems(enrichedKotData, items);\n        wsEvents.kotOrderCreated(currentUser.hotelId, kot);\n        res.status(201).json(kot);\n      } else {\n        const kot = await storage.createKotOrder(enrichedKotData);\n        wsEvents.kotOrderCreated(currentUser.hotelId, kot);\n        res.status(201).json(kot);\n      }\n    } catch (error) {\n      console.error(\"KOT order creation error:\", error);\n      res.status(400).json({ message: \"Invalid KOT data\" });\n    }\n  });\n\n  app.put(\"/api/kot-orders/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = req.user as any;\n      const kotData = req.body;\n      const kot = await storage.updateKotOrder(id, kotData);\n      if (user?.hotelId) {\n        wsEvents.kotOrderUpdated(user.hotelId, kot);\n      }\n      res.json(kot);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update KOT order\" });\n    }\n  });\n\n  app.put(\"/api/kot-items/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      if (!currentUser || !currentUser.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const existingItem = await storage.getKotItemById(id);\n      if (!existingItem) {\n        return res.status(404).json({ message: \"KOT item not found\" });\n      }\n\n      // Verify the KOT item belongs to the user's hotel\n      const kotOrder = await db.query.kotOrders.findFirst({\n        where: (orders, { eq }) => eq(orders.id, existingItem.kotId!)\n      });\n\n      if (!kotOrder || kotOrder.hotelId !== currentUser.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // CRITICAL: Authorization check BEFORE validation - Declining/canceling requires manager role\n      if (updateData.status === 'declined' || updateData.status === 'cancelled') {\n        const canDecline = ['manager', 'owner', 'restaurant_bar_manager'].includes(currentUser.role?.name || '');\n        \n        if (!canDecline) {\n          return res.status(403).json({ \n            message: \"Only managers can decline or cancel orders. Contact your supervisor.\" \n          });\n        }\n      }\n\n      // Validate the request body (includes 10-char minimum check for decline/cancel reasons)\n      const validatedData = updateKotItemSchema.parse(updateData);\n      \n      // Log decline/cancellation for audit trail\n      if (validatedData.status === 'declined' || validatedData.status === 'cancelled') {\n        await storage.createKotAuditLog({\n          kotItemId: id,\n          action: validatedData.status,\n          performedBy: currentUser.id,\n          reason: validatedData.declineReason,\n          previousStatus: existingItem.status || undefined,\n          newStatus: validatedData.status\n        });\n      }\n      \n      // CRITICAL: When marking as completed, verify inventory was deducted\n      if (validatedData.status === 'completed' && existingItem.status !== 'completed') {\n        // Get menu item to check inventory items\n        const menuItem = await storage.getMenuItem(existingItem.menuItemId!);\n        \n        // If menu item has inventory items, mark as verified\n        if (menuItem && menuItem.recipe) {\n          validatedData.inventoryVerified = true;\n        }\n      }\n\n      // If status is being changed to \"approved\", deduct inventory\n      if (validatedData.status === 'approved' && existingItem.status !== 'approved') {\n        await storage.deductInventoryForKotItem(id);\n      }\n\n      // Update the KOT item\n      const updatedItem = await storage.updateKotItem(id, validatedData);\n      \n      // Sync the parent order status after item update\n      if (existingItem.kotId) {\n        await storage.updateKotOrderStatus(existingItem.kotId);\n      }\n      \n      // Broadcast real-time KOT update\n      if (currentUser?.hotelId) {\n        wsEvents.kotOrderUpdated(currentUser.hotelId, updatedItem);\n      }\n      \n      res.json(updatedItem);\n    } catch (error: any) {\n      console.error(\"KOT item update error:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: error.errors[0]?.message || \"Invalid data\" });\n      }\n      res.status(400).json({ message: \"Failed to update KOT item\" });\n    }\n  });\n\n  app.delete(\"/api/kot-orders/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const { id } = req.params;\n      \n      // Verify the KOT order belongs to the user's hotel\n      const kotOrder = await db.query.kotOrders.findFirst({\n        where: (orders, { eq }) => eq(orders.id, id)\n      });\n\n      if (!kotOrder) {\n        return res.status(404).json({ message: \"KOT order not found\" });\n      }\n\n      if (kotOrder.hotelId !== user.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Delete the KOT order with inventory restoration\n      await storage.deleteKotOrderWithInventoryRestore(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"KOT deletion error:\", error);\n      res.status(400).json({ message: \"Failed to delete KOT order\" });\n    }\n  });\n\n  // Restaurant Bill routes\n  app.get(\"/api/hotels/current/bills\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { startDate, endDate, status } = req.query;\n      const filters: any = {};\n      \n      if (startDate) {\n        filters.startDate = new Date(startDate as string);\n      }\n      if (endDate) {\n        filters.endDate = new Date(endDate as string);\n      }\n      if (status) {\n        filters.status = status as string;\n      }\n\n      const bills = await storage.getRestaurantBillsByHotel(user.hotelId, filters);\n      res.json(bills);\n    } catch (error) {\n      console.error(\"Bill fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch bills\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/bills/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      \n      const bill = await storage.getRestaurantBill(id);\n      if (!bill) {\n        return res.status(404).json({ message: \"Bill not found\" });\n      }\n      \n      if (bill.hotelId !== user.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const payments = await storage.getBillPayments(id);\n      res.json({ ...bill, payments });\n    } catch (error) {\n      console.error(\"Bill fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch bill\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/bills\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const { payments, ...billData } = req.body;\n\n      // Generate bill number\n      const timestamp = Date.now();\n      const billNumber = `BILL-${timestamp.toString().slice(-8)}`;\n\n      // Create bill with server-side fields\n      const bill = await storage.createRestaurantBill({\n        ...billData,\n        billNumber,\n        hotelId: user.hotelId,\n        createdBy: user.id,\n        finalizedAt: billData.status === 'final' ? new Date() : null\n      });\n\n      // Create payments and transactions\n      const createdPayments = [];\n      for (const payment of payments) {\n        // Create transaction for this payment\n        const transaction = await storage.createTransaction({\n          hotelId: user.hotelId,\n          txnType: payment.paymentMethod === 'cash' ? 'cash_in' : \n                   payment.paymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n          amount: payment.amount,\n          paymentMethod: payment.paymentMethod,\n          purpose: 'restaurant_sale',\n          reference: `Bill: ${billNumber}`,\n          createdBy: user.id\n        });\n\n        // Create bill payment\n        const billPayment = await storage.createBillPayment({\n          billId: bill.id,\n          hotelId: user.hotelId,\n          amount: payment.amount,\n          paymentMethod: payment.paymentMethod,\n          transactionId: transaction.id,\n          reference: payment.reference,\n          receivedBy: user.id\n        });\n\n        createdPayments.push(billPayment);\n      }\n\n      // Check if bill is fully paid and lock it\n      if (createdPayments.length > 0) {\n        const totalPaid = createdPayments\n          .filter((p: any) => !p.isVoided)\n          .reduce((sum: number, p: any) => sum + Number(p.amount), 0);\n        \n        const grandTotal = Number(bill.grandTotal);\n        \n        // If fully paid, lock the bill\n        if (totalPaid >= grandTotal) {\n          await storage.updateRestaurantBill(bill.id, {\n            status: 'paid',\n            finalizedAt: new Date()\n          });\n          \n          // Update the bill object to reflect the change\n          bill.status = 'paid';\n          bill.finalizedAt = new Date();\n        }\n      }\n\n      // Update order statuses to served if bill is finalized\n      if (billData.status === 'final' && billData.orderIds) {\n        for (const orderId of billData.orderIds) {\n          await storage.updateKotOrder(orderId, { status: 'served' });\n        }\n      }\n\n      res.status(201).json({ ...bill, payments: createdPayments });\n    } catch (error) {\n      console.error(\"Bill creation error:\", error);\n      res.status(400).json({ message: \"Failed to create bill\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/hotels/current/bills/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { id } = req.params;\n      \n      const existingBill = await storage.getRestaurantBill(id);\n      if (!existingBill) {\n        return res.status(404).json({ message: \"Bill not found\" });\n      }\n      \n      if (existingBill.hotelId !== user.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // CRITICAL: Prevent modifying paid bills\n      if (existingBill.status === 'paid' || existingBill.status === 'finalized') {\n        const isManager = ['manager', 'owner', 'super_admin'].includes(user.role?.name || '');\n        \n        if (!isManager) {\n          return res.status(403).json({ \n            message: \"Cannot modify paid bills. Contact your manager for amendments.\" \n          });\n        }\n        \n        // Even managers must provide amendment reason\n        if (!req.body.amendmentNote || req.body.amendmentNote.trim().length < 10) {\n          return res.status(400).json({ \n            message: \"Amendments to paid bills require detailed notes (minimum 10 characters)\" \n          });\n        }\n        \n        // Create audit log for amendment\n        await storage.createAuditLog({\n          hotelId: user.hotelId,\n          resourceType: 'restaurant_bill',\n          resourceId: id,\n          action: 'amendment',\n          userId: user.id,\n          details: {\n            originalStatus: existingBill.status,\n            changes: req.body,\n            amendmentNote: req.body.amendmentNote,\n            originalBillData: {\n              grandTotal: existingBill.grandTotal,\n              status: existingBill.status,\n              items: existingBill.items\n            }\n          }\n        });\n      }\n\n      const updateData: any = {\n        ...req.body,\n        amendedBy: user.id,\n        amendedAt: new Date()\n      };\n\n      const updatedBill = await storage.updateRestaurantBill(id, updateData);\n      res.json(updatedBill);\n    } catch (error) {\n      console.error(\"Bill update error:\", error);\n      res.status(400).json({ message: \"Failed to update bill\" });\n    }\n  });\n\n  // Void payment endpoint - requires manager approval\n  app.post(\"/api/bill-payments/:paymentId/void\", requireActiveUser, async (req, res) => {\n    console.log('🔥 VOID ENDPOINT HIT:', req.params.paymentId, req.isAuthenticated());\n    try {\n      const currentUser = req.user as any;\n      console.log('🔥 USER:', currentUser.username, currentUser.role?.name);\n      const { paymentId } = req.params;\n      const { reason } = req.body;\n      \n      // CRITICAL: Only managers can void payments\n      const canVoid = ['manager', 'owner'].includes(currentUser.role?.name || '');\n      if (!canVoid) {\n        return res.status(403).json({ \n          message: \"Only managers can void payments\" \n        });\n      }\n      \n      // CRITICAL: Require detailed reason\n      if (!reason || reason.trim().length < 15) {\n        return res.status(400).json({ \n          message: \"Void reason required (minimum 15 characters)\" \n        });\n      }\n      \n      // Get existing payment\n      const payment = await storage.getBillPayment(paymentId);\n      if (!payment) {\n        return res.status(404).json({ message: \"Payment not found\" });\n      }\n      \n      // Verify not already voided\n      if (payment.isVoided) {\n        return res.status(400).json({ message: \"Payment already voided\" });\n      }\n      \n      // Verify belongs to user's hotel\n      if (payment.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Payment not found\" });\n      }\n      \n      // Check payment age - prevent voiding old payments (e.g., >=7 days)\n      const paymentDate = new Date(payment.createdAt);\n      const daysSince = (Date.now() - paymentDate.getTime()) / (1000 * 60 * 60 * 24);\n      \n      if (daysSince >= 7) {\n        // Only owner can void payments 7 days or older\n        if (currentUser.role?.name !== 'owner') {\n          return res.status(403).json({ \n            message: \"Cannot void payments 7 days or older. Contact hotel owner.\" \n          });\n        }\n      }\n      \n      // Void the payment\n      const voidedPayment = await storage.voidBillPayment(paymentId, currentUser.id, reason);\n      \n      // Log payment void\n      await logAudit({\n        userId: currentUser.id,\n        hotelId: currentUser.hotelId,\n        action: 'void_payment',\n        resourceType: 'bill_payment',\n        resourceId: paymentId,\n        details: { \n          reason, \n          amount: payment.amount, \n          billId: payment.billId,\n          paymentMethod: payment.paymentMethod\n        },\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent']\n      });\n      \n      // Always recalculate and update bill status after voiding payment\n      const bill = await storage.getRestaurantBill(payment.billId);\n      const allPayments = await storage.getBillPayments(payment.billId);\n      const totalPaid = allPayments\n        .filter(p => !p.isVoided)\n        .reduce((sum, p) => sum + Number(p.amount), 0);\n      \n      const grandTotal = Number(bill.grandTotal);\n      \n      // Update bill status based on payment total\n      if (totalPaid >= grandTotal) {\n        // Fully paid\n        await storage.updateRestaurantBill(payment.billId, {\n          status: 'paid'\n        });\n      } else if (totalPaid > 0) {\n        // Partially paid\n        await storage.updateRestaurantBill(payment.billId, {\n          status: 'partial'\n        });\n      } else {\n        // No payments or all voided\n        await storage.updateRestaurantBill(payment.billId, {\n          status: 'draft'\n        });\n      }\n      \n      res.json({ \n        success: true, \n        payment: voidedPayment,\n        message: \"Payment voided successfully\" \n      });\n    } catch (error) {\n      console.error(\"Payment void error:\", error);\n      res.status(500).json({ message: \"Failed to void payment\" });\n    }\n  });\n\n  // Wastage routes\n  app.post(\"/api/hotels/current/wastages\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const wastageData = req.body;\n      \n      // Validate required fields (check specifically for undefined/null, not falsy values like 0)\n      if (!wastageData.itemId || wastageData.qty === undefined || wastageData.qty === null || !wastageData.reason) {\n        return res.status(400).json({ \n          message: \"Item, quantity, and reason are required\" \n        });\n      }\n      \n      // Validate itemId is a valid UUID format\n      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n      if (!uuidRegex.test(wastageData.itemId)) {\n        return res.status(400).json({ \n          message: \"Invalid inventory item selected\" \n        });\n      }\n      \n      // CRITICAL SECURITY: Validate qty is a positive number\n      const qty = Number(wastageData.qty);\n      if (!Number.isFinite(qty) || qty <= 0) {\n        return res.status(400).json({ \n          message: \"Quantity must be a positive number\" \n        });\n      }\n      \n      // Require detailed reason (minimum 15 characters)\n      if (!wastageData.reason || wastageData.reason.trim().length < 15) {\n        return res.status(400).json({ \n          message: \"Wastage reason must be detailed (minimum 15 characters)\" \n        });\n      }\n      \n      // Get inventory item to check value\n      const inventoryItem = await storage.getInventoryItem(wastageData.itemId);\n      if (!inventoryItem || inventoryItem.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      \n      const wastageQty = Number(wastageData.qty);\n      const itemCost = Number(inventoryItem.costPerUnit || 0);\n      const wastageValue = wastageQty * itemCost;\n      \n      // Only manager, owner, restaurant_bar_manager, and storekeeper can auto-approve wastage (deduct from inventory)\n      // Other staff (barista, bartender, kitchen, waiter, cashier) create pending wastage\n      const canAutoApprove = ['manager', 'owner', 'restaurant_bar_manager', 'storekeeper'].includes(user.role?.name || '');\n      \n      if (!canAutoApprove) {\n        // Create wastage with 'pending_approval' status - DO NOT deduct stock\n        const finalWastageData = {\n          ...wastageData,\n          hotelId: user.hotelId,\n          recordedBy: user.id,\n          status: 'pending_approval',\n          estimatedValue: wastageValue\n        };\n        \n        const wastage = await storage.createWastage(finalWastageData);\n        \n        // Notify restaurant/bar manager for kitchen/bar/restaurant staff wastage\n        const restaurantBarRole = await storage.getRoleByName('restaurant_bar_manager');\n        if (restaurantBarRole) {\n          const rbManagers = await storage.getUsersByRole(restaurantBarRole.id);\n          const hotelRbManagers = rbManagers.filter(m => m.hotelId === user.hotelId);\n          \n          for (const manager of hotelRbManagers) {\n            await storage.createNotification({\n              userId: manager.id,\n              title: 'Wastage Approval Required',\n              message: `${user.username} reported wastage of ${wastageData.qty} ${wastageData.unit || inventoryItem.unit} ${inventoryItem.name} (Value: Rs. ${wastageValue.toFixed(2)}). Reason: ${wastageData.reason}`,\n              type: 'wastage_approval',\n              relatedId: wastage.id,\n              hotelId: user.hotelId\n            });\n          }\n        }\n        \n        return res.status(201).json({ \n          ...wastage,\n          message: \"Wastage requires manager approval\" \n        });\n      }\n      \n      // Manager, owner, or storekeeper - auto-approve and deduct inventory\n      const finalWastageData = {\n        ...wastageData,\n        hotelId: user.hotelId,\n        recordedBy: user.id,\n        status: 'approved',\n        approvedBy: user.id,\n        approvedAt: new Date(),\n        estimatedValue: wastageValue\n      };\n      \n      const wastage = await storage.createWastage(finalWastageData);\n      res.status(201).json(wastage);\n    } catch (error: any) {\n      console.error(\"Wastage creation error:\", error);\n      res.status(400).json({ message: error.message || \"Failed to report wastage\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/wastages\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const wastages = await storage.getWastagesByHotel(user.hotelId);\n      res.json(wastages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch wastages\" });\n    }\n  });\n\n  app.post(\"/api/wastages/:id/approve\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const { approved, rejectionReason } = req.body;\n      \n      // Only managers and restaurant bar managers can approve wastage\n      const canApprove = ['manager', 'owner', 'restaurant_bar_manager'].includes(currentUser.role?.name || '');\n      if (!canApprove) {\n        return res.status(403).json({ \n          message: \"Only managers can approve wastage\" \n        });\n      }\n      \n      const wastage = await storage.getWastage(id);\n      if (!wastage || wastage.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Wastage report not found\" });\n      }\n      \n      if (wastage.status !== 'pending_approval') {\n        return res.status(400).json({ message: \"Wastage already processed\" });\n      }\n      \n      if (approved) {\n        const approvedWastage = await storage.approveWastage(id, currentUser.id);\n        \n        // Notify the reporter\n        await storage.createNotification({\n          userId: wastage.recordedBy,\n          title: 'Wastage Approved',\n          message: `Your wastage report has been approved by ${currentUser.username}.`,\n          type: 'wastage_approved',\n          relatedId: id,\n          hotelId: currentUser.hotelId\n        });\n        \n        res.json(approvedWastage);\n      } else {\n        if (!rejectionReason || rejectionReason.trim().length < 10) {\n          return res.status(400).json({ \n            message: \"Rejection reason required (minimum 10 characters)\" \n          });\n        }\n        \n        const rejectedWastage = await storage.rejectWastage(id, currentUser.id, rejectionReason);\n        \n        // Notify the reporter\n        await storage.createNotification({\n          userId: wastage.recordedBy,\n          title: 'Wastage Rejected',\n          message: `Your wastage report has been rejected by ${currentUser.username}. Reason: ${rejectionReason}`,\n          type: 'wastage_rejected',\n          relatedId: id,\n          hotelId: currentUser.hotelId\n        });\n        \n        res.json(rejectedWastage);\n      }\n    } catch (error: any) {\n      console.error(\"Wastage approval error:\", error);\n      res.status(500).json({ message: error.message || \"Failed to process wastage approval\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/hotels/current/inventory\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const items = await storage.getInventoryItemsByHotel(user.hotelId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory items\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/inventory\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's inventory\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const items = await storage.getInventoryItemsByHotel(hotelId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory items\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/inventory/low-stock\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's inventory\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const items = await storage.getLowStockItems(hotelId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch low stock items\" });\n    }\n  });\n\n  // Vendor routes\n  app.get(\"/api/hotels/:hotelId/vendors\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's vendors\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const vendors = await storage.getVendorsByHotel(hotelId);\n      res.json(vendors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vendors\" });\n    }\n  });\n\n  // Restaurant table routes\n  app.get(\"/api/hotels/:hotelId/restaurant-tables\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's restaurant tables\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const tables = await storage.getRestaurantTablesByHotel(hotelId);\n      res.json(tables);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch restaurant tables\" });\n    }\n  });\n\n  // Tax routes\n  app.get(\"/api/hotels/:hotelId/taxes\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's taxes\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const taxes = await storage.getHotelTaxes(hotelId);\n      res.json(taxes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hotel taxes\" });\n    }\n  });\n\n  app.put(\"/api/hotels/:hotelId/taxes/:taxType\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId, taxType } = req.params;\n      const { isActive, percent } = req.body;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // CRITICAL: Only owner can modify tax settings to prevent tax evasion\n      if (currentUser.role?.name !== 'owner' && currentUser.role?.name !== 'super_admin') {\n        return res.status(403).json({ \n          message: \"Only the hotel owner can modify tax settings\" \n        });\n      }\n      \n      // Log tax configuration changes for audit trail\n      const existingTax = await storage.getHotelTax(hotelId, taxType);\n      await storage.createTaxChangeLog({\n        hotelId,\n        taxType,\n        previousPercent: existingTax?.percent || null,\n        newPercent: percent !== undefined ? percent : null,\n        previousActive: existingTax?.isActive ?? undefined,\n        newActive: isActive,\n        changedBy: currentUser.id\n      });\n      \n      const tax = await storage.updateHotelTax(hotelId, taxType, isActive, percent);\n      res.json(tax);\n    } catch (error) {\n      console.error(\"Tax update error:\", error);\n      res.status(400).json({ message: \"Failed to update tax\" });\n    }\n  });\n\n  // Voucher routes\n  app.get(\"/api/hotels/:hotelId/vouchers\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's vouchers\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const vouchers = await storage.getVouchersByHotel(hotelId);\n      res.json(vouchers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vouchers\" });\n    }\n  });\n\n  app.post(\"/api/vouchers\", requireActiveUser, async (req, res) => {\n    try {\n      const currentUser = req.user as any;\n      const voucherData = insertVoucherSchema.parse({\n        ...req.body,\n        hotelId: currentUser.hotelId,\n        createdBy: currentUser.id\n      });\n      \n      const voucher = await storage.createVoucher(voucherData);\n      res.status(201).json(voucher);\n    } catch (error) {\n      console.error(\"Voucher creation error:\", error);\n      res.status(400).json({ message: \"Failed to create voucher\" });\n    }\n  });\n\n  app.post(\"/api/vouchers/validate\", requireActiveUser, async (req, res) => {\n    try {\n      const { code } = req.body;\n      const currentUser = req.user as any;\n      \n      if (!code || typeof code !== 'string') {\n        return res.json({ valid: false, message: \"Voucher code required\" });\n      }\n      \n      // Find voucher by code\n      const voucherList = await db\n        .select()\n        .from(vouchers)\n        .where(eq(vouchers.code, code))\n        .limit(1);\n        \n      if (!voucherList.length) {\n        return res.json({ valid: false, message: \"Voucher not found\" });\n      }\n\n      const voucher = voucherList[0];\n      \n      // Verify hotel ownership\n      if (voucher.hotelId !== currentUser.hotelId) {\n        return res.json({ valid: false, message: \"Voucher not found\" });\n      }\n\n      // Check date validity\n      const now = new Date();\n      if (voucher.validFrom && new Date(voucher.validFrom) > now) {\n        return res.json({ valid: false, message: \"Voucher not yet valid\" });\n      }\n      if (voucher.validUntil && new Date(voucher.validUntil) < now) {\n        return res.json({ valid: false, message: \"Voucher has expired\" });\n      }\n\n      // CRITICAL: Check usage limit ATOMICALLY\n      if (voucher.maxUses) {\n        const currentUsage = Number(voucher.usedCount || 0);\n        if (currentUsage >= Number(voucher.maxUses)) {\n          return res.json({ valid: false, message: \"Voucher usage limit reached\" });\n        }\n      }\n\n      // Return voucher details (but don't increment yet - that happens on redemption)\n      res.json({\n        valid: true,\n        voucher: {\n          id: voucher.id,\n          code: voucher.code,\n          discountType: voucher.discountType,\n          discountAmount: voucher.discountAmount,\n          usedCount: voucher.usedCount,\n          maxUses: voucher.maxUses\n        }\n      });\n    } catch (error) {\n      console.error(\"Voucher validation error:\", error);\n      res.status(500).json({ valid: false, message: \"Error validating voucher\" });\n    }\n  });\n\n  app.post(\"/api/vouchers/redeem\", requireActiveUser, async (req, res) => {\n    try {\n      const { voucherId } = req.body;\n      const currentUser = req.user as any;\n      \n      // CRITICAL: Use database transaction for atomic operation with row locking\n      const result = await db.transaction(async (tx) => {\n        // Lock the voucher row for update (prevents concurrent redemption)\n        const [voucher] = await tx\n          .select()\n          .from(vouchers)\n          .where(eq(vouchers.id, voucherId))\n          .for('update');\n        \n        if (!voucher) {\n          throw new Error(\"Voucher not found\");\n        }\n        \n        // Verify hotel ownership\n        if (voucher.hotelId !== currentUser.hotelId) {\n          throw new Error(\"Voucher not found\");\n        }\n        \n        // Check date validity\n        const now = new Date();\n        if (voucher.validFrom && new Date(voucher.validFrom) > now) {\n          throw new Error(\"Voucher not yet valid\");\n        }\n        if (voucher.validUntil && new Date(voucher.validUntil) < now) {\n          throw new Error(\"Voucher has expired\");\n        }\n        \n        // Check usage limit\n        const currentUsage = Number(voucher.usedCount || 0);\n        if (voucher.maxUses && currentUsage >= Number(voucher.maxUses)) {\n          throw new Error(\"Voucher usage limit reached\");\n        }\n        \n        // CRITICAL: Atomically increment usage counter\n        const [updated] = await tx\n          .update(vouchers)\n          .set({ \n            usedCount: sql`${vouchers.usedCount} + 1`\n          })\n          .where(eq(vouchers.id, voucherId))\n          .returning();\n        \n        return updated;\n      });\n\n      res.json({ success: true, voucher: result });\n    } catch (error: any) {\n      console.error(\"Voucher redemption error:\", error);\n      res.status(400).json({ message: error.message || \"Failed to redeem voucher\" });\n    }\n  });\n\n  app.put(\"/api/vouchers/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user as any;\n      \n      // First, fetch the existing voucher to verify ownership\n      const existingVoucher = await db\n        .select()\n        .from(vouchers)\n        .where(eq(vouchers.id, id))\n        .limit(1);\n        \n      if (!existingVoucher.length) {\n        return res.status(404).json({ message: \"Voucher not found\" });\n      }\n      \n      // Verify hotel ownership\n      if (existingVoucher[0].hotelId !== currentUser.hotelId) {\n        return res.status(403).json({ message: \"Cannot modify vouchers from other hotels\" });\n      }\n\n      // Parse and sanitize the update data - prevent changing hotelId/createdBy\n      const { hotelId, createdBy, ...sanitizedData } = req.body;\n      const voucherData = insertVoucherSchema.partial().parse(sanitizedData);\n      \n      const voucher = await storage.updateVoucher(id, voucherData);\n      res.json(voucher);\n    } catch (error) {\n      console.error(\"Voucher update error:\", error);\n      res.status(400).json({ message: \"Failed to update voucher\" });\n    }\n  });\n\n  app.delete(\"/api/vouchers/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user as any;\n      \n      // First, fetch the existing voucher to verify ownership\n      const existingVoucher = await db\n        .select()\n        .from(vouchers)\n        .where(eq(vouchers.id, id))\n        .limit(1);\n        \n      if (!existingVoucher.length) {\n        return res.status(404).json({ message: \"Voucher not found\" });\n      }\n      \n      // Verify hotel ownership\n      if (existingVoucher[0].hotelId !== currentUser.hotelId) {\n        return res.status(403).json({ message: \"Cannot delete vouchers from other hotels\" });\n      }\n\n      await storage.deleteVoucher(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Voucher deletion error:\", error);\n      res.status(400).json({ message: \"Failed to delete voucher\" });\n    }\n  });\n\n  // Vehicle routes - specific routes must come before parameterized routes\n  app.get(\"/api/hotels/current/vehicle-logs\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.json([]);\n      }\n      const logs = await storage.getVehicleLogsByHotel(user.hotelId);\n      res.json(logs);\n    } catch (error: any) {\n      console.error(\"Vehicle logs fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch vehicle logs\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/vehicle-logs\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's vehicle logs\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const logs = await storage.getVehicleLogsByHotel(hotelId);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vehicle logs\" });\n    }\n  });\n\n  // Room service routes\n  app.get(\"/api/hotels/current/room-service-orders\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const orders = await storage.getRoomServiceOrdersByHotel(user.hotelId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch room service orders\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/room-service-orders\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's room service orders\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const orders = await storage.getRoomServiceOrdersByHotel(hotelId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch room service orders\" });\n    }\n  });\n\n  app.post(\"/api/room-service-orders\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const orderData = {\n        hotelId: user.hotelId,\n        roomId: req.body.roomId,\n        requestedBy: user.id,\n        status: req.body.status || 'pending',\n        specialInstructions: req.body.specialInstructions\n      };\n      \n      const order = await storage.createRoomServiceOrder(orderData);\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Room service order creation error:\", error);\n      res.status(400).json({ message: \"Failed to create room service order\" });\n    }\n  });\n\n  // Leave request routes\n  app.get(\"/api/hotels/current/leave-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      const canViewAllRequests = ['manager', 'owner', 'super_admin'].includes(userRole);\n      const isDepartmentHead = ['restaurant_bar_manager', 'housekeeping_supervisor', 'security_head'].includes(userRole);\n      \n      let leaveRequests;\n      if (canViewAllRequests) {\n        // Managers, owners, and super_admins can see all requests for the hotel\n        leaveRequests = await storage.getLeaveRequestsForManager(user.hotelId);\n      } else if (isDepartmentHead) {\n        // Department heads can see requests from their subordinates (all statuses, not just pending)\n        leaveRequests = await storage.getLeaveRequestsForApprover(userRole, user.hotelId);\n      } else {\n        // Regular staff can only see their own requests\n        leaveRequests = await storage.getLeaveRequestsByUser(user.id);\n      }\n      \n      res.json(leaveRequests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch leave requests\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/leave-requests/my-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.id) {\n        return res.status(400).json({ message: \"User not authenticated\" });\n      }\n      const leaveRequests = await storage.getLeaveRequestsByUser(user.id);\n      res.json(leaveRequests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user leave requests\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/leave-requests/pending-approvals\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // Role-based authorization - approvers include department heads, manager, and owner\n      const userRole = user.role?.name || '';\n      const canViewApprovals = [\n        'restaurant_bar_manager', \n        'housekeeping_supervisor', \n        'security_head', \n        'manager', \n        'owner'\n      ].includes(userRole);\n      \n      if (!canViewApprovals) {\n        return res.status(403).json({ message: \"You don't have permission to view leave approvals\" });\n      }\n      \n      const leaveRequests = await storage.getPendingLeaveRequestsForApprover(userRole, user.hotelId);\n      res.json(leaveRequests);\n    } catch (error) {\n      console.error(\"Failed to fetch pending leave requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending leave requests\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/leave-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // Validate user role has a valid approver in the hierarchy\n      const userRole = user.role?.name || '';\n      const roleHierarchy: Record<string, string> = {\n        // Restaurant & Bar staff → Restaurant and Bar Manager\n        'waiter': 'restaurant_bar_manager',\n        'cashier': 'restaurant_bar_manager',\n        'bartender': 'restaurant_bar_manager',\n        'kitchen_staff': 'restaurant_bar_manager',\n        'barista': 'restaurant_bar_manager',\n        // Housekeeping staff → Housekeeping Supervisor\n        'housekeeping_staff': 'housekeeping_supervisor',\n        // Security staff → Security Head\n        'security_guard': 'security_head',\n        'surveillance_officer': 'security_head',\n        // Department heads → Manager\n        'restaurant_bar_manager': 'manager',\n        'housekeeping_supervisor': 'manager',\n        'security_head': 'manager',\n        // Other staff → Manager\n        'finance': 'manager',\n        'front_desk': 'manager',\n        'storekeeper': 'manager',\n        // Manager → Owner\n        'manager': 'owner'\n      };\n\n      if (!roleHierarchy[userRole]) {\n        return res.status(403).json({ \n          message: `Your role (${userRole}) is not eligible to submit leave requests or does not have an assigned approver.` \n        });\n      }\n\n      const leaveRequestData = insertLeaveRequestSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId,\n        requestedBy: user.id,\n        status: 'pending'\n      });\n\n      const currentYear = new Date().getFullYear();\n      const startDate = new Date(leaveRequestData.startDate);\n      const endDate = new Date(leaveRequestData.endDate);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      // CRITICAL: Prevent backdating leave requests\n      if (startDate < today) {\n        return res.status(400).json({ \n          message: \"Cannot request leave for past dates. Contact your manager for backdated leave.\" \n        });\n      }\n      \n      // Prevent far future dates (max 2 years ahead)\n      const maxFutureDate = new Date(today);\n      maxFutureDate.setFullYear(today.getFullYear() + 2);\n      if (startDate > maxFutureDate || endDate > maxFutureDate) {\n        return res.status(400).json({ \n          message: \"Cannot request leave more than 2 years in advance\" \n        });\n      }\n      \n      // Validate date range\n      if (endDate < startDate) {\n        return res.status(400).json({ \n          message: \"End date must be after start date\" \n        });\n      }\n      \n      // Calculate number of leave days\n      const leaveDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n      \n      // Initialize leave balances if not exist\n      await storage.initializeLeaveBalances(user.id, user.hotelId, currentYear);\n      \n      // Check leave balance\n      const balance = await storage.getLeaveBalance(user.id, leaveRequestData.leaveType, currentYear);\n      if (!balance) {\n        return res.status(400).json({ message: \"Leave balance not found for this leave type\" });\n      }\n      \n      const remainingDays = parseFloat(balance.remainingDays);\n      if (leaveDays > remainingDays) {\n        return res.status(400).json({ \n          message: `Insufficient leave balance. You have ${remainingDays} days remaining, but requested ${leaveDays} days.` \n        });\n      }\n      \n      // CRITICAL: Check for overlapping leave\n      const overlapping = await storage.getOverlappingLeaves(user.id, startDate, endDate);\n      if (overlapping.length > 0) {\n        return res.status(400).json({ \n          message: \"You have overlapping approved or pending leave for these dates\" \n        });\n      }\n      \n      const leaveRequest = await storage.createLeaveRequest(leaveRequestData);\n      \n      // Broadcast WebSocket event to notify approvers\n      wsEvents.leaveRequestCreated(user.hotelId, leaveRequest);\n      \n      res.status(201).json(leaveRequest);\n    } catch (error) {\n      console.error(\"Leave request creation error:\", error);\n      res.status(400).json({ message: \"Invalid leave request data\" });\n    }\n  });\n\n  app.post(\"/api/leave-requests/:id/approve\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      // Check if user has approval authority\n      const userRole = user.role?.name || '';\n      const canApprove = [\n        'restaurant_bar_manager', \n        'housekeeping_supervisor', \n        'security_head', \n        'manager', \n        'owner', \n        'super_admin'\n      ].includes(userRole);\n      \n      if (!canApprove) {\n        return res.status(403).json({ message: \"You don't have permission to approve leave requests\" });\n      }\n\n      const { id } = req.params;\n      const { managerNotes } = req.body;\n      \n      // Verify the leave request exists and belongs to this hotel\n      const existingRequest = await storage.getLeaveRequest(id);\n      if (!existingRequest || existingRequest.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Leave request not found\" });\n      }\n\n      if (existingRequest.status !== 'pending') {\n        return res.status(400).json({ message: \"Leave request has already been processed\" });\n      }\n\n      // Calculate leave days\n      const startDate = new Date(existingRequest.startDate);\n      const endDate = new Date(existingRequest.endDate);\n      const leaveDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n      \n      const currentYear = new Date().getFullYear();\n      \n      if (!existingRequest.requestedBy) {\n        return res.status(400).json({ message: \"Leave request missing user information\" });\n      }\n      \n      // Get leave balance\n      const balance = await storage.getLeaveBalance(existingRequest.requestedBy, existingRequest.leaveType, currentYear);\n      if (!balance) {\n        return res.status(400).json({ message: \"Leave balance not found\" });\n      }\n\n      // Deduct from balance\n      const usedDays = parseFloat(balance.usedDays) + leaveDays;\n      const remainingDays = parseFloat(balance.remainingDays) - leaveDays;\n      \n      await storage.updateLeaveBalance(balance.id, {\n        usedDays: usedDays.toString(),\n        remainingDays: remainingDays.toString()\n      });\n\n      // Update leave request\n      const updateData: any = {\n        status: 'approved',\n        approvedBy: user.id,\n        approvalDate: new Date()\n      };\n      if (managerNotes) {\n        updateData.managerNotes = managerNotes;\n      }\n      const leaveRequest = await storage.updateLeaveRequest(id, updateData);\n\n      // Create notification\n      await storage.createNotification({\n        hotelId: user.hotelId,\n        userId: existingRequest.requestedBy,\n        type: 'leave_approved',\n        title: 'Leave Request Approved',\n        message: `Your ${existingRequest.leaveType} leave request from ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()} has been approved.`,\n        relatedId: id,\n        isRead: false\n      });\n\n      res.json(leaveRequest);\n    } catch (error) {\n      console.error(\"Leave request approval error:\", error);\n      res.status(500).json({ message: \"Failed to approve leave request\" });\n    }\n  });\n\n  app.post(\"/api/leave-requests/:id/reject\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      // Check if user has rejection authority\n      const userRole = user.role?.name || '';\n      const canReject = [\n        'restaurant_bar_manager', \n        'housekeeping_supervisor', \n        'security_head', \n        'manager', \n        'owner', \n        'super_admin'\n      ].includes(userRole);\n      \n      if (!canReject) {\n        return res.status(403).json({ message: \"You don't have permission to reject leave requests\" });\n      }\n\n      const { id } = req.params;\n      const { managerNotes } = req.body;\n      \n      // Verify the leave request exists and belongs to this hotel\n      const existingRequest = await storage.getLeaveRequest(id);\n      if (!existingRequest || existingRequest.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Leave request not found\" });\n      }\n\n      if (existingRequest.status !== 'pending') {\n        return res.status(400).json({ message: \"Leave request has already been processed\" });\n      }\n\n      // Update leave request\n      const updateData: any = {\n        status: 'rejected',\n        approvedBy: user.id,\n        approvalDate: new Date()\n      };\n      if (managerNotes) {\n        updateData.managerNotes = managerNotes;\n      }\n      const leaveRequest = await storage.updateLeaveRequest(id, updateData);\n\n      // Create notification\n      const startDate = new Date(existingRequest.startDate);\n      const endDate = new Date(existingRequest.endDate);\n      \n      await storage.createNotification({\n        hotelId: user.hotelId,\n        userId: existingRequest.requestedBy,\n        type: 'leave_rejected',\n        title: 'Leave Request Rejected',\n        message: `Your ${existingRequest.leaveType} leave request from ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()} has been rejected.${managerNotes ? ' Reason: ' + managerNotes : ''}`,\n        relatedId: id,\n        isRead: false\n      });\n\n      res.json(leaveRequest);\n    } catch (error) {\n      console.error(\"Leave request rejection error:\", error);\n      res.status(500).json({ message: \"Failed to reject leave request\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const notifications = await storage.getNotificationsByUser(user.id);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get(\"/api/notifications/unread\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const notifications = await storage.getUnreadNotificationsByUser(user.id);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch unread notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const { id } = req.params;\n      const notification = await storage.markNotificationAsRead(id);\n      res.json(notification);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.post(\"/api/notifications/read-all\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      await storage.markAllNotificationsAsRead(user.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  // Leave balance routes\n  app.get(\"/api/leave-balances\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const year = req.query.year ? parseInt(req.query.year as string) : new Date().getFullYear();\n      \n      // Initialize balances if not exist\n      await storage.initializeLeaveBalances(user.id, user.hotelId, year);\n      \n      const balances = await storage.getLeaveBalancesByUser(user.id, year);\n      res.json(balances);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch leave balances\" });\n    }\n  });\n\n  // Leave policy routes (Owner only)\n  app.get(\"/api/hotels/current/leave-policies\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const policies = await storage.getLeavePoliciesByHotel(user.hotelId);\n      res.json(policies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch leave policies\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/leave-policies\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const userRole = user.role?.name || '';\n      if (userRole !== 'owner') {\n        return res.status(403).json({ message: \"Only hotel owners can create leave policies\" });\n      }\n\n      const policyData = insertLeavePolicySchema.parse({\n        ...req.body,\n        hotelId: user.hotelId\n      });\n\n      const policy = await storage.createLeavePolicy(policyData);\n      res.json(policy);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid policy data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create leave policy\" });\n    }\n  });\n\n  app.patch(\"/api/leave-policies/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const userRole = user.role?.name || '';\n      if (userRole !== 'owner') {\n        return res.status(403).json({ message: \"Only hotel owners can update leave policies\" });\n      }\n\n      const { id } = req.params;\n      const policy = await storage.updateLeavePolicy(id, req.body);\n      res.json(policy);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update leave policy\" });\n    }\n  });\n\n  app.delete(\"/api/leave-policies/:id\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const userRole = user.role?.name || '';\n      if (userRole !== 'owner') {\n        return res.status(403).json({ message: \"Only hotel owners can delete leave policies\" });\n      }\n\n      const { id } = req.params;\n      await storage.deleteLeavePolicy(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete leave policy\" });\n    }\n  });\n\n  // Stock request routes\n  app.get(\"/api/hotels/current/stock-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      const canViewAll = ['manager', 'owner', 'storekeeper'].includes(userRole);\n      \n      if (!canViewAll) {\n        return res.status(403).json({ message: \"Only manager, owner, or storekeeper can view all stock requests\" });\n      }\n      \n      const requests = await storage.getStockRequestsByHotel(user.hotelId);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock requests\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/stock-requests/my-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const requests = await storage.getStockRequestsByUser(user.id);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock requests\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/stock-requests/pending\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      if (userRole !== 'storekeeper') {\n        return res.status(403).json({ message: \"Only storekeeper can view pending stock requests\" });\n      }\n      \n      const requests = await storage.getPendingStockRequestsForStorekeeper(user.hotelId);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pending stock requests\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/stock-requests/department\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      let department = req.query.department as string;\n      \n      if (userRole === 'restaurant_bar_manager') {\n        department = 'restaurant_bar';\n      } else if (userRole === 'housekeeping_supervisor') {\n        department = 'housekeeping';\n      } else if (userRole === 'security_head') {\n        department = 'security';\n      } else if (!['manager', 'owner', 'super_admin'].includes(userRole)) {\n        return res.status(403).json({ message: \"Not authorized to view department stock requests\" });\n      }\n      \n      if (!department) {\n        return res.status(400).json({ message: \"Department could not be determined\" });\n      }\n      \n      const requests = await storage.getStockRequestsByDepartment(user.hotelId, department);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch department stock requests\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/stock-requests\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      \n      // Determine department based on role\n      let department = '';\n      if (['bartender', 'kitchen_staff', 'barista', 'waiter', 'cashier', 'restaurant_bar_manager'].includes(userRole)) {\n        department = 'restaurant_bar';\n      } else if (['housekeeping_staff', 'housekeeping_supervisor'].includes(userRole)) {\n        department = 'housekeeping';\n      } else if (['security_guard', 'surveillance_officer', 'security_head'].includes(userRole)) {\n        department = 'security';\n      } else if (['storekeeper', 'finance', 'front_desk', 'manager', 'owner'].includes(userRole)) {\n        department = 'general';\n      } else {\n        return res.status(403).json({ message: \"Your role is not authorized to request stock\" });\n      }\n      \n      const requestData = insertStockRequestSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId,\n        requestedBy: user.id,\n        department,\n        status: 'pending'\n      });\n      \n      const request = await storage.createStockRequest(requestData);\n      \n      // Broadcast WebSocket event to storekeeper and managers\n      wsEvents.stockRequestCreated(user.hotelId, request);\n      \n      res.status(201).json(request);\n    } catch (error) {\n      console.error(\"Stock request creation error:\", error);\n      res.status(400).json({ message: \"Invalid stock request data\" });\n    }\n  });\n\n  app.patch(\"/api/hotels/current/stock-requests/:id/approve\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { id } = req.params;\n      \n      // Only storekeeper, manager, and owner can approve\n      const canApprove = ['storekeeper', 'manager', 'owner'].includes(user.role?.name || '');\n      if (!canApprove) {\n        return res.status(403).json({ \n          message: \"Only storekeeper, manager, or owner can approve stock requests\" \n        });\n      }\n      \n      const stockRequest = await storage.getStockRequest(id);\n      if (!stockRequest) {\n        return res.status(404).json({ message: \"Stock request not found\" });\n      }\n      \n      if (stockRequest.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Stock request not found\" });\n      }\n      \n      if (stockRequest.status !== 'pending') {\n        return res.status(400).json({ message: \"Only pending requests can be approved\" });\n      }\n      \n      // CRITICAL: Verify sufficient inventory before approval\n      const inventoryItem = await storage.getInventoryItem(stockRequest.itemId);\n      if (!inventoryItem) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      \n      const currentStock = Number(inventoryItem.baseStockQty || inventoryItem.stockQty || 0);\n      const requestedQty = Number(stockRequest.quantity || 0);\n      \n      // Convert units if needed\n      let requestedInBaseUnit = requestedQty;\n      if (stockRequest.unit && stockRequest.unit !== inventoryItem.baseUnit) {\n        const { convertToBase } = await import('@shared/measurements');\n        const category = (inventoryItem.measurementCategory || 'weight') as any;\n        \n        try {\n          requestedInBaseUnit = convertToBase(\n            requestedQty,\n            stockRequest.unit as any,\n            (inventoryItem.baseUnit || 'kg') as any,\n            category,\n            inventoryItem.conversionProfile as any\n          );\n        } catch (error) {\n          console.error('Unit conversion error:', error);\n        }\n      }\n      \n      if (requestedInBaseUnit > currentStock) {\n        return res.status(400).json({ \n          message: `Insufficient inventory. Available: ${currentStock} ${inventoryItem.baseUnit}, Requested: ${requestedInBaseUnit} ${inventoryItem.baseUnit}`,\n          availableStock: currentStock,\n          requestedStock: requestedInBaseUnit,\n          unit: inventoryItem.baseUnit\n        });\n      }\n      \n      // Approve the request\n      const approvedRequest = await storage.approveStockRequest(id, user.id);\n      \n      // Broadcast WebSocket event\n      wsEvents.stockRequestUpdated(user.hotelId, approvedRequest);\n      \n      res.json(approvedRequest);\n    } catch (error) {\n      console.error(\"Stock request approval error:\", error);\n      res.status(500).json({ message: \"Failed to approve stock request\" });\n    }\n  });\n\n  app.patch(\"/api/hotels/current/stock-requests/:id/deliver\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      if (userRole !== 'storekeeper') {\n        return res.status(403).json({ message: \"Only storekeeper can deliver stock requests\" });\n      }\n      \n      const { id } = req.params;\n      const existingRequest = await storage.getStockRequest(id);\n      if (!existingRequest || existingRequest.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Stock request not found\" });\n      }\n      \n      if (existingRequest.status !== 'approved') {\n        return res.status(400).json({ message: \"Can only deliver approved stock requests\" });\n      }\n      \n      const request = await storage.deliverStockRequest(id, user.id);\n      \n      // Broadcast WebSocket event\n      wsEvents.stockRequestUpdated(user.hotelId, request);\n      \n      res.json(request);\n    } catch (error) {\n      console.error(\"Stock request delivery error:\", error);\n      res.status(400).json({ message: \"Failed to deliver stock request\" });\n    }\n  });\n\n  app.post(\"/api/hotels/current/vehicle-logs\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      // Validate request body first, then add server-controlled fields\n      const validatedData = insertVehicleLogSchema.parse(req.body);\n      const logData = {\n        ...validatedData,\n        hotelId: user.hotelId,\n        recordedBy: user.id\n      };\n      const log = await storage.createVehicleLog(logData);\n      res.status(201).json(log);\n    } catch (error) {\n      console.error(\"Vehicle log creation error:\", error);\n      res.status(400).json({ message: \"Invalid vehicle log data\" });\n    }\n  });\n\n  app.patch(\"/api/vehicle-logs/:id/checkout\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const { id } = req.params;\n      const { checkoutTime } = req.body;\n      \n      const log = await storage.getVehicleLog(id);\n      if (!log || log.hotelId !== currentUser.hotelId) {\n        return res.status(404).json({ message: \"Vehicle log not found\" });\n      }\n      \n      if (log.checkOut) {\n        return res.status(400).json({ message: \"Vehicle already checked out\" });\n      }\n      \n      // Check authorization (only creator or Security Head can checkout)\n      const userRole = currentUser.role?.name || '';\n      const isAuthorized = log.recordedBy === currentUser.id || userRole === 'security_head';\n      \n      if (!isAuthorized) {\n        return res.status(403).json({ message: \"Unauthorized to checkout this vehicle\" });\n      }\n      \n      // CRITICAL: Prevent immediate checkout (suspicious pattern)\n      const checkinTime = log.checkIn ? new Date(log.checkIn) : new Date();\n      const checkout = checkoutTime ? new Date(checkoutTime) : new Date();\n      const minutesDiff = (checkout.getTime() - checkinTime.getTime()) / (1000 * 60);\n      \n      // If checkout is less than 5 minutes after checkin\n      if (minutesDiff < 5) {\n        const canOverride = ['manager', 'owner', 'security_head'].includes(currentUser.role?.name || '');\n        \n        if (!canOverride) {\n          return res.status(400).json({ \n            message: \"Suspicious checkout timing. Vehicle was checked in less than 5 minutes ago. Contact security supervisor.\" \n          });\n        }\n        \n        // Log quick checkout for review\n        await storage.createSecurityAlert({\n          hotelId: log.hotelId,\n          type: 'quick_vehicle_checkout',\n          description: `Vehicle ${log.vehicleNumber} checked out ${minutesDiff.toFixed(1)} minutes after check-in`,\n          vehicleLogId: id,\n          performedBy: currentUser.id,\n          overriddenBy: currentUser.id\n        });\n      }\n      \n      const updatedLog = await storage.updateVehicleLog(id, { checkOut: checkout });\n      res.json(updatedLog);\n    } catch (error) {\n      console.error(\"Vehicle checkout error:\", error);\n      res.status(500).json({ message: \"Failed to checkout vehicle\" });\n    }\n  });\n\n  // Security Head routes - Create Surveillance Officer\n  app.post(\"/api/hotels/current/security/officers\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // Only Security Head can create Surveillance Officers\n      const userRole = user.role?.name || '';\n      if (userRole !== 'security_head') {\n        return res.status(403).json({ message: \"Only Security Head can create Surveillance Officers\" });\n      }\n      \n      // Get the Surveillance Officer role\n      const officerRole = await storage.getRoleByName('surveillance_officer');\n      if (!officerRole) {\n        return res.status(400).json({ message: \"Surveillance Officer role not found\" });\n      }\n      \n      const { username, password, email, phone } = req.body;\n      \n      // Validate required fields\n      if (!username || !password || !email || !phone) {\n        return res.status(400).json({ message: \"Username, password, email, and phone are required\" });\n      }\n      \n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(409).json({ message: \"Username already exists\" });\n      }\n      \n      // Hash password using standard hashPassword function\n      const { hashPassword } = await import(\"./auth.js\");\n      const passwordHash = await hashPassword(password);\n      \n      const userData = insertUserSchema.parse({\n        username,\n        email,\n        phone,\n        passwordHash,\n        roleId: officerRole.id,\n        hotelId: user.hotelId,\n        createdBy: user.id,\n        isActive: true\n      });\n      \n      const officer = await storage.createUser(userData);\n      \n      // Sanitize response\n      const { passwordHash: _, ...sanitizedOfficer } = officer;\n      res.status(201).json(sanitizedOfficer);\n    } catch (error) {\n      console.error(\"Officer creation error:\", error);\n      res.status(400).json({ message: \"Failed to create Surveillance Officer\" });\n    }\n  });\n\n  // Security Head routes - Get Surveillance Officers\n  app.get(\"/api/hotels/current/security/officers\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // Only Security Head can view officers\n      const userRole = user.role?.name || '';\n      if (userRole !== 'security_head') {\n        return res.status(403).json({ message: \"Only Security Head can view Surveillance Officers\" });\n      }\n      \n      const allUsers = await storage.getUsersByHotel(user.hotelId);\n      const officers = allUsers.filter(u => u.role?.name === 'surveillance_officer');\n      res.json(officers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch Surveillance Officers\" });\n    }\n  });\n\n  // Security Head routes - Create task for officer\n  app.post(\"/api/hotels/current/security/tasks\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // Only Security Head can create officer tasks\n      const userRole = user.role?.name || '';\n      if (userRole !== 'security_head') {\n        return res.status(403).json({ message: \"Only Security Head can create tasks\" });\n      }\n      \n      const taskData = insertTaskSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId,\n        createdBy: user.id\n      });\n      \n      const task = await storage.createTask(taskData);\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Task creation error:\", error);\n      res.status(400).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  // Security routes - Get tasks (Head sees all officer tasks, Officer sees assigned tasks)\n  app.get(\"/api/hotels/current/security/tasks\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      \n      if (userRole === 'security_head') {\n        // Security Head sees all tasks\n        const allTasks = await storage.getTasksByHotel(user.hotelId);\n        res.json(allTasks);\n      } else if (userRole === 'surveillance_officer') {\n        // Surveillance Officer sees only assigned tasks\n        const myTasks = await storage.getTasksByUser(user.id);\n        res.json(myTasks);\n      } else {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  // Update task status (for Surveillance Officer)\n  app.patch(\"/api/tasks/:id/status\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      // Verify the task exists\n      const task = await storage.getTask(id);\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      // Check if user is assigned to this task or is the creator\n      if (task.assignedTo !== user.id && task.createdBy !== user.id) {\n        return res.status(403).json({ message: \"Unauthorized to update this task\" });\n      }\n      \n      const updatedTask = await storage.updateTask(id, { status });\n      res.json(updatedTask);\n    } catch (error) {\n      console.error(\"Task update error:\", error);\n      res.status(400).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  // Forward maintenance request to finance (Security Head only)\n  app.post(\"/api/maintenance-requests/:id/forward\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      const { financeUserId } = req.body;\n      \n      // Only Security Head can forward requests\n      const userRole = user.role?.name || '';\n      if (userRole !== 'security_head') {\n        return res.status(403).json({ message: \"Only Security Head can forward maintenance requests\" });\n      }\n      \n      // Verify the maintenance request exists and belongs to this hotel\n      const request = await storage.getMaintenanceRequest(id);\n      if (!request || request.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Maintenance request not found\" });\n      }\n      \n      // Verify the finance user exists\n      const financeUser = await storage.getUser(financeUserId);\n      if (!financeUser || financeUser.hotelId !== user.hotelId) {\n        return res.status(404).json({ message: \"Finance user not found\" });\n      }\n      \n      // Update the maintenance request\n      const updatedRequest = await storage.updateMaintenanceRequest(id, {\n        assignedTo: financeUserId,\n        status: 'forwarded'\n      });\n      \n      res.json(updatedRequest);\n    } catch (error) {\n      console.error(\"Maintenance forward error:\", error);\n      res.status(400).json({ message: \"Failed to forward maintenance request\" });\n    }\n  });\n\n  // Duty status toggle (for any user)\n  app.patch(\"/api/users/me/duty\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { isOnline } = req.body;\n      \n      if (typeof isOnline !== 'boolean') {\n        return res.status(400).json({ message: \"Invalid duty status\" });\n      }\n      \n      // CRITICAL: Verify user is still active - prevent deactivated users from going online\n      if (!user.isActive) {\n        return res.status(403).json({ \n          message: \"Your account has been deactivated. Contact your manager.\" \n        });\n      }\n      \n      await storage.updateUserOnlineStatus(user.id, isOnline);\n      res.json({ success: true, isOnline });\n    } catch (error) {\n      console.error(\"Duty status update error:\", error);\n      res.status(400).json({ message: \"Failed to update duty status\" });\n    }\n  });\n\n  // Meal plan routes\n  app.get(\"/api/hotels/current/meal-plans\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const plans = await storage.getMealPlansByHotel(user.hotelId);\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch meal plans\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/meal-plans\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's meal plans\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const plans = await storage.getMealPlansByHotel(hotelId);\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch meal plans\" });\n    }\n  });\n\n  app.post(\"/api/hotels/:hotelId/meal-plans\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { hotelId } = req.params;\n      \n      // Only managers, owners, and super_admins can create meal plans\n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Only managers can manage meal plans\" });\n      }\n      \n      const planData = insertMealPlanSchema.parse({\n        ...req.body,\n        hotelId\n      });\n      const plan = await storage.createMealPlan(planData);\n      res.status(201).json(plan);\n    } catch (error) {\n      console.error(\"Meal plan creation error:\", error);\n      res.status(400).json({ message: \"Invalid meal plan data\" });\n    }\n  });\n\n  app.put(\"/api/hotels/:hotelId/meal-plans/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id, hotelId } = req.params;\n      \n      // Only managers, owners, and super_admins can update meal plans\n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Only managers can manage meal plans\" });\n      }\n      \n      const planData = insertMealPlanSchema.partial().parse(req.body);\n      const plan = await storage.updateMealPlan(id, planData);\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Meal plan update error:\", error);\n      res.status(400).json({ message: \"Failed to update meal plan\" });\n    }\n  });\n\n  app.delete(\"/api/hotels/:hotelId/meal-plans/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id, hotelId } = req.params;\n      \n      // Only managers, owners, and super_admins can delete meal plans\n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Only managers can manage meal plans\" });\n      }\n      \n      const success = await storage.deleteMealPlan(id, hotelId);\n      if (success) {\n        res.status(204).send();\n      } else {\n        res.status(404).json({ message: \"Meal plan not found\" });\n      }\n    } catch (error) {\n      console.error(\"Meal plan deletion error:\", error);\n      res.status(400).json({ message: \"Failed to delete meal plan\" });\n    }\n  });\n\n  // Meal voucher routes\n  app.post(\"/api/meal-vouchers/generate\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const { roomId, guestName, mealPlanId, mealPlanType, numberOfPersons, checkInDate, checkOutDate, hotelId } = req.body;\n      \n      const checkIn = new Date(checkInDate);\n      const checkOut = new Date(checkOutDate);\n      const nights = Math.max(1, Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 3600 * 24)));\n      \n      const vouchers = [];\n      for (let i = 0; i < nights; i++) {\n        const voucherDate = new Date(checkIn);\n        voucherDate.setDate(voucherDate.getDate() + i);\n        \n        const voucher = await storage.createMealVoucher({\n          hotelId,\n          roomId,\n          guestName,\n          mealPlanId: mealPlanId || null,\n          mealPlanType,\n          numberOfPersons,\n          voucherDate,\n          status: 'unused'\n        });\n        vouchers.push(voucher);\n      }\n      \n      res.json({ success: true, vouchers });\n    } catch (error) {\n      console.error(\"Meal voucher generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate meal vouchers\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/meal-vouchers\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      const { status, date } = req.query;\n      \n      const vouchers = await storage.getMealVouchers(user.hotelId, {\n        status: status as string,\n        date: date ? new Date(date as string) : undefined\n      });\n      \n      res.json(vouchers);\n    } catch (error) {\n      console.error(\"Get meal vouchers error:\", error);\n      res.status(500).json({ message: \"Failed to get meal vouchers\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/meal-vouchers\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const { hotelId } = req.params;\n      const { status, date } = req.query;\n      \n      const vouchers = await storage.getMealVouchers(hotelId, {\n        status: status as string,\n        date: date ? new Date(date as string) : undefined\n      });\n      \n      res.json(vouchers);\n    } catch (error) {\n      console.error(\"Get meal vouchers error:\", error);\n      res.status(500).json({ message: \"Failed to get meal vouchers\" });\n    }\n  });\n\n  app.get(\"/api/meal-vouchers/room/:roomId\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const { roomId } = req.params;\n      const vouchers = await storage.getMealVouchersByRoom(roomId);\n      \n      res.json(vouchers);\n    } catch (error) {\n      console.error(\"Get room meal vouchers error:\", error);\n      res.status(500).json({ message: \"Failed to get room meal vouchers\" });\n    }\n  });\n\n  app.post(\"/api/meal-vouchers/:id/redeem\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      const { id } = req.params;\n      const { notes } = req.body;\n      \n      const voucher = await storage.redeemMealVoucher(id, user.id, notes);\n      \n      if (!voucher) {\n        return res.status(404).json({ message: \"Voucher not found or already redeemed\" });\n      }\n      \n      res.json({ success: true, voucher });\n    } catch (error) {\n      console.error(\"Meal voucher redemption error:\", error);\n      res.status(500).json({ message: \"Failed to redeem meal voucher\" });\n    }\n  });\n\n  // Hall booking routes\n  app.get(\"/api/hotels/current/hall-bookings\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      const bookings = await storage.getHallBookingsByHotel(user.hotelId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Get hall bookings error:\", error);\n      res.status(500).json({ message: \"Failed to get hall bookings\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:hotelId/hall-bookings\", requireActiveUser, async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify user can access this hotel's hall bookings\n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const bookings = await storage.getHallBookingsByHotel(hotelId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Get hall bookings error:\", error);\n      res.status(500).json({ message: \"Failed to get hall bookings\" });\n    }\n  });\n\n  app.get(\"/api/halls/:hallId/bookings\", requireActiveUser, async (req, res) => {\n    try {\n      const { hallId } = req.params;\n      const currentUser = req.user as any;\n      \n      // SECURITY: Verify hall belongs to user's hotel\n      const hall = await storage.getHall(hallId);\n      if (!hall) {\n        return res.status(404).json({ message: \"Hall not found\" });\n      }\n      \n      if (currentUser.role?.name !== 'super_admin' && currentUser.hotelId !== hall.hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const bookings = await storage.getHallBookingsByHall(hallId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Get hall bookings by hall error:\", error);\n      res.status(500).json({ message: \"Failed to get hall bookings\" });\n    }\n  });\n\n  app.get(\"/api/hall-bookings/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const { id } = req.params;\n      const booking = await storage.getHallBooking(id);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Get hall booking error:\", error);\n      res.status(500).json({ message: \"Failed to get hall booking\" });\n    }\n  });\n\n  app.post(\"/api/halls/:hallId/check-availability\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const { hallId } = req.params;\n      const { startTime, endTime, excludeBookingId } = req.body;\n      \n      const isAvailable = await storage.checkHallAvailability(\n        hallId,\n        new Date(startTime),\n        new Date(endTime),\n        excludeBookingId\n      );\n      \n      res.json({ available: isAvailable });\n    } catch (error) {\n      console.error(\"Check hall availability error:\", error);\n      res.status(500).json({ message: \"Failed to check availability\" });\n    }\n  });\n\n  app.post(\"/api/hotels/:hotelId/hall-bookings\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { hotelId } = req.params;\n      \n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Only managers and owners can create bookings\" });\n      }\n      \n      const bookingData = insertHallBookingSchema.parse({\n        ...req.body,\n        hotelId,\n        createdBy: user.id\n      });\n      \n      const isAvailable = await storage.checkHallAvailability(\n        bookingData.hallId,\n        bookingData.bookingStartTime,\n        bookingData.bookingEndTime\n      );\n      \n      if (!isAvailable) {\n        return res.status(409).json({ message: \"Hall is not available for the selected time\" });\n      }\n      \n      const booking = await storage.createHallBooking(bookingData);\n      res.status(201).json(booking);\n    } catch (error) {\n      console.error(\"Create hall booking error:\", error);\n      res.status(400).json({ message: \"Failed to create hall booking\" });\n    }\n  });\n\n  app.put(\"/api/hall-bookings/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      \n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      const isFinance = userRole === 'finance';\n      const isCashier = userRole === 'cashier';\n      const isFrontDesk = userRole === 'front_desk';\n      \n      // Cashier and front desk have no update permissions\n      if (isCashier || isFrontDesk) {\n        return res.status(403).json({ message: \"Only managers and owners can update bookings\" });\n      }\n      \n      const booking = await storage.getHallBooking(id);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      const bookingData = insertHallBookingSchema.partial().parse(req.body);\n      \n      // Finance can only update payment-related fields\n      if (isFinance) {\n        const paymentFields = ['totalAmount', 'advancePaid', 'balanceDue', 'paymentMethod'];\n        const requestedFields = Object.keys(bookingData);\n        const hasNonPaymentFields = requestedFields.some(field => !paymentFields.includes(field));\n        \n        if (hasNonPaymentFields) {\n          return res.status(403).json({ message: \"Finance can only update payment-related fields\" });\n        }\n      }\n      \n      // Check availability only for managers/front desk when changing dates\n      if (canManage && (bookingData.bookingStartTime || bookingData.bookingEndTime)) {\n        const startTime = bookingData.bookingStartTime || booking.bookingStartTime!;\n        const endTime = bookingData.bookingEndTime || booking.bookingEndTime!;\n        \n        const isAvailable = await storage.checkHallAvailability(\n          booking.hallId,\n          startTime,\n          endTime,\n          id\n        );\n        \n        if (!isAvailable) {\n          return res.status(409).json({ message: \"Hall is not available for the selected time\" });\n        }\n      }\n      \n      // Managers and front desk can update all fields\n      if (!canManage && !isFinance) {\n        return res.status(403).json({ message: \"Insufficient permissions to update bookings\" });\n      }\n      \n      const updatedBooking = await storage.updateHallBooking(id, bookingData);\n      res.json(updatedBooking);\n    } catch (error) {\n      console.error(\"Update hall booking error:\", error);\n      res.status(400).json({ message: \"Failed to update hall booking\" });\n    }\n  });\n\n  app.post(\"/api/hall-bookings/:id/confirm\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      \n      const userRole = user.role?.name || '';\n      const canConfirm = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canConfirm) {\n        return res.status(403).json({ message: \"Only managers and owners can confirm bookings\" });\n      }\n      \n      const booking = await storage.confirmHallBooking(id, user.id);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Confirm hall booking error:\", error);\n      res.status(400).json({ message: \"Failed to confirm hall booking\" });\n    }\n  });\n\n  app.post(\"/api/hall-bookings/:id/cancel\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      const { reason } = req.body;\n      \n      const userRole = user.role?.name || '';\n      const canCancel = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canCancel) {\n        return res.status(403).json({ message: \"Only managers and owners can cancel bookings\" });\n      }\n      \n      if (!reason) {\n        return res.status(400).json({ message: \"Cancellation reason is required\" });\n      }\n      \n      const booking = await storage.cancelHallBooking(id, user.id, reason);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Cancel hall booking error:\", error);\n      res.status(400).json({ message: \"Failed to cancel hall booking\" });\n    }\n  });\n\n  // PATCH endpoint for final billing updates\n  app.patch(\"/api/hotels/:hotelId/hall-bookings/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { hotelId, id } = req.params;\n      \n      if (user.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin', 'front_desk', 'finance', 'cashier'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const booking = await storage.getHallBooking(id);\n      if (!booking || booking.hotelId !== hotelId) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      const updateData: any = {};\n      if (req.body.actualNumberOfPeople !== undefined) updateData.actualNumberOfPeople = req.body.actualNumberOfPeople;\n      if (req.body.customServices !== undefined) updateData.customServices = req.body.customServices;\n      if (req.body.totalAmount !== undefined) updateData.totalAmount = req.body.totalAmount;\n      if (req.body.balanceDue !== undefined) updateData.balanceDue = req.body.balanceDue;\n      if (req.body.paymentMethod !== undefined) updateData.paymentMethod = req.body.paymentMethod;\n      if (req.body.status !== undefined) updateData.status = req.body.status;\n      if (req.body.status === 'completed') updateData.finalizedBy = user.id;\n      if (req.body.status === 'completed') updateData.finalizedAt = new Date();\n      \n      const updatedBooking = await storage.updateHallBooking(id, updateData);\n      res.json(updatedBooking);\n    } catch (error) {\n      console.error(\"Update hall booking error:\", error);\n      res.status(400).json({ message: \"Failed to update hall booking\" });\n    }\n  });\n\n  // POST endpoint for recording booking payments\n  app.post(\"/api/hotels/:hotelId/booking-payments\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { hotelId } = req.params;\n      \n      if (user.hotelId !== hotelId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const userRole = user.role?.name || '';\n      const canRecord = ['manager', 'owner', 'super_admin', 'front_desk', 'finance', 'cashier'].includes(userRole);\n      \n      if (!canRecord) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const paymentData = {\n        hotelId,\n        bookingId: req.body.bookingId,\n        amount: req.body.amount,\n        paymentMethod: req.body.paymentMethod,\n        receiptNumber: req.body.receiptNumber || null,\n        notes: req.body.notes || null,\n        recordedBy: user.id\n      };\n      \n      const payment = await storage.createBookingPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      console.error(\"Create booking payment error:\", error);\n      res.status(400).json({ message: \"Failed to record payment\" });\n    }\n  });\n\n  // Hall availability calendar endpoint\n  app.get(\"/api/halls/:hallId/calendar\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { hallId } = req.params;\n      const { date } = req.query;\n      \n      // Verify hall belongs to user's hotel\n      const hall = await db.query.halls.findFirst({\n        where: and(\n          eq(halls.id, hallId),\n          eq(halls.hotelId, user.hotelId)\n        )\n      });\n      \n      if (!hall) {\n        return res.status(404).json({ message: \"Hall not found\" });\n      }\n      \n      const targetDate = date ? new Date(date as string) : new Date();\n      const startOfDay = new Date(targetDate);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(targetDate);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      const bookings = await db.query.hallBookings.findMany({\n        where: and(\n          eq(hallBookings.hallId, hallId),\n          eq(hallBookings.hotelId, user.hotelId),\n          sql`${hallBookings.bookingStartTime} < ${endOfDay.toISOString()}`,\n          sql`${hallBookings.bookingEndTime} > ${startOfDay.toISOString()}`\n        ),\n        with: {\n          guest: true\n        }\n      });\n      \n      const slots = bookings.map(booking => ({\n        id: booking.id,\n        startTime: booking.bookingStartTime,\n        endTime: booking.bookingEndTime,\n        status: booking.status,\n        customerName: booking.customerName,\n        color: booking.status === 'confirmed' ? 'red' : \n               booking.status === 'in_progress' ? 'yellow' : 'gray'\n      }));\n      \n      res.json({ date: targetDate, slots });\n    } catch (error) {\n      console.error(\"Get hall calendar error:\", error);\n      res.status(500).json({ message: \"Failed to get hall calendar\" });\n    }\n  });\n\n  // Quick availability check with suggestions\n  app.post(\"/api/halls/check-availability-quick\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { hallId, date, startTime, endTime } = req.body;\n      \n      // Verify hall belongs to user's hotel\n      const hall = await db.query.halls.findFirst({\n        where: and(\n          eq(halls.id, hallId),\n          eq(halls.hotelId, user.hotelId)\n        )\n      });\n      \n      if (!hall) {\n        return res.status(404).json({ message: \"Hall not found\" });\n      }\n      \n      const start = new Date(`${date}T${startTime}:00`);\n      const end = new Date(`${date}T${endTime}:00`);\n      \n      const isAvailable = await storage.checkHallAvailability(hallId, start, end);\n      \n      let suggestions: Array<{ startTime: string; endTime: string }> = [];\n      if (!isAvailable) {\n        // Find alternative slots on the same day\n        const dayStart = new Date(date);\n        dayStart.setHours(0, 0, 0, 0);\n        const dayEnd = new Date(date);\n        dayEnd.setHours(23, 59, 59, 999);\n        \n        const bookings = await db.query.hallBookings.findMany({\n          where: and(\n            eq(hallBookings.hallId, hallId),\n            eq(hallBookings.hotelId, user.hotelId),\n            ne(hallBookings.status, 'cancelled'),\n            sql`${hallBookings.bookingStartTime} < ${dayEnd.toISOString()}`,\n            sql`${hallBookings.bookingEndTime} > ${dayStart.toISOString()}`\n          ),\n          orderBy: [asc(hallBookings.bookingStartTime)]\n        });\n        \n        // Suggest slots between bookings\n        const duration = (end.getTime() - start.getTime()) / (1000 * 60 * 60); // hours\n        const slots = [];\n        \n        let currentTime = new Date(dayStart);\n        currentTime.setHours(6, 0, 0, 0); // Start from 6 AM\n        \n        for (const booking of bookings) {\n          const bookingStart = new Date(booking.bookingStartTime!);\n          const gap = (bookingStart.getTime() - currentTime.getTime()) / (1000 * 60 * 60);\n          \n          if (gap >= duration) {\n            slots.push({\n              startTime: currentTime.toISOString(),\n              endTime: new Date(currentTime.getTime() + duration * 60 * 60 * 1000).toISOString()\n            });\n          }\n          currentTime = new Date(booking.bookingEndTime!);\n        }\n        \n        // Check if there's time left at the end of the day\n        const endOfOperations = new Date(dayStart);\n        endOfOperations.setHours(22, 0, 0, 0); // Until 10 PM\n        const finalGap = (endOfOperations.getTime() - currentTime.getTime()) / (1000 * 60 * 60);\n        \n        if (finalGap >= duration) {\n          slots.push({\n            startTime: currentTime.toISOString(),\n            endTime: new Date(currentTime.getTime() + duration * 60 * 60 * 1000).toISOString()\n          });\n        }\n        \n        suggestions = slots.slice(0, 3); // Return top 3 suggestions\n      }\n      \n      res.json({ available: isAvailable, suggestions });\n    } catch (error) {\n      console.error(\"Quick availability check error:\", error);\n      res.status(500).json({ message: \"Failed to check availability\" });\n    }\n  });\n\n  // Guest lookup/search endpoint\n  app.get(\"/api/guests/search\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { phone, email } = req.query;\n      \n      if (!phone && !email) {\n        return res.status(400).json({ message: \"Phone or email is required\" });\n      }\n      \n      let guest = null;\n      \n      if (phone) {\n        guest = await db.query.guests.findFirst({\n          where: and(\n            eq(guests.hotelId, user.hotelId),\n            eq(guests.phone, phone as string)\n          )\n        });\n      } else if (email) {\n        guest = await db.query.guests.findFirst({\n          where: and(\n            eq(guests.hotelId, user.hotelId),\n            eq(guests.email, email as string)\n          )\n        });\n      }\n      \n      res.json(guest || null);\n    } catch (error) {\n      console.error(\"Guest search error:\", error);\n      res.status(500).json({ message: \"Failed to search guest\" });\n    }\n  });\n\n  // Service Package endpoints\n  app.get(\"/api/service-packages\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      \n      const packages = await db.query.servicePackages.findMany({\n        where: eq(servicePackages.hotelId, user.hotelId)\n      });\n      \n      res.json(packages);\n    } catch (error) {\n      console.error(\"Get service packages error:\", error);\n      res.status(500).json({ message: \"Failed to get service packages\" });\n    }\n  });\n\n  app.post(\"/api/service-packages\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      \n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Only managers can create service packages\" });\n      }\n      \n      const packageData = insertServicePackageSchema.parse({\n        ...req.body,\n        hotelId: user.hotelId\n      });\n      \n      const [newPackage] = await db.insert(servicePackages)\n        .values(packageData)\n        .returning();\n      \n      res.status(201).json(newPackage);\n    } catch (error) {\n      console.error(\"Create service package error:\", error);\n      res.status(400).json({ message: \"Failed to create service package\" });\n    }\n  });\n\n  app.put(\"/api/service-packages/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      \n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Only managers can update service packages\" });\n      }\n      \n      const packageData = insertServicePackageSchema.partial().parse(req.body);\n      \n      const [updated] = await db.update(servicePackages)\n        .set({ ...packageData, updatedAt: new Date() })\n        .where(and(\n          eq(servicePackages.id, id),\n          eq(servicePackages.hotelId, user.hotelId)\n        ))\n        .returning();\n      \n      if (!updated) {\n        return res.status(404).json({ message: \"Service package not found\" });\n      }\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Update service package error:\", error);\n      res.status(400).json({ message: \"Failed to update service package\" });\n    }\n  });\n\n  app.delete(\"/api/service-packages/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const user = req.user as any;\n      const { id } = req.params;\n      \n      const userRole = user.role?.name || '';\n      const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n      \n      if (!canManage) {\n        return res.status(403).json({ message: \"Only managers can delete service packages\" });\n      }\n      \n      await db.delete(servicePackages)\n        .where(and(\n          eq(servicePackages.id, id),\n          eq(servicePackages.hotelId, user.hotelId)\n        ));\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete service package error:\", error);\n      res.status(400).json({ message: \"Failed to delete service package\" });\n    }\n  });\n\n  // Payment recording endpoints\n  app.get(\"/api/bookings/:bookingId/payments\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      const { bookingId } = req.params;\n      \n      const payments = await db.query.bookingPayments.findMany({\n        where: eq(bookingPayments.bookingId, bookingId),\n        with: {\n          recordedBy: {\n            columns: {\n              id: true,\n              username: true\n            }\n          }\n        },\n        orderBy: [asc(bookingPayments.createdAt)]\n      });\n      \n      res.json(payments);\n    } catch (error) {\n      console.error(\"Get booking payments error:\", error);\n      res.status(500).json({ message: \"Failed to get booking payments\" });\n    }\n  });\n\n  app.post(\"/api/bookings/:bookingId/payments\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { bookingId } = req.params;\n      \n      const userRole = user.role?.name || '';\n      const canRecord = ['manager', 'owner', 'super_admin', 'front_desk', 'cashier', 'finance'].includes(userRole);\n      \n      if (!canRecord) {\n        return res.status(403).json({ message: \"Insufficient permissions to record payments\" });\n      }\n      \n      // Get the booking to update balance\n      const booking = await db.query.hallBookings.findFirst({\n        where: eq(hallBookings.id, bookingId)\n      });\n      \n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      const paymentData = insertBookingPaymentSchema.parse({\n        ...req.body,\n        bookingId,\n        hotelId: user.hotelId,\n        recordedBy: user.id\n      });\n      \n      const [payment] = await db.insert(bookingPayments)\n        .values(paymentData)\n        .returning();\n      \n      // Update booking's advance paid and balance due\n      const newAdvancePaid = Number(booking.advancePaid || 0) + Number(paymentData.amount);\n      const newBalanceDue = Number(booking.totalAmount) - newAdvancePaid;\n      \n      await db.update(hallBookings)\n        .set({\n          advancePaid: newAdvancePaid.toString(),\n          balanceDue: newBalanceDue.toString(),\n          updatedAt: new Date()\n        })\n        .where(eq(hallBookings.id, bookingId));\n      \n      res.status(201).json(payment);\n    } catch (error) {\n      console.error(\"Record payment error:\", error);\n      res.status(400).json({ message: \"Failed to record payment\" });\n    }\n  });\n\n  // Attendance routes\n  app.post(\"/api/attendance/clock-in\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const canClockInResult = await storage.canClockIn(user.id);\n      if (!canClockInResult.canClockIn) {\n        return res.status(400).json({ message: canClockInResult.reason || \"Cannot clock in\" });\n      }\n\n      const { location } = req.body;\n      const ip = req.ip || req.socket.remoteAddress || null;\n      const source = req.body.source || 'web';\n      const clockInTime = new Date();\n\n      const attendanceRecord = await storage.createAttendance(\n        user.id,\n        user.hotelId,\n        clockInTime,\n        location || null,\n        ip,\n        source\n      );\n\n      await storage.updateUserOnlineStatus(user.id, true);\n\n      // Broadcast real-time attendance update\n      wsEvents.attendanceUpdated(user.hotelId, attendanceRecord);\n\n      res.status(201).json(attendanceRecord);\n    } catch (error) {\n      console.error(\"Clock-in error:\", error);\n      res.status(500).json({ message: \"Failed to clock in\" });\n    }\n  });\n\n  app.post(\"/api/attendance/clock-out\", requireActiveUser, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      const activeAttendance = await storage.getActiveAttendance(user.id);\n      if (!activeAttendance) {\n        return res.status(400).json({ message: \"No active clock-in found\" });\n      }\n\n      const { location } = req.body;\n      const ip = req.ip || req.socket.remoteAddress || null;\n      const source = req.body.source || 'web';\n      const clockOutTime = new Date();\n\n      const clockInTime = new Date(activeAttendance.clockInTime);\n      if (clockOutTime <= clockInTime) {\n        return res.status(400).json({ message: \"Clock-out time must be after clock-in time\" });\n      }\n\n      const updatedRecord = await storage.clockOut(\n        activeAttendance.id,\n        clockOutTime,\n        location || null,\n        ip,\n        source\n      );\n\n      await storage.updateUserOnlineStatus(user.id, false);\n\n      // Broadcast real-time attendance update\n      wsEvents.attendanceUpdated(user.hotelId, updatedRecord);\n\n      res.json(updatedRecord);\n    } catch (error) {\n      console.error(\"Clock-out error:\", error);\n      res.status(500).json({ message: \"Failed to clock out\" });\n    }\n  });\n\n  app.get(\"/api/attendance/history\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      \n      const { startDate, endDate } = req.query;\n      \n      let start: Date | undefined;\n      let end: Date | undefined;\n      \n      if (startDate && typeof startDate === 'string') {\n        start = new Date(startDate);\n      }\n      if (endDate && typeof endDate === 'string') {\n        end = new Date(endDate);\n      }\n      \n      if (!start) {\n        const now = new Date();\n        start = new Date(now.getFullYear(), now.getMonth(), 1);\n      }\n      \n      const records = await storage.getAttendanceByUser(user.id, start, end);\n      res.json(records);\n    } catch (error) {\n      console.error(\"Get attendance history error:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance history\" });\n    }\n  });\n\n  app.get(\"/api/attendance/daily\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const userRole = user.role?.name || '';\n      const managerRoles = ['super_admin', 'owner', 'manager', 'housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance'];\n      \n      if (!managerRoles.includes(userRole)) {\n        return res.status(403).json({ message: \"Only managers can view hotel attendance\" });\n      }\n\n      const { date } = req.query;\n      const queryDate = date && typeof date === 'string' ? new Date(date) : new Date();\n      \n      const records = await storage.getAttendanceByHotel(user.hotelId, queryDate);\n      res.json(records);\n    } catch (error) {\n      console.error(\"Get daily attendance error:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily attendance\" });\n    }\n  });\n\n  app.get(\"/api/attendance/status\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      \n      const activeAttendance = await storage.getActiveAttendance(user.id);\n      \n      res.json({\n        isOnDuty: !!activeAttendance,\n        attendance: activeAttendance || null\n      });\n    } catch (error) {\n      console.error(\"Get attendance status error:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance status\" });\n    }\n  });\n\n  app.get(\"/api/hotels/current/attendance\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const user = req.user as any;\n      if (!user || !user.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n\n      const userRole = user.role?.name || '';\n      const managerRoles = ['super_admin', 'owner', 'manager', 'housekeeping_supervisor', 'restaurant_bar_manager', 'security_head', 'finance'];\n      \n      if (!managerRoles.includes(userRole)) {\n        return res.status(403).json({ message: \"Only managers can view hotel attendance records\" });\n      }\n\n      const { startDate, endDate } = req.query;\n      const start = startDate && typeof startDate === 'string' ? new Date(startDate) : undefined;\n      const end = endDate && typeof endDate === 'string' ? new Date(endDate) : undefined;\n      \n      const records = await storage.getAllAttendanceByHotel(user.hotelId, start, end);\n      res.json(records);\n    } catch (error) {\n      console.error(\"Get all attendance error:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance records\" });\n    }\n  });\n\n  // Audit Log Viewing Endpoint\n  app.get(\"/api/audit-logs\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      if (!currentUser || !currentUser.hotelId) {\n        return res.status(400).json({ message: \"User not associated with a hotel\" });\n      }\n      \n      // Only managers and owners can view audit logs\n      const canViewAudit = ['manager', 'owner', 'finance'].includes(currentUser.role?.name || '');\n      if (!canViewAudit) {\n        return res.status(403).json({ \n          message: \"Only managers can view audit logs\" \n        });\n      }\n      \n      const { startDate, endDate, userId, action, resourceType, limit } = req.query;\n      \n      // Build query with filters\n      const conditions: any[] = [eq(auditLogs.hotelId, currentUser.hotelId)];\n      \n      if (userId && typeof userId === 'string') {\n        conditions.push(eq(auditLogs.userId, userId));\n      }\n      if (action && typeof action === 'string') {\n        conditions.push(eq(auditLogs.action, action));\n      }\n      if (resourceType && typeof resourceType === 'string') {\n        conditions.push(eq(auditLogs.resourceType, resourceType));\n      }\n      \n      // Add date filters if provided\n      if (startDate && typeof startDate === 'string') {\n        conditions.push(sql`${auditLogs.createdAt} >= ${new Date(startDate).toISOString()}`);\n      }\n      if (endDate && typeof endDate === 'string') {\n        conditions.push(sql`${auditLogs.createdAt} <= ${new Date(endDate).toISOString()}`);\n      }\n      \n      const maxLimit = limit && typeof limit === 'string' ? Math.min(parseInt(limit), 1000) : 500;\n      \n      const logs = await db\n        .select({\n          id: auditLogs.id,\n          hotelId: auditLogs.hotelId,\n          userId: auditLogs.userId,\n          action: auditLogs.action,\n          resourceType: auditLogs.resourceType,\n          resourceId: auditLogs.resourceId,\n          details: auditLogs.details,\n          ipAddress: auditLogs.ipAddress,\n          userAgent: auditLogs.userAgent,\n          success: auditLogs.success,\n          errorMessage: auditLogs.errorMessage,\n          createdAt: auditLogs.createdAt,\n          user: sql`json_build_object(\n            'id', ${users.id},\n            'username', ${users.username},\n            'role', json_build_object(\n              'id', ${roles.id},\n              'name', ${roles.name}\n            )\n          )`\n        })\n        .from(auditLogs)\n        .leftJoin(users, eq(auditLogs.userId, users.id))\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .where(and(...conditions))\n        .orderBy(sql`${auditLogs.createdAt} DESC`)\n        .limit(maxLimit);\n      \n      res.json(logs);\n    } catch (error) {\n      console.error(\"Audit log fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Maintenance Request Status History\n  app.get(\"/api/maintenance-requests/:id/history\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const canView = ['manager', 'owner', 'super_admin'].includes(currentUser.role?.name || '');\n      if (!canView) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const history = await db\n        .select({\n          id: maintenanceStatusHistory.id,\n          previousStatus: maintenanceStatusHistory.previousStatus,\n          newStatus: maintenanceStatusHistory.newStatus,\n          notes: maintenanceStatusHistory.notes,\n          createdAt: maintenanceStatusHistory.createdAt,\n          changedBy: {\n            id: users.id,\n            username: users.username,\n            email: users.email,\n            role: roles.name\n          }\n        })\n        .from(maintenanceStatusHistory)\n        .leftJoin(users, eq(maintenanceStatusHistory.changedBy, users.id))\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .where(eq(maintenanceStatusHistory.requestId, req.params.id))\n        .orderBy(desc(maintenanceStatusHistory.createdAt));\n      \n      res.json(history);\n    } catch (error) {\n      console.error(\"Fetch maintenance history error:\", error);\n      res.status(500).json({ message: \"Failed to fetch maintenance history\" });\n    }\n  });\n\n  // Price Change History\n  app.get(\"/api/price-change-logs\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const canView = ['manager', 'owner', 'super_admin', 'finance'].includes(currentUser.role?.name || '');\n      if (!canView) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const { itemType, startDate, endDate, limit } = req.query;\n      const conditions: any[] = [eq(priceChangeLogs.hotelId, currentUser.hotelId)];\n      \n      if (itemType && typeof itemType === 'string') {\n        conditions.push(eq(priceChangeLogs.itemType, itemType));\n      }\n      if (startDate && typeof startDate === 'string') {\n        conditions.push(sql`${priceChangeLogs.createdAt} >= ${new Date(startDate).toISOString()}`);\n      }\n      if (endDate && typeof endDate === 'string') {\n        conditions.push(sql`${priceChangeLogs.createdAt} <= ${new Date(endDate).toISOString()}`);\n      }\n      \n      const maxLimit = limit && typeof limit === 'string' ? Math.min(parseInt(limit), 500) : 100;\n      \n      const logs = await db\n        .select({\n          id: priceChangeLogs.id,\n          itemId: priceChangeLogs.itemId,\n          itemType: priceChangeLogs.itemType,\n          itemName: priceChangeLogs.itemName,\n          previousPrice: priceChangeLogs.previousPrice,\n          newPrice: priceChangeLogs.newPrice,\n          createdAt: priceChangeLogs.createdAt,\n          changedBy: {\n            id: users.id,\n            username: users.username,\n            email: users.email,\n            role: roles.name\n          }\n        })\n        .from(priceChangeLogs)\n        .leftJoin(users, eq(priceChangeLogs.changedBy, users.id))\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .where(and(...conditions))\n        .orderBy(desc(priceChangeLogs.createdAt))\n        .limit(maxLimit);\n      \n      res.json(logs);\n    } catch (error) {\n      console.error(\"Fetch price change logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch price change logs\" });\n    }\n  });\n\n  // Tax Change History\n  app.get(\"/api/tax-change-logs\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const canView = ['manager', 'owner', 'super_admin', 'finance'].includes(currentUser.role?.name || '');\n      if (!canView) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const logs = await db\n        .select({\n          id: taxChangeLogs.id,\n          taxType: taxChangeLogs.taxType,\n          previousPercent: taxChangeLogs.previousPercent,\n          newPercent: taxChangeLogs.newPercent,\n          previousActive: taxChangeLogs.previousActive,\n          newActive: taxChangeLogs.newActive,\n          createdAt: taxChangeLogs.createdAt,\n          changedBy: {\n            id: users.id,\n            username: users.username,\n            email: users.email,\n            role: roles.name\n          }\n        })\n        .from(taxChangeLogs)\n        .leftJoin(users, eq(taxChangeLogs.changedBy, users.id))\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .where(eq(taxChangeLogs.hotelId, currentUser.hotelId))\n        .orderBy(desc(taxChangeLogs.createdAt))\n        .limit(100);\n      \n      res.json(logs);\n    } catch (error) {\n      console.error(\"Fetch tax change logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch tax change logs\" });\n    }\n  });\n\n  // Inventory Movement Tracking\n  app.get(\"/api/inventory-movement-logs\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const canView = ['manager', 'owner', 'super_admin', 'storekeeper', 'finance'].includes(currentUser.role?.name || '');\n      if (!canView) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const { itemId, startDate, endDate, transactionType, limit } = req.query;\n      const conditions: any[] = [eq(inventoryTransactions.hotelId, currentUser.hotelId)];\n      \n      if (itemId && typeof itemId === 'string') {\n        conditions.push(eq(inventoryTransactions.itemId, itemId));\n      }\n      if (transactionType && typeof transactionType === 'string') {\n        conditions.push(eq(inventoryTransactions.transactionType, transactionType));\n      }\n      if (startDate && typeof startDate === 'string') {\n        conditions.push(sql`${inventoryTransactions.createdAt} >= ${new Date(startDate).toISOString()}`);\n      }\n      if (endDate && typeof endDate === 'string') {\n        conditions.push(sql`${inventoryTransactions.createdAt} <= ${new Date(endDate).toISOString()}`);\n      }\n      \n      const maxLimit = limit && typeof limit === 'string' ? Math.min(parseInt(limit), 500) : 100;\n      \n      const logs = await db\n        .select({\n          id: inventoryTransactions.id,\n          transactionType: inventoryTransactions.transactionType,\n          qtyPackage: inventoryTransactions.qtyPackage,\n          qtyBase: inventoryTransactions.qtyBase,\n          department: inventoryTransactions.department,\n          notes: inventoryTransactions.notes,\n          createdAt: inventoryTransactions.createdAt,\n          item: {\n            id: inventoryItems.id,\n            name: inventoryItems.name,\n            sku: inventoryItems.sku,\n            unit: inventoryItems.unit\n          },\n          recordedBy: {\n            id: users.id,\n            username: users.username,\n            role: roles.name\n          },\n          issuedTo: {\n            id: sql<string>`issued_user.id`,\n            username: sql<string>`issued_user.username`,\n            role: sql<string>`issued_role.name`\n          }\n        })\n        .from(inventoryTransactions)\n        .leftJoin(inventoryItems, eq(inventoryTransactions.itemId, inventoryItems.id))\n        .leftJoin(users, eq(inventoryTransactions.recordedBy, users.id))\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .leftJoin(sql`users AS issued_user`, sql`${inventoryTransactions.issuedToUserId} = issued_user.id`)\n        .leftJoin(sql`roles AS issued_role`, sql`issued_user.role_id = issued_role.id`)\n        .where(and(...conditions))\n        .orderBy(desc(inventoryTransactions.createdAt))\n        .limit(maxLimit);\n      \n      res.json(logs);\n    } catch (error) {\n      console.error(\"Fetch inventory movement logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory movement logs\" });\n    }\n  });\n\n  // Staff Activity Summary\n  app.get(\"/api/staff-activity-summary\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const canView = ['manager', 'owner', 'super_admin'].includes(currentUser.role?.name || '');\n      if (!canView) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const { userId, startDate, endDate } = req.query;\n      const conditions: any[] = [eq(auditLogs.hotelId, currentUser.hotelId)];\n      \n      if (userId && typeof userId === 'string') {\n        conditions.push(eq(auditLogs.userId, userId));\n      }\n      if (startDate && typeof startDate === 'string') {\n        conditions.push(sql`${auditLogs.createdAt} >= ${new Date(startDate).toISOString()}`);\n      }\n      if (endDate && typeof endDate === 'string') {\n        conditions.push(sql`${auditLogs.createdAt} <= ${new Date(endDate).toISOString()}`);\n      }\n      \n      const activityLogs = await db\n        .select({\n          userId: auditLogs.userId,\n          username: users.username,\n          role: roles.name,\n          action: auditLogs.action,\n          resourceType: auditLogs.resourceType,\n          count: sql<number>`COUNT(*)::int`,\n          lastActivity: sql<Date>`MAX(${auditLogs.createdAt})`\n        })\n        .from(auditLogs)\n        .leftJoin(users, eq(auditLogs.userId, users.id))\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .where(and(...conditions))\n        .groupBy(auditLogs.userId, users.username, roles.name, auditLogs.action, auditLogs.resourceType)\n        .orderBy(desc(sql`MAX(${auditLogs.createdAt})`))\n        .limit(200);\n      \n      res.json(activityLogs);\n    } catch (error) {\n      console.error(\"Fetch staff activity summary error:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff activity summary\" });\n    }\n  });\n\n  // Financial Transaction Details with Creator Info\n  app.get(\"/api/transactions/:id/details\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const canView = ['manager', 'owner', 'super_admin', 'finance'].includes(currentUser.role?.name || '');\n      if (!canView) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const transaction = await db\n        .select({\n          id: transactions.id,\n          txnType: transactions.txnType,\n          amount: transactions.amount,\n          currency: transactions.currency,\n          paymentMethod: transactions.paymentMethod,\n          purpose: transactions.purpose,\n          reference: transactions.reference,\n          details: transactions.details,\n          createdAt: transactions.createdAt,\n          isVoided: transactions.isVoided,\n          voidReason: transactions.voidReason,\n          voidedAt: transactions.voidedAt,\n          vendor: {\n            id: vendors.id,\n            name: vendors.name,\n            contact: vendors.contact\n          },\n          createdBy: {\n            id: sql<string>`creator.id`,\n            username: sql<string>`creator.username`,\n            email: sql<string>`creator.email`,\n            role: sql<string>`creator_role.name`\n          },\n          voidedBy: {\n            id: sql<string>`voider.id`,\n            username: sql<string>`voider.username`,\n            role: sql<string>`voider_role.name`\n          }\n        })\n        .from(transactions)\n        .leftJoin(vendors, eq(transactions.vendorId, vendors.id))\n        .leftJoin(sql`users AS creator`, sql`${transactions.createdBy} = creator.id`)\n        .leftJoin(sql`roles AS creator_role`, sql`creator.role_id = creator_role.id`)\n        .leftJoin(sql`users AS voider`, sql`${transactions.voidedBy} = voider.id`)\n        .leftJoin(sql`roles AS voider_role`, sql`voider.role_id = voider_role.id`)\n        .where(eq(transactions.id, req.params.id))\n        .limit(1);\n      \n      if (!transaction || transaction.length === 0) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      res.json(transaction[0]);\n    } catch (error) {\n      console.error(\"Fetch transaction details error:\", error);\n      res.status(500).json({ message: \"Failed to fetch transaction details\" });\n    }\n  });\n\n  // Room Status Change History\n  app.get(\"/api/rooms/:roomId/status-history\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const currentUser = req.user as any;\n      const canView = ['manager', 'owner', 'super_admin', 'front_desk', 'housekeeping_supervisor'].includes(currentUser.role?.name || '');\n      if (!canView) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      \n      const history = await db\n        .select({\n          id: roomStatusLogs.id,\n          roomNumber: roomStatusLogs.roomNumber,\n          previousStatus: roomStatusLogs.previousStatus,\n          newStatus: roomStatusLogs.newStatus,\n          reason: roomStatusLogs.reason,\n          createdAt: roomStatusLogs.createdAt,\n          changedBy: {\n            id: users.id,\n            username: users.username,\n            role: roles.name\n          }\n        })\n        .from(roomStatusLogs)\n        .leftJoin(users, eq(roomStatusLogs.changedBy, users.id))\n        .leftJoin(roles, eq(users.roleId, roles.id))\n        .where(eq(roomStatusLogs.roomId, req.params.roomId))\n        .orderBy(desc(roomStatusLogs.createdAt))\n        .limit(100);\n      \n      res.json(history);\n    } catch (error) {\n      console.error(\"Fetch room status history error:\", error);\n      res.status(500).json({ message: \"Failed to fetch room status history\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":262300},"client/src/pages/dashboard/front-desk.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useForm } from \"react-hook-form\";\nimport { \n  CalendarDays, \n  Users, \n  Bed, \n  UserCheck, \n  UserMinus, \n  CalendarPlus, \n  HandPlatter, \n  CreditCard, \n  DollarSign, \n  Smartphone, \n  Printer,\n  Clock,\n  CheckSquare,\n  Plus,\n  Calendar as CalendarIcon,\n  CalendarCheck,\n  Wrench,\n  Search,\n  Utensils,\n  Building2\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\nimport { formatCurrency, getStatusColor, formatDate } from \"@/lib/utils\";\nimport { cn } from \"@/lib/utils\";\nimport type { Room, Task, RoomServiceOrder, MealPlan, Voucher, MenuItem, MenuCategory, RoomType } from \"@shared/schema\";\nimport { RoomServiceChargeModal } from \"@/components/modals/room-service-charge-modal\";\n\nexport default function FrontDeskDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const ws = useWebSocket();\n  const [, setLocation] = useLocation();\n  const { confirm } = useConfirmDialog();\n  const [isCheckInModalOpen, setIsCheckInModalOpen] = useState(false);\n  const [isCheckOutModalOpen, setIsCheckOutModalOpen] = useState(false);\n  const [isReservationModalOpen, setIsReservationModalOpen] = useState(false);\n  const [isRoomServiceModalOpen, setIsRoomServiceModalOpen] = useState(false);\n  const [isMaintenanceModalOpen, setIsMaintenanceModalOpen] = useState(false);\n  const [isCashDepositModalOpen, setIsCashDepositModalOpen] = useState(false);\n  const [isFoodOrderModalOpen, setIsFoodOrderModalOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n  const [selectedCheckoutPaymentMethod, setSelectedCheckoutPaymentMethod] = useState(\"\");\n  const [selectedRoom, setSelectedRoom] = useState<any>(null);\n  const [selectedVoucher, setSelectedVoucher] = useState<string>(\"\");\n  const [voucherCode, setVoucherCode] = useState<string>(\"\");\n  const [validatedVoucher, setValidatedVoucher] = useState<any>(null);\n  const [isValidatingVoucher, setIsValidatingVoucher] = useState(false);\n  const [foodSearchQuery, setFoodSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [foodOrderItems, setFoodOrderItems] = useState<Array<{ item: MenuItem; quantity: number }>>([]);\n  const [guestType, setGuestType] = useState<\"inhouse\" | \"walkin\">(\"walkin\");\n  const [officeName, setOfficeName] = useState(\"\");\n  const [isExtendStayModalOpen, setIsExtendStayModalOpen] = useState(false);\n  const [newCheckoutDate, setNewCheckoutDate] = useState<Date | undefined>(undefined);\n  const [guestSearchQuery, setGuestSearchQuery] = useState(\"\");\n  const [selectedGuest, setSelectedGuest] = useState<any>(null);\n  const [isViewReservationsModalOpen, setIsViewReservationsModalOpen] = useState(false);\n  const [calendarDate, setCalendarDate] = useState(new Date());\n  const [selectedCalendarDate, setSelectedCalendarDate] = useState<Date | null>(null);\n  const [isServiceChargeModalOpen, setIsServiceChargeModalOpen] = useState(false);\n  const [selectedReservationForService, setSelectedReservationForService] = useState<string>(\"\");\n\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: guests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/guests\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: rooms = [] } = useQuery<Array<Room & { roomType?: RoomType }>>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/users\", user?.id, \"tasks\"],\n    refetchInterval: 3000,\n    enabled: !!user?.id\n  });\n\n  const { data: roomServiceOrders = [] } = useQuery<RoomServiceOrder[]>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"room-service-orders\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: mealPlans = [] } = useQuery<MealPlan[]>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"meal-plans\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: vouchers = [] } = useQuery<Voucher[]>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"vouchers\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: menuItems = [] } = useQuery<Array<MenuItem & { category?: MenuCategory }>>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"menu-items\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: menuCategories = [] } = useQuery<MenuCategory[]>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"menu-categories\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: reservations = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/reservations\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: services = [] } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: roomServiceCharges = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/room-service-charges\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const checkInForm = useForm({\n    defaultValues: {\n      guestName: \"\",\n      guestEmail: \"\",\n      guestPhone: \"\",\n      idNumber: \"\",\n      nationality: \"\",\n      checkInDate: \"\",\n      checkOutDate: \"\",\n      roomId: \"\",\n      advancePayment: \"\",\n      mealPlanId: \"\",\n      numberOfPersons: \"\"\n    }\n  });\n\n  const maintenanceForm = useForm({\n    defaultValues: {\n      title: \"\",\n      location: \"\",\n      description: \"\",\n      priority: \"medium\"\n    }\n  });\n\n  // Real-time updates for services and other resources\n  useRealtimeQuery({\n    queryKey: [\"/api/services\"],\n    refetchInterval: 3000,\n    events: ['service:created', 'service:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/rooms\"],\n    refetchInterval: 3000,\n    events: ['room:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/guests\"],\n    refetchInterval: 3000,\n    events: ['guest:created', 'guest:updated']\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/room-service-charges\"],\n    refetchInterval: 3000,\n    events: ['room-service-charge:created', 'room-service-charge:deleted']\n  });\n\n  const cashDepositForm = useForm({\n    defaultValues: {\n      amount: \"\",\n      purpose: \"\",\n      paymentMethod: \"cash\"\n    }\n  });\n\n  const reservationForm = useForm({\n    defaultValues: {\n      guestName: \"\",\n      guestEmail: \"\",\n      guestPhone: \"\",\n      checkInDate: \"\",\n      checkOutDate: \"\",\n      roomId: \"\",\n      numberOfPersons: \"\",\n      mealPlanId: \"\",\n      specialRequests: \"\"\n    }\n  });\n\n  // Real-time WebSocket updates for front desk\n  useEffect(() => {\n    if (!user?.hotelId) return;\n\n    // Listen for room status updates\n    const unsubRoomUpdate = ws.on('room:updated', (room) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"] });\n      toast({ \n        title: \"Room Updated\", \n        description: `Room ${room.roomNumber} status has been updated`\n      });\n    });\n\n    // Listen for guest updates\n    const unsubGuestCreated = ws.on('guest:created', (guest) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/guests\"] });\n      toast({ \n        title: \"New Guest\", \n        description: `${guest.name} has been added`\n      });\n    });\n\n    const unsubGuestUpdated = ws.on('guest:updated', (guest) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/guests\"] });\n    });\n\n    // Listen for maintenance updates\n    const unsubMaintenanceUpdated = ws.on('maintenance:updated', (request) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ \n        title: \"Maintenance Update\", \n        description: `Request \"${request.title}\" has been updated`\n      });\n    });\n\n    // Listen for transaction updates\n    const unsubTransactionCreated = ws.on('transaction:created', (transaction) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n    });\n\n    return () => {\n      unsubRoomUpdate();\n      unsubGuestCreated();\n      unsubGuestUpdated();\n      unsubMaintenanceUpdated();\n      unsubTransactionCreated();\n    };\n  }, [user?.hotelId, ws, queryClient, toast]);\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", user?.id, \"tasks\"] });\n      toast({ title: \"Task updated successfully\" });\n    }\n  });\n\n  const checkInGuestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const selectedMealPlan = mealPlans.find((plan) => plan.id === data.mealPlanId);\n      const room = rooms.find(r => r.id === data.roomId);\n      const roomType = room?.roomType;\n      \n      // Validate room type exists\n      if (!roomType) {\n        throw new Error('Room type information is missing. Please ensure the room is properly configured.');\n      }\n      \n      // Get the correct room price based on guest type\n      const price = data.guestType === \"inhouse\" ? roomType.priceInhouse : roomType.priceWalkin;\n      const roomPrice = price ? Number(price) : 0;\n      \n      if (roomPrice <= 0) {\n        throw new Error(`Room price is not configured for ${data.guestType} guests. Please configure room pricing first.`);\n      }\n      \n      // Update room occupancy\n      await apiRequest(\"PUT\", `/api/rooms/${data.roomId}`, {\n        isOccupied: true,\n        occupantDetails: {\n          name: data.guestName,\n          email: data.guestEmail,\n          phone: data.guestPhone,\n          idNumber: data.idNumber,\n          nationality: data.nationality,\n          checkInDate: data.checkInDate,\n          checkOutDate: data.checkOutDate,\n          guestType: data.guestType || \"walkin\",\n          officeName: data.officeName || null,\n          roomTypeId: roomType?.id || null,\n          roomTypeName: roomType?.name || null,\n          roomPrice: roomPrice,\n          mealPlan: selectedMealPlan ? {\n            planId: selectedMealPlan.id,\n            planType: selectedMealPlan.planType,\n            planName: selectedMealPlan.planName,\n            pricePerPerson: selectedMealPlan.pricePerPerson,\n            numberOfPersons: Number(data.numberOfPersons) || 0,\n            totalCost: Number(selectedMealPlan.pricePerPerson) * (Number(data.numberOfPersons) || 0)\n          } : null\n        }\n      });\n\n      // Create transaction for advance payment if provided\n      if (data.advancePayment && Number(data.advancePayment) > 0) {\n        await apiRequest(\"POST\", \"/api/transactions\", {\n          hotelId: user?.hotelId,\n          txnType: selectedPaymentMethod === 'cash' ? 'cash_in' : selectedPaymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n          amount: String(Number(data.advancePayment)),\n          paymentMethod: selectedPaymentMethod,\n          purpose: 'room_advance_payment',\n          reference: `Room ${selectedRoom?.roomNumber} - ${data.guestName}`,\n          details: {\n            roomId: data.roomId,\n            roomNumber: selectedRoom?.roomNumber,\n            guestName: data.guestName,\n            checkInDate: data.checkInDate\n          },\n          createdBy: user?.id\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Guest checked in successfully\" });\n      checkInForm.reset();\n      setIsCheckInModalOpen(false);\n      setSelectedRoom(null);\n      setSelectedPaymentMethod(\"\");\n      setGuestType(\"walkin\");\n      setSelectedGuest(null);\n      setGuestSearchQuery(\"\");\n      setOfficeName(\"\");\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Check-in failed\", \n        description: error.message || \"Failed to check in guest\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createMaintenanceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/maintenance-requests\", {\n        hotelId: user?.hotelId,\n        reportedBy: user?.id,\n        title: data.title,\n        location: data.location,\n        description: data.description,\n        priority: data.priority,\n        status: 'pending'\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Maintenance request sent to manager successfully\" });\n      maintenanceForm.reset();\n      setIsMaintenanceModalOpen(false);\n    }\n  });\n\n  const createCashDepositMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user?.hotelId,\n        txnType: 'cash_deposit_request',\n        amount: String(Number(data.amount)),\n        paymentMethod: data.paymentMethod,\n        purpose: data.purpose || 'Cash Deposit Request',\n        reference: `Cash deposit by ${user?.username}`,\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"transactions\"] });\n      toast({ title: \"Cash deposit request sent to finance successfully\" });\n      cashDepositForm.reset();\n      setIsCashDepositModalOpen(false);\n    }\n  });\n\n  const extendStayMutation = useMutation({\n    mutationFn: async (data: { roomId: string; newCheckoutDate: Date }) => {\n      const room = rooms.find(r => r.id === data.roomId);\n      if (!room || !room.occupantDetails) {\n        throw new Error(\"Room not found or not occupied\");\n      }\n\n      await apiRequest(\"PUT\", `/api/rooms/${data.roomId}`, {\n        occupantDetails: {\n          ...room.occupantDetails,\n          checkOutDate: data.newCheckoutDate.toISOString()\n        }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"] });\n      toast({ title: \"Checkout date extended successfully\" });\n      setIsExtendStayModalOpen(false);\n      setSelectedRoom(null);\n      setNewCheckoutDate(undefined);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to extend stay\", \n        description: error.message || \"Could not update checkout date\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleValidateVoucher = async () => {\n    if (!voucherCode.trim()) {\n      toast({ title: \"Please enter a voucher code\", variant: \"destructive\" });\n      return;\n    }\n\n    setIsValidatingVoucher(true);\n    try {\n      const response = await fetch('/api/vouchers/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ code: voucherCode }),\n        credentials: 'include'\n      });\n      const data = await response.json();\n      \n      if (data.valid) {\n        setValidatedVoucher(data.voucher);\n        toast({ title: \"Voucher applied successfully!\" });\n      } else {\n        setValidatedVoucher(null);\n        toast({ title: \"Invalid voucher\", description: data.message || \"Voucher code is invalid\", variant: \"destructive\" });\n      }\n    } catch (error) {\n      toast({ title: \"Error validating voucher\", variant: \"destructive\" });\n    } finally {\n      setIsValidatingVoucher(false);\n    }\n  };\n\n  const checkOutGuestMutation = useMutation({\n    mutationFn: async (data: { \n      roomId: string; \n      roomNumber: string;\n      guestName: string;\n      totalAmount: number; \n      discountAmount: number; \n      finalAmount: number; \n      voucherId?: string;\n      billingDetails?: any;\n    }) => {\n      // Validate payment method is selected\n      if (!selectedCheckoutPaymentMethod || !['cash', 'pos', 'fonepay'].includes(selectedCheckoutPaymentMethod)) {\n        throw new Error('Please select a payment method (Cash, POS, or Fonepay) before checking out');\n      }\n\n      // Check if this is a reservation-based checkout\n      const room = rooms.find(r => r.id === data.roomId);\n      const reservationId = room?.currentReservationId || (room?.occupantDetails as any)?.reservationId;\n\n      if (reservationId) {\n        // Use reservation-based checkout with balance validation\n        // First record the payment to update paidAmount\n        await apiRequest(\"POST\", \"/api/transactions\", {\n          hotelId: user?.hotelId,\n          txnType: selectedCheckoutPaymentMethod === 'cash' ? 'cash_in' : selectedCheckoutPaymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n          amount: String(data.finalAmount),\n          paymentMethod: selectedCheckoutPaymentMethod,\n          purpose: 'room_checkout_payment',\n          reference: `Checkout - Room ${data.roomNumber} - ${data.guestName}${data.voucherId ? ` (Voucher Applied)` : ''}`,\n          details: {\n            roomNumber: data.roomNumber,\n            guestName: data.guestName,\n            checkInDate: selectedRoom?.occupantDetails?.checkInDate,\n            checkOutDate: selectedRoom?.occupantDetails?.checkOutDate,\n            numberOfNights: data.billingDetails?.numberOfNights || 1,\n            subtotal: data.billingDetails?.subtotal || 0,\n            roomCharges: data.billingDetails?.totalRoomCharges || 0,\n            mealPlanCharges: data.billingDetails?.totalMealPlanCharges || 0,\n            foodCharges: data.billingDetails?.totalFoodCharges || 0,\n            taxBreakdown: data.billingDetails?.taxBreakdown || {},\n            totalTax: data.billingDetails?.totalTax || 0,\n            discountAmount: data.discountAmount,\n            voucherCode: validatedVoucher?.code || null,\n            grandTotal: data.finalAmount,\n            paymentMethod: selectedCheckoutPaymentMethod,\n            reservationId\n          },\n          createdBy: user?.id\n        });\n\n        // Update reservation paidAmount\n        await apiRequest(\"PATCH\", `/api/reservations/${reservationId}`, {\n          paidAmount: String(data.finalAmount)\n        });\n\n        // Now attempt checkout - this will validate balance\n        try {\n          await apiRequest(\"POST\", `/api/reservations/${reservationId}/check-out`, {});\n        } catch (error: any) {\n          // If balance due error, show option to override for managers\n          if (error.message && error.message.includes('outstanding balance')) {\n            const isManager = user?.role?.name === 'manager' || user?.role?.name === 'owner';\n            if (isManager) {\n              await confirm({\n                title: \"Manager Override Required\",\n                description: `${error.message}\\n\\nAs a manager, do you want to override and check out anyway?`,\n                confirmText: \"Override & Check Out\",\n                cancelText: \"Cancel\",\n                variant: \"destructive\",\n                onConfirm: async () => {\n                  await apiRequest(\"POST\", `/api/reservations/${reservationId}/check-out`, {\n                    overrideBalance: true,\n                    overrideReason: 'Manager override from front desk'\n                  });\n                },\n                onCancel: () => {\n                  throw new Error('Checkout cancelled - payment required');\n                }\n              });\n            } else {\n              throw error;\n            }\n          } else {\n            throw error;\n          }\n        }\n\n        // Update voucher used count if voucher was used\n        if (data.voucherId) {\n          await apiRequest(\"POST\", `/api/vouchers/redeem`, { voucherId: data.voucherId });\n        }\n      } else {\n        // Legacy checkout flow for non-reservation guests\n        await apiRequest(\"PUT\", `/api/rooms/${data.roomId}`, {\n          isOccupied: false,\n          occupantDetails: null\n        });\n\n        if (data.finalAmount > 0) {\n          await apiRequest(\"POST\", \"/api/transactions\", {\n            hotelId: user?.hotelId,\n            txnType: selectedCheckoutPaymentMethod === 'cash' ? 'cash_in' : selectedCheckoutPaymentMethod === 'pos' ? 'pos_in' : 'fonepay_in',\n            amount: String(data.finalAmount),\n            paymentMethod: selectedCheckoutPaymentMethod,\n            purpose: 'room_checkout_payment',\n            reference: `Checkout - Room ${data.roomNumber} - ${data.guestName}${data.voucherId ? ` (Voucher Applied)` : ''}`,\n            details: {\n              roomNumber: data.roomNumber,\n              guestName: data.guestName,\n              checkInDate: selectedRoom?.occupantDetails?.checkInDate,\n              checkOutDate: selectedRoom?.occupantDetails?.checkOutDate,\n              numberOfNights: data.billingDetails?.numberOfNights || 1,\n              subtotal: data.billingDetails?.subtotal || 0,\n              roomCharges: data.billingDetails?.totalRoomCharges || 0,\n              mealPlanCharges: data.billingDetails?.totalMealPlanCharges || 0,\n              foodCharges: data.billingDetails?.totalFoodCharges || 0,\n              taxBreakdown: data.billingDetails?.taxBreakdown || {},\n              totalTax: data.billingDetails?.totalTax || 0,\n              discountAmount: data.discountAmount,\n              voucherCode: validatedVoucher?.code || null,\n              grandTotal: data.finalAmount,\n              paymentMethod: selectedCheckoutPaymentMethod\n            },\n            createdBy: user?.id\n          });\n        }\n\n        if (data.voucherId) {\n          await apiRequest(\"POST\", `/api/vouchers/redeem`, { voucherId: data.voucherId });\n        }\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"vouchers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/reservations\"] });\n      toast({ title: \"Guest checked out successfully\" });\n      \n      // Print receipt automatically before clearing room data\n      if (selectedRoom) {\n        handlePrintReceipt(selectedRoom, 'checkout');\n      }\n      \n      setIsCheckOutModalOpen(false);\n      setSelectedRoom(null);\n      setSelectedVoucher(\"\");\n      setVoucherCode(\"\");\n      setValidatedVoucher(null);\n      setSelectedCheckoutPaymentMethod(\"\");\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Checkout failed\", \n        description: error.message || \"Failed to check out guest\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createReservationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const room = rooms.find(r => r.id === data.roomId);\n      const roomPrice = room?.roomType?.priceWalkin ? Number(room.roomType.priceWalkin) : 0;\n      \n      const plan = mealPlans.find(p => p.id === data.mealPlanId);\n      const mealPlanPrice = plan && data.numberOfPersons \n        ? Number(plan.pricePerPerson) * Number(data.numberOfPersons) \n        : 0;\n      \n      const checkIn = new Date(data.checkInDate);\n      const checkOut = new Date(data.checkOutDate);\n      const nights = Math.max(1, Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 3600 * 24)));\n      \n      const totalPrice = (roomPrice + mealPlanPrice) * nights;\n\n      await apiRequest(\"POST\", \"/api/reservations\", {\n        hotelId: user?.hotelId,\n        guestName: data.guestName,\n        guestEmail: data.guestEmail,\n        guestPhone: data.guestPhone,\n        roomId: data.roomId,\n        checkInDate: checkIn,\n        checkOutDate: checkOut,\n        numberOfPersons: Number(data.numberOfPersons),\n        mealPlanId: data.mealPlanId || null,\n        roomPrice: String(roomPrice),\n        mealPlanPrice: String(mealPlanPrice),\n        totalPrice: String(totalPrice),\n        specialRequests: data.specialRequests,\n        status: 'confirmed',\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/reservations\"] });\n      toast({ title: \"Reservation created successfully\" });\n      reservationForm.reset();\n      setIsReservationModalOpen(false);\n      handlePrintReservationConfirmation();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create reservation\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const availableRooms = rooms.filter(r => !r.isOccupied);\n  const occupiedRooms = rooms.filter(r => r.isOccupied);\n  const pendingTasks = tasks.filter(t => t.status === 'pending');\n  const performingTasks = tasks.filter(t => t.status === 'performing');\n  const completedTasks = tasks.filter(t => t.status === 'completed');\n\n  const todaysCheckIns = occupiedRooms.filter(r => {\n    const today = new Date().toDateString();\n    const checkInDate = (r.occupantDetails as any)?.checkInDate;\n    return checkInDate && new Date(checkInDate).toDateString() === today;\n  });\n\n  const todaysCheckOuts = occupiedRooms.filter(r => {\n    const today = new Date().toDateString();\n    const checkOutDate = (r.occupantDetails as any)?.checkOutDate;\n    return checkOutDate && new Date(checkOutDate).toDateString() === today;\n  });\n\n  const handleTaskStatusUpdate = (task: any, newStatus: string) => {\n    updateTaskMutation.mutate({ taskId: task.id, status: newStatus });\n  };\n\n  // Calculate checkout bill with taxes\n  const calculateCheckoutBill = (room: any) => {\n    const roomPricePerNight = room.occupantDetails?.roomPrice ? Number(room.occupantDetails.roomPrice) : 0;\n    const checkInDate = room.occupantDetails?.checkInDate ? new Date(room.occupantDetails.checkInDate) : null;\n    // Use actual checkout date (today) instead of booked checkout date for accurate billing\n    const actualCheckOutDate = new Date();\n    \n    // Calculate number of NIGHTS with 2pm cutoff rule\n    let numberOfNights = 1;\n    if (checkInDate) {\n      // Get date-only components (ignoring time) for check-in and check-out\n      const checkInDateOnly = new Date(checkInDate);\n      checkInDateOnly.setHours(0, 0, 0, 0);\n      \n      const checkOutDateOnly = new Date(actualCheckOutDate);\n      checkOutDateOnly.setHours(0, 0, 0, 0);\n      \n      // Calculate base nights (full days between dates)\n      const daysDiff = Math.floor((checkOutDateOnly.getTime() - checkInDateOnly.getTime()) / (1000 * 3600 * 24));\n      numberOfNights = Math.max(1, daysDiff);\n      \n      // Apply 2pm cutoff rule: if check-out time is after 2pm (14:00), charge an extra night\n      const checkOutHour = actualCheckOutDate.getHours();\n      const checkOutMinute = actualCheckOutDate.getMinutes();\n      const checkOutTimeInMinutes = checkOutHour * 60 + checkOutMinute;\n      const cutoffTimeInMinutes = 14 * 60; // 2pm = 14:00\n      \n      if (checkOutTimeInMinutes > cutoffTimeInMinutes) {\n        numberOfNights += 1;\n      }\n    }\n    \n    const totalRoomCharges = roomPricePerNight * numberOfNights;\n    const mealPlanCostPerNight = room.occupantDetails?.mealPlan?.totalCost || 0;\n    const totalMealPlanCharges = parseFloat(mealPlanCostPerNight.toString()) * numberOfNights;\n    const foodCharges = room.occupantDetails?.foodCharges || [];\n    const totalFoodCharges = foodCharges.reduce((sum: number, charge: any) => sum + parseFloat(charge.totalAmount || 0), 0);\n    \n    // Get room service charges for this reservation\n    const reservationId = room.currentReservationId || (room.occupantDetails as any)?.reservationId;\n    const serviceCharges = reservationId \n      ? roomServiceCharges.filter((charge: any) => charge.reservationId === reservationId)\n      : [];\n    const totalServiceCharges = serviceCharges.reduce((sum: number, charge: any) => \n      sum + parseFloat(charge.totalCharge || 0), 0);\n    \n    const subtotal = totalRoomCharges + totalMealPlanCharges + totalFoodCharges + totalServiceCharges;\n\n    // Apply voucher discount on subtotal first\n    let discountAmount = 0;\n    let discountedSubtotal = subtotal;\n    \n    if (validatedVoucher) {\n      if (validatedVoucher.discountType === 'percentage') {\n        // Apply percentage discount on subtotal (before tax)\n        discountAmount = Math.round((subtotal * (parseFloat(validatedVoucher.discountAmount) / 100)) * 100) / 100;\n        discountedSubtotal = Math.round((subtotal - discountAmount) * 100) / 100;\n      } else if (validatedVoucher.discountType === 'fixed') {\n        // Apply fixed discount on subtotal\n        discountAmount = Math.min(parseFloat(validatedVoucher.discountAmount), subtotal);\n        discountedSubtotal = Math.round((subtotal - discountAmount) * 100) / 100;\n      }\n    }\n\n    // Get active taxes\n    const activeTaxes = hotelTaxes.filter((tax: any) => tax.isActive);\n    \n    // Sort taxes to apply VAT first, then service tax, then luxury tax\n    const taxOrder = ['vat', 'service_tax', 'luxury_tax'];\n    const sortedTaxes = activeTaxes.sort((a: any, b: any) => {\n      const aIndex = taxOrder.indexOf(a.taxType);\n      const bIndex = taxOrder.indexOf(b.taxType);\n      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n    });\n\n    // Apply cascading taxes on discounted subtotal\n    let runningTotal = discountedSubtotal;\n    const taxBreakdown: any = {};\n    \n    sortedTaxes.forEach((tax: any) => {\n      const taxRate = parseFloat(tax.percent) / 100;\n      const taxAmount = Math.round((runningTotal * taxRate) * 100) / 100;\n      const displayName = tax.taxType === 'vat' ? 'VAT' : \n                          tax.taxType === 'service_tax' ? 'Service Tax' : \n                          tax.taxType === 'luxury_tax' ? 'Luxury Tax' : tax.taxType;\n      taxBreakdown[displayName] = {\n        rate: parseFloat(tax.percent),\n        amount: taxAmount\n      };\n      runningTotal = Math.round((runningTotal + taxAmount) * 100) / 100;\n    });\n\n    const totalTax = Object.values(taxBreakdown).reduce((sum: number, t: any) => sum + t.amount, 0);\n    \n    // Calculate grand total: discounted subtotal + tax\n    let grandTotal = Math.round((discountedSubtotal + totalTax) * 100) / 100;\n\n    // Calculate advance payment deductions\n    const roomId = room.id;\n    const guestName = room.occupantDetails?.name || '';\n    const roomNumber = room.roomNumber || '';\n    \n    // Find all advance payment transactions for this specific room\n    // Use exact roomId match for new transactions, fallback to reference string matching for legacy transactions\n    const advancePayments = transactions.filter((txn: any) => {\n      const isAdvancePayment = txn.purpose === 'room_advance_payment';\n      \n      // Prefer exact roomId match if available (new transactions)\n      if (txn.details?.roomId) {\n        return isAdvancePayment && txn.details.roomId === roomId;\n      }\n      \n      // Fallback to reference string matching for legacy transactions (before this fix)\n      const matchesRoom = txn.reference?.includes(`Room ${roomNumber}`);\n      const matchesGuest = txn.reference?.includes(guestName);\n      return isAdvancePayment && matchesRoom && matchesGuest;\n    });\n    \n    // Sum up all advance payments\n    const totalAdvancePayment = advancePayments.reduce((sum: number, txn: any) => {\n      return sum + (parseFloat(txn.amount) || 0);\n    }, 0);\n\n    // Deduct advance payment from grand total\n    const finalAmount = Math.max(0, Math.round((grandTotal - totalAdvancePayment) * 100) / 100);\n\n    return {\n      subtotal,\n      discountedSubtotal,\n      taxBreakdown,\n      totalTax,\n      discountAmount,\n      advancePayment: totalAdvancePayment,\n      grandTotal,\n      finalAmount,\n      numberOfNights,\n      totalRoomCharges,\n      mealPlanCostPerNight: parseFloat(mealPlanCostPerNight.toString()),\n      totalMealPlanCharges: parseFloat(totalMealPlanCharges.toString()),\n      totalFoodCharges,\n      totalServiceCharges,\n      serviceCharges\n    };\n  };\n\n  const handleCheckIn = (room: any) => {\n    setSelectedRoom(room);\n    setGuestType(\"walkin\");\n    setOfficeName(\"\");\n    setIsCheckInModalOpen(true);\n  };\n\n  const handleCheckOut = (room: any) => {\n    setSelectedRoom(room);\n    setVoucherCode(\"\");\n    setValidatedVoucher(null);\n    setSelectedCheckoutPaymentMethod(\"\");\n    setIsCheckOutModalOpen(true);\n  };\n\n  const handleExtendStay = (room: any) => {\n    setSelectedRoom(room);\n    const currentCheckoutDate = room.occupantDetails?.checkOutDate ? new Date(room.occupantDetails.checkOutDate) : new Date();\n    setNewCheckoutDate(currentCheckoutDate);\n    setIsExtendStayModalOpen(true);\n  };\n\n  const checkInFromReservationMutation = useMutation({\n    mutationFn: async (reservationId: string) => {\n      await apiRequest(\"POST\", `/api/reservations/${reservationId}/check-in`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/reservations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"] });\n      toast({ title: \"Guest checked in successfully from reservation\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Check-in failed\", \n        description: error.message || \"Failed to check in guest from reservation\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleCheckInFromReservation = (reservation: any) => {\n    // Directly check in from reservation using the proper API endpoint\n    checkInFromReservationMutation.mutate(reservation.id);\n  };\n\n  // Filter today's and upcoming reservations\n  const todaysReservations = reservations.filter((res: any) => {\n    const checkInDate = new Date(res.checkInDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    checkInDate.setHours(0, 0, 0, 0);\n    return checkInDate.getTime() === today.getTime() && res.status === 'confirmed';\n  });\n\n  const upcomingReservations = reservations.filter((res: any) => {\n    const checkInDate = new Date(res.checkInDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    checkInDate.setHours(0, 0, 0, 0);\n    return checkInDate.getTime() > today.getTime() && res.status === 'confirmed';\n  }).slice(0, 5); // Show only next 5\n\n  const onSubmitCheckIn = (data: any) => {\n    if (!selectedPaymentMethod && data.advancePayment && Number(data.advancePayment) > 0) {\n      toast({ title: \"Error\", description: \"Please select payment method for advance payment\", variant: \"destructive\" });\n      return;\n    }\n    if (guestType === \"inhouse\" && !officeName.trim()) {\n      toast({ title: \"Error\", description: \"Office name is required for in-house guests\", variant: \"destructive\" });\n      return;\n    }\n    checkInGuestMutation.mutate({ ...data, roomId: selectedRoom?.id, guestType, officeName: guestType === \"inhouse\" ? officeName : null });\n  };\n\n  const onSubmitReservation = (data: any) => {\n    createReservationMutation.mutate(data);\n  };\n\n  const onSubmitRoomService = (data: any) => {\n    // Room service functionality has been replaced with service charges modal\n    toast({ title: \"Please use the Service button on the room card\" });\n  };\n\n  const onSubmitMaintenance = (data: any) => {\n    createMaintenanceMutation.mutate(data);\n  };\n\n  const onSubmitCashDeposit = (data: any) => {\n    createCashDepositMutation.mutate(data);\n  };\n\n  const filteredMenuItems = menuItems.filter((item) => {\n    const matchesSearch = !foodSearchQuery || item.name?.toLowerCase().includes(foodSearchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || item.categoryId === selectedCategory;\n    return matchesSearch && matchesCategory && item.active;\n  });\n\n  const addFoodItem = (item: MenuItem) => {\n    const existing = foodOrderItems.find(i => i.item.id === item.id);\n    if (existing) {\n      setFoodOrderItems(foodOrderItems.map(i => \n        i.item.id === item.id ? { ...i, quantity: i.quantity + 1 } : i\n      ));\n    } else {\n      setFoodOrderItems([...foodOrderItems, { item, quantity: 1 }]);\n    }\n  };\n\n  const removeFoodItem = (itemId: string) => {\n    setFoodOrderItems(foodOrderItems.filter(i => i.item.id !== itemId));\n  };\n\n  const updateFoodQuantity = (itemId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFoodItem(itemId);\n    } else {\n      setFoodOrderItems(foodOrderItems.map(i => \n        i.item.id === itemId ? { ...i, quantity } : i\n      ));\n    }\n  };\n\n  const submitFoodOrder = async () => {\n    if (!selectedRoom || foodOrderItems.length === 0) {\n      toast({ title: \"Error\", description: \"Please select a room and add items\", variant: \"destructive\" });\n      return;\n    }\n\n    try {\n      // Calculate total amount\n      const totalAmount = foodOrderItems.reduce((sum, { item, quantity }) => \n        sum + Number(item.price) * quantity, 0\n      );\n\n      // Create itemized list for room service order\n      const itemsList = foodOrderItems.map(({ item, quantity }) => \n        `${item.name} x ${quantity} - ${formatCurrency(Number(item.price) * quantity)}`\n      ).join('\\n');\n\n      // Get current occupant details and add food charges\n      const currentOccupantDetails = selectedRoom.occupantDetails || {};\n      const existingFoodCharges = currentOccupantDetails.foodCharges || [];\n      \n      const newFoodCharge = {\n        items: foodOrderItems.map(({ item, quantity }) => ({\n          name: item.name,\n          quantity,\n          price: Number(item.price),\n          total: Number(item.price) * quantity\n        })),\n        totalAmount,\n        orderedAt: new Date().toISOString(),\n        orderedBy: user?.username\n      };\n\n      // Update room with food charges in occupantDetails\n      await apiRequest(\"PUT\", `/api/rooms/${selectedRoom.id}`, {\n        occupantDetails: {\n          ...currentOccupantDetails,\n          foodCharges: [...existingFoodCharges, newFoodCharge]\n        }\n      });\n\n      // Create room service order for record keeping\n      await apiRequest(\"POST\", \"/api/room-service-orders\", {\n        hotelId: user?.hotelId,\n        roomId: selectedRoom.id,\n        requestedBy: user?.id,\n        status: 'completed',\n        specialInstructions: `Food Order:\\n${itemsList}\\nTotal: ${formatCurrency(totalAmount)}`\n      });\n\n      toast({ title: \"Food order added to room bill successfully\" });\n      setFoodOrderItems([]);\n      setFoodSearchQuery(\"\");\n      setSelectedCategory(\"all\");\n      setIsFoodOrderModalOpen(false);\n      setSelectedRoom(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"room-service-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"] });\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to submit food order\", variant: \"destructive\" });\n    }\n  };\n\n  const handlePrintReceipt = (room: any, type: 'checkin' | 'checkout' | 'bill') => {\n    const guest = room.occupantDetails;\n    const mealPlan = guest?.mealPlan;\n    const roomType = rooms.find(r => r.id === room.id)?.roomType;\n    const hotelName = hotel?.name || 'HOTEL MANAGEMENT';\n    const hotelAddress = hotel?.address || '';\n    const hotelPhone = hotel?.phone || '';\n    const hotelZip = hotel?.zip || '';\n    const hotelVatNo = hotel?.vatNo || '';\n    \n    // Calculate bill for checkout\n    const billCalc = type === 'checkout' ? calculateCheckoutBill(room) : null;\n    \n    let receiptHTML = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>${type === 'checkin' ? 'Check-in' : type === 'checkout' ? 'Check-out' : 'Bill'} Receipt</title>\n          <style>\n            @media print {\n              @page { margin: 0; size: 80mm auto; }\n              body { margin: 0; padding: 0; }\n            }\n            body {\n              font-family: 'Courier New', monospace;\n              font-size: 12px;\n              line-height: 1.4;\n              max-width: 300px;\n              margin: 0 auto;\n              padding: 10px;\n            }\n            .center { text-align: center; }\n            .bold { font-weight: bold; }\n            .line { border-top: 1px dashed #000; margin: 5px 0; }\n            .double-line { border-top: 2px solid #000; margin: 5px 0; }\n            .item-row { display: flex; justify-content: space-between; margin: 3px 0; }\n            .total { font-size: 14px; font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <div class=\"center bold\" style=\"font-size: 16px;\">${hotelName.toUpperCase()}</div>\n          ${hotelAddress ? `<div class=\"center\">${hotelAddress}</div>` : ''}\n          ${hotelZip ? `<div class=\"center\">Zip: ${hotelZip}</div>` : ''}\n          ${hotelPhone ? `<div class=\"center\">Phone: ${hotelPhone}</div>` : ''}\n          ${hotelVatNo ? `<div class=\"center\">VAT No: ${hotelVatNo}</div>` : ''}\n          <div class=\"center\">================================</div>\n          <div class=\"center bold\">${type === 'checkin' ? 'CHECK-IN RECEIPT' : type === 'checkout' ? 'CHECK-OUT RECEIPT' : 'BILL'}</div>\n          <div class=\"center\">================================</div>\n          <br>\n          <div>Date: ${new Date().toLocaleDateString()}</div>\n          <div>Time: ${new Date().toLocaleTimeString()}</div>\n          <div>Receipt #: ${Date.now().toString().slice(-8)}</div>\n          <div class=\"line\"></div>\n          <div class=\"bold\">GUEST DETAILS</div>\n          <div>Name: ${guest?.name || 'N/A'}</div>\n          <div>Room: ${room.roomNumber}${roomType ? ` (${roomType.name})` : ''}</div>\n          <div>Number of People: ${guest?.mealPlan?.numberOfPersons || 1}</div>\n          ${guest?.phone ? `<div>Phone: ${guest.phone}</div>` : ''}\n          ${guest?.email ? `<div>Email: ${guest.email}</div>` : ''}\n          ${guest?.nationality ? `<div>Nationality: ${guest.nationality}</div>` : ''}\n          ${guest?.idNumber ? `<div>ID: ${guest.idNumber}</div>` : ''}\n          ${guest?.guestType ? `<div>Type: ${guest.guestType === 'inhouse' ? 'In-House' : 'Walk-in'}</div>` : ''}\n          ${guest?.officeName ? `<div>Office: ${guest.officeName}</div>` : ''}\n          <div class=\"line\"></div>\n          ${type === 'checkin' ? `\n            <div class=\"bold\">CHECK-IN INFORMATION</div>\n            <div>Check-in: ${guest?.checkInDate ? new Date(guest.checkInDate).toLocaleDateString() : 'N/A'}</div>\n            <div>Check-out: ${guest?.checkOutDate ? new Date(guest.checkOutDate).toLocaleDateString() : 'N/A'}</div>\n            ${mealPlan ? `\n              <div class=\"line\"></div>\n              <div class=\"bold\">MEAL PLAN</div>\n              <div>${mealPlan.planName} (${mealPlan.planType})</div>\n              <div>${mealPlan.numberOfPersons} person(s) x ${formatCurrency(Number(mealPlan.pricePerPerson))}</div>\n              <div class=\"bold\">Total: ${formatCurrency(mealPlan.totalCost)}</div>\n            ` : ''}\n          ` : type === 'checkout' && billCalc ? `\n            <div class=\"bold\">CHECK-OUT INFORMATION</div>\n            <div>Check-in: ${guest?.checkInDate ? new Date(guest.checkInDate).toLocaleDateString() : 'N/A'}</div>\n            <div>Check-out: ${new Date().toLocaleDateString()}</div>\n            <div>Duration: ${billCalc.numberOfNights} ${billCalc.numberOfNights === 1 ? 'night' : 'nights'}</div>\n            <div class=\"line\"></div>\n            <div class=\"bold\">CHARGES SUMMARY</div>\n            ${billCalc.totalRoomCharges > 0 ? `\n              <div class=\"item-row\">\n                <span>Room (${billCalc.numberOfNights}x${formatCurrency(Number(guest?.roomPrice || 0))}):</span>\n                <span>${formatCurrency(billCalc.totalRoomCharges)}</span>\n              </div>\n            ` : ''}\n            ${billCalc.totalMealPlanCharges > 0 ? `\n              <div class=\"item-row\">\n                <span>Meal Plan (${billCalc.numberOfNights}x${formatCurrency(billCalc.mealPlanCostPerNight)}):</span>\n                <span>${formatCurrency(billCalc.totalMealPlanCharges)}</span>\n              </div>\n            ` : ''}\n            ${billCalc.totalFoodCharges > 0 && guest?.foodCharges?.length > 0 ? `\n              <div class=\"bold\" style=\"margin-top: 5px;\">Food & Beverage:</div>\n              ${guest.foodCharges.map((charge: any) => \n                charge.items.map((item: any) => `\n                  <div class=\"item-row\" style=\"font-size: 11px; padding-left: 10px;\">\n                    <span>${item.name} x ${item.quantity}</span>\n                    <span>${formatCurrency(item.total)}</span>\n                  </div>\n                `).join('')\n              ).join('')}\n              <div class=\"item-row\" style=\"padding-left: 10px;\">\n                <span class=\"bold\">F&B Subtotal:</span>\n                <span class=\"bold\">${formatCurrency(billCalc.totalFoodCharges)}</span>\n              </div>\n            ` : ''}\n            ${billCalc.totalServiceCharges > 0 && billCalc.serviceCharges?.length > 0 ? `\n              <div class=\"bold\" style=\"margin-top: 5px;\">Room Service Charges:</div>\n              ${billCalc.serviceCharges.map((charge: any) => `\n                <div class=\"item-row\" style=\"font-size: 11px; padding-left: 10px;\">\n                  <span>${charge.serviceName} (${charge.quantity} ${charge.unit})</span>\n                  <span>${formatCurrency(parseFloat(charge.totalCharge))}</span>\n                </div>\n              `).join('')}\n              <div class=\"item-row\" style=\"padding-left: 10px;\">\n                <span class=\"bold\">Service Subtotal:</span>\n                <span class=\"bold\">${formatCurrency(billCalc.totalServiceCharges)}</span>\n              </div>\n            ` : ''}\n            <div class=\"line\"></div>\n            <div class=\"item-row\">\n              <span>Subtotal:</span>\n              <span>${formatCurrency(billCalc.subtotal)}</span>\n            </div>\n            ${billCalc.discountAmount > 0 ? `\n              <div class=\"item-row\">\n                <span>Discount ${validatedVoucher ? `(${validatedVoucher.code})` : ''}:</span>\n                <span>-${formatCurrency(billCalc.discountAmount)}</span>\n              </div>\n              <div class=\"item-row bold\">\n                <span>Discounted Subtotal:</span>\n                <span>${formatCurrency(billCalc.discountedSubtotal)}</span>\n              </div>\n            ` : ''}\n            ${Object.entries(billCalc.taxBreakdown).map(([name, tax]: [string, any]) => `\n              <div class=\"item-row\">\n                <span>${name} (${tax.rate}%):</span>\n                <span>${formatCurrency(tax.amount)}</span>\n              </div>\n            `).join('')}\n            ${billCalc.totalTax > 0 ? `\n              <div class=\"item-row\">\n                <span>Total Tax:</span>\n                <span>${formatCurrency(billCalc.totalTax)}</span>\n              </div>\n            ` : ''}\n            <div class=\"double-line\"></div>\n            <div class=\"item-row total\">\n              <span>GRAND TOTAL:</span>\n              <span>${formatCurrency(billCalc.grandTotal)}</span>\n            </div>\n          ` : ''}\n          <div class=\"double-line\"></div>\n          <div class=\"center\">Served by: ${user?.username}</div>\n          <div class=\"center\">================================</div>\n          <div class=\"center bold\">THANK YOU FOR YOUR STAY!</div>\n          <div class=\"center\">================================</div>\n          <br>\n        </body>\n      </html>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(receiptHTML);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  const handlePrintReservationConfirmation = () => {\n    const confirmationContent = `\n      ========================================\n                GRAND PLAZA HOTEL\n            Reservation Confirmation\n      ========================================\n      Confirmation Date: ${new Date().toLocaleDateString()}\n      Time: ${new Date().toLocaleTimeString()}\n      ========================================\n      Your reservation has been confirmed.\n      Thank you for choosing our hotel!\n      ========================================\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Reservation Confirmation</title>\n            <style>\n              body { font-family: monospace; white-space: pre-line; }\n            </style>\n          </head>\n          <body>${confirmationContent}</body>\n        </html>\n      `);\n      printWindow.document.close();\n      printWindow.print();\n      printWindow.close();\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Front Desk Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Available Rooms\"\n            value={availableRooms.length}\n            icon={<Bed />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Occupied Rooms\"\n            value={occupiedRooms.length}\n            icon={<UserCheck />}\n            iconColor=\"text-blue-500\"\n            trend={{ \n              value: rooms.length > 0 ? Math.round((occupiedRooms.length / rooms.length) * 100) : 0, \n              label: \"occupancy\", \n              isPositive: true \n            }}\n          />\n          <StatsCard\n            title=\"Today's Check-ins\"\n            value={todaysCheckIns.length}\n            icon={<CalendarPlus />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"Today's Check-outs\"\n            value={todaysCheckOuts.length}\n            icon={<UserMinus />}\n            iconColor=\"text-red-500\"\n          />\n        </div>\n\n        {/* Quick Actions - Grouped Operations */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle>Front Desk Operations</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Guest Services */}\n            <div>\n              <h3 className=\"text-sm font-semibold text-muted-foreground mb-3 flex items-center gap-2\">\n                <Users className=\"h-4 w-4\" />\n                Guest Services\n              </h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-blue-50 hover:bg-blue-100 border-blue-200 dark:bg-blue-950/20 dark:border-blue-900 dark:hover:bg-blue-950/30\"\n                  onClick={() => setIsCheckInModalOpen(true)}\n                  data-testid=\"button-check-in\"\n                >\n                  <UserCheck className=\"h-7 w-7 text-blue-600\" />\n                  <span className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">Check-in Guest</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-green-50 hover:bg-green-100 border-green-200 dark:bg-green-950/20 dark:border-green-900 dark:hover:bg-green-950/30\"\n                  onClick={() => setIsReservationModalOpen(true)}\n                  data-testid=\"button-new-reservation\"\n                >\n                  <CalendarPlus className=\"h-7 w-7 text-green-600\" />\n                  <span className=\"text-sm font-medium text-green-900 dark:text-green-100\">New Booking</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-purple-50 hover:bg-purple-100 border-purple-200 dark:bg-purple-950/20 dark:border-purple-900 dark:hover:bg-purple-950/30\"\n                  onClick={() => setIsViewReservationsModalOpen(true)}\n                  data-testid=\"button-view-reservations\"\n                >\n                  <CalendarCheck className=\"h-7 w-7 text-purple-600\" />\n                  <span className=\"text-sm font-medium text-purple-900 dark:text-purple-100\">All Bookings</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Service Requests */}\n            <div>\n              <h3 className=\"text-sm font-semibold text-muted-foreground mb-3 flex items-center gap-2\">\n                <HandPlatter className=\"h-4 w-4\" />\n                Service & Support\n              </h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-orange-50 hover:bg-orange-100 border-orange-200 dark:bg-orange-950/20 dark:border-orange-900 dark:hover:bg-orange-950/30\"\n                  onClick={() => setIsFoodOrderModalOpen(true)}\n                  data-testid=\"button-food-order\"\n                >\n                  <Utensils className=\"h-7 w-7 text-orange-600\" />\n                  <span className=\"text-sm font-medium text-orange-900 dark:text-orange-100\">Food Order</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-teal-50 hover:bg-teal-100 border-teal-200 dark:bg-teal-950/20 dark:border-teal-900 dark:hover:bg-teal-950/30\"\n                  onClick={() => {\n                    // Show room selector modal\n                    if (occupiedRooms.length === 0) {\n                      toast({ title: \"No occupied rooms\", description: \"There are no occupied rooms to add service charges to\", variant: \"destructive\" });\n                    } else {\n                      setIsRoomServiceModalOpen(true);\n                    }\n                  }}\n                  data-testid=\"button-room-service\"\n                >\n                  <HandPlatter className=\"h-7 w-7 text-teal-600\" />\n                  <span className=\"text-sm font-medium text-teal-900 dark:text-teal-100\">Room Service</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-red-50 hover:bg-red-100 border-red-200 dark:bg-red-950/20 dark:border-red-900 dark:hover:bg-red-950/30\"\n                  onClick={() => setLocation('/front-desk/maintenance-requests')}\n                  data-testid=\"button-maintenance-request\"\n                >\n                  <Wrench className=\"h-7 w-7 text-red-600\" />\n                  <span className=\"text-sm font-medium text-red-900 dark:text-red-100\">Maintenance</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Finance & Administrative */}\n            <div>\n              <h3 className=\"text-sm font-semibold text-muted-foreground mb-3 flex items-center gap-2\">\n                <CreditCard className=\"h-4 w-4\" />\n                Finance & Admin\n              </h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-emerald-50 hover:bg-emerald-100 border-emerald-200 dark:bg-emerald-950/20 dark:border-emerald-900 dark:hover:bg-emerald-950/30\"\n                  onClick={() => setIsCashDepositModalOpen(true)}\n                  data-testid=\"button-cash-deposit\"\n                >\n                  <DollarSign className=\"h-7 w-7 text-emerald-600\" />\n                  <span className=\"text-sm font-medium text-emerald-900 dark:text-emerald-100\">Cash Deposit</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-indigo-50 hover:bg-indigo-100 border-indigo-200 dark:bg-indigo-950/20 dark:border-indigo-900 dark:hover:bg-indigo-950/30\"\n                  onClick={() => setLocation('/hall-bookings')}\n                  data-testid=\"button-hall-bookings\"\n                >\n                  <Building2 className=\"h-7 w-7 text-indigo-600\" />\n                  <span className=\"text-sm font-medium text-indigo-900 dark:text-indigo-100\">Hall Bookings</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-24 flex flex-col items-center justify-center gap-2 bg-slate-50 hover:bg-slate-100 border-slate-200 dark:bg-slate-950/20 dark:border-slate-700 dark:hover:bg-slate-950/30\"\n                  onClick={() => {\n                    const room = rooms.find(r => r.isOccupied);\n                    if (room) handlePrintReceipt(room, 'bill');\n                    else toast({ title: \"No occupied rooms to print\", variant: \"destructive\" });\n                  }}\n                  data-testid=\"button-print-reports\"\n                >\n                  <Printer className=\"h-7 w-7 text-slate-600\" />\n                  <span className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">Print Bill</span>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Today's Reservations */}\n        {todaysReservations.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CalendarCheck className=\"h-5 w-5\" />\n                Today's Expected Arrivals ({todaysReservations.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {todaysReservations.map((reservation: any) => {\n                  const room = rooms.find(r => r.id === reservation.roomId);\n                  return (\n                    <div \n                      key={reservation.id} \n                      className=\"flex items-center justify-between p-4 border rounded-lg bg-blue-50 dark:bg-blue-950/20\"\n                      data-testid={`reservation-today-${reservation.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"font-semibold text-lg\" data-testid=\"text-guest-name\">{reservation.guestName}</div>\n                        <div className=\"text-sm text-muted-foreground space-y-1\">\n                          <div className=\"flex items-center gap-4\">\n                            <span className=\"flex items-center gap-1\">\n                              <Smartphone className=\"h-3 w-3\" />\n                              {reservation.guestPhone}\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Bed className=\"h-3 w-3\" />\n                              Room {room?.roomNumber || 'N/A'}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-4\">\n                            <span>{reservation.numberOfPersons} {reservation.numberOfPersons === 1 ? 'person' : 'persons'}</span>\n                            <span>Check-out: {new Date(reservation.checkOutDate).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <Button \n                        onClick={() => handleCheckInFromReservation(reservation)}\n                        size=\"sm\"\n                        className=\"ml-4\"\n                        data-testid=\"button-quick-checkin\"\n                      >\n                        <UserCheck className=\"h-4 w-4 mr-1\" />\n                        Quick Check-in\n                      </Button>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Upcoming Reservations */}\n        {upcomingReservations.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CalendarDays className=\"h-5 w-5\" />\n                Upcoming Reservations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {upcomingReservations.map((reservation: any) => {\n                  const room = rooms.find(r => r.id === reservation.roomId);\n                  return (\n                    <div \n                      key={reservation.id} \n                      className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      data-testid={`reservation-upcoming-${reservation.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\" data-testid=\"text-guest-name\">{reservation.guestName}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          <span className=\"mr-4\">Room {room?.roomNumber || 'N/A'}</span>\n                          <span className=\"mr-4\">Check-in: {new Date(reservation.checkInDate).toLocaleDateString()}</span>\n                          <span>{reservation.numberOfPersons} {reservation.numberOfPersons === 1 ? 'person' : 'persons'}</span>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"ml-4\">\n                        {Math.ceil((new Date(reservation.checkInDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} days\n                      </Badge>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Room Status Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Room Status Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-2 sm:gap-3 md:gap-4\">\n              {rooms.slice(0, 12).map((room, index) => (\n                <div\n                  key={room.id}\n                  className={`p-2 sm:p-3 md:p-4 border-2 rounded-lg text-center ${\n                    room.isOccupied \n                      ? 'border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/20' \n                      : 'border-green-300 bg-green-50 dark:border-green-700 dark:bg-green-900/20'\n                  }`}\n                  data-testid={`room-status-${index}`}\n                >\n                  <Bed className={`h-5 w-5 sm:h-6 sm:w-6 mx-auto mb-1 sm:mb-2 ${room.isOccupied ? 'text-red-600' : 'text-green-600'}`} />\n                  <h3 className=\"font-medium text-sm sm:text-base text-foreground\">{room.roomNumber}</h3>\n                  <p className=\"text-xs text-muted-foreground mb-1 sm:mb-2\">\n                    {room.roomType?.name || 'Standard'}\n                  </p>\n                  <Badge \n                    variant=\"secondary\" \n                    className={room.isOccupied ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}\n                  >\n                    {room.isOccupied ? 'Occupied' : 'Available'}\n                  </Badge>\n                  {room.isOccupied && room.occupantDetails ? (\n                    <div className=\"mt-2 space-y-1\">\n                      <p className=\"text-xs text-foreground font-medium\">{(room.occupantDetails as any)?.name || 'Guest'}</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={async () => {\n                            let reservation = reservations.find((r: any) => \n                              r.roomId === room.id && r.status === 'checked_in'\n                            );\n                            \n                            if (reservation) {\n                              setSelectedReservationForService(reservation.id);\n                              setIsServiceChargeModalOpen(true);\n                            } else {\n                              // Create a reservation for this checked-in room\n                              try {\n                                const occupantDetails = room.occupantDetails as any;\n                                const response = await apiRequest(\"POST\", \"/api/reservations\", {\n                                  hotelId: user?.hotelId,\n                                  guestName: occupantDetails?.name || 'Guest',\n                                  guestEmail: occupantDetails?.email || '',\n                                  guestPhone: occupantDetails?.phone || '',\n                                  roomId: room.id,\n                                  checkInDate: occupantDetails?.checkInDate || new Date().toISOString(),\n                                  checkOutDate: occupantDetails?.checkOutDate || new Date(Date.now() + 86400000).toISOString(),\n                                  numberOfPersons: occupantDetails?.mealPlan?.numberOfPersons || 1,\n                                  mealPlanId: occupantDetails?.mealPlan?.planId || null,\n                                  roomPrice: String(occupantDetails?.roomPrice || 0),\n                                  mealPlanPrice: String(occupantDetails?.mealPlan?.totalCost || 0),\n                                  totalPrice: String(parseFloat(occupantDetails?.roomPrice || 0) + parseFloat(occupantDetails?.mealPlan?.totalCost || 0)),\n                                  guestType: occupantDetails?.guestType || 'walkin',\n                                  status: 'checked_in',\n                                  createdBy: user?.id\n                                });\n                                \n                                const newReservation = await response.json();\n                                setSelectedReservationForService(newReservation.id);\n                                queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/reservations\"] });\n                                setIsServiceChargeModalOpen(true);\n                              } catch (error: any) {\n                                toast({ \n                                  title: \"Error creating reservation\", \n                                  description: error.message || \"Failed to create reservation for service\",\n                                  variant: \"destructive\" \n                                });\n                              }\n                            }\n                          }}\n                          className=\"h-6 text-xs px-2\"\n                          data-testid={`button-service-${index}`}\n                        >\n                          <HandPlatter className=\"h-3 w-3 mr-1\" />\n                          Service\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleCheckOut(room)}\n                          className=\"h-6 text-xs px-2\"\n                          data-testid={`button-checkout-${index}`}\n                        >\n                          Check Out\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleExtendStay(room)}\n                          className=\"h-6 text-xs px-2\"\n                          data-testid={`button-extend-${index}`}\n                        >\n                          Extend\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handlePrintReceipt(room, 'checkout')}\n                          className=\"h-6 text-xs px-2\"\n                          data-testid={`button-print-${index}`}\n                        >\n                          Print\n                        </Button>\n                      </div>\n                    </div>\n                  ) : !room.isOccupied ? (\n                    <Button\n                      size=\"sm\"\n                      className=\"mt-2 h-6 text-xs\"\n                      onClick={() => handleCheckIn(room)}\n                      data-testid={`button-checkin-${index}`}\n                    >\n                      Check In\n                    </Button>\n                  ) : null}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Task Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>My Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {tasks.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-tasks-message\">\n                  No tasks assigned\n                </p>\n              ) : (\n                tasks.slice(0, 5).map((task, index) => (\n                  <div key={task.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`task-item-${index}`}>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-foreground\">{task.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{task.description}</p>\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Badge className={getStatusColor(task.status || 'pending')} variant=\"secondary\">\n                          {task.status}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {task.createdAt ? new Date(task.createdAt).toLocaleDateString() : 'N/A'}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col space-y-1\">\n                      {task.status === 'pending' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleTaskStatusUpdate(task, 'performing')}\n                          disabled={updateTaskMutation.isPending}\n                          data-testid={`button-start-task-${index}`}\n                        >\n                          Start\n                        </Button>\n                      )}\n                      {task.status === 'performing' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleTaskStatusUpdate(task, 'completed')}\n                          disabled={updateTaskMutation.isPending}\n                          data-testid={`button-complete-task-${index}`}\n                        >\n                          Complete\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Room Service Orders */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Room Service Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {roomServiceOrders.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-room-service-message\">\n                  No room service orders\n                </p>\n              ) : (\n                roomServiceOrders.slice(0, 5).map((order, index) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`room-service-item-${index}`}>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-foreground\">\n                        Room {rooms.find(r => r.id === order.roomId)?.roomNumber || 'Unknown'}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">{order.specialInstructions}</p>\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Badge className={getStatusColor(order.status || 'pending')} variant=\"secondary\">\n                          {order.status}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Check-in Modal */}\n        <Dialog open={isCheckInModalOpen} onOpenChange={setIsCheckInModalOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                Check-in Guest - Room {selectedRoom?.roomNumber}\n              </DialogTitle>\n            </DialogHeader>\n            \n            {/* Guest Search Feature */}\n            <div className=\"space-y-3 border-b pb-4 mb-4\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Search Existing Guest</label>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setSelectedGuest(null);\n                    setGuestSearchQuery(\"\");\n                    checkInForm.reset();\n                  }}\n                  data-testid=\"button-clear-guest\"\n                >\n                  Clear\n                </Button>\n              </div>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by name or phone...\"\n                  value={guestSearchQuery}\n                  onChange={(e) => setGuestSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-guest\"\n                />\n              </div>\n              \n              {guestSearchQuery && (\n                <div className=\"max-h-40 overflow-y-auto border rounded-md\">\n                  {guests.filter((guest: any) => {\n                    const search = guestSearchQuery.toLowerCase();\n                    return (\n                      guest.firstName.toLowerCase().includes(search) ||\n                      guest.lastName.toLowerCase().includes(search) ||\n                      guest.phone.toLowerCase().includes(search)\n                    );\n                  }).length === 0 ? (\n                    <div className=\"p-3 text-sm text-muted-foreground text-center\">\n                      No guests found. Enter details below to check in a new guest.\n                    </div>\n                  ) : (\n                    guests.filter((guest: any) => {\n                      const search = guestSearchQuery.toLowerCase();\n                      return (\n                        guest.firstName.toLowerCase().includes(search) ||\n                        guest.lastName.toLowerCase().includes(search) ||\n                        guest.phone.toLowerCase().includes(search)\n                      );\n                    }).map((guest: any) => (\n                      <button\n                        key={guest.id}\n                        type=\"button\"\n                        onClick={() => {\n                          setSelectedGuest(guest);\n                          setGuestSearchQuery(\"\");\n                          checkInForm.setValue(\"guestName\", `${guest.firstName} ${guest.lastName}`);\n                          checkInForm.setValue(\"guestEmail\", guest.email || \"\");\n                          checkInForm.setValue(\"guestPhone\", guest.phone || \"\");\n                          checkInForm.setValue(\"idNumber\", guest.idNumber || \"\");\n                          checkInForm.setValue(\"nationality\", guest.nationality || \"\");\n                          toast({ title: `Selected guest: ${guest.firstName} ${guest.lastName}` });\n                        }}\n                        className=\"w-full p-3 text-left hover:bg-accent transition-colors border-b last:border-b-0\"\n                        data-testid={`button-select-guest-${guest.id}`}\n                      >\n                        <div className=\"font-medium\">{guest.firstName} {guest.lastName}</div>\n                        <div className=\"text-sm text-muted-foreground\">{guest.phone}</div>\n                        {guest.email && <div className=\"text-xs text-muted-foreground\">{guest.email}</div>}\n                      </button>\n                    ))\n                  )}\n                </div>\n              )}\n              \n              {selectedGuest && (\n                <div className=\"p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                        ✓ Guest Selected: {selectedGuest.firstName} {selectedGuest.lastName}\n                      </p>\n                      <p className=\"text-xs text-green-700 dark:text-green-300\">{selectedGuest.phone}</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <Form {...checkInForm}>\n              <form onSubmit={checkInForm.handleSubmit(onSubmitCheckIn)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={checkInForm.control}\n                    name=\"guestName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Guest Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Full name\" data-testid=\"input-guest-name\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={checkInForm.control}\n                    name=\"guestEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" placeholder=\"email@example.com\" data-testid=\"input-guest-email\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={checkInForm.control}\n                    name=\"guestPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Phone number\" data-testid=\"input-guest-phone\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={checkInForm.control}\n                    name=\"idNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Passport/ID number\" data-testid=\"input-id-number\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={checkInForm.control}\n                    name=\"nationality\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nationality</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Country of origin\" data-testid=\"input-nationality\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"space-y-4 border-t pt-4\">\n                  <h4 className=\"font-medium\">Guest Type</h4>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant={guestType === 'walkin' ? 'default' : 'outline'}\n                      onClick={() => { setGuestType('walkin'); setOfficeName(''); }}\n                      className=\"flex-1\"\n                      data-testid=\"button-guest-type-walkin\"\n                    >\n                      Walk-in\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant={guestType === 'inhouse' ? 'default' : 'outline'}\n                      onClick={() => setGuestType('inhouse')}\n                      className=\"flex-1\"\n                      data-testid=\"button-guest-type-inhouse\"\n                    >\n                      In-House\n                    </Button>\n                  </div>\n                  {guestType === 'inhouse' && (\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Office Name *</label>\n                      <Input \n                        value={officeName}\n                        onChange={(e) => setOfficeName(e.target.value)}\n                        placeholder=\"Enter office/company name\"\n                        data-testid=\"input-office-name\"\n                      />\n                    </div>\n                  )}\n                  <div className=\"text-sm text-muted-foreground\">\n                    {selectedRoom && selectedRoom.roomType && (\n                      <div className=\"flex justify-between p-2 bg-muted rounded\">\n                        <span>Room Rate ({guestType === 'inhouse' ? 'In-House' : 'Walk-in'}):</span>\n                        <span className=\"font-semibold\">\n                          NPR {parseFloat(guestType === 'inhouse' ? (selectedRoom.roomType.priceInhouse || '0') : (selectedRoom.roomType.priceWalkin || '0')).toFixed(2)}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={checkInForm.control}\n                    name=\"mealPlanId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Meal Plan (Optional)</FormLabel>\n                        <FormControl>\n                          <select \n                            {...field} \n                            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                            data-testid=\"select-meal-plan\"\n                          >\n                            <option value=\"\">No meal plan</option>\n                            {mealPlans.map((plan: any) => (\n                              <option key={plan.id} value={plan.id}>\n                                {plan.planType} - {plan.planName} (NPR {parseFloat(plan.pricePerPerson).toFixed(2)}/person)\n                              </option>\n                            ))}\n                          </select>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {checkInForm.watch('mealPlanId') && (\n                    <FormField\n                      control={checkInForm.control}\n                      name=\"numberOfPersons\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Number of Persons</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"number\" min=\"1\" placeholder=\"1\" data-testid=\"input-number-of-persons\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  )}\n                  \n                  <FormField\n                    control={checkInForm.control}\n                    name=\"checkInDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Check-in Date</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-checkin-date\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={checkInForm.control}\n                    name=\"checkOutDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Check-out Date</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-checkout-date\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={checkInForm.control}\n                  name=\"advancePayment\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Advance Payment (Optional)</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" placeholder=\"0\" data-testid=\"input-advance-payment\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                {checkInForm.watch('advancePayment') && Number(checkInForm.watch('advancePayment')) > 0 && (\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium\">Payment Method</h4>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant={selectedPaymentMethod === 'cash' ? 'default' : 'outline'}\n                        onClick={() => setSelectedPaymentMethod('cash')}\n                        data-testid=\"button-payment-cash\"\n                      >\n                        <DollarSign className=\"h-4 w-4 mr-2\" />\n                        Cash\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={selectedPaymentMethod === 'pos' ? 'default' : 'outline'}\n                        onClick={() => setSelectedPaymentMethod('pos')}\n                        data-testid=\"button-payment-pos\"\n                      >\n                        <CreditCard className=\"h-4 w-4 mr-2\" />\n                        POS\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={selectedPaymentMethod === 'fonepay' ? 'default' : 'outline'}\n                        onClick={() => setSelectedPaymentMethod('fonepay')}\n                        data-testid=\"button-payment-fonepay\"\n                      >\n                        <Smartphone className=\"h-4 w-4 mr-2\" />\n                        Fonepay\n                      </Button>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={checkInGuestMutation.isPending}\n                    data-testid=\"button-confirm-checkin\"\n                  >\n                    {checkInGuestMutation.isPending ? \"Checking In...\" : \"Check In & Print Receipt\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => setIsCheckInModalOpen(false)}\n                    data-testid=\"button-cancel-checkin\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Checkout Modal */}\n        <Dialog open={isCheckOutModalOpen} onOpenChange={setIsCheckOutModalOpen}>\n          <DialogContent className=\"w-full max-w-[95vw] sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"text-xl sm:text-2xl\">Guest Check-out</DialogTitle>\n            </DialogHeader>\n            \n            {selectedRoom && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Room & Guest Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Room Number</p>\n                        <p className=\"font-semibold\">{selectedRoom.roomNumber}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Room Type</p>\n                        <p className=\"font-semibold\">{selectedRoom.occupantDetails?.roomTypeName || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Room Price</p>\n                        <p className=\"font-semibold\">{formatCurrency(Number(selectedRoom.occupantDetails?.roomPrice || 0))}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Guest Name</p>\n                        <p className=\"font-semibold\">{selectedRoom.occupantDetails?.name || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Number of People</p>\n                        <p className=\"font-semibold\">{selectedRoom.occupantDetails?.mealPlan?.numberOfPersons || 1}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Check-in Date</p>\n                        <p className=\"font-semibold\">{selectedRoom.occupantDetails?.checkInDate ? formatDate(selectedRoom.occupantDetails.checkInDate) : 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Check-out Date</p>\n                        <p className=\"font-semibold\">{selectedRoom.occupantDetails?.checkOutDate ? formatDate(selectedRoom.occupantDetails.checkOutDate) : 'N/A'}</p>\n                      </div>\n                    </div>\n                    \n                    {selectedRoom.occupantDetails?.mealPlan && (\n                      <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                        <p className=\"text-sm font-medium mb-1\">Meal Plan</p>\n                        <p className=\"text-sm\">{selectedRoom.occupantDetails.mealPlan.planType} - {selectedRoom.occupantDetails.mealPlan.planName}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {selectedRoom.occupantDetails.mealPlan.numberOfPersons} person(s) × NPR {parseFloat(selectedRoom.occupantDetails.mealPlan.pricePerPerson).toFixed(2)} = NPR {parseFloat(selectedRoom.occupantDetails.mealPlan.totalCost).toFixed(2)}\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Apply Discount Voucher (Optional)</label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={voucherCode}\n                        onChange={(e) => setVoucherCode(e.target.value.toUpperCase())}\n                        placeholder=\"Enter voucher code\"\n                        className=\"flex-1\"\n                        data-testid=\"input-voucher-code\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={handleValidateVoucher}\n                        disabled={isValidatingVoucher || !voucherCode.trim()}\n                        data-testid=\"button-validate-voucher\"\n                      >\n                        {isValidatingVoucher ? \"Validating...\" : \"Apply\"}\n                      </Button>\n                    </div>\n                    {validatedVoucher && (\n                      <div className=\"mt-2 p-2 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md\">\n                        <p className=\"text-sm text-green-700 dark:text-green-400\">\n                          ✓ Voucher \"{validatedVoucher.code}\" applied: {validatedVoucher.discountType === 'percentage' ? `${validatedVoucher.discountAmount}%` : `NPR ${parseFloat(validatedVoucher.discountAmount).toFixed(2)}`} off\n                        </p>\n                      </div>\n                    )}\n                  </div>\n\n                  {(() => {\n                    const billCalc = calculateCheckoutBill(selectedRoom);\n                    const roomPricePerNight = selectedRoom.occupantDetails?.roomPrice || 0;\n\n                    return (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">Payment Summary</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2\">\n                          <div className=\"flex justify-between items-start gap-2\">\n                            <span className=\"text-sm sm:text-base\">Room Charges ({billCalc.numberOfNights} {billCalc.numberOfNights === 1 ? 'night' : 'nights'} × NPR {parseFloat(roomPricePerNight.toString()).toFixed(2)})</span>\n                            <span className=\"font-medium text-sm sm:text-base shrink-0\" data-testid=\"checkout-room-price\">NPR {billCalc.totalRoomCharges.toFixed(2)}</span>\n                          </div>\n                          {billCalc.totalMealPlanCharges > 0 && (\n                            <div className=\"flex justify-between items-start gap-2\">\n                              <span className=\"text-sm sm:text-base\">Meal Plan Charges ({billCalc.numberOfNights} {billCalc.numberOfNights === 1 ? 'night' : 'nights'} × NPR {billCalc.mealPlanCostPerNight.toFixed(2)})</span>\n                              <span className=\"font-medium text-sm sm:text-base shrink-0\" data-testid=\"checkout-meal-price\">NPR {billCalc.totalMealPlanCharges.toFixed(2)}</span>\n                            </div>\n                          )}\n                          {billCalc.totalFoodCharges > 0 && (\n                            <div className=\"space-y-1\">\n                              <div className=\"font-medium text-sm\">Food & Beverage:</div>\n                              {selectedRoom.occupantDetails?.foodCharges?.map((charge: any, chargeIdx: number) => (\n                                <div key={chargeIdx} className=\"pl-4 space-y-0.5\">\n                                  {charge.items.map((item: any, itemIdx: number) => (\n                                    <div key={itemIdx} className=\"flex justify-between text-sm text-muted-foreground\">\n                                      <span>{item.name} × {item.quantity}</span>\n                                      <span>NPR {item.total.toFixed(2)}</span>\n                                    </div>\n                                  ))}\n                                </div>\n                              ))}\n                              <div className=\"flex justify-between font-medium text-sm pl-4 pt-1 border-t\">\n                                <span>F&B Subtotal:</span>\n                                <span data-testid=\"checkout-food-price\">NPR {billCalc.totalFoodCharges.toFixed(2)}</span>\n                              </div>\n                            </div>\n                          )}\n                          {billCalc.totalServiceCharges > 0 && (\n                            <div className=\"space-y-1\">\n                              <div className=\"font-medium text-sm\">Room Service Charges:</div>\n                              {billCalc.serviceCharges.map((charge: any, chargeIdx: number) => (\n                                <div key={chargeIdx} className=\"pl-4 flex justify-between text-sm text-muted-foreground\">\n                                  <span>{charge.serviceName} ({charge.quantity} {charge.unit})</span>\n                                  <span>NPR {parseFloat(charge.totalCharge).toFixed(2)}</span>\n                                </div>\n                              ))}\n                              <div className=\"flex justify-between font-medium text-sm pl-4 pt-1 border-t\">\n                                <span>Service Subtotal:</span>\n                                <span data-testid=\"checkout-service-price\">NPR {billCalc.totalServiceCharges.toFixed(2)}</span>\n                              </div>\n                            </div>\n                          )}\n                          <div className=\"flex justify-between pt-1 border-t\">\n                            <span>Subtotal</span>\n                            <span data-testid=\"checkout-subtotal\">NPR {billCalc.subtotal.toFixed(2)}</span>\n                          </div>\n                          {billCalc.discountAmount > 0 && (\n                            <div className=\"flex justify-between text-green-600\">\n                              <span>Discount {validatedVoucher ? `(${validatedVoucher.code})` : ''}</span>\n                              <span data-testid=\"checkout-discount\">- NPR {billCalc.discountAmount.toFixed(2)}</span>\n                            </div>\n                          )}\n                          {billCalc.discountAmount > 0 && (\n                            <div className=\"flex justify-between pt-1 border-t font-medium\">\n                              <span>Discounted Subtotal</span>\n                              <span data-testid=\"checkout-discounted-subtotal\">NPR {billCalc.discountedSubtotal.toFixed(2)}</span>\n                            </div>\n                          )}\n                          {Object.keys(billCalc.taxBreakdown).map((taxType) => {\n                            const details = billCalc.taxBreakdown[taxType];\n                            return (\n                              <div key={taxType} className=\"flex justify-between text-sm\">\n                                <span>{taxType} ({details.rate}%):</span>\n                                <span data-testid={`checkout-tax-${taxType.toLowerCase().replace(/\\s+/g, '-')}`}>NPR {details.amount.toFixed(2)}</span>\n                              </div>\n                            );\n                          })}\n                          {billCalc.totalTax > 0 && (\n                            <div className=\"flex justify-between pt-1 border-t font-medium\">\n                              <span>Total Tax</span>\n                              <span data-testid=\"checkout-total-tax\">NPR {billCalc.totalTax.toFixed(2)}</span>\n                            </div>\n                          )}\n                          <div className=\"flex justify-between font-bold text-lg pt-2 border-t\">\n                            <span>Total Amount</span>\n                            <span data-testid=\"checkout-total\">NPR {billCalc.grandTotal.toFixed(2)}</span>\n                          </div>\n                          {billCalc.advancePayment > 0 && (\n                            <div className=\"flex justify-between text-blue-600\">\n                              <span>Advance Payment Paid</span>\n                              <span data-testid=\"checkout-advance-payment\">- NPR {billCalc.advancePayment.toFixed(2)}</span>\n                            </div>\n                          )}\n                          <div className=\"flex justify-between font-bold text-xl pt-2 border-t border-2\">\n                            <span>Amount to Pay</span>\n                            <span className=\"text-primary\" data-testid=\"checkout-final-amount\">NPR {billCalc.finalAmount.toFixed(2)}</span>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })()}\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Payment Method</label>\n                    <div className=\"flex flex-col sm:flex-row gap-2\">\n                      <Button\n                        type=\"button\"\n                        variant={selectedCheckoutPaymentMethod === 'cash' ? 'default' : 'outline'}\n                        onClick={() => setSelectedCheckoutPaymentMethod('cash')}\n                        className=\"flex-1\"\n                        data-testid=\"button-checkout-payment-cash\"\n                      >\n                        <DollarSign className=\"h-4 w-4 mr-2\" />\n                        Cash\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={selectedCheckoutPaymentMethod === 'pos' ? 'default' : 'outline'}\n                        onClick={() => setSelectedCheckoutPaymentMethod('pos')}\n                        className=\"flex-1\"\n                        data-testid=\"button-checkout-payment-pos\"\n                      >\n                        <CreditCard className=\"h-4 w-4 mr-2\" />\n                        POS\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={selectedCheckoutPaymentMethod === 'fonepay' ? 'default' : 'outline'}\n                        onClick={() => setSelectedCheckoutPaymentMethod('fonepay')}\n                        className=\"flex-1\"\n                        data-testid=\"button-checkout-payment-fonepay\"\n                      >\n                        <Smartphone className=\"h-4 w-4 mr-2\" />\n                        Fonepay\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-3 pt-4\">\n                    <Button\n                      className=\"flex-1\"\n                      disabled={!selectedCheckoutPaymentMethod || checkOutGuestMutation.isPending}\n                      onClick={() => {\n                        const billCalc = calculateCheckoutBill(selectedRoom);\n\n                        checkOutGuestMutation.mutate({\n                          roomId: selectedRoom.id,\n                          roomNumber: selectedRoom.roomNumber,\n                          guestName: selectedRoom.occupantDetails?.name || 'Guest',\n                          totalAmount: billCalc.subtotal + billCalc.totalTax,\n                          discountAmount: billCalc.discountAmount,\n                          finalAmount: billCalc.finalAmount,\n                          voucherId: validatedVoucher?.id || undefined,\n                          billingDetails: billCalc\n                        });\n                      }}\n                      data-testid=\"button-confirm-checkout\"\n                    >\n                      {checkOutGuestMutation.isPending ? \"Processing...\" : \"Complete Check-out & Print Receipt\"}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"secondary\"\n                      className=\"flex-1\"\n                      onClick={() => {\n                        setIsCheckOutModalOpen(false);\n                        setSelectedRoom(null);\n                        setSelectedVoucher(\"\");\n                        setVoucherCode(\"\");\n                        setValidatedVoucher(null);\n                        setSelectedCheckoutPaymentMethod(\"\");\n                      }}\n                      data-testid=\"button-cancel-checkout\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Extend Stay Modal */}\n        <Dialog open={isExtendStayModalOpen} onOpenChange={setIsExtendStayModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Extend Guest Stay</DialogTitle>\n            </DialogHeader>\n            \n            {selectedRoom && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-muted p-4 rounded-md space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Room:</span>\n                    <span className=\"text-sm\">{selectedRoom.roomNumber}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Guest:</span>\n                    <span className=\"text-sm\">{selectedRoom.occupantDetails?.name || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Current Checkout:</span>\n                    <span className=\"text-sm\">\n                      {selectedRoom.occupantDetails?.checkOutDate ? formatDate(selectedRoom.occupantDetails.checkOutDate) : 'N/A'}\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">New Checkout Date</label>\n                  <Calendar\n                    mode=\"single\"\n                    selected={newCheckoutDate}\n                    onSelect={setNewCheckoutDate}\n                    disabled={(date) => {\n                      const checkInDate = selectedRoom.occupantDetails?.checkInDate ? new Date(selectedRoom.occupantDetails.checkInDate) : new Date();\n                      return date <= checkInDate;\n                    }}\n                    className=\"rounded-md border\"\n                    data-testid=\"calendar-extend-checkout\"\n                  />\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <Button\n                    className=\"flex-1\"\n                    disabled={!newCheckoutDate || extendStayMutation.isPending}\n                    onClick={() => {\n                      if (newCheckoutDate && selectedRoom) {\n                        extendStayMutation.mutate({\n                          roomId: selectedRoom.id,\n                          newCheckoutDate: newCheckoutDate\n                        });\n                      }\n                    }}\n                    data-testid=\"button-confirm-extend\"\n                  >\n                    {extendStayMutation.isPending ? \"Updating...\" : \"Confirm Extension\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => {\n                      setIsExtendStayModalOpen(false);\n                      setSelectedRoom(null);\n                      setNewCheckoutDate(undefined);\n                    }}\n                    data-testid=\"button-cancel-extend\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Reservation Modal */}\n        <Dialog open={isReservationModalOpen} onOpenChange={setIsReservationModalOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Reservation</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...reservationForm}>\n              <form onSubmit={reservationForm.handleSubmit(onSubmitReservation)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={reservationForm.control}\n                    name=\"guestName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Guest Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Full name\" data-testid=\"input-reservation-name\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={reservationForm.control}\n                    name=\"guestEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" placeholder=\"email@example.com\" data-testid=\"input-reservation-email\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={reservationForm.control}\n                    name=\"guestPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Phone number\" data-testid=\"input-reservation-phone\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={reservationForm.control}\n                    name=\"roomId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Room *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-reservation-room\">\n                              <SelectValue placeholder=\"Select room\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {availableRooms.map((room) => (\n                              <SelectItem key={room.id} value={room.id}>\n                                {room.roomNumber} - {room.roomType?.name || 'Standard'}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={reservationForm.control}\n                    name=\"checkInDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Check-in Date *</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-reservation-checkin\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={reservationForm.control}\n                    name=\"checkOutDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Check-out Date *</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-reservation-checkout\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={reservationForm.control}\n                    name=\"numberOfPersons\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Number of Persons *</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" min=\"1\" placeholder=\"1\" data-testid=\"input-reservation-persons\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={reservationForm.control}\n                    name=\"mealPlanId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Meal Plan</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-reservation-meal-plan\">\n                              <SelectValue placeholder=\"Select meal plan (optional)\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {mealPlans.map((plan) => (\n                              <SelectItem key={plan.id} value={plan.id}>\n                                {plan.planName} - {formatCurrency(Number(plan.pricePerPerson))}/person/day\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {reservationForm.watch(\"roomId\") && reservationForm.watch(\"checkInDate\") && reservationForm.watch(\"checkOutDate\") && (\n                  <Card className=\"bg-muted\">\n                    <CardContent className=\"pt-4\">\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between font-medium\">\n                          <span>Pricing Summary:</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Room:</span>\n                          <span>{(() => {\n                            const room = rooms.find(r => r.id === reservationForm.watch(\"roomId\"));\n                            return room?.roomType?.name || 'N/A';\n                          })()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Room Price/Night:</span>\n                          <span>{(() => {\n                            const room = rooms.find(r => r.id === reservationForm.watch(\"roomId\"));\n                            const price = room?.roomType?.priceWalkin;\n                            return price ? formatCurrency(Number(price)) : 'N/A';\n                          })()}</span>\n                        </div>\n                        {reservationForm.watch(\"mealPlanId\") && (\n                          <div className=\"flex justify-between\">\n                            <span>Meal Plan ({reservationForm.watch(\"numberOfPersons\") || 0} persons):</span>\n                            <span>{(() => {\n                              const plan = mealPlans.find(p => p.id === reservationForm.watch(\"mealPlanId\"));\n                              const persons = Number(reservationForm.watch(\"numberOfPersons\")) || 0;\n                              return plan ? `${formatCurrency(Number(plan.pricePerPerson))} × ${persons} = ${formatCurrency(Number(plan.pricePerPerson) * persons)}/night` : 'N/A';\n                            })()}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between\">\n                          <span>Number of Nights:</span>\n                          <span>{(() => {\n                            const checkIn = reservationForm.watch(\"checkInDate\");\n                            const checkOut = reservationForm.watch(\"checkOutDate\");\n                            if (checkIn && checkOut) {\n                              const nights = Math.ceil((new Date(checkOut).getTime() - new Date(checkIn).getTime()) / (1000 * 3600 * 24));\n                              return nights > 0 ? nights : 0;\n                            }\n                            return 0;\n                          })()}</span>\n                        </div>\n                        <div className=\"flex justify-between font-semibold text-base pt-2 border-t\">\n                          <span>Estimated Total:</span>\n                          <span>{(() => {\n                            const room = rooms.find(r => r.id === reservationForm.watch(\"roomId\"));\n                            const roomPrice = room?.roomType?.priceWalkin ? Number(room.roomType.priceWalkin) : 0;\n                            const plan = mealPlans.find(p => p.id === reservationForm.watch(\"mealPlanId\"));\n                            const mealPrice = plan && reservationForm.watch(\"numberOfPersons\") \n                              ? Number(plan.pricePerPerson) * Number(reservationForm.watch(\"numberOfPersons\")) \n                              : 0;\n                            const checkIn = reservationForm.watch(\"checkInDate\");\n                            const checkOut = reservationForm.watch(\"checkOutDate\");\n                            let nights = 0;\n                            if (checkIn && checkOut) {\n                              nights = Math.max(0, Math.ceil((new Date(checkOut).getTime() - new Date(checkIn).getTime()) / (1000 * 3600 * 24)));\n                            }\n                            const total = (roomPrice + mealPrice) * nights;\n                            return formatCurrency(total);\n                          })()}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                <FormField\n                  control={reservationForm.control}\n                  name=\"specialRequests\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Special Requests</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Any special requests or notes...\" rows={3} data-testid=\"textarea-special-requests\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={createReservationMutation.isPending}\n                    data-testid=\"button-create-reservation\"\n                  >\n                    {createReservationMutation.isPending ? \"Creating...\" : \"Create Reservation\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => setIsReservationModalOpen(false)}\n                    data-testid=\"button-cancel-reservation\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Room Service Modal - Select Room First */}\n        <Dialog open={isRoomServiceModalOpen} onOpenChange={setIsRoomServiceModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add Room Service Charge</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label>Select Room *</Label>\n                <Select onValueChange={(roomId) => {\n                  const room = occupiedRooms.find(r => r.id === roomId);\n                  if (room && room.occupantDetails) {\n                    // Try to find reservation first\n                    const reservation = reservations.find(r => \n                      r.roomId === room.id && r.status === 'checked_in'\n                    );\n                    \n                    if (reservation) {\n                      setSelectedReservationForService(reservation.id);\n                      setIsRoomServiceModalOpen(false);\n                      setIsServiceChargeModalOpen(true);\n                    } else {\n                      // If no reservation found in new system, create a temporary one\n                      // This handles rooms checked in using the old system\n                      const occupantData = room.occupantDetails as any;\n                      \n                      // Create a reservation for this room\n                      apiRequest(\"POST\", \"/api/hotels/current/reservations\", {\n                        guestName: occupantData.name || \"Guest\",\n                        guestEmail: occupantData.email || \"\",\n                        guestPhone: occupantData.phone || \"\",\n                        roomId: room.id,\n                        checkInDate: occupantData.checkInDate || new Date().toISOString(),\n                        checkOutDate: occupantData.checkOutDate || new Date(Date.now() + 86400000).toISOString(),\n                        numberOfPersons: occupantData.numberOfPersons || 1,\n                        roomPrice: occupantData.roomPrice || \"0\",\n                        mealPlanPrice: \"0\",\n                        totalPrice: occupantData.roomPrice || \"0\",\n                        paidAmount: occupantData.advancePayment || \"0\",\n                        guestType: occupantData.guestType || 'walkin',\n                        status: 'checked_in'\n                      }).then((newReservation: any) => {\n                        setSelectedReservationForService(newReservation.id);\n                        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/reservations\"] });\n                        setIsRoomServiceModalOpen(false);\n                        setIsServiceChargeModalOpen(true);\n                      }).catch((error: any) => {\n                        toast({ \n                          title: \"Error creating reservation\", \n                          description: error.message,\n                          variant: \"destructive\" \n                        });\n                      });\n                    }\n                  }\n                }}>\n                  <SelectTrigger data-testid=\"select-room-for-service\">\n                    <SelectValue placeholder=\"Select room\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {occupiedRooms.map((room) => (\n                      <SelectItem key={room.id} value={room.id}>\n                        Room {room.roomNumber} - {(room.occupantDetails as any)?.name || 'Guest'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button\n                variant=\"secondary\"\n                className=\"w-full\"\n                onClick={() => setIsRoomServiceModalOpen(false)}\n                data-testid=\"button-cancel-room-service\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Maintenance Request Modal */}\n        <Dialog open={isMaintenanceModalOpen} onOpenChange={setIsMaintenanceModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Send Maintenance Request to Manager</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...maintenanceForm}>\n              <form onSubmit={maintenanceForm.handleSubmit(onSubmitMaintenance)} className=\"space-y-4\">\n                <FormField\n                  control={maintenanceForm.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Brief description\" data-testid=\"input-maintenance-title\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={maintenanceForm.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Room/Area\" data-testid=\"input-maintenance-location\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={maintenanceForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Detailed description...\" rows={3} data-testid=\"textarea-maintenance-description\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={maintenanceForm.control}\n                  name=\"priority\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Priority</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-maintenance-priority\">\n                            <SelectValue placeholder=\"Select priority\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                          <SelectItem value=\"urgent\">Urgent</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={createMaintenanceMutation.isPending}\n                    data-testid=\"button-submit-maintenance\"\n                  >\n                    {createMaintenanceMutation.isPending ? \"Sending...\" : \"Send to Manager\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => setIsMaintenanceModalOpen(false)}\n                    data-testid=\"button-cancel-maintenance\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Cash Deposit Modal */}\n        <Dialog open={isCashDepositModalOpen} onOpenChange={setIsCashDepositModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Send Cash Deposit Request to Finance</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...cashDepositForm}>\n              <form onSubmit={cashDepositForm.handleSubmit(onSubmitCashDeposit)} className=\"space-y-4\">\n                <FormField\n                  control={cashDepositForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-deposit-amount\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={cashDepositForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-deposit-method\">\n                            <SelectValue placeholder=\"Select payment method\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"pos\">POS</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={cashDepositForm.control}\n                  name=\"purpose\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Purpose</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Reason for deposit...\" rows={2} data-testid=\"textarea-deposit-purpose\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex space-x-3\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={createCashDepositMutation.isPending}\n                    data-testid=\"button-submit-deposit\"\n                  >\n                    {createCashDepositMutation.isPending ? \"Sending...\" : \"Send to Finance\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    className=\"flex-1\"\n                    onClick={() => setIsCashDepositModalOpen(false)}\n                    data-testid=\"button-cancel-deposit\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Food Order Modal */}\n        <Dialog open={isFoodOrderModalOpen} onOpenChange={setIsFoodOrderModalOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Food Order - Add to Room Bill</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Select Room</label>\n                  <Select onValueChange={(value) => setSelectedRoom(occupiedRooms.find(r => r.id === value))}>\n                    <SelectTrigger data-testid=\"select-food-order-room\">\n                      <SelectValue placeholder=\"Select room\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {occupiedRooms.map((room) => (\n                        <SelectItem key={room.id} value={room.id}>\n                          Room {room.roomNumber} - {(room.occupantDetails as any)?.name || 'Guest'}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <div className=\"flex-1\">\n                    <label className=\"text-sm font-medium mb-2 block\">Search Food</label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search by name...\"\n                        value={foodSearchQuery}\n                        onChange={(e) => setFoodSearchQuery(e.target.value)}\n                        className=\"pl-8\"\n                        data-testid=\"input-food-search\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"w-48\">\n                    <label className=\"text-sm font-medium mb-2 block\">Category</label>\n                    <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                      <SelectTrigger data-testid=\"select-food-category\">\n                        <SelectValue placeholder=\"All categories\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Categories</SelectItem>\n                        {menuCategories.map((cat) => (\n                          <SelectItem key={cat.id} value={cat.id}>\n                            {cat.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3 max-h-64 overflow-y-auto border rounded p-2\">\n                {filteredMenuItems.length === 0 ? (\n                  <div className=\"col-span-2 text-center py-8 text-muted-foreground\">\n                    No menu items found\n                  </div>\n                ) : (\n                  filteredMenuItems.map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"border rounded p-3 hover:bg-accent cursor-pointer\"\n                      onClick={() => addFoodItem(item)}\n                      data-testid={`food-item-${item.id}`}\n                    >\n                      <h4 className=\"font-medium\">{item.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                      <p className=\"text-sm font-bold mt-1\">{formatCurrency(Number(item.price || 0))}</p>\n                    </div>\n                  ))\n                )}\n              </div>\n\n              {foodOrderItems.length > 0 && (\n                <div className=\"border rounded p-3 space-y-2\">\n                  <h3 className=\"font-bold\">Order Items</h3>\n                  {foodOrderItems.map(({ item, quantity }) => (\n                    <div key={item.id} className=\"flex items-center justify-between\" data-testid={`order-item-${item.id}`}>\n                      <div className=\"flex-1\">\n                        <span className=\"font-medium\">{item.name}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => updateFoodQuantity(item.id, quantity - 1)}\n                          data-testid={`decrease-qty-${item.id}`}\n                        >\n                          -\n                        </Button>\n                        <span className=\"w-8 text-center\" data-testid={`qty-${item.id}`}>{quantity}</span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => updateFoodQuantity(item.id, quantity + 1)}\n                          data-testid={`increase-qty-${item.id}`}\n                        >\n                          +\n                        </Button>\n                        <span className=\"w-24 text-right font-bold\">\n                          {formatCurrency(Number(item.price) * quantity)}\n                        </span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => removeFoodItem(item.id)}\n                          data-testid={`remove-item-${item.id}`}\n                        >\n                          Remove\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"border-t pt-2 mt-2\">\n                    <div className=\"flex justify-between font-bold text-lg\">\n                      <span>Total:</span>\n                      <span data-testid=\"total-amount\">\n                        {formatCurrency(\n                          foodOrderItems.reduce((sum, { item, quantity }) => \n                            sum + Number(item.price) * quantity, 0\n                          )\n                        )}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  className=\"flex-1\"\n                  onClick={submitFoodOrder}\n                  disabled={!selectedRoom || foodOrderItems.length === 0}\n                  data-testid=\"button-submit-food-order\"\n                >\n                  Add to Room Bill\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  className=\"flex-1\"\n                  onClick={() => {\n                    setIsFoodOrderModalOpen(false);\n                    setFoodOrderItems([]);\n                    setFoodSearchQuery(\"\");\n                    setSelectedCategory(\"all\");\n                    setSelectedRoom(null);\n                  }}\n                  data-testid=\"button-cancel-food-order\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* View All Reservations Modal - Calendar View */}\n        <Dialog open={isViewReservationsModalOpen} onOpenChange={setIsViewReservationsModalOpen}>\n          <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Reservations Calendar</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              {reservations.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <CalendarDays className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>No reservations found</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Calendar Navigation */}\n                  <div className=\"flex items-center justify-between border-b pb-4\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const newDate = new Date(calendarDate);\n                        newDate.setMonth(newDate.getMonth() - 1);\n                        setCalendarDate(newDate);\n                      }}\n                      data-testid=\"button-prev-month\"\n                    >\n                      ← Previous\n                    </Button>\n                    <h3 className=\"text-lg font-semibold\">\n                      {calendarDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n                    </h3>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const newDate = new Date(calendarDate);\n                        newDate.setMonth(newDate.getMonth() + 1);\n                        setCalendarDate(newDate);\n                      }}\n                      data-testid=\"button-next-month\"\n                    >\n                      Next →\n                    </Button>\n                  </div>\n\n                  {/* Calendar Grid */}\n                  <div className=\"grid grid-cols-7 gap-2\">\n                    {/* Day headers */}\n                    {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                      <div key={day} className=\"text-center font-semibold text-sm py-2\">\n                        {day}\n                      </div>\n                    ))}\n                    \n                    {/* Calendar days */}\n                    {(() => {\n                      const year = calendarDate.getFullYear();\n                      const month = calendarDate.getMonth();\n                      const firstDay = new Date(year, month, 1);\n                      const lastDay = new Date(year, month + 1, 0);\n                      const daysInMonth = lastDay.getDate();\n                      const startingDayOfWeek = firstDay.getDay();\n                      \n                      const days = [];\n                      \n                      // Empty cells before first day\n                      for (let i = 0; i < startingDayOfWeek; i++) {\n                        days.push(<div key={`empty-${i}`} className=\"aspect-square\" />);\n                      }\n                      \n                      // Days of the month\n                      for (let day = 1; day <= daysInMonth; day++) {\n                        const currentDate = new Date(year, month, day, 0, 0, 0, 0);\n                        \n                        // Find reservations for this date - checking if current date falls within reservation period\n                        const dayReservations = reservations.filter((res: any) => {\n                          const checkIn = new Date(res.checkInDate);\n                          const checkOut = new Date(res.checkOutDate);\n                          \n                          // Normalize all dates to midnight local time for accurate comparison\n                          const checkInNormalized = new Date(checkIn.getFullYear(), checkIn.getMonth(), checkIn.getDate(), 0, 0, 0, 0);\n                          const checkOutNormalized = new Date(checkOut.getFullYear(), checkOut.getMonth(), checkOut.getDate(), 0, 0, 0, 0);\n                          const currentNormalized = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), 0, 0, 0, 0);\n                          \n                          // Check if current date is within the stay period (inclusive of check-in, inclusive of check-out)\n                          return currentNormalized.getTime() >= checkInNormalized.getTime() && \n                                 currentNormalized.getTime() <= checkOutNormalized.getTime();\n                        });\n                        \n                        const today = new Date();\n                        today.setHours(0, 0, 0, 0);\n                        currentDate.setHours(0, 0, 0, 0);\n                        const isToday = currentDate.getTime() === today.getTime();\n                        const isSelected = selectedCalendarDate && \n                          currentDate.toDateString() === selectedCalendarDate.toDateString();\n                        \n                        days.push(\n                          <button\n                            key={day}\n                            onClick={() => setSelectedCalendarDate(currentDate)}\n                            className={cn(\n                              \"aspect-square p-2 border rounded-lg hover:bg-muted transition-colors relative\",\n                              isToday && \"border-blue-500 border-2\",\n                              isSelected && \"bg-blue-100 dark:bg-blue-950\",\n                              dayReservations.length > 0 && \"bg-green-50 dark:bg-green-950/20\"\n                            )}\n                            data-testid={`calendar-day-${day}`}\n                          >\n                            <div className=\"text-sm font-medium\">{day}</div>\n                            {dayReservations.length > 0 && (\n                              <div className=\"absolute bottom-1 left-1/2 -translate-x-1/2 flex gap-0.5\">\n                                {dayReservations.slice(0, 3).map((_, idx) => (\n                                  <div key={idx} className=\"w-1.5 h-1.5 rounded-full bg-green-500\" />\n                                ))}\n                              </div>\n                            )}\n                          </button>\n                        );\n                      }\n                      \n                      return days;\n                    })()}\n                  </div>\n\n                  {/* Reservations for selected date */}\n                  {selectedCalendarDate && (() => {\n                    const dayReservations = reservations.filter((res: any) => {\n                      const checkIn = new Date(res.checkInDate);\n                      const checkOut = new Date(res.checkOutDate);\n                      \n                      // Normalize all dates to midnight local time for accurate comparison\n                      const checkInNormalized = new Date(checkIn.getFullYear(), checkIn.getMonth(), checkIn.getDate(), 0, 0, 0, 0);\n                      const checkOutNormalized = new Date(checkOut.getFullYear(), checkOut.getMonth(), checkOut.getDate(), 0, 0, 0, 0);\n                      const selectedNormalized = new Date(selectedCalendarDate.getFullYear(), selectedCalendarDate.getMonth(), selectedCalendarDate.getDate(), 0, 0, 0, 0);\n                      \n                      // Check if selected date is within the stay period (inclusive of check-in, inclusive of check-out)\n                      return selectedNormalized.getTime() >= checkInNormalized.getTime() && \n                             selectedNormalized.getTime() <= checkOutNormalized.getTime();\n                    });\n\n                    return dayReservations.length > 0 ? (\n                      <div className=\"border-t pt-4\">\n                        <h4 className=\"font-semibold mb-3\">\n                          Reservations for {selectedCalendarDate.toLocaleDateString()} ({dayReservations.length})\n                        </h4>\n                        <div className=\"space-y-3\">\n                          {dayReservations.map((reservation: any) => {\n                            const room = rooms.find(r => r.id === reservation.roomId);\n                            const mealPlan = mealPlans.find(mp => mp.id === reservation.mealPlanId);\n                            const checkInDate = new Date(reservation.checkInDate);\n                            const checkOutDate = new Date(reservation.checkOutDate);\n                            \n                            // Normalize dates for accurate comparison\n                            const checkInNormalized = new Date(checkInDate.getFullYear(), checkInDate.getMonth(), checkInDate.getDate(), 0, 0, 0, 0);\n                            const checkOutNormalized = new Date(checkOutDate.getFullYear(), checkOutDate.getMonth(), checkOutDate.getDate(), 0, 0, 0, 0);\n                            const selectedNormalized = new Date(selectedCalendarDate.getFullYear(), selectedCalendarDate.getMonth(), selectedCalendarDate.getDate(), 0, 0, 0, 0);\n                            \n                            const isCheckInDay = selectedNormalized.getTime() === checkInNormalized.getTime();\n                            const isCheckOutDay = selectedNormalized.getTime() === checkOutNormalized.getTime();\n                            const nights = Math.ceil((checkOutNormalized.getTime() - checkInNormalized.getTime()) / (1000 * 3600 * 24));\n\n                            return (\n                              <div \n                                key={reservation.id}\n                                className=\"p-4 border rounded-lg bg-card hover:bg-muted/50 transition-colors\"\n                                data-testid={`reservation-${reservation.id}`}\n                              >\n                                <div className=\"space-y-3\">\n                                  {/* Header with guest name and status */}\n                                  <div className=\"flex items-start justify-between\">\n                                    <div>\n                                      <div className=\"flex items-center gap-2 mb-1\">\n                                        <h5 className=\"font-semibold text-lg\" data-testid=\"text-guest-name\">{reservation.guestName}</h5>\n                                        <Badge variant=\"outline\">{reservation.status}</Badge>\n                                        {isCheckInDay && <Badge className=\"bg-green-500\">Check-in Day</Badge>}\n                                        {isCheckOutDay && <Badge className=\"bg-orange-500\">Check-out Day</Badge>}\n                                      </div>\n                                    </div>\n                                    {isCheckInDay && reservation.status === 'confirmed' && (\n                                      <Button \n                                        size=\"sm\"\n                                        onClick={() => {\n                                          handleCheckInFromReservation(reservation);\n                                          setIsViewReservationsModalOpen(false);\n                                        }}\n                                        data-testid=\"button-quick-checkin-modal\"\n                                      >\n                                        <UserCheck className=\"h-4 w-4 mr-1\" />\n                                        Check-in\n                                      </Button>\n                                    )}\n                                  </div>\n\n                                  {/* Guest Contact Details */}\n                                  <div className=\"bg-muted/50 p-3 rounded-md\">\n                                    <h6 className=\"text-sm font-semibold mb-2 text-muted-foreground\">Guest Contact</h6>\n                                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                                        <span className=\"font-medium\">Email:</span>\n                                        <span className=\"text-muted-foreground\">{reservation.guestEmail || 'N/A'}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <Smartphone className=\"h-4 w-4 text-muted-foreground\" />\n                                        <span className=\"font-medium\">Phone:</span>\n                                        <span className=\"text-muted-foreground\">{reservation.guestPhone || 'N/A'}</span>\n                                      </div>\n                                    </div>\n                                  </div>\n\n                                  {/* Reservation Details */}\n                                  <div className=\"bg-muted/50 p-3 rounded-md\">\n                                    <h6 className=\"text-sm font-semibold mb-2 text-muted-foreground\">Reservation Details</h6>\n                                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <Bed className=\"h-4 w-4 text-muted-foreground\" />\n                                        <span className=\"font-medium\">Room:</span>\n                                        <span className=\"text-muted-foreground\">\n                                          {room?.roomNumber || 'N/A'} - {room?.roomType?.name || 'Standard'}\n                                        </span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                                        <span className=\"font-medium\">Guests:</span>\n                                        <span className=\"text-muted-foreground\">{reservation.numberOfPersons} {reservation.numberOfPersons === 1 ? 'person' : 'persons'}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <CalendarIcon className=\"h-4 w-4 text-muted-foreground\" />\n                                        <span className=\"font-medium\">Check-in:</span>\n                                        <span className=\"text-muted-foreground\">{checkInDate.toLocaleDateString()}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <CalendarIcon className=\"h-4 w-4 text-muted-foreground\" />\n                                        <span className=\"font-medium\">Check-out:</span>\n                                        <span className=\"text-muted-foreground\">{checkOutDate.toLocaleDateString()}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                                        <span className=\"font-medium\">Duration:</span>\n                                        <span className=\"text-muted-foreground\">{nights} {nights === 1 ? 'night' : 'nights'}</span>\n                                      </div>\n                                      {mealPlan && (\n                                        <div className=\"flex items-center gap-2\">\n                                          <Utensils className=\"h-4 w-4 text-muted-foreground\" />\n                                          <span className=\"font-medium\">Meal Plan:</span>\n                                          <span className=\"text-muted-foreground\">{mealPlan.planName}</span>\n                                        </div>\n                                      )}\n                                    </div>\n                                  </div>\n\n                                  {/* Pricing Breakdown */}\n                                  <div className=\"bg-muted/50 p-3 rounded-md\">\n                                    <h6 className=\"text-sm font-semibold mb-2 text-muted-foreground\">Pricing</h6>\n                                    <div className=\"space-y-1 text-sm\">\n                                      <div className=\"flex justify-between\">\n                                        <span>Room ({formatCurrency(Number(reservation.roomPrice || 0))} × {nights} {nights === 1 ? 'night' : 'nights'}):</span>\n                                        <span className=\"font-medium\">{formatCurrency(Number(reservation.roomPrice || 0) * nights)}</span>\n                                      </div>\n                                      {mealPlan && reservation.mealPlanPrice && Number(reservation.mealPlanPrice) > 0 && (\n                                        <div className=\"flex justify-between\">\n                                          <span>Meal Plan ({formatCurrency(Number(reservation.mealPlanPrice))} × {nights} {nights === 1 ? 'night' : 'nights'}):</span>\n                                          <span className=\"font-medium\">{formatCurrency(Number(reservation.mealPlanPrice) * nights)}</span>\n                                        </div>\n                                      )}\n                                      <div className=\"flex justify-between pt-2 border-t font-semibold text-base\">\n                                        <span>Total Amount:</span>\n                                        <span className=\"text-primary\">{formatCurrency(Number(reservation.totalPrice || 0))}</span>\n                                      </div>\n                                    </div>\n                                  </div>\n\n                                  {/* Special Requests */}\n                                  {reservation.specialRequests && (\n                                    <div className=\"bg-amber-50 dark:bg-amber-950/20 p-3 rounded-md border border-amber-200 dark:border-amber-800\">\n                                      <h6 className=\"text-sm font-semibold mb-1 flex items-center gap-2\">\n                                        <Building2 className=\"h-4 w-4\" />\n                                        Special Requests\n                                      </h6>\n                                      <p className=\"text-sm text-muted-foreground\">{reservation.specialRequests}</p>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"border-t pt-4 text-center text-muted-foreground\">\n                        <CalendarDays className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                        <p>No reservations on {selectedCalendarDate.toLocaleDateString()}</p>\n                      </div>\n                    );\n                  })()}\n\n                  {/* Legend */}\n                  <div className=\"border-t pt-4 flex items-center gap-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-blue-500 rounded\"></div>\n                      <span>Today</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 bg-green-50 dark:bg-green-950/20 border rounded\"></div>\n                      <span>Has Reservations</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-green-500\"></div>\n                      <span>Reservation Indicator</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Service Charge Modal */}\n        <RoomServiceChargeModal\n          open={isServiceChargeModalOpen}\n          onOpenChange={setIsServiceChargeModalOpen}\n          reservationId={selectedReservationForService}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":161558},"client/src/pages/dashboard/finance/reconciliation.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { CheckCircle, AlertCircle, DollarSign, CreditCard, Smartphone } from \"lucide-react\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function FinanceReconciliationPage() {\n  const { user } = useAuth();\n  const [reconciliationStatus, setReconciliationStatus] = useState(\"pending\");\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Listen for real-time transaction updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  const cashTransactions = transactions.filter(t => t.paymentMethod === 'cash');\n  const posTransactions = transactions.filter(t => t.paymentMethod === 'pos');\n  const fonepayTransactions = transactions.filter(t => t.paymentMethod === 'fonepay');\n\n  const totalCashIn = cashTransactions.filter(t => t.txnType?.includes('_in')).reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalCashOut = cashTransactions.filter(t => t.txnType?.includes('_out') || t.txnType === 'vendor_payment').reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const cashBalance = totalCashIn - totalCashOut;\n\n  const totalPosIn = posTransactions.filter(t => t.txnType?.includes('_in')).reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalPosOut = posTransactions.filter(t => t.txnType?.includes('_out') || t.txnType === 'vendor_payment').reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const posBalance = totalPosIn - totalPosOut;\n\n  const totalFonepayIn = fonepayTransactions.filter(t => t.txnType?.includes('_in')).reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalFonepayOut = fonepayTransactions.filter(t => t.txnType?.includes('_out') || t.txnType === 'vendor_payment').reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const fonepayBalance = totalFonepayIn - totalFonepayOut;\n\n  return (\n    <DashboardLayout title=\"Payment Reconciliation\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n              <CardTitle>Payment Reconciliation Dashboard</CardTitle>\n              <div className=\"flex gap-2\">\n                <Select value={reconciliationStatus} onValueChange={setReconciliationStatus}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"reconciled\">Reconciled</SelectItem>\n                    <SelectItem value=\"discrepancy\">Discrepancy</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button>Generate Report</Button>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5 text-green-500\" />\n                Cash Reconciliation\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Cash In:</span>\n                  <span className=\"font-semibold text-green-600\">{formatCurrency(totalCashIn)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Cash Out:</span>\n                  <span className=\"font-semibold text-red-600\">{formatCurrency(totalCashOut)}</span>\n                </div>\n                <div className=\"border-t pt-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Cash Balance:</span>\n                    <span className={`font-bold text-lg ${cashBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {formatCurrency(cashBalance)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Status</p>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm font-medium text-green-600\">Reconciled</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5 text-blue-500\" />\n                POS Reconciliation\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">POS In:</span>\n                  <span className=\"font-semibold text-green-600\">{formatCurrency(totalPosIn)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">POS Out:</span>\n                  <span className=\"font-semibold text-red-600\">{formatCurrency(totalPosOut)}</span>\n                </div>\n                <div className=\"border-t pt-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">POS Balance:</span>\n                    <span className={`font-bold text-lg ${posBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {formatCurrency(posBalance)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Status</p>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm font-medium text-green-600\">Reconciled</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Smartphone className=\"h-5 w-5 text-purple-500\" />\n                Fonepay Reconciliation\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Fonepay In:</span>\n                  <span className=\"font-semibold text-green-600\">{formatCurrency(totalFonepayIn)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Fonepay Out:</span>\n                  <span className=\"font-semibold text-red-600\">{formatCurrency(totalFonepayOut)}</span>\n                </div>\n                <div className=\"border-t pt-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Fonepay Balance:</span>\n                    <span className={`font-bold text-lg ${fonepayBalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {formatCurrency(fonepayBalance)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Status</p>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm font-medium text-green-600\">Reconciled</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Transactions Requiring Reconciliation</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Date</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Type</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Amount</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Payment Method</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Status</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {transactions.slice(0, 10).map((transaction) => (\n                      <tr key={transaction.id} className=\"border-t hover:bg-muted/50\">\n                        <td className=\"px-4 py-3 text-sm\">{formatDate(transaction.createdAt)}</td>\n                        <td className=\"px-4 py-3 text-sm\">{transaction.txnType}</td>\n                        <td className=\"px-4 py-3 text-sm font-medium\">{formatCurrency(Number(transaction.amount))}</td>\n                        <td className=\"px-4 py-3 text-sm capitalize\">{transaction.paymentMethod}</td>\n                        <td className=\"px-4 py-3 text-sm\">\n                          <span className=\"inline-flex items-center gap-1 px-2 py-1 rounded text-xs bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\">\n                            <CheckCircle className=\"h-3 w-3\" />\n                            Reconciled\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Reconciliation Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">{transactions.length}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Total Transactions</p>\n              </div>\n              <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-blue-600\">{transactions.length}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Reconciled</p>\n              </div>\n              <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-yellow-600\">0</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Pending</p>\n              </div>\n              <div className=\"p-4 bg-red-50 dark:bg-red-900/20 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-red-600\">0</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Discrepancies</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":12508},"client/src/pages/dashboard/finance/cashflow.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { TrendingUp, TrendingDown, DollarSign, Activity } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function FinanceCashFlowPage() {\n  const { user } = useAuth();\n  const [period, setPeriod] = useState(\"month\");\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Listen for real-time transaction updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  const cashInTransactions = transactions.filter(t => \n    t.txnType === 'cash_in' || t.txnType === 'pos_in' || t.txnType === 'fonepay_in' || t.txnType?.includes('_in')\n  );\n  const cashOutTransactions = transactions.filter(t => \n    t.txnType === 'cash_out' || t.txnType === 'vendor_payment' || t.txnType?.includes('_out')\n  );\n\n  const totalCashIn = cashInTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalCashOut = cashOutTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const netCashFlow = totalCashIn - totalCashOut;\n  const cashFlowRatio = totalCashOut > 0 ? (totalCashIn / totalCashOut) : totalCashIn > 0 ? Infinity : 0;\n\n  return (\n    <DashboardLayout title=\"Cash Flow Analysis\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n              <CardTitle>Cash Flow Overview</CardTitle>\n              <Select value={period} onValueChange={setPeriod}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                  <SelectItem value=\"year\">This Year</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm opacity-90\">Cash Inflow</p>\n                  <p className=\"text-3xl font-bold mt-2\">{formatCurrency(totalCashIn)}</p>\n                  <p className=\"text-sm opacity-90 mt-1\">{cashInTransactions.length} transactions</p>\n                </div>\n                <TrendingUp className=\"h-12 w-12 opacity-50\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-red-500 to-pink-600 text-white\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm opacity-90\">Cash Outflow</p>\n                  <p className=\"text-3xl font-bold mt-2\">{formatCurrency(totalCashOut)}</p>\n                  <p className=\"text-sm opacity-90 mt-1\">{cashOutTransactions.length} transactions</p>\n                </div>\n                <TrendingDown className=\"h-12 w-12 opacity-50\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`bg-gradient-to-r ${netCashFlow >= 0 ? 'from-blue-500 to-cyan-600' : 'from-orange-500 to-red-600'} text-white`}>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm opacity-90\">Net Cash Flow</p>\n                  <p className=\"text-3xl font-bold mt-2\">{formatCurrency(netCashFlow)}</p>\n                  <p className=\"text-sm opacity-90 mt-1\">{netCashFlow >= 0 ? 'Positive' : 'Negative'}</p>\n                </div>\n                <DollarSign className=\"h-12 w-12 opacity-50\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-purple-500 to-indigo-600 text-white\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm opacity-90\">Cash Flow Ratio</p>\n                  <p className=\"text-3xl font-bold mt-2\">{cashFlowRatio === Infinity ? '∞' : cashFlowRatio.toFixed(2)}</p>\n                  <p className=\"text-sm opacity-90 mt-1\">Inflow/Outflow</p>\n                </div>\n                <Activity className=\"h-12 w-12 opacity-50\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Cash Flow Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div className=\"p-6 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <TrendingUp className=\"h-8 w-8 text-green-600\" />\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">Cash Inflow</h3>\n                      <p className=\"text-sm text-muted-foreground\">Revenue from all sources</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(totalCashIn)}</p>\n                    <p className=\"text-sm text-muted-foreground\">{cashInTransactions.length} transactions</p>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-3 gap-4 mt-4\">\n                  <div className=\"text-center p-3 bg-white dark:bg-gray-800 rounded\">\n                    <p className=\"text-xs text-muted-foreground\">Cash</p>\n                    <p className=\"font-bold text-green-600\">\n                      {formatCurrency(cashInTransactions.filter(t => t.paymentMethod === 'cash').reduce((sum, t) => sum + Number(t.amount), 0))}\n                    </p>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-gray-800 rounded\">\n                    <p className=\"text-xs text-muted-foreground\">POS</p>\n                    <p className=\"font-bold text-green-600\">\n                      {formatCurrency(cashInTransactions.filter(t => t.paymentMethod === 'pos').reduce((sum, t) => sum + Number(t.amount), 0))}\n                    </p>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-gray-800 rounded\">\n                    <p className=\"text-xs text-muted-foreground\">Fonepay</p>\n                    <p className=\"font-bold text-green-600\">\n                      {formatCurrency(cashInTransactions.filter(t => t.paymentMethod === 'fonepay').reduce((sum, t) => sum + Number(t.amount), 0))}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-6 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <TrendingDown className=\"h-8 w-8 text-red-600\" />\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">Cash Outflow</h3>\n                      <p className=\"text-sm text-muted-foreground\">Expenses and payments</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-2xl font-bold text-red-600\">{formatCurrency(totalCashOut)}</p>\n                    <p className=\"text-sm text-muted-foreground\">{cashOutTransactions.length} transactions</p>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-3 gap-4 mt-4\">\n                  <div className=\"text-center p-3 bg-white dark:bg-gray-800 rounded\">\n                    <p className=\"text-xs text-muted-foreground\">Cash</p>\n                    <p className=\"font-bold text-red-600\">\n                      {formatCurrency(cashOutTransactions.filter(t => t.paymentMethod === 'cash').reduce((sum, t) => sum + Number(t.amount), 0))}\n                    </p>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-gray-800 rounded\">\n                    <p className=\"text-xs text-muted-foreground\">POS</p>\n                    <p className=\"font-bold text-red-600\">\n                      {formatCurrency(cashOutTransactions.filter(t => t.paymentMethod === 'pos').reduce((sum, t) => sum + Number(t.amount), 0))}\n                    </p>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-gray-800 rounded\">\n                    <p className=\"text-xs text-muted-foreground\">Fonepay</p>\n                    <p className=\"font-bold text-red-600\">\n                      {formatCurrency(cashOutTransactions.filter(t => t.paymentMethod === 'fonepay').reduce((sum, t) => sum + Number(t.amount), 0))}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className={`p-6 ${netCashFlow >= 0 ? 'bg-blue-50 dark:bg-blue-900/20' : 'bg-orange-50 dark:bg-orange-900/20'} rounded-lg`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <DollarSign className={`h-8 w-8 ${netCashFlow >= 0 ? 'text-blue-600' : 'text-orange-600'}`} />\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">Net Cash Flow</h3>\n                      <p className=\"text-sm text-muted-foreground\">Inflow minus outflow</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-2xl font-bold ${netCashFlow >= 0 ? 'text-blue-600' : 'text-orange-600'}`}>\n                      {formatCurrency(netCashFlow)}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {netCashFlow >= 0 ? 'Surplus' : 'Deficit'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Cash Flow Health Indicators</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Operating Cash Flow</p>\n                <p className=\"text-3xl font-bold text-blue-600\">{formatCurrency(netCashFlow)}</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">Current period</p>\n              </div>\n\n              <div className=\"text-center p-6 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Cash Conversion Rate</p>\n                <p className=\"text-3xl font-bold text-purple-600\">\n                  {totalCashIn > 0 ? ((netCashFlow / totalCashIn) * 100).toFixed(1) : 0}%\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-2\">Efficiency metric</p>\n              </div>\n\n              <div className=\"text-center p-6 bg-muted rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Burn Rate</p>\n                <p className=\"text-3xl font-bold text-orange-600\">{formatCurrency(totalCashOut / 30)}</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">Per day average</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":12557},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 5000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3892},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/dashboard/hall-bookings.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { \n  CalendarCheck,\n  Plus,\n  Calendar as CalendarIcon,\n  DollarSign,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Users,\n  Building2,\n  Edit,\n  Trash2,\n  Eye,\n  FileText\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { insertHallBookingSchema } from \"@shared/schema\";\nimport type { SelectHallBooking, Hall } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { BookingWizard } from \"@/components/modals/booking-wizard\";\nimport { FinalBillingModal } from \"@/components/modals/final-billing-modal\";\nimport { HallQuotation } from \"@/components/print/hall-quotation\";\n\nconst bookingFormSchema = insertHallBookingSchema.omit({ \n  hotelId: true, \n  createdBy: true,\n  confirmedBy: true,\n  cancelledBy: true,\n  cancellationReason: true\n});\n\nexport default function HallBookings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isWizardOpen, setIsWizardOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedBooking, setSelectedBooking] = useState<SelectHallBooking | null>(null);\n  const [isCancelModalOpen, setIsCancelModalOpen] = useState(false);\n  const [cancelReason, setCancelReason] = useState(\"\");\n  const [isFinalBillingOpen, setIsFinalBillingOpen] = useState(false);\n  const [isPrintQuotationOpen, setIsPrintQuotationOpen] = useState(false);\n  const [quotationBooking, setQuotationBooking] = useState<SelectHallBooking | null>(null);\n\n  const { data: halls = [] } = useQuery<Hall[]>({\n    queryKey: [\"/api/halls\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const { data: bookings = [] } = useQuery<SelectHallBooking[]>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"hall-bookings\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const bookingForm = useForm({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      hallId: \"\",\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      bookingStartTime: new Date(),\n      bookingEndTime: new Date(),\n      numberOfPeople: 0,\n      hallBasePrice: \"0\",\n      totalAmount: \"0\",\n      advancePaid: \"0\",\n      balanceDue: \"0\",\n      paymentMethod: \"\",\n      specialRequests: \"\",\n      status: \"pending\" as const\n    }\n  });\n\n  // Watch for hall selection to auto-populate base price\n  const selectedHallId = bookingForm.watch(\"hallId\");\n  const numberOfPeople = bookingForm.watch(\"numberOfPeople\");\n  const hallBasePrice = bookingForm.watch(\"hallBasePrice\");\n  \n  // Auto-populate hall price when hall is selected\n  const handleHallChange = (hallId: string) => {\n    const selectedHall = halls.find(h => h.id === hallId);\n    if (selectedHall) {\n      const basePrice = selectedHall.priceInhouse || selectedHall.priceWalkin || \"0\";\n      bookingForm.setValue(\"hallBasePrice\", basePrice);\n      // Recalculate total when hall changes\n      calculateTotalPrice(basePrice, numberOfPeople);\n    }\n  };\n\n  // Calculate total price based on base price and number of people\n  const calculateTotalPrice = (basePrice: string, numPeople: number) => {\n    const base = parseFloat(basePrice || \"0\");\n    const perPersonCost = 0; // You can add per-person cost logic here if needed\n    const total = base + (numPeople * perPersonCost);\n    bookingForm.setValue(\"totalAmount\", total.toFixed(2));\n    \n    // Recalculate balance due\n    const advance = parseFloat(bookingForm.getValues(\"advancePaid\") || \"0\");\n    bookingForm.setValue(\"balanceDue\", (total - advance).toFixed(2));\n  };\n\n  // Recalculate when number of people changes\n  const handlePeopleChange = (value: string) => {\n    const numPeople = parseInt(value) || 0;\n    bookingForm.setValue(\"numberOfPeople\", numPeople);\n    calculateTotalPrice(hallBasePrice, numPeople);\n  };\n\n  // Recalculate balance when advance payment changes\n  const handleAdvanceChange = (value: string) => {\n    const advance = parseFloat(value || \"0\");\n    const total = parseFloat(bookingForm.getValues(\"totalAmount\") || \"0\");\n    bookingForm.setValue(\"balanceDue\", (total - advance).toFixed(2));\n  };\n\n  const editForm = useForm({\n    resolver: zodResolver(bookingFormSchema.partial()),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      bookingStartTime: new Date(),\n      bookingEndTime: new Date(),\n      numberOfPeople: 0,\n      hallBasePrice: \"0\",\n      totalAmount: \"0\",\n      advancePaid: \"0\",\n      balanceDue: \"0\",\n      paymentMethod: \"\",\n      specialRequests: \"\"\n    }\n  });\n\n  // Edit form handlers for dynamic calculation\n  const handleEditAdvanceChange = (value: string) => {\n    const advance = parseFloat(value || \"0\");\n    const total = parseFloat(editForm.getValues(\"totalAmount\") || \"0\");\n    editForm.setValue(\"balanceDue\", (total - advance).toFixed(2));\n  };\n\n  const handleEditTotalChange = (value: string) => {\n    const total = parseFloat(value || \"0\");\n    const advance = parseFloat(editForm.getValues(\"advancePaid\") || \"0\");\n    editForm.setValue(\"balanceDue\", (total - advance).toFixed(2));\n  };\n\n  const checkAvailabilityMutation = useMutation({\n    mutationFn: async (data: { hallId: string; startTime: Date; endTime: Date; excludeBookingId?: string }) => {\n      const response = await apiRequest(\"POST\", `/api/halls/${data.hallId}/check-availability`, {\n        startTime: data.startTime.toISOString(),\n        endTime: data.endTime.toISOString(),\n        excludeBookingId: data.excludeBookingId\n      }) as unknown as { available: boolean };\n      return response;\n    }\n  });\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const availability = await checkAvailabilityMutation.mutateAsync({\n        hallId: data.hallId,\n        startTime: data.bookingStartTime,\n        endTime: data.bookingEndTime\n      });\n\n      if (!availability.available) {\n        throw new Error(\"Hall is not available for the selected time\");\n      }\n\n      await apiRequest(\"POST\", `/api/hotels/${user?.hotelId}/hall-bookings`, {\n        ...data,\n        bookingStartTime: data.bookingStartTime.toISOString(),\n        bookingEndTime: data.bookingEndTime.toISOString()\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"hall-bookings\"] });\n      toast({ title: \"Booking created successfully\" });\n      bookingForm.reset();\n      setIsWizardOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Booking failed\", \n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const updateBookingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (data.bookingStartTime || data.bookingEndTime) {\n        const availability = await checkAvailabilityMutation.mutateAsync({\n          hallId: selectedBooking!.hallId,\n          startTime: data.bookingStartTime || new Date(selectedBooking!.bookingStartTime!),\n          endTime: data.bookingEndTime || new Date(selectedBooking!.bookingEndTime!),\n          excludeBookingId: selectedBooking!.id\n        });\n\n        if (!availability.available) {\n          throw new Error(\"Hall is not available for the selected time\");\n        }\n      }\n\n      const updateData = {\n        ...data,\n        bookingStartTime: data.bookingStartTime?.toISOString(),\n        bookingEndTime: data.bookingEndTime?.toISOString()\n      };\n\n      await apiRequest(\"PUT\", `/api/hall-bookings/${selectedBooking!.id}`, updateData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"hall-bookings\"] });\n      toast({ title: \"Booking updated successfully\" });\n      editForm.reset();\n      setIsEditModalOpen(false);\n      setSelectedBooking(null);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Update failed\", \n        description: error.message || \"Failed to update booking\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const confirmBookingMutation = useMutation({\n    mutationFn: async (bookingId: string) => {\n      await apiRequest(\"POST\", `/api/hall-bookings/${bookingId}/confirm`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"hall-bookings\"] });\n      toast({ title: \"Booking confirmed successfully\" });\n    }\n  });\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async ({ bookingId, reason }: { bookingId: string; reason: string }) => {\n      await apiRequest(\"POST\", `/api/hall-bookings/${bookingId}/cancel`, { reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"hall-bookings\"] });\n      toast({ title: \"Booking cancelled successfully\" });\n      setIsCancelModalOpen(false);\n      setSelectedBooking(null);\n      setCancelReason(\"\");\n    }\n  });\n\n  const handleEditBooking = (booking: SelectHallBooking) => {\n    setSelectedBooking(booking);\n    editForm.reset({\n      customerName: booking.customerName,\n      customerEmail: booking.customerEmail || \"\",\n      customerPhone: booking.customerPhone || \"\",\n      bookingStartTime: booking.bookingStartTime ? new Date(booking.bookingStartTime) : new Date(),\n      bookingEndTime: booking.bookingEndTime ? new Date(booking.bookingEndTime) : new Date(),\n      numberOfPeople: booking.numberOfPeople || 0,\n      hallBasePrice: booking.hallBasePrice || \"0\",\n      totalAmount: booking.totalAmount || \"0\",\n      advancePaid: booking.advancePaid || \"0\",\n      balanceDue: booking.balanceDue || \"0\",\n      paymentMethod: booking.paymentMethod || \"\",\n      specialRequests: booking.specialRequests || \"\"\n    });\n    setIsEditModalOpen(true);\n  };\n\n  const handleCancelBooking = (booking: SelectHallBooking) => {\n    setSelectedBooking(booking);\n    setIsCancelModalOpen(true);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig: Record<string, { variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\", icon: any }> = {\n      pending: { variant: \"secondary\", icon: Clock },\n      confirmed: { variant: \"default\", icon: CheckCircle },\n      cancelled: { variant: \"destructive\", icon: XCircle }\n    };\n    const config = statusConfig[status] || statusConfig.pending;\n    const Icon = config.icon;\n    \n    return (\n      <Badge variant={config.variant} data-testid={`badge-status-${status}`}>\n        <Icon className=\"w-3 h-3 mr-1\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatPaymentMethod = (method: string | null | undefined) => {\n    if (!method) return \"N/A\";\n    const methodMap: Record<string, string> = {\n      cash: \"Cash\",\n      cheque: \"Cheque\",\n      pos: \"POS/Card\",\n      fonepay: \"Fonepay\",\n      bank_transfer: \"Bank Transfer\"\n    };\n    return methodMap[method] || method;\n  };\n\n  const pendingBookings = bookings.filter(b => b.status === \"pending\" || b.status === \"quotation\");\n  const confirmedBookings = bookings.filter(b => b.status === \"confirmed\" || b.status === \"deposit_pending\" || b.status === \"in_progress\" || b.status === \"completed\");\n  const cancelledBookings = bookings.filter(b => b.status === \"cancelled\");\n\n  // Role-based permissions\n  const userRole = user?.role?.name || '';\n  const canManage = ['manager', 'owner', 'super_admin'].includes(userRole);\n  const isFinance = userRole === 'finance';\n  const isCashier = userRole === 'cashier';\n  const canViewOnly = isCashier;\n\n  return (\n    <DashboardLayout title=\"Hall Bookings\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"heading-hall-bookings\">Hall Bookings</h1>\n            <p className=\"text-muted-foreground\">Manage hall reservations and events</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Link href=\"/dashboard/hall-calendar\">\n              <Button variant=\"outline\" data-testid=\"button-calendar-view\">\n                <CalendarCheck className=\"w-4 h-4 mr-2\" />\n                Calendar View\n              </Button>\n            </Link>\n            {canManage && (\n              <Button onClick={() => setIsWizardOpen(true)} data-testid=\"button-create-booking\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Booking\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Bookings</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-pending-count\">{pendingBookings.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Confirmed Bookings</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-confirmed-count\">{confirmedBookings.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Cancelled Bookings</CardTitle>\n              <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-cancelled-count\">{cancelledBookings.length}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Bookings</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {bookings.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-bookings\">\n                  No bookings found. Create your first booking to get started.\n                </p>\n              ) : (\n                bookings.map((booking) => {\n                  const hall = halls.find(h => h.id === booking.hallId);\n                  return (\n                    <div key={booking.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`card-booking-${booking.id}`}>\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <Building2 className=\"w-4 h-4 text-muted-foreground\" />\n                            <h3 className=\"font-semibold\" data-testid={`text-hall-name-${booking.id}`}>{hall?.name || \"Unknown Hall\"}</h3>\n                            {getStatusBadge(booking.status!)}\n                          </div>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Users className=\"w-3 h-3\" />\n                            <span data-testid={`text-customer-${booking.id}`}>{booking.customerName}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              setQuotationBooking(booking);\n                              setIsPrintQuotationOpen(true);\n                            }}\n                            data-testid={`button-print-quotation-${booking.id}`}\n                          >\n                            <FileText className=\"w-4 h-4 mr-1\" />\n                            Quotation\n                          </Button>\n                          <Link href={`/dashboard/bookings/${booking.id}`}>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              data-testid={`button-view-${booking.id}`}\n                            >\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              View\n                            </Button>\n                          </Link>\n                          {(booking.status === \"quotation\" || booking.status === \"confirmed\") && canManage && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"default\"\n                              onClick={() => {\n                                setSelectedBooking(booking);\n                                setIsFinalBillingOpen(true);\n                              }}\n                              data-testid={`button-finalize-${booking.id}`}\n                            >\n                              <DollarSign className=\"w-4 h-4 mr-1\" />\n                              Finalize Billing\n                            </Button>\n                          )}\n                          {booking.status === \"pending\" && canManage && (\n                            <>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => confirmBookingMutation.mutate(booking.id)}\n                                data-testid={`button-confirm-${booking.id}`}\n                              >\n                                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                Confirm\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => handleEditBooking(booking)}\n                                data-testid={`button-edit-${booking.id}`}\n                              >\n                                <Edit className=\"w-4 h-4 mr-1\" />\n                                Edit\n                              </Button>\n                            </>\n                          )}\n                          {isFinance && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleEditBooking(booking)}\n                              data-testid={`button-edit-payment-${booking.id}`}\n                            >\n                              <DollarSign className=\"w-4 h-4 mr-1\" />\n                              Update Payment\n                            </Button>\n                          )}\n                          {booking.status !== \"cancelled\" && canManage && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"destructive\"\n                              onClick={() => handleCancelBooking(booking)}\n                              data-testid={`button-cancel-${booking.id}`}\n                            >\n                              <XCircle className=\"w-4 h-4 mr-1\" />\n                              Cancel\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Start Time</p>\n                          <p className=\"font-medium\" data-testid={`text-start-time-${booking.id}`}>\n                            {booking.bookingStartTime ? format(new Date(booking.bookingStartTime), \"PPp\") : \"N/A\"}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">End Time</p>\n                          <p className=\"font-medium\" data-testid={`text-end-time-${booking.id}`}>\n                            {booking.bookingEndTime ? format(new Date(booking.bookingEndTime), \"PPp\") : \"N/A\"}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Total Amount</p>\n                          <p className=\"font-medium\" data-testid={`text-total-${booking.id}`}>\n                            {formatCurrency(parseFloat(booking.totalAmount || \"0\"))}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Advance Paid</p>\n                          <p className=\"font-medium\" data-testid={`text-advance-${booking.id}`}>\n                            {formatCurrency(parseFloat(booking.advancePaid || \"0\"))}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Balance Due</p>\n                          <p className=\"font-medium\" data-testid={`text-balance-${booking.id}`}>\n                            {formatCurrency(parseFloat(booking.balanceDue || \"0\"))}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Payment Method</p>\n                          <p className=\"font-medium\" data-testid={`text-payment-method-${booking.id}`}>\n                            {formatPaymentMethod(booking.paymentMethod)}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {booking.specialRequests && (\n                        <div className=\"text-sm\">\n                          <p className=\"text-muted-foreground\">Special Requests</p>\n                          <p className=\"font-medium\" data-testid={`text-special-requests-${booking.id}`}>{booking.specialRequests}</p>\n                        </div>\n                      )}\n\n                      {booking.cancellationReason && (\n                        <div className=\"text-sm\">\n                          <p className=\"text-muted-foreground\">Cancellation Reason</p>\n                          <p className=\"font-medium text-destructive\" data-testid={`text-cancel-reason-${booking.id}`}>{booking.cancellationReason}</p>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <BookingWizard\n          open={isWizardOpen}\n          onOpenChange={setIsWizardOpen}\n          onSuccess={() => {\n            queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"hall-bookings\"] });\n          }}\n        />\n\n        <FinalBillingModal\n          open={isFinalBillingOpen}\n          onOpenChange={setIsFinalBillingOpen}\n          booking={selectedBooking}\n          onSuccess={() => {\n            queryClient.invalidateQueries({ queryKey: [\"/api/hotels\", user?.hotelId, \"hall-bookings\"] });\n          }}\n        />\n\n        {quotationBooking && (\n          <HallQuotation\n            booking={quotationBooking}\n            open={isPrintQuotationOpen}\n            onOpenChange={setIsPrintQuotationOpen}\n          />\n        )}\n\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{isFinance ? 'Update Payment Details' : 'Edit Booking'}</DialogTitle>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit((data) => updateBookingMutation.mutate(data))} className=\"space-y-4\">\n                {!isFinance && (\n                  <>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={editForm.control}\n                        name=\"customerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter customer name\" data-testid=\"input-edit-customer-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={editForm.control}\n                        name=\"customerPhone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter phone number\" data-testid=\"input-edit-customer-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={editForm.control}\n                      name=\"customerEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"email\" placeholder=\"Enter email\" data-testid=\"input-edit-customer-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={editForm.control}\n                        name=\"numberOfPeople\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Number of People</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"number\" placeholder=\"0\" data-testid=\"input-edit-num-people\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={editForm.control}\n                        name=\"hallBasePrice\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Hall Base Price</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"number\" step=\"0.01\" readOnly className=\"bg-muted\" data-testid=\"input-edit-base-price\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"totalAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total Amount (Editable)</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0.00\" \n                            data-testid=\"input-edit-total\"\n                            onChange={(e) => { field.onChange(e); handleEditTotalChange(e.target.value); }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"paymentMethod\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Method</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-payment-method\">\n                              <SelectValue placeholder=\"Select payment method\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"cash\" data-testid=\"option-edit-payment-cash\">Cash</SelectItem>\n                            <SelectItem value=\"card\" data-testid=\"option-edit-payment-card\">Card</SelectItem>\n                            <SelectItem value=\"bank_transfer\" data-testid=\"option-edit-payment-bank\">Bank Transfer</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"advancePaid\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Advance Paid</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0.00\" \n                            data-testid=\"input-edit-advance\"\n                            onChange={(e) => { field.onChange(e); handleEditAdvanceChange(e.target.value); }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"balanceDue\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Balance Due (Auto-calculated)</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" readOnly className=\"bg-muted\" data-testid=\"input-edit-balance\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"specialRequests\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Special Requests</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Enter any special requests\" data-testid=\"input-edit-special-requests\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditModalOpen(false)} data-testid=\"button-cancel-edit\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateBookingMutation.isPending} data-testid=\"button-submit-edit\">\n                    {updateBookingMutation.isPending ? \"Updating...\" : \"Update Booking\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={isCancelModalOpen} onOpenChange={setIsCancelModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Cancel Booking</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Are you sure you want to cancel this booking? Please provide a reason.\n              </p>\n              <Textarea\n                value={cancelReason}\n                onChange={(e) => setCancelReason(e.target.value)}\n                placeholder=\"Enter cancellation reason\"\n                data-testid=\"input-cancel-reason\"\n              />\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setIsCancelModalOpen(false)} data-testid=\"button-cancel-cancel\">\n                  Close\n                </Button>\n                <Button \n                  variant=\"destructive\" \n                  onClick={() => cancelBookingMutation.mutate({ bookingId: selectedBooking!.id, reason: cancelReason })}\n                  disabled={!cancelReason.trim() || cancelBookingMutation.isPending}\n                  data-testid=\"button-submit-cancel\"\n                >\n                  {cancelBookingMutation.isPending ? \"Cancelling...\" : \"Cancel Booking\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":35044},"client/src/pages/dashboard/restaurant-bar-manager/inventory-tracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Package, AlertTriangle, TrendingUp, ShoppingCart } from \"lucide-react\";\n\nexport default function InventoryTracking() {\n\n  // Fetch inventory items\n  const { data: inventory = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  // Restaurant bar managers have read-only access to inventory\n\n  const getStockStatus = (baseStockQty: number, reorderLevel: number) => {\n    if (baseStockQty <= reorderLevel) {\n      return { status: 'Low Stock', color: 'text-red-600 bg-red-100' };\n    } else if (baseStockQty <= reorderLevel * 1.5) {\n      return { status: 'Medium', color: 'text-orange-600 bg-orange-100' };\n    }\n    return { status: 'In Stock', color: 'text-green-600 bg-green-100' };\n  };\n\n  const lowStockItems = inventory.filter(item => \n    Number(item.baseStockQty) <= Number(item.reorderLevel)\n  );\n  \n  const totalValue = inventory.reduce((sum, item) => \n    sum + (Number(item.baseStockQty) * Number(item.costPerUnit || 0)), 0\n  );\n\n  const columns = [\n    { key: \"name\", label: \"Item Name\", sortable: true },\n    { \n      key: \"baseStockQty\", \n      label: \"Current Stock\", \n      sortable: true,\n      render: (value: number, row: any) => {\n        const baseStock = Number(value || 0).toFixed(2);\n        const packageStock = Number(row.packageStockQty || 0).toFixed(2);\n        return (\n          <span>\n            {baseStock} {row.baseUnit}\n            {row.packageUnit && ` (${packageStock} ${row.packageUnit})`}\n          </span>\n        );\n      }\n    },\n    { \n      key: \"reorderLevel\", \n      label: \"Reorder Level\", \n      render: (value: number, row: any) => `${Number(value).toFixed(2)} ${row.baseUnit}`\n    },\n    { \n      key: \"costPerUnit\", \n      label: \"Cost/Unit\", \n      render: (value: any) => {\n        const numValue = Number(value);\n        return !isNaN(numValue) && numValue > 0 ? `NPR ${numValue.toFixed(2)}` : 'N/A';\n      }\n    },\n    { \n      key: \"storageLocation\",\n      label: \"Storage Location\",\n      render: (value: string) => value || 'N/A'\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: any, row: any) => {\n        const { status, color } = getStockStatus(Number(row.baseStockQty), Number(row.reorderLevel));\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${color}`}>\n            {status}\n          </span>\n        );\n      }\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Restaurant Inventory Tracking\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Items</p>\n                  <p className=\"text-2xl font-bold\">{inventory.length}</p>\n                </div>\n                <Package className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Low Stock Items</p>\n                  <p className=\"text-2xl font-bold\">{lowStockItems.length}</p>\n                </div>\n                <AlertTriangle className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Value</p>\n                  <p className=\"text-2xl font-bold\">रु{totalValue.toFixed(0)}</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Need Reorder</p>\n                  <p className=\"text-2xl font-bold\">{lowStockItems.length}</p>\n                </div>\n                <ShoppingCart className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Low Stock Alert */}\n        {lowStockItems.length > 0 && (\n          <Card className=\"border-red-200 bg-red-50\">\n            <CardHeader>\n              <CardTitle className=\"text-red-800\">Low Stock Alert</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-red-700 mb-3\">\n                {lowStockItems.length} item(s) are running low and need to be restocked:\n              </p>\n              <div className=\"space-y-1\">\n                {lowStockItems.map((item, index) => (\n                  <div key={index} className=\"text-sm text-red-600\">\n                    • {item.name}: {Number(item.baseStockQty).toFixed(2)} {item.baseUnit} (Reorder at {Number(item.reorderLevel).toFixed(2)} {item.baseUnit})\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Inventory Table */}\n        <DataTable\n          title=\"Restaurant Inventory\"\n          data={inventory}\n          columns={columns}\n          isLoading={isLoading}\n          searchPlaceholder=\"Search inventory items...\"\n        />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":6034},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Mobile touch targets - minimum 44x44px for better usability */\n  button, a, input, select, textarea {\n    @apply min-h-[44px] md:min-h-[auto];\n  }\n\n  /* Better mobile form spacing */\n  input, select, textarea {\n    @apply text-base; /* Prevents zoom on iOS */\n  }\n}\n\n@layer utilities {\n  /* Mobile-friendly spacing utilities */\n  .mobile-padding {\n    @apply p-4 md:p-6;\n  }\n\n  .mobile-gap {\n    @apply gap-3 md:gap-4;\n  }\n\n  /* Touch-friendly tap targets */\n  .tap-target {\n    @apply min-w-[44px] min-h-[44px];\n  }\n}","size_bytes":5578},"client/src/components/modals/create-owner-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Users, Loader2 } from \"lucide-react\";\n\nconst ownerSchema = z.object({\n  hotelId: z.string().min(1, \"Please select a hotel\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(50, \"Username must be less than 50 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().min(1, \"First name is required\").max(50, \"First name must be less than 50 characters\"),\n  lastName: z.string().min(1, \"Last name is required\").max(50, \"Last name must be less than 50 characters\"),\n  phone: z.string().min(1, \"Phone number is required\").max(20, \"Phone number must be less than 20 characters\"),\n  address: z.string().min(1, \"Address is required\").max(255, \"Address must be less than 255 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password confirmation is required\")\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype OwnerFormData = z.infer<typeof ownerSchema>;\n\ninterface CreateOwnerModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CreateOwnerModal({ isOpen, onClose }: CreateOwnerModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch available hotels\n  const { data: hotels = [], isLoading: hotelsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/hotels\");\n      return await res.json();\n    }\n  });\n\n  const form = useForm<OwnerFormData>({\n    resolver: zodResolver(ownerSchema),\n    defaultValues: {\n      hotelId: \"\",\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      address: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    }\n  });\n\n  const createOwnerMutation = useMutation({\n    mutationFn: async (data: OwnerFormData) => {\n      // Exclude confirmPassword from the request\n      const { confirmPassword, ...ownerData } = data;\n      const requestData = {\n        ...ownerData,\n        role: \"owner\"\n      };\n      \n      const res = await apiRequest(\"POST\", \"/api/users\", requestData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Owner Created Successfully\",\n        description: \"The new owner account has been created and can now access the system.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to Create Owner\",\n        description: error.message || \"Please check your input and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: OwnerFormData) => {\n    createOwnerMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    if (!createOwnerMutation.isPending) {\n      form.reset();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-create-owner\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Users className=\"h-5 w-5 text-green-500\" />\n            <span>Create New Hotel Owner</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {/* Hotel Selection */}\n            <FormField\n              control={form.control}\n              name=\"hotelId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Select Hotel *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder={hotelsLoading ? \"Loading hotels...\" : \"Select a hotel\"} />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {hotels.map((hotel: any) => (\n                        <SelectItem key={hotel.id} value={hotel.id}>\n                          {hotel.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter first name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter last name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter username\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email *</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"owner@example.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Phone number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter address\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"border-t pt-4\">\n              <h3 className=\"text-sm font-medium text-foreground mb-3\">Account Security</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password *</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Enter password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password *</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Confirm password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={createOwnerMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createOwnerMutation.isPending}\n                data-testid=\"button-create-owner\"\n              >\n                {createOwnerMutation.isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                Create Owner\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10430},"client/src/pages/dashboard/storekeeper/my-tasks.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckSquare, Clock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getStatusColor } from \"@/lib/utils\";\n\nexport default function StorekeeperMyTasks() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tasks = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/tasks/my-tasks\"],\n    refetchInterval: 3000\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks/my-tasks\"] });\n      toast({ title: \"Task updated successfully\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to update task\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const pendingTasks = tasks.filter((t: any) => t.status === 'pending');\n  const performingTasks = tasks.filter((t: any) => t.status === 'performing');\n  const completedTasks = tasks.filter((t: any) => t.status === 'completed');\n\n  const handleTaskStatusUpdate = (task: any, newStatus: string) => {\n    updateTaskMutation.mutate({ taskId: task.id, status: newStatus });\n  };\n\n  const getTaskActions = (task: any) => {\n    if (task.status === 'pending') {\n      return (\n        <Button\n          variant=\"default\"\n          size=\"sm\"\n          onClick={() => handleTaskStatusUpdate(task, 'performing')}\n          disabled={updateTaskMutation.isPending}\n          data-testid={`button-start-task-${task.id}`}\n        >\n          Start Task\n        </Button>\n      );\n    }\n    if (task.status === 'performing') {\n      return (\n        <Button\n          variant=\"default\"\n          size=\"sm\"\n          onClick={() => handleTaskStatusUpdate(task, 'completed')}\n          disabled={updateTaskMutation.isPending}\n          data-testid={`button-complete-task-${task.id}`}\n        >\n          Mark Complete\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <DashboardLayout title=\"My Tasks\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Pending Tasks\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"count-pending-tasks\">\n                {pendingTasks.length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                In Progress\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"count-performing-tasks\">\n                {performingTasks.length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Completed\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"count-completed-tasks\">\n                {completedTasks.length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckSquare className=\"w-5 h-5\" />\n              All Tasks\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <p className=\"text-center text-muted-foreground py-8\">Loading tasks...</p>\n            ) : tasks.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\" data-testid=\"no-tasks-message\">\n                No tasks assigned\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {tasks.map((task: any) => (\n                  <div\n                    key={task.id}\n                    className=\"p-4 border rounded-lg hover:bg-accent transition-colors\"\n                    data-testid={`task-item-${task.id}`}\n                  >\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold\" data-testid={`task-title-${task.id}`}>\n                            {task.title}\n                          </h3>\n                          <Badge variant={getStatusColor(task.status) as any} data-testid={`task-status-${task.id}`}>\n                            {task.status}\n                          </Badge>\n                        </div>\n                        {task.description && (\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            {task.description}\n                          </p>\n                        )}\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          {task.priority && (\n                            <span className=\"flex items-center gap-1\">\n                              Priority: <Badge variant=\"outline\">{task.priority}</Badge>\n                            </span>\n                          )}\n                          {task.dueDate && (\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"w-3 h-3\" />\n                              Due: {new Date(task.dueDate).toLocaleDateString()}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex-shrink-0\">\n                        {getTaskActions(task)}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":6699},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/dashboard/restaurant-bar-manager/wastage.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Trash2, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { formatCurrency } from \"@/lib/utils\";\n\nexport default function StaffWastage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedWastage, setSelectedWastage] = useState<any>(null);\n  const [approvalDialogOpen, setApprovalDialogOpen] = useState(false);\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n  const [isApproving, setIsApproving] = useState(true);\n\n  const { data: wastages = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/wastages\"],\n    refetchInterval: 5000\n  });\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"]\n  });\n\n  const { data: hotelUsers = [] } = useQuery({\n    queryKey: [\"/api/hotels/current/users\"]\n  });\n\n  // Filter wastages from restaurant/bar staff only\n  const staffWastages = wastages.filter((wastage: any) => {\n    const recorder = hotelUsers.find((u: any) => u.id === wastage.recordedBy);\n    return recorder && ['barista', 'bartender', 'kitchen_staff', 'waiter', 'cashier'].includes(recorder.role?.name || '');\n  });\n\n  const pendingWastages = staffWastages.filter((w: any) => w.status === 'pending_approval');\n  const approvedWastages = staffWastages.filter((w: any) => w.status === 'approved');\n  const rejectedWastages = staffWastages.filter((w: any) => w.status === 'rejected');\n\n  const approvalMutation = useMutation({\n    mutationFn: async ({ id, approved, rejectionReason }: any) => {\n      return await apiRequest(\"POST\", `/api/wastages/${id}/approve`, {\n        approved,\n        rejectionReason\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/wastages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({ title: isApproving ? \"Wastage approved successfully\" : \"Wastage rejected\" });\n      setApprovalDialogOpen(false);\n      setSelectedWastage(null);\n      setRejectionReason(\"\");\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const getItemName = (itemId: string) => {\n    const item = inventoryItems.find((i: any) => i.id === itemId);\n    return item?.name || 'Unknown Item';\n  };\n\n  const getItemUnit = (itemId: string) => {\n    const item = inventoryItems.find((i: any) => i.id === itemId);\n    return item?.baseUnit || item?.unit || 'unit';\n  };\n\n  const getUserName = (userId: string) => {\n    const foundUser = hotelUsers.find((u: any) => u.id === userId);\n    return foundUser?.username || 'Unknown User';\n  };\n\n  const getUserRole = (userId: string) => {\n    const foundUser = hotelUsers.find((u: any) => u.id === userId);\n    return foundUser?.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || 'Unknown';\n  };\n\n  const handleApprove = (wastage: any) => {\n    setSelectedWastage(wastage);\n    setIsApproving(true);\n    setApprovalDialogOpen(true);\n  };\n\n  const handleReject = (wastage: any) => {\n    setSelectedWastage(wastage);\n    setIsApproving(false);\n    setApprovalDialogOpen(true);\n  };\n\n  const submitApproval = () => {\n    if (!isApproving && (!rejectionReason || rejectionReason.trim().length < 10)) {\n      toast({ \n        title: \"Rejection reason required\", \n        description: \"Please provide a detailed reason (minimum 10 characters)\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    approvalMutation.mutate({\n      id: selectedWastage.id,\n      approved: isApproving,\n      rejectionReason: isApproving ? null : rejectionReason.trim()\n    });\n  };\n\n  const renderWastageCard = (wastage: any) => {\n    const itemName = getItemName(wastage.itemId);\n    const itemUnit = getItemUnit(wastage.itemId);\n    const recorderName = getUserName(wastage.recordedBy);\n    const recorderRole = getUserRole(wastage.recordedBy);\n    const estimatedValue = wastage.estimatedValue || 0;\n\n    return (\n      <Card key={wastage.id} className=\"mb-4\">\n        <CardHeader>\n          <CardTitle className=\"flex justify-between items-center\">\n            <span className=\"text-base\">{itemName}</span>\n            <Badge variant={\n              wastage.status === 'approved' ? 'default' :\n              wastage.status === 'rejected' ? 'destructive' : 'secondary'\n            }>\n              {wastage.status.replace('_', ' ').toUpperCase()}\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm\">\n            <p><strong>Recorded by:</strong> {recorderName} ({recorderRole})</p>\n            <p><strong>Quantity:</strong> {wastage.qty} {wastage.unit || itemUnit}</p>\n            <p><strong>Estimated Value:</strong> {formatCurrency(estimatedValue)}</p>\n            <p><strong>Reason:</strong> {wastage.reason}</p>\n            <p><strong>Date:</strong> {new Date(wastage.createdAt).toLocaleString()}</p>\n            {wastage.approvedBy && (\n              <p><strong>Approved by:</strong> {getUserName(wastage.approvedBy)}</p>\n            )}\n            {wastage.rejectedBy && (\n              <p><strong>Rejected by:</strong> {getUserName(wastage.rejectedBy)}</p>\n            )}\n            {wastage.rejectionReason && (\n              <p className=\"text-red-600\"><strong>Rejection Reason:</strong> {wastage.rejectionReason}</p>\n            )}\n          </div>\n          {wastage.status === 'pending_approval' && (\n            <div className=\"flex gap-2 mt-4\">\n              <Button\n                size=\"sm\"\n                onClick={() => handleApprove(wastage)}\n                className=\"flex-1\"\n              >\n                <CheckCircle className=\"w-4 h-4 mr-1\" /> Approve\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => handleReject(wastage)}\n                className=\"flex-1\"\n              >\n                <XCircle className=\"w-4 h-4 mr-1\" /> Reject\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <DashboardLayout title=\"Staff Wastage Management\">\n      <div className=\"space-y-6 p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"w-5 h-5 mr-2 text-yellow-500\" />\n                Pending Approval\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-yellow-600\">{pendingWastages.length}</div>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                Total Value: {formatCurrency(pendingWastages.reduce((sum, w) => sum + (w.estimatedValue || 0), 0))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <CheckCircle className=\"w-5 h-5 mr-2 text-green-500\" />\n                Approved\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-green-600\">{approvedWastages.length}</div>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                Total Value: {formatCurrency(approvedWastages.reduce((sum, w) => sum + (w.estimatedValue || 0), 0))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <XCircle className=\"w-5 h-5 mr-2 text-red-500\" />\n                Rejected\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-red-600\">{rejectedWastages.length}</div>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                Total Value: {formatCurrency(rejectedWastages.reduce((sum, w) => sum + (w.estimatedValue || 0), 0))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"pending\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3 max-w-md\">\n            <TabsTrigger value=\"pending\">Pending ({pendingWastages.length})</TabsTrigger>\n            <TabsTrigger value=\"approved\">Approved ({approvedWastages.length})</TabsTrigger>\n            <TabsTrigger value=\"rejected\">Rejected ({rejectedWastages.length})</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"pending\" className=\"space-y-4\">\n            {pendingWastages.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  No pending wastage approvals\n                </CardContent>\n              </Card>\n            ) : (\n              pendingWastages.map(renderWastageCard)\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"approved\" className=\"space-y-4\">\n            {approvedWastages.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  No approved wastages\n                </CardContent>\n              </Card>\n            ) : (\n              approvedWastages.map(renderWastageCard)\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"rejected\" className=\"space-y-4\">\n            {rejectedWastages.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  No rejected wastages\n                </CardContent>\n              </Card>\n            ) : (\n              rejectedWastages.map(renderWastageCard)\n            )}\n          </TabsContent>\n        </Tabs>\n\n        <Dialog open={approvalDialogOpen} onOpenChange={setApprovalDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {isApproving ? 'Approve Wastage' : 'Reject Wastage'}\n              </DialogTitle>\n            </DialogHeader>\n            {selectedWastage && (\n              <div className=\"space-y-4\">\n                <div className=\"text-sm\">\n                  <p><strong>Item:</strong> {getItemName(selectedWastage.itemId)}</p>\n                  <p><strong>Quantity:</strong> {selectedWastage.qty} {selectedWastage.unit || getItemUnit(selectedWastage.itemId)}</p>\n                  <p><strong>Reported by:</strong> {getUserName(selectedWastage.recordedBy)}</p>\n                  <p><strong>Reason:</strong> {selectedWastage.reason}</p>\n                </div>\n\n                {!isApproving && (\n                  <div className=\"space-y-2\">\n                    <Label>Rejection Reason *</Label>\n                    <Textarea\n                      value={rejectionReason}\n                      onChange={(e) => setRejectionReason(e.target.value)}\n                      placeholder=\"Provide a detailed reason for rejecting this wastage report (minimum 10 characters)\"\n                      rows={4}\n                    />\n                  </div>\n                )}\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setApprovalDialogOpen(false);\n                      setRejectionReason(\"\");\n                    }}\n                    className=\"flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={submitApproval}\n                    disabled={approvalMutation.isPending}\n                    className=\"flex-1\"\n                    variant={isApproving ? \"default\" : \"destructive\"}\n                  >\n                    {approvalMutation.isPending ? \"Processing...\" : (isApproving ? \"Approve\" : \"Reject\")}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":12946},"client/src/pages/dashboard/storekeeper/stock-requests.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Clock, Truck, Package } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function StorekeeperStockRequests() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: inventoryItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: pendingRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/stock-requests/pending\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates for stock requests\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/stock-requests/pending\"],\n    refetchInterval: 3000,\n    events: ['stock-request:created', 'stock-request:updated']\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"PATCH\", `/api/hotels/current/stock-requests/${id}/approve`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/stock-requests/pending\"] });\n      toast({\n        title: \"Success\",\n        description: \"Stock request approved\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deliverMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"PATCH\", `/api/hotels/current/stock-requests/${id}/deliver`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/stock-requests/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({\n        title: \"Success\",\n        description: \"Stock delivered and inventory updated\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to deliver stock\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getItemById = (itemId: string) => {\n    return inventoryItems.find((item: any) => item.id === itemId);\n  };\n\n  return (\n    <DashboardLayout title=\"Stock Requests\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Stock Requests</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage pending stock requests from staff</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Pending Requests</CardTitle>\n            <CardDescription>Approve and deliver stock requests</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {pendingRequests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Package className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No pending stock requests</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {pendingRequests.map((request: any) => {\n                  const item = getItemById(request.itemId);\n                  const isApproved = request.status === 'approved';\n                  return (\n                    <div key={request.id} className=\"border rounded-lg p-4\" data-testid={`request-${request.id}`}>\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-semibold text-lg\" data-testid={`text-item-${request.id}`}>{item?.name || 'Unknown Item'}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Requested Quantity: <span className=\"font-medium\">{request.quantity} {request.unit}</span>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Available Stock: <span className=\"font-medium\">{item?.baseStockQty || item?.stockQty || 0} {item?.baseUnit || item?.unit || 'units'}</span>\n                          </div>\n                          {request.notes && (\n                            <div className=\"text-sm text-muted-foreground mt-1\">\n                              Notes: {request.notes}\n                            </div>\n                          )}\n                          <div className=\"text-xs text-muted-foreground mt-2\">\n                            Requested: {new Date(request.createdAt).toLocaleString()}\n                          </div>\n                          {isApproved && request.approvedAt && (\n                            <div className=\"text-xs text-muted-foreground\">\n                              Approved: {new Date(request.approvedAt).toLocaleString()}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {!isApproved ? (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => approveMutation.mutate(request.id)}\n                              disabled={approveMutation.isPending}\n                              data-testid={`button-approve-${request.id}`}\n                            >\n                              <CheckCircle className=\"w-4 h-4 mr-1\" />\n                              Approve\n                            </Button>\n                          ) : (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => deliverMutation.mutate(request.id)}\n                              disabled={deliverMutation.isPending}\n                              data-testid={`button-deliver-${request.id}`}\n                            >\n                              <Truck className=\"w-4 h-4 mr-1\" />\n                              Mark Delivered\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                      {isApproved && (\n                        <div className=\"mt-2\">\n                          <Badge variant=\"outline\" className=\"bg-blue-50\">\n                            <Clock className=\"w-3 h-3 mr-1\" /> Ready for Pickup\n                          </Badge>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7034},"client/src/pages/dashboard/restaurant-bar-manager/staff-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Users, UserPlus, ChefHat, Coffee } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nexport default function RestaurantStaffManagement() {\n  const { confirm } = useConfirmDialog();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newStaff, setNewStaff] = useState({\n    username: \"\",\n    email: \"\",\n    phone: \"\",\n    fullName: \"\",\n    address: \"\",\n    password: \"\",\n    role: \"\"\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch restaurant staff\n  const { data: allStaff = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  // Filter for restaurant staff only\n  const restaurantStaff = allStaff.filter(staff => \n    ['waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier'].includes(staff.role?.name || '')\n  );\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Restaurant roles that manager can create\n  const restaurantRoles = [\n    { name: \"waiter\", label: \"Waiter\" },\n    { name: \"kitchen_staff\", label: \"Kitchen Staff\" },\n    { name: \"bartender\", label: \"Bartender\" },\n    { name: \"barista\", label: \"Barista\" },\n    { name: \"cashier\", label: \"Cashier\" }\n  ];\n\n  // Create staff mutation\n  const createStaffMutation = useMutation({\n    mutationFn: async (staffData: any) => {\n      const response = await fetch(\"/api/hotels/current/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(staffData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create staff member\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      setIsAddDialogOpen(false);\n      setNewStaff({ username: \"\", email: \"\", phone: \"\", fullName: \"\", address: \"\", password: \"\", role: \"\" });\n      toast.success(\"Restaurant staff member created successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleAddStaff = () => {\n    if (!newStaff.username || !newStaff.email || !newStaff.password || !newStaff.role || !newStaff.phone || !newStaff.fullName || !newStaff.address) {\n      toast.error(\"Please fill in all required fields (username, email, password, role, phone, full name, and address)\");\n      return;\n    }\n\n    createStaffMutation.mutate({\n      ...newStaff,\n      confirmPassword: newStaff.password\n    });\n  };\n\n\n  const handleDeleteStaff = async (staff: any) => {\n    await confirm({\n      title: \"Remove Staff Member\",\n      description: `Are you sure you want to remove ${staff.username}?`,\n      confirmText: \"Remove\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: async () => {\n        try {\n          const response = await fetch(`/api/hotels/current/users/${staff.id}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n          });\n          if (!response.ok) {\n            throw new Error(\"Failed to delete staff member\");\n          }\n          queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n          toast.success(\"Staff member removed successfully\");\n        } catch (error: any) {\n          toast.error(error.message);\n        }\n      }\n    });\n  };\n\n  const columns = [\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        return value && value.trim() ? value : (row.username || '-');\n      }\n    },\n    { \n      key: \"username\", \n      label: \"Username\", \n      sortable: true\n    },\n    { \n      key: \"address\", \n      label: \"Address\", \n      sortable: true,\n      render: (value: any) => value || '-'\n    },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => (\n        <div className=\"flex items-center space-x-2\">\n          {value?.name === 'waiter' && <Users className=\"h-4 w-4 text-blue-500\" />}\n          {value?.name === 'kitchen_staff' && <ChefHat className=\"h-4 w-4 text-green-500\" />}\n          {value?.name === 'bartender' && <Coffee className=\"h-4 w-4 text-purple-500\" />}\n          {value?.name === 'barista' && <Coffee className=\"h-4 w-4 text-orange-500\" />}\n          {value?.name === 'cashier' && <Users className=\"h-4 w-4 text-red-500\" />}\n          <span>{value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}</span>\n        </div>\n      )\n    },\n    { \n      key: \"id\", \n      label: \"Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-3 py-1 rounded-full text-xs ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n            {isOnDuty ? 'On Duty' : 'Off Duty'}\n          </span>\n        );\n      }\n    },\n    { \n      key: \"lastLogin\", \n      label: \"Last Active\", \n      sortable: true,\n      render: (value: string) => value ? new Date(value).toLocaleString('en-GB', { timeZone: 'Asia/Kathmandu' }) : 'Never'\n    }\n  ];\n\n  const actions = [\n    { \n      label: \"Remove\", \n      action: handleDeleteStaff, \n      variant: \"destructive\" as const \n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Restaurant Staff Management\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Staff</p>\n                  <p className=\"text-2xl font-bold\">{restaurantStaff.length}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">On Duty</p>\n                  <p className=\"text-2xl font-bold\">{restaurantStaff.filter(s => dailyAttendance.some(a => a.userId === s.id && a.status === 'active')).length}</p>\n                </div>\n                <div className=\"h-8 w-8 rounded-full bg-green-100 flex items-center justify-center\">\n                  <div className=\"h-4 w-4 rounded-full bg-green-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Kitchen Staff</p>\n                  <p className=\"text-2xl font-bold\">\n                    {restaurantStaff.filter(s => ['kitchen_staff', 'barista'].includes(s.role?.name || '')).length}\n                  </p>\n                </div>\n                <ChefHat className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Service Staff</p>\n                  <p className=\"text-2xl font-bold\">\n                    {restaurantStaff.filter(s => ['waiter', 'bartender', 'cashier'].includes(s.role?.name || '')).length}\n                  </p>\n                </div>\n                <Coffee className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Staff Table */}\n        <DataTable\n          title=\"Restaurant Staff\"\n          data={restaurantStaff}\n          columns={columns}\n          actions={actions}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Add Staff Member\"\n          searchPlaceholder=\"Search restaurant staff...\"\n        />\n\n        {/* Add Staff Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add Restaurant Staff Member</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"username\">Username *</Label>\n                <Input\n                  id=\"username\"\n                  value={newStaff.username}\n                  onChange={(e) => setNewStaff({ ...newStaff, username: e.target.value })}\n                  placeholder=\"Enter username\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={newStaff.email}\n                  onChange={(e) => setNewStaff({ ...newStaff, email: e.target.value })}\n                  placeholder=\"Enter email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone *</Label>\n                <Input\n                  id=\"phone\"\n                  value={newStaff.phone}\n                  onChange={(e) => setNewStaff({ ...newStaff, phone: e.target.value })}\n                  placeholder=\"Enter phone number\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"fullName\">Full Name *</Label>\n                <Input\n                  id=\"fullName\"\n                  value={newStaff.fullName}\n                  onChange={(e) => setNewStaff({ ...newStaff, fullName: e.target.value })}\n                  placeholder=\"Enter full name\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"address\">Address *</Label>\n                <Input\n                  id=\"address\"\n                  value={newStaff.address}\n                  onChange={(e) => setNewStaff({ ...newStaff, address: e.target.value })}\n                  placeholder=\"Enter address\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"role\">Role *</Label>\n                <Select value={newStaff.role} onValueChange={(value) => setNewStaff({ ...newStaff, role: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {restaurantRoles.map((role) => (\n                      <SelectItem key={role.name} value={role.name}>\n                        {role.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={newStaff.password}\n                  onChange={(e) => setNewStaff({ ...newStaff, password: e.target.value })}\n                  placeholder=\"Enter password\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleAddStaff}\n                  disabled={createStaffMutation.isPending}\n                >\n                  {createStaffMutation.isPending ? \"Creating...\" : \"Create Staff\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":13062},"client/src/pages/dashboard/owner/amenities.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Edit, Trash2, Building, Waves, Wrench } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { DashboardLayout } from '@/components/layout/dashboard-layout';\n\ninterface Hall {\n  id: string;\n  name: string;\n  capacity: number;\n  priceInhouse: string;\n  priceWalkin: string;\n  createdAt: string;\n}\n\ninterface Pool {\n  id: string;\n  name: string;\n  priceInhouse: string;\n  priceWalkin: string;\n  createdAt: string;\n}\n\ninterface Service {\n  id: string;\n  kind: string;\n  name: string;\n  priceInhouse: string;\n  priceWalkin: string;\n}\n\nconst ServiceTypes = [\n  'Spa',\n  'Jacuzzi',\n  'Massage',\n  'Fitness Center',\n  'Sauna',\n  'Beauty Salon',\n  'Laundry',\n  'Car Rental',\n  'Tour Guide',\n  'Airport Transfer',\n  'Conference Room',\n  'Business Center',\n  'Other'\n];\n\nexport default function AmenitiesPage() {\n  const [halls, setHalls] = useState<Hall[]>([]);\n  const [pools, setPools] = useState<Pool[]>([]);\n  const [services, setServices] = useState<Service[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('halls');\n\n  // Dialog states\n  const [showHallDialog, setShowHallDialog] = useState(false);\n  const [showPoolDialog, setShowPoolDialog] = useState(false);\n  const [showServiceDialog, setShowServiceDialog] = useState(false);\n  const [editingHall, setEditingHall] = useState<Hall | null>(null);\n  const [editingPool, setEditingPool] = useState<Pool | null>(null);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [deleteConfirm, setDeleteConfirm] = useState<{type: 'hall' | 'pool' | 'service', id: string} | null>(null);\n\n  // Form states\n  const [hallForm, setHallForm] = useState({\n    name: '',\n    capacity: '',\n    priceInhouse: '',\n    priceWalkin: ''\n  });\n\n  const [poolForm, setPoolForm] = useState({\n    name: '',\n    priceInhouse: '',\n    priceWalkin: ''\n  });\n\n  const [serviceForm, setServiceForm] = useState({\n    kind: '',\n    name: '',\n    priceInhouse: '',\n    priceWalkin: ''\n  });\n\n  const fetchAmenities = async () => {\n    try {\n      setLoading(true);\n      const [hallsRes, poolsRes, servicesRes] = await Promise.all([\n        fetch('/api/halls'),\n        fetch('/api/pools'),\n        fetch('/api/services')\n      ]);\n\n      if (hallsRes.ok) {\n        const hallsData = await hallsRes.json();\n        setHalls(hallsData);\n      }\n\n      if (poolsRes.ok) {\n        const poolsData = await poolsRes.json();\n        setPools(poolsData);\n      }\n\n      if (servicesRes.ok) {\n        const servicesData = await servicesRes.json();\n        setServices(servicesData);\n      }\n    } catch (error) {\n      toast.error('Failed to fetch amenities');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAmenities();\n  }, []);\n\n  const resetForms = () => {\n    setHallForm({ name: '', capacity: '', priceInhouse: '', priceWalkin: '' });\n    setPoolForm({ name: '', priceInhouse: '', priceWalkin: '' });\n    setServiceForm({ kind: '', name: '', priceInhouse: '', priceWalkin: '' });\n    setEditingHall(null);\n    setEditingPool(null);\n    setEditingService(null);\n  };\n\n  const handleHallSubmit = async () => {\n    try {\n      const data = {\n        name: hallForm.name,\n        capacity: parseInt(hallForm.capacity),\n        priceInhouse: hallForm.priceInhouse,\n        priceWalkin: hallForm.priceWalkin\n      };\n\n      const response = editingHall\n        ? await fetch(`/api/halls/${editingHall.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          })\n        : await fetch('/api/halls', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast.success(editingHall ? 'Hall updated successfully' : 'Hall created successfully');\n        setShowHallDialog(false);\n        resetForms();\n        fetchAmenities();\n      } else {\n        toast.error('Failed to save hall');\n      }\n    } catch (error) {\n      toast.error('Failed to save hall');\n    }\n  };\n\n  const handlePoolSubmit = async () => {\n    try {\n      const data = {\n        name: poolForm.name,\n        priceInhouse: poolForm.priceInhouse,\n        priceWalkin: poolForm.priceWalkin\n      };\n\n      const response = editingPool\n        ? await fetch(`/api/pools/${editingPool.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          })\n        : await fetch('/api/pools', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast.success(editingPool ? 'Pool updated successfully' : 'Pool created successfully');\n        setShowPoolDialog(false);\n        resetForms();\n        fetchAmenities();\n      } else {\n        toast.error('Failed to save pool');\n      }\n    } catch (error) {\n      toast.error('Failed to save pool');\n    }\n  };\n\n  const handleServiceSubmit = async () => {\n    try {\n      const data = {\n        kind: serviceForm.kind,\n        name: serviceForm.name,\n        priceInhouse: serviceForm.priceInhouse,\n        priceWalkin: serviceForm.priceWalkin\n      };\n\n      const response = editingService\n        ? await fetch(`/api/services/${editingService.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          })\n        : await fetch('/api/services', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          });\n\n      if (response.ok) {\n        toast.success(editingService ? 'Service updated successfully' : 'Service created successfully');\n        setShowServiceDialog(false);\n        resetForms();\n        fetchAmenities();\n      } else {\n        toast.error('Failed to save service');\n      }\n    } catch (error) {\n      toast.error('Failed to save service');\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deleteConfirm) return;\n\n    try {\n      const response = await fetch(`/api/${deleteConfirm.type}s/${deleteConfirm.id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        toast.success(`${deleteConfirm.type} deleted successfully`);\n        setDeleteConfirm(null);\n        fetchAmenities();\n      } else {\n        toast.error(`Failed to delete ${deleteConfirm.type}`);\n      }\n    } catch (error) {\n      toast.error(`Failed to delete ${deleteConfirm.type}`);\n    }\n  };\n\n  const editHall = (hall: Hall) => {\n    setHallForm({\n      name: hall.name,\n      capacity: hall.capacity.toString(),\n      priceInhouse: hall.priceInhouse,\n      priceWalkin: hall.priceWalkin\n    });\n    setEditingHall(hall);\n    setShowHallDialog(true);\n  };\n\n  const editPool = (pool: Pool) => {\n    setPoolForm({\n      name: pool.name,\n      priceInhouse: pool.priceInhouse,\n      priceWalkin: pool.priceWalkin\n    });\n    setEditingPool(pool);\n    setShowPoolDialog(true);\n  };\n\n  const editService = (service: Service) => {\n    setServiceForm({\n      kind: service.kind,\n      name: service.name,\n      priceInhouse: service.priceInhouse,\n      priceWalkin: service.priceWalkin\n    });\n    setEditingService(service);\n    setShowServiceDialog(true);\n  };\n\n  const formatPrice = (price: string) => {\n    return `NPR ${parseFloat(price).toLocaleString()}`;\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout title=\"Amenities Management\">\n        <div className=\"text-center\">Loading amenities...</div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Amenities Management\">\n      <div>\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold\">Amenities Management</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Manage hotel amenities including halls, pools, and services with dual pricing for in-house guests and walk-in customers.\n        </p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Building className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{halls.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Event Halls</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Waves className=\"h-8 w-8 text-cyan-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{pools.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Pools</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Wrench className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{services.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Services</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"halls\">Event Halls</TabsTrigger>\n          <TabsTrigger value=\"pools\">Pools</TabsTrigger>\n          <TabsTrigger value=\"services\">Services</TabsTrigger>\n        </TabsList>\n\n        {/* Halls Tab */}\n        <TabsContent value=\"halls\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Event Halls</h2>\n            <Dialog open={showHallDialog} onOpenChange={(open) => {\n              setShowHallDialog(open);\n              if (!open) resetForms();\n            }}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Hall\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>{editingHall ? 'Edit Hall' : 'Add New Hall'}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"hall-name\">Hall Name</Label>\n                    <Input\n                      id=\"hall-name\"\n                      value={hallForm.name}\n                      onChange={(e) => setHallForm({...hallForm, name: e.target.value})}\n                      placeholder=\"e.g., Grand Ballroom\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"hall-capacity\">Capacity</Label>\n                    <Input\n                      id=\"hall-capacity\"\n                      type=\"number\"\n                      value={hallForm.capacity}\n                      onChange={(e) => setHallForm({...hallForm, capacity: e.target.value})}\n                      placeholder=\"e.g., 200\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"hall-price-inhouse\">In-House Price (NPR)</Label>\n                      <Input\n                        id=\"hall-price-inhouse\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={hallForm.priceInhouse}\n                        onChange={(e) => setHallForm({...hallForm, priceInhouse: e.target.value})}\n                        placeholder=\"5000.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"hall-price-walkin\">Walk-in Price (NPR)</Label>\n                      <Input\n                        id=\"hall-price-walkin\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={hallForm.priceWalkin}\n                        onChange={(e) => setHallForm({...hallForm, priceWalkin: e.target.value})}\n                        placeholder=\"8000.00\"\n                      />\n                    </div>\n                  </div>\n                  <Button onClick={handleHallSubmit} className=\"w-full\">\n                    {editingHall ? 'Update Hall' : 'Create Hall'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Capacity</TableHead>\n                    <TableHead>In-House Price</TableHead>\n                    <TableHead>Walk-in Price</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {halls.map((hall) => (\n                    <TableRow key={hall.id}>\n                      <TableCell className=\"font-medium\">{hall.name}</TableCell>\n                      <TableCell>{hall.capacity} people</TableCell>\n                      <TableCell>{formatPrice(hall.priceInhouse)}</TableCell>\n                      <TableCell>{formatPrice(hall.priceWalkin)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => editHall(hall)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => setDeleteConfirm({type: 'hall', id: hall.id})}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {halls.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center text-muted-foreground\">\n                        No halls configured. Add your first hall to get started.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Pools Tab */}\n        <TabsContent value=\"pools\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Swimming Pools</h2>\n            <Dialog open={showPoolDialog} onOpenChange={(open) => {\n              setShowPoolDialog(open);\n              if (!open) resetForms();\n            }}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Pool\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>{editingPool ? 'Edit Pool' : 'Add New Pool'}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"pool-name\">Pool Name</Label>\n                    <Input\n                      id=\"pool-name\"\n                      value={poolForm.name}\n                      onChange={(e) => setPoolForm({...poolForm, name: e.target.value})}\n                      placeholder=\"e.g., Olympic Pool\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"pool-price-inhouse\">In-House Price (NPR)</Label>\n                      <Input\n                        id=\"pool-price-inhouse\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={poolForm.priceInhouse}\n                        onChange={(e) => setPoolForm({...poolForm, priceInhouse: e.target.value})}\n                        placeholder=\"500.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"pool-price-walkin\">Walk-in Price (NPR)</Label>\n                      <Input\n                        id=\"pool-price-walkin\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={poolForm.priceWalkin}\n                        onChange={(e) => setPoolForm({...poolForm, priceWalkin: e.target.value})}\n                        placeholder=\"800.00\"\n                      />\n                    </div>\n                  </div>\n                  <Button onClick={handlePoolSubmit} className=\"w-full\">\n                    {editingPool ? 'Update Pool' : 'Create Pool'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>In-House Price</TableHead>\n                    <TableHead>Walk-in Price</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {pools.map((pool) => (\n                    <TableRow key={pool.id}>\n                      <TableCell className=\"font-medium\">{pool.name}</TableCell>\n                      <TableCell>{formatPrice(pool.priceInhouse)}</TableCell>\n                      <TableCell>{formatPrice(pool.priceWalkin)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => editPool(pool)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => setDeleteConfirm({type: 'pool', id: pool.id})}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {pools.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={4} className=\"text-center text-muted-foreground\">\n                        No pools configured. Add your first pool to get started.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Services Tab */}\n        <TabsContent value=\"services\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Hotel Services</h2>\n            <Dialog open={showServiceDialog} onOpenChange={(open) => {\n              setShowServiceDialog(open);\n              if (!open) resetForms();\n            }}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Service\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>{editingService ? 'Edit Service' : 'Add New Service'}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"service-kind\">Service Type</Label>\n                    <Select \n                      value={serviceForm.kind} \n                      onValueChange={(value) => setServiceForm({...serviceForm, kind: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select service type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {ServiceTypes.map((type) => (\n                          <SelectItem key={type} value={type}>{type}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"service-name\">Service Name</Label>\n                    <Input\n                      id=\"service-name\"\n                      value={serviceForm.name}\n                      onChange={(e) => setServiceForm({...serviceForm, name: e.target.value})}\n                      placeholder=\"e.g., Swedish Massage\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"service-price-inhouse\">In-House Price (NPR)</Label>\n                      <Input\n                        id=\"service-price-inhouse\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={serviceForm.priceInhouse}\n                        onChange={(e) => setServiceForm({...serviceForm, priceInhouse: e.target.value})}\n                        placeholder=\"1500.00\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"service-price-walkin\">Walk-in Price (NPR)</Label>\n                      <Input\n                        id=\"service-price-walkin\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={serviceForm.priceWalkin}\n                        onChange={(e) => setServiceForm({...serviceForm, priceWalkin: e.target.value})}\n                        placeholder=\"2000.00\"\n                      />\n                    </div>\n                  </div>\n                  <Button onClick={handleServiceSubmit} className=\"w-full\">\n                    {editingService ? 'Update Service' : 'Create Service'}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Service Type</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>In-House Price</TableHead>\n                    <TableHead>Walk-in Price</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {services.map((service) => (\n                    <TableRow key={service.id}>\n                      <TableCell>\n                        <Badge variant=\"secondary\">{service.kind}</Badge>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">{service.name}</TableCell>\n                      <TableCell>{formatPrice(service.priceInhouse)}</TableCell>\n                      <TableCell>{formatPrice(service.priceWalkin)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => editService(service)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => setDeleteConfirm({type: 'service', id: service.id})}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {services.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center text-muted-foreground\">\n                        No services configured. Add your first service to get started.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteConfirm} onOpenChange={() => setDeleteConfirm(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete this {deleteConfirm?.type}.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n    </DashboardLayout>\n  );\n}","size_bytes":26607},"client/src/pages/dashboard/restaurant-bar-manager/duty-tracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Users, CheckCircle, UserCheck } from \"lucide-react\";\nimport { formatDateTime } from \"@/lib/utils\";\n\nexport default function DutyTracking() {\n  const { data: allStaff = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  const restaurantStaff = allStaff.filter(staff => \n    ['waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier'].includes(staff.role?.name || '')\n  );\n\n  const activeAttendanceUserIds = dailyAttendance.filter(a => a.status === 'active').map(a => a.userId);\n  const onDutyStaff = restaurantStaff.filter(s => activeAttendanceUserIds.includes(s.id));\n  const offDutyStaff = restaurantStaff.filter(s => !activeAttendanceUserIds.includes(s.id));\n\n  const getStaffAttendance = (userId: string) => {\n    return dailyAttendance.find(a => a.userId === userId && a.status === 'active');\n  };\n\n  const columns = [\n    { key: \"username\", label: \"Staff Name\", sortable: true },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())\n    },\n    { \n      key: \"id\", \n      label: \"Duty Status\", \n      render: (_: any, row: any) => {\n        const isOnDuty = activeAttendanceUserIds.includes(row.id);\n        const attendance = getStaffAttendance(row.id);\n        return (\n          <div className=\"space-y-1\">\n            <Badge \n              variant={isOnDuty ? 'default' : 'secondary'}\n              className={isOnDuty ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'}\n            >\n              {isOnDuty ? 'On Duty' : 'Off Duty'}\n            </Badge>\n            {attendance && (\n              <p className=\"text-xs text-muted-foreground\">\n                Since {formatDateTime(attendance.clockInTime)}\n              </p>\n            )}\n          </div>\n        );\n      }\n    },\n    { \n      key: \"id\", \n      label: \"Total Hours Today\", \n      render: (_: any, row: any) => {\n        const userAttendance = dailyAttendance.filter(a => a.userId === row.id);\n        const totalHours = userAttendance.reduce((sum, a) => {\n          if (a.totalHours) {\n            return sum + parseFloat(a.totalHours);\n          }\n          return sum;\n        }, 0);\n        return totalHours > 0 ? `${totalHours.toFixed(2)} hrs` : '-';\n      }\n    }\n  ];\n\n  const getRoleCount = (roleName: string, isOnDuty: boolean) => {\n    const roleStaff = restaurantStaff.filter(s => s.role?.name === roleName);\n    const onDutyCount = roleStaff.filter(s => activeAttendanceUserIds.includes(s.id)).length;\n    return isOnDuty ? onDutyCount : roleStaff.length;\n  };\n\n  return (\n    <DashboardLayout title=\"Restaurant Duty Tracking\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Staff</p>\n                  <p className=\"text-2xl font-bold\">{restaurantStaff.length}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">On Duty</p>\n                  <p className=\"text-2xl font-bold\">{onDutyStaff.length}</p>\n                </div>\n                <UserCheck className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Off Duty</p>\n                  <p className=\"text-2xl font-bold\">{offDutyStaff.length}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Duty Coverage</p>\n                  <p className=\"text-2xl font-bold\">\n                    {restaurantStaff.length > 0 ? Math.round((onDutyStaff.length / restaurantStaff.length) * 100) : 0}%\n                  </p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Duty Summary by Role</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Waiters</span>\n                <span className=\"font-medium\">\n                  {getRoleCount('waiter', true)} / {getRoleCount('waiter', false)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Kitchen Staff</span>\n                <span className=\"font-medium\">\n                  {getRoleCount('kitchen_staff', true)} / {getRoleCount('kitchen_staff', false)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Bartenders</span>\n                <span className=\"font-medium\">\n                  {getRoleCount('bartender', true)} / {getRoleCount('bartender', false)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Baristas</span>\n                <span className=\"font-medium\">\n                  {getRoleCount('barista', true)} / {getRoleCount('barista', false)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Cashiers</span>\n                <span className=\"font-medium\">\n                  {getRoleCount('cashier', true)} / {getRoleCount('cashier', false)}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n          <CardContent className=\"p-4\">\n            <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n              <strong>Note:</strong> Staff members manage their own duty status using the duty toggle. Attendance is tracked automatically when staff clock in and out.\n            </p>\n          </CardContent>\n        </Card>\n\n        <DataTable\n          title=\"Restaurant Staff Duty Status\"\n          data={restaurantStaff}\n          columns={columns}\n          isLoading={isLoading}\n          searchPlaceholder=\"Search staff...\"\n        />\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7977},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/dashboard/finance/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState, useMemo } from \"react\";\nimport { Download, FileText, TrendingUp, DollarSign, PieChart, ArrowUpRight, ArrowDownRight } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\nimport { \n  LineChart, Line, BarChart, Bar, PieChart as RechartsPie, Pie, Cell,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Area, AreaChart\n} from \"recharts\";\n\nexport default function FinanceReportsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [reportType, setReportType] = useState(\"profit_loss\");\n  const [period, setPeriod] = useState(\"month\");\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Real-time updates for transactions\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  const revenueTransactions = transactions.filter(t => \n    t.txnType === 'cash_in' || t.txnType === 'pos_in' || t.txnType === 'fonepay_in' || t.txnType?.includes('_in')\n  );\n  const expenseTransactions = transactions.filter(t => \n    t.txnType === 'cash_out' || t.txnType === 'vendor_payment' || t.txnType?.includes('_out')\n  );\n\n  const totalRevenue = revenueTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalExpenses = expenseTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const netProfit = totalRevenue - totalExpenses;\n  const profitMargin = totalRevenue > 0 ? (netProfit / totalRevenue) * 100 : 0;\n\n  // Chart data processing\n  const trendData = useMemo(() => {\n    const last7Days = Array.from({ length: 7 }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (6 - i));\n      return date.toISOString().split('T')[0];\n    });\n\n    return last7Days.map(date => {\n      const dayRevenue = revenueTransactions\n        .filter(t => t.createdAt?.startsWith(date))\n        .reduce((sum, t) => sum + Number(t.amount || 0), 0);\n      const dayExpenses = expenseTransactions\n        .filter(t => t.createdAt?.startsWith(date))\n        .reduce((sum, t) => sum + Number(t.amount || 0), 0);\n      \n      return {\n        date: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n        revenue: dayRevenue,\n        expenses: dayExpenses,\n        profit: dayRevenue - dayExpenses\n      };\n    });\n  }, [revenueTransactions, expenseTransactions]);\n\n  const departmentData = useMemo(() => {\n    return [\n      { \n        name: 'Rooms', \n        value: revenueTransactions.filter(t => t.purpose?.toLowerCase().includes('room')).reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#3b82f6'\n      },\n      { \n        name: 'Restaurant', \n        value: revenueTransactions.filter(t => t.purpose?.toLowerCase().includes('restaurant')).reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#f97316'\n      },\n      { \n        name: 'Bar', \n        value: revenueTransactions.filter(t => t.purpose?.toLowerCase().includes('bar')).reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#a855f7'\n      },\n      { \n        name: 'Other', \n        value: revenueTransactions.filter(t => \n          !t.purpose?.toLowerCase().includes('room') && \n          !t.purpose?.toLowerCase().includes('restaurant') && \n          !t.purpose?.toLowerCase().includes('bar')\n        ).reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#64748b'\n      }\n    ].filter(item => item.value > 0);\n  }, [revenueTransactions]);\n\n  const expenseBreakdownData = useMemo(() => {\n    return [\n      {\n        name: 'Vendor Payments',\n        value: expenseTransactions.filter(t => t.txnType === 'vendor_payment').reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#ef4444'\n      },\n      {\n        name: 'Utilities',\n        value: expenseTransactions.filter(t => t.purpose?.toLowerCase().includes('utility')).reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#f59e0b'\n      },\n      {\n        name: 'Maintenance',\n        value: expenseTransactions.filter(t => t.purpose?.toLowerCase().includes('maintenance')).reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#eab308'\n      },\n      {\n        name: 'Other Expenses',\n        value: expenseTransactions.filter(t => \n          t.txnType !== 'vendor_payment' &&\n          !t.purpose?.toLowerCase().includes('utility') &&\n          !t.purpose?.toLowerCase().includes('maintenance')\n        ).reduce((sum, t) => sum + Number(t.amount), 0),\n        color: '#94a3b8'\n      }\n    ].filter(item => item.value > 0);\n  }, [expenseTransactions]);\n\n  const COLORS = ['#3b82f6', '#f97316', '#a855f7', '#10b981', '#ef4444', '#eab308', '#64748b'];\n\n  const downloadCSV = (csvContent: string, filename: string) => {\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleExportReport = () => {\n    const timestamp = new Date().toISOString().split('T')[0];\n    let csv = '';\n\n    if (reportType === 'profit_loss') {\n      csv = `Profit & Loss Statement - ${period}\\n`;\n      csv += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      csv += `SUMMARY\\n`;\n      csv += `Total Revenue,${totalRevenue}\\n`;\n      csv += `Total Expenses,${totalExpenses}\\n`;\n      csv += `Net Profit,${netProfit}\\n`;\n      csv += `Profit Margin,${profitMargin.toFixed(2)}%\\n\\n`;\n      \n      csv += `REVENUE BREAKDOWN\\n`;\n      csv += `Category,Amount\\n`;\n      departmentData.forEach(dept => {\n        csv += `${dept.name},${dept.value}\\n`;\n      });\n      \n      csv += `\\nEXPENSE BREAKDOWN\\n`;\n      csv += `Category,Amount\\n`;\n      expenseBreakdownData.forEach(exp => {\n        csv += `${exp.name},${exp.value}\\n`;\n      });\n      \n      downloadCSV(csv, `profit_loss_${timestamp}.csv`);\n    } else if (reportType === 'cash_flow') {\n      csv = `Cash Flow Statement - ${period}\\n`;\n      csv += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      csv += `Total Cash In,${totalRevenue}\\n`;\n      csv += `Total Cash Out,${totalExpenses}\\n`;\n      csv += `Net Cash Flow,${netProfit}\\n\\n`;\n      \n      csv += `7-DAY TREND\\n`;\n      csv += `Date,Revenue,Expenses,Profit\\n`;\n      trendData.forEach(day => {\n        csv += `${day.date},${day.revenue},${day.expenses},${day.profit}\\n`;\n      });\n      \n      downloadCSV(csv, `cash_flow_${timestamp}.csv`);\n    } else if (reportType === 'revenue_breakdown') {\n      csv = `Revenue Breakdown - ${period}\\n`;\n      csv += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      csv += `Total Revenue,${totalRevenue}\\n\\n`;\n      \n      csv += `Department,Amount,Percentage\\n`;\n      departmentData.forEach(dept => {\n        const percentage = totalRevenue > 0 ? (dept.value / totalRevenue) * 100 : 0;\n        csv += `${dept.name},${dept.value},${percentage.toFixed(2)}%\\n`;\n      });\n      \n      downloadCSV(csv, `revenue_breakdown_${timestamp}.csv`);\n    } else if (reportType === 'expense_breakdown') {\n      csv = `Expense Breakdown - ${period}\\n`;\n      csv += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      csv += `Total Expenses,${totalExpenses}\\n\\n`;\n      \n      csv += `Category,Amount,Percentage\\n`;\n      expenseBreakdownData.forEach(exp => {\n        const percentage = totalExpenses > 0 ? (exp.value / totalExpenses) * 100 : 0;\n        csv += `${exp.name},${exp.value},${percentage.toFixed(2)}%\\n`;\n      });\n      \n      downloadCSV(csv, `expense_breakdown_${timestamp}.csv`);\n    } else if (reportType === 'balance_sheet') {\n      csv = `Balance Sheet - ${period}\\n`;\n      csv += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      csv += `ASSETS\\n`;\n      csv += `Total Revenue,${totalRevenue}\\n\\n`;\n      csv += `LIABILITIES\\n`;\n      csv += `Total Expenses,${totalExpenses}\\n\\n`;\n      csv += `EQUITY\\n`;\n      csv += `Net Worth,${netProfit}\\n`;\n      \n      downloadCSV(csv, `balance_sheet_${timestamp}.csv`);\n    }\n\n    toast({ title: \"Report exported successfully\", description: `${reportType.replace('_', ' ')} report downloaded as CSV` });\n  };\n\n  return (\n    <DashboardLayout title=\"Reports & Summary\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n              <CardTitle>Financial Reports</CardTitle>\n              <div className=\"flex gap-2\">\n                <Select value={reportType} onValueChange={setReportType}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"profit_loss\">Profit & Loss</SelectItem>\n                    <SelectItem value=\"cash_flow\">Cash Flow Statement</SelectItem>\n                    <SelectItem value=\"balance_sheet\">Balance Sheet</SelectItem>\n                    <SelectItem value=\"revenue_breakdown\">Revenue Breakdown</SelectItem>\n                    <SelectItem value=\"expense_breakdown\">Expense Breakdown</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select value={period} onValueChange={setPeriod}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                    <SelectItem value=\"quarter\">This Quarter</SelectItem>\n                    <SelectItem value=\"year\">This Year</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button onClick={handleExportReport}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Profit & Loss Statement */}\n        {reportType === 'profit_loss' && (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Card className=\"bg-gradient-to-r from-blue-500 to-cyan-600 text-white\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm opacity-90\">Net Profit</p>\n                      <p className=\"text-3xl font-bold mt-2\">{formatCurrency(netProfit)}</p>\n                      <p className=\"text-sm opacity-90 mt-1 flex items-center gap-1\">\n                        <TrendingUp className=\"h-3 w-3\" />\n                        {profitMargin.toFixed(1)}% margin\n                      </p>\n                    </div>\n                    <DollarSign className=\"h-12 w-12 opacity-50\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm opacity-90\">Total Revenue</p>\n                      <p className=\"text-3xl font-bold mt-2\">{formatCurrency(totalRevenue)}</p>\n                      <p className=\"text-sm opacity-90 mt-1 flex items-center gap-1\">\n                        <ArrowUpRight className=\"h-3 w-3\" />\n                        {revenueTransactions.length} transactions\n                      </p>\n                    </div>\n                    <TrendingUp className=\"h-12 w-12 opacity-50\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-gradient-to-r from-orange-500 to-red-600 text-white\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm opacity-90\">Total Expenses</p>\n                      <p className=\"text-3xl font-bold mt-2\">{formatCurrency(totalExpenses)}</p>\n                      <p className=\"text-sm opacity-90 mt-1 flex items-center gap-1\">\n                        <ArrowDownRight className=\"h-3 w-3\" />\n                        {expenseTransactions.length} transactions\n                      </p>\n                    </div>\n                    <DollarSign className=\"h-12 w-12 opacity-50\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Trend Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>7-Day Financial Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={trendData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: any) => formatCurrency(Number(value))}\n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                    <Legend />\n                    <Area type=\"monotone\" dataKey=\"revenue\" stackId=\"1\" stroke=\"#10b981\" fill=\"#10b981\" fillOpacity={0.6} name=\"Revenue\" />\n                    <Area type=\"monotone\" dataKey=\"expenses\" stackId=\"2\" stroke=\"#ef4444\" fill=\"#ef4444\" fillOpacity={0.6} name=\"Expenses\" />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Revenue & Expense Breakdown */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Revenue by Department</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <RechartsPie>\n                      <Pie\n                        data={departmentData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {departmentData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value: any) => formatCurrency(Number(value))} />\n                    </RechartsPie>\n                  </ResponsiveContainer>\n                  <div className=\"mt-4 space-y-2\">\n                    {departmentData.map((dept, idx) => (\n                      <div key={idx} className=\"flex justify-between items-center text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: dept.color }}></div>\n                          <span>{dept.name}</span>\n                        </div>\n                        <span className=\"font-semibold\">{formatCurrency(dept.value)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Expense Breakdown</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <RechartsPie>\n                      <Pie\n                        data={expenseBreakdownData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {expenseBreakdownData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value: any) => formatCurrency(Number(value))} />\n                    </RechartsPie>\n                  </ResponsiveContainer>\n                  <div className=\"mt-4 space-y-2\">\n                    {expenseBreakdownData.map((expense, idx) => (\n                      <div key={idx} className=\"flex justify-between items-center text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: expense.color }}></div>\n                          <span>{expense.name}</span>\n                        </div>\n                        <span className=\"font-semibold\">{formatCurrency(expense.value)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Profit & Loss Statement\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"border-b pb-4\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <h3 className=\"font-semibold text-lg\">Revenue</h3>\n                      <span className=\"font-bold text-lg text-green-600\">{formatCurrency(totalRevenue)}</span>\n                    </div>\n                    <div className=\"space-y-1 ml-4\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Room Revenue</span>\n                        <span>{formatCurrency(revenueTransactions.filter(t => t.purpose?.toLowerCase().includes('room')).reduce((sum, t) => sum + Number(t.amount), 0))}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Restaurant Revenue</span>\n                        <span>{formatCurrency(revenueTransactions.filter(t => t.purpose?.toLowerCase().includes('restaurant')).reduce((sum, t) => sum + Number(t.amount), 0))}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Bar Revenue</span>\n                        <span>{formatCurrency(revenueTransactions.filter(t => t.purpose?.toLowerCase().includes('bar')).reduce((sum, t) => sum + Number(t.amount), 0))}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"border-b pb-4\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <h3 className=\"font-semibold text-lg\">Expenses</h3>\n                      <span className=\"font-bold text-lg text-red-600\">{formatCurrency(totalExpenses)}</span>\n                    </div>\n                    <div className=\"space-y-1 ml-4\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Vendor Payments</span>\n                        <span>{formatCurrency(expenseTransactions.filter(t => t.txnType === 'vendor_payment').reduce((sum, t) => sum + Number(t.amount), 0))}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Operating Expenses</span>\n                        <span>{formatCurrency(expenseTransactions.filter(t => t.txnType !== 'vendor_payment').reduce((sum, t) => sum + Number(t.amount), 0))}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <h3 className=\"font-bold text-xl\">Net Profit</h3>\n                      <span className={`font-bold text-2xl ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {formatCurrency(netProfit)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center mt-2 text-sm text-muted-foreground\">\n                      <span>Profit Margin</span>\n                      <span className=\"font-semibold\">{profitMargin.toFixed(2)}%</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        )}\n\n        {/* Cash Flow Statement */}\n        {reportType === 'cash_flow' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Cash Flow Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={350}>\n                <BarChart data={trendData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip \n                    formatter={(value: any) => formatCurrency(Number(value))}\n                    contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                  />\n                  <Legend />\n                  <Bar dataKey=\"revenue\" fill=\"#10b981\" name=\"Cash In\" />\n                  <Bar dataKey=\"expenses\" fill=\"#ef4444\" name=\"Cash Out\" />\n                  <Bar dataKey=\"profit\" fill=\"#3b82f6\" name=\"Net Cash Flow\" />\n                </BarChart>\n              </ResponsiveContainer>\n              <div className=\"mt-6 grid grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">Total Cash In</p>\n                  <p className=\"text-2xl font-bold text-green-600 mt-1\">{formatCurrency(totalRevenue)}</p>\n                </div>\n                <div className=\"text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">Total Cash Out</p>\n                  <p className=\"text-2xl font-bold text-red-600 mt-1\">{formatCurrency(totalExpenses)}</p>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">Net Cash Flow</p>\n                  <p className={`text-2xl font-bold mt-1 ${netProfit >= 0 ? 'text-blue-600' : 'text-red-600'}`}>\n                    {formatCurrency(netProfit)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Revenue Breakdown */}\n        {reportType === 'revenue_breakdown' && (\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Revenue Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <RechartsPie>\n                        <Pie\n                          data={departmentData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {departmentData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <Tooltip formatter={(value: any) => formatCurrency(Number(value))} />\n                      </RechartsPie>\n                    </ResponsiveContainer>\n                  </div>\n                  <div className=\"flex flex-col justify-center\">\n                    <h4 className=\"font-semibold mb-4\">Department Performance</h4>\n                    <div className=\"space-y-3\">\n                      {departmentData.map((item, idx) => {\n                        const percentage = totalRevenue > 0 ? (item.value / totalRevenue) * 100 : 0;\n                        return (\n                          <div key={idx}>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: item.color }}></div>\n                                <span>{item.name}</span>\n                              </div>\n                              <span className=\"font-semibold\">{formatCurrency(item.value)} ({percentage.toFixed(1)}%)</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                              <div className=\"h-2 rounded-full\" style={{ width: `${percentage}%`, backgroundColor: item.color }}></div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Revenue Trend by Department</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={trendData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: any) => formatCurrency(Number(value))}\n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#10b981\" strokeWidth={2} name=\"Total Revenue\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Expense Breakdown */}\n        {reportType === 'expense_breakdown' && (\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Expense Analysis</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <RechartsPie>\n                        <Pie\n                          data={expenseBreakdownData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {expenseBreakdownData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <Tooltip formatter={(value: any) => formatCurrency(Number(value))} />\n                      </RechartsPie>\n                    </ResponsiveContainer>\n                  </div>\n                  <div className=\"flex flex-col justify-center\">\n                    <h4 className=\"font-semibold mb-4\">Expense Categories</h4>\n                    <div className=\"space-y-3\">\n                      {expenseBreakdownData.map((item, idx) => {\n                        const percentage = totalExpenses > 0 ? (item.value / totalExpenses) * 100 : 0;\n                        return (\n                          <div key={idx}>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: item.color }}></div>\n                                <span>{item.name}</span>\n                              </div>\n                              <span className=\"font-semibold\">{formatCurrency(item.value)} ({percentage.toFixed(1)}%)</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                              <div className=\"h-2 rounded-full\" style={{ width: `${percentage}%`, backgroundColor: item.color }}></div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Expense Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={trendData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: any) => formatCurrency(Number(value))}\n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                    />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"expenses\" stroke=\"#ef4444\" strokeWidth={2} name=\"Total Expenses\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Quick Reports Grid */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Report Templates</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button \n                variant=\"outline\" \n                className=\"h-24 flex flex-col\"\n                onClick={() => {\n                  setPeriod(\"today\");\n                  setReportType(\"profit_loss\");\n                  toast({ title: \"Daily Summary report loaded\" });\n                }}\n                data-testid=\"button-daily-summary\"\n              >\n                <FileText className=\"h-8 w-8 mb-2 text-blue-500\" />\n                <span className=\"text-sm\">Daily Summary</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-24 flex flex-col\"\n                onClick={() => {\n                  setPeriod(\"month\");\n                  setReportType(\"profit_loss\");\n                  toast({ title: \"Monthly Report loaded\" });\n                }}\n                data-testid=\"button-monthly-report\"\n              >\n                <PieChart className=\"h-8 w-8 mb-2 text-purple-500\" />\n                <span className=\"text-sm\">Monthly Report</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-24 flex flex-col\"\n                onClick={() => {\n                  setPeriod(\"month\");\n                  setReportType(\"revenue_breakdown\");\n                  toast({ title: \"Revenue Analysis loaded\" });\n                }}\n                data-testid=\"button-revenue-analysis\"\n              >\n                <TrendingUp className=\"h-8 w-8 mb-2 text-green-500\" />\n                <span className=\"text-sm\">Revenue Analysis</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-24 flex flex-col\"\n                onClick={() => {\n                  setPeriod(\"month\");\n                  setReportType(\"profit_loss\");\n                  toast({ title: \"Tax Report generated - check downloads\" });\n                }}\n                data-testid=\"button-tax-report\"\n              >\n                <DollarSign className=\"h-8 w-8 mb-2 text-orange-500\" />\n                <span className=\"text-sm\">Tax Report</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Financial Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Financial Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(totalRevenue)}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Total Revenue</p>\n              </div>\n              <div className=\"text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-red-600\">{formatCurrency(totalExpenses)}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Total Expenses</p>\n              </div>\n              <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-blue-600\">{formatCurrency(netProfit)}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Net Profit</p>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-purple-600\">{profitMargin.toFixed(1)}%</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Profit Margin</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":35524},"client/src/pages/dashboard/waiter/maintenance.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function WaiterMaintenance() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy?.id === user?.id);\n    }\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    events: ['maintenance:created', 'maintenance:updated', 'maintenance:deleted']\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit New Request\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Broken chair at Table 5\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Table 5, Bar Area, Kitchen Entrance\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit Request\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\">\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\">\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\">\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\">\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 pl-8\">\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":9852},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/dashboard/housekeeping-supervisor.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, Clock, CheckSquare, Wrench, UserPlus, ClipboardList } from \"lucide-react\";\n\nexport default function HousekeepingSupervisorDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: tasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/tasks\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"]\n  });\n\n  const housekeepingStaff = staff.filter(s => s.role?.name === 'housekeeping_staff');\n  const onlineStaff = housekeepingStaff.filter(s => {\n    return dailyAttendance.some(a => a.userId === s.id && a.status === 'active');\n  });\n  const pendingTasks = tasks.filter(t => t.status === 'pending');\n  const completedTasks = tasks.filter(t => t.status === 'completed');\n\n  const staffColumns = [\n    { key: \"username\", label: \"Name\", sortable: true },\n    { \n      key: \"id\", \n      label: \"Duty Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs flex items-center space-x-1 ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n            <div className={`w-2 h-2 rounded-full ${isOnDuty ? 'bg-green-500' : 'bg-gray-400'}`} />\n            <span>{isOnDuty ? 'On Duty' : 'Off Duty'}</span>\n          </span>\n        );\n      }\n    },\n    { \n      key: \"lastLogin\", \n      label: \"Last Active\", \n      sortable: true,\n      render: (value: string) => value ? new Date(value).toLocaleString('en-GB', { timeZone: 'Asia/Kathmandu' }) : 'Never'\n    },\n    { key: \"createdAt\", label: \"Joined\", sortable: true }\n  ];\n\n  const taskColumns = [\n    { key: \"title\", label: \"Task\", sortable: true },\n    { \n      key: \"assignedTo\", \n      label: \"Assigned To\", \n      render: (value: any, row: any) => {\n        const assignee = staff.find(s => s.id === row.assignedTo);\n        return assignee?.username || \"Unassigned\";\n      }\n    },\n    { key: \"status\", label: \"Status\", sortable: true },\n    { key: \"createdAt\", label: \"Created\", sortable: true }\n  ];\n\n  const staffActions = [\n    { label: \"Assign Task\", action: (row: any) => {/* TODO: Implement task assignment */} },\n    { label: \"Remove\", action: (row: any) => {/* TODO: Implement staff removal */}, variant: \"destructive\" as const }\n  ];\n\n  const taskActions = [\n    { label: \"Edit\", action: (row: any) => {/* TODO: Implement task editing */} },\n    { label: \"Complete\", action: (row: any) => {/* TODO: Implement task completion */} }\n  ];\n\n  return (\n    <DashboardLayout title=\"Housekeeping Supervisor Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Staff\"\n            value={housekeepingStaff.length}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Online Staff\"\n            value={onlineStaff.length}\n            icon={<Clock />}\n            iconColor=\"text-green-500\"\n            trend={{ \n              value: onlineStaff.length > 0 ? (onlineStaff.length / housekeepingStaff.length) * 100 : 0, \n              label: \"on duty\", \n              isPositive: true \n            }}\n          />\n          <StatsCard\n            title=\"Pending Tasks\"\n            value={pendingTasks.length}\n            icon={<CheckSquare />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"Completed Today\"\n            value={completedTasks.filter(t => {\n              const today = new Date().toDateString();\n              return new Date(t.updatedAt || t.createdAt).toDateString() === today;\n            }).length}\n            icon={<ClipboardList />}\n            iconColor=\"text-purple-500\"\n          />\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Housekeeping Operations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-add-staff\"\n                onClick={() => setLocation(\"/housekeeping-supervisor/staff-management\")}\n              >\n                <UserPlus className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Add Staff</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-assign-tasks\"\n                onClick={() => setLocation(\"/housekeeping-supervisor/task-assignment\")}\n              >\n                <CheckSquare className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Assign Tasks</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-duty-roster\"\n                onClick={() => setLocation(\"/housekeeping-supervisor/duty-tracking\")}\n              >\n                <Clock className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Duty Roster</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-maintenance\"\n                onClick={() => setLocation(\"/housekeeping-supervisor/maintenance-requests\")}\n              >\n                <Wrench className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Maintenance</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Staff Management */}\n        <DataTable\n          title=\"Housekeeping Staff\"\n          data={housekeepingStaff}\n          columns={staffColumns}\n          actions={staffActions}\n          onAdd={() => setLocation(\"/housekeeping-supervisor/staff-management\")}\n          addButtonLabel=\"Add Staff Member\"\n          searchPlaceholder=\"Search staff...\"\n        />\n\n        {/* Task Assignment */}\n        <DataTable\n          title=\"Task Management\"\n          data={tasks}\n          columns={taskColumns}\n          actions={taskActions}\n          onAdd={() => setLocation(\"/housekeeping-supervisor/task-assignment\")}\n          addButtonLabel=\"Create Task\"\n          searchPlaceholder=\"Search tasks...\"\n        />\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7413},"client/src/pages/dashboard/housekeeping-supervisor/cleaning-queue.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DoorClosed, Clock, UserCheck, CheckCircle2 } from \"lucide-react\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\n\nexport default function HousekeepingSupervisorCleaningQueue() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n  const [selectedQueueItem, setSelectedQueueItem] = useState<any>(null);\n\n  const form = useForm({\n    defaultValues: {\n      assignedTo: \"\",\n      description: \"\",\n      priority: \"high\"\n    }\n  });\n\n  const { data: cleaningQueue = [], isLoading: isLoadingQueue } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/room-cleaning-queue\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 5000,\n    refetchIntervalInBackground: true\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"]\n  });\n\n  const housekeepingStaff = staff.filter(s => s.role?.name === 'housekeeping_staff');\n  const onlineStaff = housekeepingStaff.filter(s => \n    dailyAttendance.some(a => a.userId === s.id && a.status === 'active')\n  );\n\n  const pendingRooms = cleaningQueue.filter((item: any) => item.status === 'pending');\n  const assignedRooms = cleaningQueue.filter((item: any) => item.status === 'assigned');\n  const completedRooms = cleaningQueue.filter((item: any) => item.status === 'completed');\n\n  const assignCleaningTaskMutation = useMutation({\n    mutationFn: async (taskData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/tasks\", {\n        hotelId: user?.hotelId,\n        createdBy: user?.id,\n        assignedTo: taskData.assignedTo,\n        title: `Clean Room ${taskData.roomNumber}`,\n        description: taskData.description || `Clean room ${taskData.roomNumber} after checkout`,\n        status: \"pending\",\n        priority: taskData.priority,\n        context: {\n          type: \"room_cleaning\",\n          roomId: taskData.roomId,\n          roomNumber: taskData.roomNumber,\n          guestName: taskData.guestName,\n          checkoutAt: taskData.checkoutAt,\n          queueId: taskData.queueId\n        }\n      });\n\n      await apiRequest(\"PUT\", `/api/hotels/current/room-cleaning-queue/${taskData.queueId}`, {\n        status: \"assigned\",\n        taskId: taskData.taskId\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/room-cleaning-queue\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/tasks\"] });\n      toast({ title: \"Cleaning task assigned successfully\" });\n      setIsAssignDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: error.message || \"Failed to assign task\", variant: \"destructive\" });\n    }\n  });\n\n  const handleAssignTask = (queueItem: any) => {\n    setSelectedQueueItem(queueItem);\n    setIsAssignDialogOpen(true);\n    form.reset({\n      assignedTo: \"\",\n      description: `Clean room ${queueItem.roomNumber} after checkout`,\n      priority: \"high\"\n    });\n  };\n\n  const onSubmitAssignment = (data: any) => {\n    if (!selectedQueueItem) return;\n\n    assignCleaningTaskMutation.mutate({\n      assignedTo: data.assignedTo,\n      roomId: selectedQueueItem.roomId,\n      roomNumber: selectedQueueItem.roomNumber,\n      guestName: selectedQueueItem.guestName,\n      checkoutAt: selectedQueueItem.checkoutAt,\n      description: data.description,\n      priority: data.priority,\n      queueId: selectedQueueItem.id\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"destructive\" data-testid=\"badge-status-pending\">Pending</Badge>;\n      case 'assigned':\n        return <Badge variant=\"default\" data-testid=\"badge-status-assigned\">Assigned</Badge>;\n      case 'completed':\n        return <Badge variant=\"secondary\" data-testid=\"badge-status-completed\">Completed</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Room Cleaning Queue\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <StatsCard\n            title=\"Pending Cleaning\"\n            value={pendingRooms.length}\n            icon={<DoorClosed />}\n            iconColor=\"text-red-500\"\n          />\n          <StatsCard\n            title=\"Assigned Tasks\"\n            value={assignedRooms.length}\n            icon={<Clock />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Completed Today\"\n            value={completedRooms.length}\n            icon={<CheckCircle2 />}\n            iconColor=\"text-green-500\"\n          />\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Checked-Out Rooms Requiring Cleaning</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoadingQueue ? (\n              <p className=\"text-muted-foreground\">Loading cleaning queue...</p>\n            ) : cleaningQueue.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-rooms-message\">\n                No rooms in cleaning queue\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {cleaningQueue.map((queueItem, index) => (\n                  <div\n                    key={queueItem.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg\"\n                    data-testid={`queue-item-${index}`}\n                  >\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"flex items-center gap-3\">\n                        <h4 className=\"font-medium text-lg\" data-testid={`text-room-${queueItem.roomNumber}`}>\n                          Room {queueItem.roomNumber}\n                        </h4>\n                        {getStatusBadge(queueItem.status)}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                        <div data-testid={`text-guest-${index}`}>\n                          <span className=\"font-medium\">Guest: </span>\n                          {queueItem.guestName || 'N/A'}\n                        </div>\n                        <div data-testid={`text-checkout-${index}`}>\n                          <span className=\"font-medium\">Checked Out: </span>\n                          {queueItem.checkoutAt ? format(new Date(queueItem.checkoutAt), 'MMM dd, yyyy hh:mm a') : 'N/A'}\n                        </div>\n                      </div>\n\n                      {queueItem.status === 'assigned' && (\n                        <div className=\"text-sm text-blue-600\">\n                          <span className=\"font-medium\">Status: </span>\n                          Cleaning task assigned to staff\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                      {queueItem.status === 'pending' && (\n                        <Button\n                          onClick={() => handleAssignTask(queueItem)}\n                          disabled={onlineStaff.length === 0}\n                          data-testid={`button-assign-${index}`}\n                        >\n                          <UserCheck className=\"w-4 h-4 mr-2\" />\n                          Assign Staff\n                        </Button>\n                      )}\n                      {queueItem.status === 'completed' && (\n                        <Badge variant=\"secondary\">\n                          <CheckCircle2 className=\"w-4 h-4 mr-1\" />\n                          Cleaned\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {onlineStaff.length === 0 && pendingRooms.length > 0 && (\n              <div className=\"mt-4 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  No housekeeping staff is currently online. Tasks can be assigned once staff members are on duty.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Cleaning Task</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitAssignment)} className=\"space-y-4\">\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <p className=\"text-sm font-medium\">Room: {selectedQueueItem?.roomNumber}</p>\n                <p className=\"text-sm text-muted-foreground\">Guest: {selectedQueueItem?.guestName || 'N/A'}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Checked Out: {selectedQueueItem?.checkoutAt ? format(new Date(selectedQueueItem.checkoutAt), 'MMM dd, yyyy hh:mm a') : 'N/A'}\n                </p>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"assignedTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assign to Staff Member</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-staff\">\n                          <SelectValue placeholder=\"Select staff member\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {onlineStaff.map((member) => (\n                          <SelectItem key={member.id} value={member.id}>\n                            {member.username} (On Duty)\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-priority\">\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description / Instructions</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Additional cleaning instructions...\"\n                        rows={3}\n                        data-testid=\"input-description\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsAssignDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={assignCleaningTaskMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {assignCleaningTaskMutation.isPending ? \"Assigning...\" : \"Assign Task\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":13616},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/dashboard/waiter/orders.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingCart, Clock, CheckCircle2, Trash2, Edit } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\nimport { getStatusColor } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function WaiterOrders() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const { confirm } = useConfirmDialog();\n\n  const { data: orders = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000,\n    select: (data) => data.filter((order: any) => order.createdBy === user?.id),\n  });\n\n  const { data: tables = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 3000,\n  });\n\n  const deleteOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      await apiRequest(\"DELETE\", `/api/kot-orders/${orderId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"Order deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const activeOrders = orders.filter(order => ['open', 'preparing'].includes(order.status));\n  const completedOrders = orders.filter(order => ['served', 'completed'].includes(order.status));\n\n  const getTableName = (tableId: string) => {\n    const table = tables.find((t: any) => t.id === tableId);\n    return table?.name || 'Unknown Table';\n  };\n\n  const handleDeleteOrder = async (orderId: string, orderStatus: string) => {\n    if (orderStatus === 'served' || orderStatus === 'completed') {\n      toast({ \n        title: \"Cannot delete\", \n        description: \"Completed orders cannot be deleted\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n    \n    await confirm({\n      title: \"Delete Order\",\n      description: \"Are you sure you want to delete this order? This action cannot be undone.\",\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: () => {\n        deleteOrderMutation.mutate(orderId);\n      }\n    });\n  };\n\n  const handleEditOrder = (orderId: string) => {\n    toast({ title: \"Edit order in main dashboard\", description: \"Right-click on the table to edit orders\" });\n    setLocation(`/waiter`);\n  };\n\n  return (\n    <DashboardLayout title=\"My Orders\">\n      <div className=\"space-y-6\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Orders</p>\n                  <p className=\"text-2xl font-bold\">{orders.length}</p>\n                </div>\n                <ShoppingCart className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active</p>\n                  <p className=\"text-2xl font-bold\">{activeOrders.length}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Completed</p>\n                  <p className=\"text-2xl font-bold\">{completedOrders.length}</p>\n                </div>\n                <CheckCircle2 className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Orders List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>All Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {orders.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No orders found\n                </p>\n              ) : (\n                orders.map((order: any) => (\n                  <div\n                    key={order.id}\n                    className=\"flex flex-col sm:flex-row sm:items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors gap-3\"\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h4 className=\"font-medium text-foreground\">\n                          {getTableName(order.tableId)}\n                        </h4>\n                        <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                          {order.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Order #{order.id.slice(0, 8)} • {new Date(order.createdAt).toLocaleString()}\n                      </p>\n                      {order.items && order.items.length > 0 && (\n                        <div className=\"mt-2 text-sm text-muted-foreground\">\n                          {order.items.length} item(s)\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      {order.status !== 'served' && order.status !== 'completed' && (\n                        <>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleEditOrder(order.id)}\n                            data-testid={`button-edit-order-${order.id}`}\n                          >\n                            <Edit className=\"h-4 w-4 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteOrder(order.id, order.status)}\n                            data-testid={`button-delete-order-${order.id}`}\n                            disabled={deleteOrderMutation.isPending}\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </>\n                      )}\n                      {(order.status === 'served' || order.status === 'completed') && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Completed\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7724},"client/src/pages/dashboard/manager/transactions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Receipt, Plus, Filter, CreditCard, Banknote, Smartphone } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\n\ninterface Transaction {\n  id: string;\n  hotelId: string;\n  amount: string;\n  paymentMethod: string;\n  txnType: string;\n  purpose?: string;\n  createdBy: string;\n  createdAt: string;\n}\n\nexport default function TransactionsPage() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [filterMethod, setFilterMethod] = useState(\"all\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [newTransaction, setNewTransaction] = useState({\n    amount: \"\",\n    paymentMethod: \"\",\n    txnType: \"\",\n    purpose: \"\"\n  });\n\n  const queryClient = useQueryClient();\n  const ws = useWebSocket();\n\n  // Fetch transactions\n  const { data: transactions = [], isLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/transactions\", { credentials: \"include\" });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch transactions\");\n      }\n      return response.json();\n    }\n  });\n\n  // Real-time updates via WebSocket\n  useEffect(() => {\n    const unsubscribers = [\n      ws.on('transaction:created', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      }),\n      ws.on('transaction:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      })\n    ];\n\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n    };\n  }, [ws, queryClient]);\n\n  // Create transaction mutation\n  const createTransactionMutation = useMutation({\n    mutationFn: async (transactionData: any) => {\n      const response = await fetch(\"/api/transactions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...transactionData,\n          amount: parseFloat(transactionData.amount)\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create transaction\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      setIsCreateDialogOpen(false);\n      setNewTransaction({ amount: \"\", paymentMethod: \"\", txnType: \"\", purpose: \"\" });\n      toast.success(\"Transaction recorded successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message || \"Failed to record transaction\");\n    }\n  });\n\n  // Filter transactions\n  const filteredTransactions = transactions.filter(transaction => {\n    const methodMatch = filterMethod === \"all\" || transaction.paymentMethod === filterMethod;\n    const typeMatch = filterType === \"all\" || transaction.txnType === filterType;\n    return methodMatch && typeMatch;\n  });\n\n  // Calculate totals\n  const totalAmount = filteredTransactions.reduce((sum, t) => sum + Number(t.amount), 0);\n  const cashTotal = transactions.filter(t => t.paymentMethod === 'cash').reduce((sum, t) => sum + Number(t.amount), 0);\n  const posTotal = transactions.filter(t => t.paymentMethod === 'pos').reduce((sum, t) => sum + Number(t.amount), 0);\n  const fonepayTotal = transactions.filter(t => t.paymentMethod === 'fonepay').reduce((sum, t) => sum + Number(t.amount), 0);\n\n  const transactionColumns = [\n    { \n      key: \"amount\", \n      label: \"Amount\", \n      sortable: true,\n      render: (value: string) => `रु${Number(value).toLocaleString()}`\n    },\n    { \n      key: \"paymentMethod\", \n      label: \"Payment Method\", \n      sortable: true,\n      render: (value: string) => (\n        <div className=\"flex items-center gap-2\">\n          {value === 'cash' && <Banknote className=\"h-4 w-4 text-green-500\" />}\n          {value === 'pos' && <CreditCard className=\"h-4 w-4 text-blue-500\" />}\n          {value === 'fonepay' && <Smartphone className=\"h-4 w-4 text-purple-500\" />}\n          <span className=\"capitalize\">{value}</span>\n        </div>\n      )\n    },\n    { \n      key: \"txnType\", \n      label: \"Type\", \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"capitalize\">{value.replace(/_/g, ' ')}</span>\n      )\n    },\n    { key: \"purpose\", label: \"Purpose\", sortable: true },\n    { \n      key: \"createdAt\", \n      label: \"Date\", \n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleString()\n    }\n  ];\n\n  const handleCreateTransaction = () => {\n    if (!newTransaction.amount || !newTransaction.paymentMethod || !newTransaction.txnType) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (isNaN(Number(newTransaction.amount)) || Number(newTransaction.amount) <= 0) {\n      toast.error(\"Please enter a valid amount\");\n      return;\n    }\n\n    createTransactionMutation.mutate(newTransaction);\n  };\n\n  const resetForm = () => {\n    setNewTransaction({ amount: \"\", paymentMethod: \"\", txnType: \"\", purpose: \"\" });\n  };\n\n  return (\n    <DashboardLayout title=\"Transaction Management\">\n      <div className=\"space-y-6\">\n        {/* Transaction Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Transactions</CardTitle>\n              <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">रु{totalAmount.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">{filteredTransactions.length} transactions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Cash Payments</CardTitle>\n              <Banknote className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">रु{cashTotal.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {transactions.filter(t => t.paymentMethod === 'cash').length} transactions\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">POS Payments</CardTitle>\n              <CreditCard className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">रु{posTotal.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {transactions.filter(t => t.paymentMethod === 'pos').length} transactions\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Fonepay Payments</CardTitle>\n              <Smartphone className=\"h-4 w-4 text-purple-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">रु{fonepayTotal.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {transactions.filter(t => t.paymentMethod === 'fonepay').length} transactions\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Create Button */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Filters & Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-4 items-end\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"filter-method\">Payment Method</Label>\n                <Select value={filterMethod} onValueChange={setFilterMethod}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Methods</SelectItem>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"pos\">POS</SelectItem>\n                    <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"filter-type\">Transaction Type</Label>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"room_booking\">Room Booking</SelectItem>\n                    <SelectItem value=\"restaurant_order\">Restaurant Order</SelectItem>\n                    <SelectItem value=\"vendor_payment\">Vendor Payment</SelectItem>\n                    <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"flex items-center gap-2\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Record Transaction\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Transactions Table */}\n        <DataTable\n          title=\"All Transactions\"\n          data={filteredTransactions}\n          columns={transactionColumns}\n          searchPlaceholder=\"Search transactions...\"\n          isLoading={isLoading}\n        />\n\n        {/* Create Transaction Dialog */}\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Record New Transaction</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Amount *</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0.00\"\n                  value={newTransaction.amount}\n                  onChange={(e) => setNewTransaction(prev => ({ ...prev, amount: e.target.value }))}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"paymentMethod\">Payment Method *</Label>\n                <Select \n                  value={newTransaction.paymentMethod} \n                  onValueChange={(value) => setNewTransaction(prev => ({ ...prev, paymentMethod: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select payment method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"pos\">POS</SelectItem>\n                    <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"txnType\">Transaction Type *</Label>\n                <Select \n                  value={newTransaction.txnType} \n                  onValueChange={(value) => setNewTransaction(prev => ({ ...prev, txnType: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select transaction type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"room_booking\">Room Booking</SelectItem>\n                    <SelectItem value=\"restaurant_order\">Restaurant Order</SelectItem>\n                    <SelectItem value=\"vendor_payment\">Vendor Payment</SelectItem>\n                    <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"purpose\">Purpose/Description</Label>\n                <Input\n                  id=\"purpose\"\n                  placeholder=\"Optional description\"\n                  value={newTransaction.purpose}\n                  onChange={(e) => setNewTransaction(prev => ({ ...prev, purpose: e.target.value }))}\n                />\n              </div>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button \n                  onClick={handleCreateTransaction}\n                  disabled={createTransactionMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {createTransactionMutation.isPending ? \"Recording...\" : \"Record Transaction\"}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    resetForm();\n                    setIsCreateDialogOpen(false);\n                  }}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":14646},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/layout/dashboard-layout.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sidebar } from \"./sidebar\";\nimport { DutyToggle } from \"../common/duty-toggle\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Hotel, User, Menu } from \"lucide-react\";\nimport { DUTY_ROLES } from \"@/lib/constants\";\nimport { useLocation } from \"wouter\";\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n  title: string;\n  currentHotel?: string;\n}\n\nexport function DashboardLayout({ children, title, currentHotel }: DashboardLayoutProps) {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  \n  // Fetch current hotel data if not provided\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"],\n    enabled: !!user?.hotelId && !currentHotel // Only fetch if user has hotelId and currentHotel not provided\n  });\n  \n  const displayHotelName = currentHotel || hotel?.name || \"Hotel Management System\";\n  const userRole = user?.role?.name;\n  const showDutyToggle = userRole && DUTY_ROLES.includes(userRole as any);\n\n  const handleMyProfileClick = () => {\n    setLocation(\"/my-profile\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Top Navigation */}\n      <nav className=\"bg-card border-b border-border shadow-sm\" data-testid=\"nav-top\">\n        <div className=\"px-4 md:px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 md:space-x-4\">\n              {/* Mobile Hamburger Menu */}\n              <Sheet open={isSidebarOpen} onOpenChange={setIsSidebarOpen}>\n                <SheetTrigger asChild className=\"lg:hidden\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"left\" className=\"p-0 w-64\">\n                  <Sidebar onItemClick={() => setIsSidebarOpen(false)} />\n                </SheetContent>\n              </Sheet>\n              \n              <Hotel className=\"h-6 w-6 md:h-8 md:w-8 text-primary\" />\n              <h1 className=\"text-base md:text-xl font-bold text-foreground truncate max-w-[150px] md:max-w-none\" data-testid=\"text-app-title\">\n                {title}\n              </h1>\n              <span className=\"hidden sm:inline-block px-3 py-1 bg-secondary text-secondary-foreground rounded-full text-sm\" data-testid=\"text-current-hotel\">\n                {displayHotelName}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2 md:space-x-4\">\n              {/* Duty Status Toggle - Visible on all screens */}\n              {showDutyToggle && (\n                <DutyToggle />\n              )}\n              \n              {/* User Info */}\n              <div className=\"flex items-center space-x-2 md:space-x-3\">\n                <div className=\"hidden md:block text-right\">\n                  <div className=\"text-sm font-medium text-foreground\" data-testid=\"text-current-user\">\n                    {user?.username || \"Unknown User\"}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\" data-testid=\"text-current-role\">\n                    {user?.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || \"Unknown Role\"}\n                  </div>\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-9 w-9\"\n                  onClick={handleMyProfileClick}\n                  data-testid=\"button-my-profile\"\n                >\n                  <User className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"flex\">\n        {/* Sidebar Navigation - Hidden on mobile, visible on larger screens */}\n        <div className=\"hidden lg:block\">\n          <Sidebar />\n        </div>\n\n        {/* Main Content */}\n        <main className=\"flex-1 p-4 md:p-6 h-[calc(100vh-72px)] md:h-[calc(100vh-80px)] overflow-y-auto\" data-testid=\"main-content\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4448},"client/src/pages/dashboard/owner.tsx":{"content":"import { useEffect, useMemo } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { DollarSign, Bed, Users, TrendingUp, Package, AlertTriangle, Building2, Settings, Receipt, Shield } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport DateConverter from \"@remotemerge/nepali-date-converter\";\n\nexport default function OwnerDashboard() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const ws = useWebSocket();\n  \n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000\n  });\n\n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/rooms\"],\n    refetchInterval: 3000\n  });\n\n  const { data: users = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: inventory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates via WebSocket\n  useEffect(() => {\n    const unsubscribers = [\n      ws.on('transaction:created', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      }),\n      ws.on('transaction:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      }),\n      ws.on('room:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/rooms\"] });\n      }),\n      ws.on('stock:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      }),\n      ws.on('attendance:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/attendance/daily\"] });\n      }),\n      ws.on('guest:created', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current\"] });\n      }),\n      ws.on('guest:updated', () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current\"] });\n      })\n    ];\n\n    return () => {\n      unsubscribers.forEach(unsub => unsub());\n    };\n  }, [ws, queryClient]);\n\n  // Get current Nepali month and year\n  const currentNepaliDate = useMemo(() => {\n    const today = new Date();\n    const converter = new DateConverter(`${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`);\n    return converter.toBs();\n  }, []);\n\n  // Filter transactions for current Nepali month only (monthly reset)\n  const currentMonthTransactions = useMemo(() => {\n    return transactions.filter(t => {\n      try {\n        const txnDate = new Date(t.createdAt);\n        const txnConverter = new DateConverter(`${txnDate.getFullYear()}-${String(txnDate.getMonth() + 1).padStart(2, '0')}-${String(txnDate.getDate()).padStart(2, '0')}`);\n        const txnNepaliDate = txnConverter.toBs();\n        \n        // Check if transaction is in current Nepali month and year\n        return txnNepaliDate.year === currentNepaliDate.year && \n               txnNepaliDate.month === currentNepaliDate.month;\n      } catch (error) {\n        \n        return false;\n      }\n    });\n  }, [transactions, currentNepaliDate]);\n\n  // Calculate revenue for current Nepali month only\n  // Include all revenue-generating transaction types: revenue, cash_in, pos_in, fonepay_in\n  const totalRevenue = currentMonthTransactions\n    .filter(t => ['revenue', 'cash_in', 'pos_in', 'fonepay_in'].includes(t.txnType))\n    .reduce((sum, t) => sum + (Number(t.amount) || 0), 0);\n  \n  const occupiedRooms = rooms.filter(r => r.isOccupied).length;\n  const occupancyRate = rooms.length > 0 ? (occupiedRooms / rooms.length) * 100 : 0;\n  const lowStockItems = inventory.filter(item => \n    Number(item.baseStockQty) <= Number(item.reorderLevel)\n  ).length;\n\n\n  return (\n    <DashboardLayout title=\"Owner Dashboard\" currentHotel={hotel?.name}>\n      <div className=\"space-y-6\">\n        {/* Key Metrics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Revenue\"\n            value={formatCurrency(totalRevenue)}\n            icon={<DollarSign />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Room Occupancy\"\n            value={`${occupancyRate.toFixed(0)}%`}\n            icon={<Bed />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Total Staff\"\n            value={users.length}\n            icon={<Users />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Low Stock Items\"\n            value={lowStockItems}\n            icon={<AlertTriangle />}\n            iconColor=\"text-orange-500\"\n          />\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Owner Operations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-audit\" onClick={() => setLocation(\"/owner/audit-transparency\")}>\n                <Shield className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Audit & Transparency</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-financial\" onClick={() => setLocation(\"/owner/financial\")}>\n                <Receipt className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Financial</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-occupancy\" onClick={() => setLocation(\"/owner/occupancy\")}>\n                <Bed className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Occupancy</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-staff\" onClick={() => setLocation(\"/owner/staff\")}>\n                <Users className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Staff</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {/* Financial Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Financial Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Revenue:</span>\n                  <span className=\"font-bold text-green-600\">{formatCurrency(totalRevenue)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Transactions:</span>\n                  <span className=\"font-medium\">{transactions.length}</span>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  View detailed financial reports in Financial Overview\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Room Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Room Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Rooms:</span>\n                  <span className=\"font-bold\">{rooms.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Occupied:</span>\n                  <span className=\"font-medium text-blue-600\">{occupiedRooms}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Available:</span>\n                  <span className=\"font-medium text-green-600\">{rooms.length - occupiedRooms}</span>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  View detailed room status in Room Occupancy\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Staff Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Staff Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Staff:</span>\n                  <span className=\"font-bold\">{users.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>On Duty:</span>\n                  <span className=\"font-medium text-green-600\">{users.filter(u => dailyAttendance.some(a => a.userId === u.id && a.status === 'active')).length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Active:</span>\n                  <span className=\"font-medium\">{users.filter(u => u.isActive).length}</span>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Manage staff in Staff Management\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Transactions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {transactions.slice(0, 5).map((transaction, index) => (\n                  <div key={transaction.id || index} className=\"flex justify-between items-center p-2 border-b\">\n                    <div>\n                      <div className=\"text-sm font-medium\">{transaction.purpose || transaction.txnType?.replace(/_/g, ' ')}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(transaction.createdAt).toLocaleDateString()} • {transaction.paymentMethod?.replace(/_/g, ' ')}\n                      </div>\n                    </div>\n                    <div className={`text-sm font-bold ${\n                      ['revenue', 'cash_in', 'pos_in', 'fonepay_in'].includes(transaction.txnType) ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {formatCurrency(Number(transaction.amount))}\n                    </div>\n                  </div>\n                ))}\n                {transactions.length === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    No recent transactions\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Inventory Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {inventory\n                  .filter(item => Number(item.baseStockQty) <= Number(item.reorderLevel))\n                  .slice(0, 5)\n                  .map((item, index) => (\n                    <div key={item.id || index} className=\"flex justify-between items-center p-2 border-b\">\n                      <div>\n                        <div className=\"text-sm font-medium\">{item.name}</div>\n                        <div className=\"text-xs text-orange-600\">Low Stock</div>\n                      </div>\n                      <div className=\"text-sm\">\n                        {Number(item.baseStockQty).toFixed(2)} {item.baseUnit}\n                        {item.packageUnit && ` (${Number(item.packageStockQty).toFixed(2)} ${item.packageUnit})`}\n                      </div>\n                    </div>\n                  ))}\n                {lowStockItems === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    All items are well stocked\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":13124},"client/src/pages/dashboard/owner/attendance-reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, Users, UserCheck } from \"lucide-react\";\nimport { formatDateTime, cn } from \"@/lib/utils\";\nimport { format, startOfMonth, endOfMonth, parseISO } from \"date-fns\";\n\nexport default function AttendanceReports() {\n  const [selectedMonth, setSelectedMonth] = useState(new Date());\n\n  const { data: allStaff = [], isLoading: staffLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [], isLoading: attendanceLoading } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  const { data: allAttendance = [], isLoading: allAttendanceLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/attendance\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/attendance\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch attendance\");\n      return response.json();\n    },\n    refetchInterval: 3000\n  });\n\n  const activeAttendanceUserIds = dailyAttendance\n    .filter(a => a.status === 'active')\n    .map(a => a.userId);\n\n  const onDutyStaff = allStaff.filter(s => activeAttendanceUserIds.includes(s.id));\n  const offDutyStaff = allStaff.filter(s => !activeAttendanceUserIds.includes(s.id));\n\n  const monthStart = startOfMonth(selectedMonth);\n  const monthEnd = endOfMonth(selectedMonth);\n\n  const monthlyAttendance = allAttendance.filter(record => {\n    if (!record.clockInTime) return false;\n    const clockInDate = parseISO(record.clockInTime);\n    return clockInDate >= monthStart && clockInDate <= monthEnd;\n  });\n\n  const totalHoursWorked = monthlyAttendance.reduce((sum, record) => {\n    return sum + (Number(record.totalHours) || 0);\n  }, 0);\n\n  const avgHoursPerDay = monthlyAttendance.length > 0 \n    ? totalHoursWorked / monthlyAttendance.length \n    : 0;\n\n  const columns = [\n    { \n      key: \"clockInTime\", \n      label: \"Date\", \n      sortable: true,\n      render: (value: any) => value ? format(parseISO(value), 'MMM dd, yyyy') : \"N/A\"\n    },\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        const user = allStaff.find(s => s.id === row.userId);\n        return user?.fullName || \"N/A\";\n      }\n    },\n    { \n      key: \"username\", \n      label: \"Username\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        const user = allStaff.find(s => s.id === row.userId);\n        return user?.username || \"Unknown\";\n      }\n    },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (_: any, row: any) => {\n        const user = allStaff.find(s => s.id === row.userId);\n        return user?.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || \"N/A\";\n      }\n    },\n    { \n      key: \"clockInTime\", \n      label: \"Clock In\", \n      sortable: true,\n      render: (value: any) => value ? formatDateTime(value) : \"N/A\"\n    },\n    { \n      key: \"clockOutTime\", \n      label: \"Clock Out\", \n      sortable: true,\n      render: (value: any) => value ? formatDateTime(value) : \"Still on duty\"\n    },\n    { \n      key: \"totalHours\", \n      label: \"Total Hours\", \n      sortable: true,\n      render: (value: any) => {\n        const hours = Number(value) || 0;\n        return hours > 0 ? `${hours.toFixed(2)} hrs` : \"N/A\";\n      }\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: any) => (\n        <Badge \n          variant={value === 'active' ? 'default' : 'secondary'}\n          className={cn(\n            value === 'active' \n              ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' \n              : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'\n          )}\n        >\n          {value === 'active' ? 'Active' : 'Completed'}\n        </Badge>\n      )\n    }\n  ];\n\n  const currentAttendanceColumns = [\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true \n    },\n    { \n      key: \"username\", \n      label: \"Username\", \n      sortable: true \n    },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())\n    },\n    { \n      key: \"id\", \n      label: \"Duty Status\", \n      render: (_: any, row: any) => {\n        const isOnDuty = activeAttendanceUserIds.includes(row.id);\n        const attendance = dailyAttendance.find(a => a.userId === row.id && a.status === 'active');\n        return (\n          <div className=\"space-y-1\">\n            <Badge \n              variant={isOnDuty ? 'default' : 'secondary'}\n              className={cn(\n                isOnDuty \n                  ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' \n                  : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'\n              )}\n            >\n              {isOnDuty ? 'On Duty' : 'Off Duty'}\n            </Badge>\n            {attendance && (\n              <div className=\"text-xs text-muted-foreground\">\n                Since {formatDateTime(attendance.clockInTime)}\n              </div>\n            )}\n          </div>\n        );\n      }\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Attendance Reports\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Staff\"\n            value={allStaff.length}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n            data-testid=\"stats-total-staff\"\n          />\n          <StatsCard\n            title=\"On Duty\"\n            value={onDutyStaff.length}\n            icon={<UserCheck />}\n            iconColor=\"text-green-500\"\n            data-testid=\"stats-on-duty\"\n          />\n          <StatsCard\n            title=\"Total Hours (This Month)\"\n            value={`${totalHoursWorked.toFixed(1)} hrs`}\n            icon={<Clock />}\n            iconColor=\"text-purple-500\"\n            data-testid=\"stats-total-hours\"\n          />\n          <StatsCard\n            title=\"Avg Hours/Day\"\n            value={`${avgHoursPerDay.toFixed(1)} hrs`}\n            icon={<Calendar />}\n            iconColor=\"text-orange-500\"\n            data-testid=\"stats-avg-hours\"\n          />\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserCheck className=\"w-5 h-5\" />\n              Current Duty Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <DataTable\n              title=\"Staff Duty Status\"\n              data={allStaff}\n              columns={currentAttendanceColumns}\n              searchPlaceholder=\"Search staff...\"\n              isLoading={staffLoading}\n              data-testid=\"table-current-duty\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              Attendance Records - {format(selectedMonth, 'MMMM yyyy')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <DataTable\n              title=\"Attendance History\"\n              data={monthlyAttendance}\n              columns={columns}\n              searchPlaceholder=\"Search attendance records...\"\n              isLoading={allAttendanceLoading}\n              data-testid=\"table-attendance-records\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":8054},"client/src/pages/dashboard/owner/report.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Download, FileText, Activity, BarChart, Ticket, Package, ShoppingCart, Hotel, Calendar, Users, Shield, AlertCircle, CheckCircle, XCircle, Clock, Utensils } from \"lucide-react\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\n\nexport default function Report() {\n  const { toast } = useToast();\n  const [dateRange, setDateRange] = useState({\n    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    to: new Date().toISOString().split('T')[0]\n  });\n\n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/rooms\"],\n    refetchInterval: 3000\n  });\n\n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: inventory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: maintenanceRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000\n  });\n\n  const { data: vendors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vendors\"],\n    refetchInterval: 3000\n  });\n\n  const { data: vouchers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vouchers\"],\n    refetchInterval: 3000\n  });\n\n  const { data: stockRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/stock-requests\"],\n    refetchInterval: 3000\n  });\n\n  const { data: kotOrders = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000\n  });\n\n  const { data: consumptions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-consumptions\"],\n    refetchInterval: 3000\n  });\n\n  const { data: reservations = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/reservations\"],\n    refetchInterval: 3000\n  });\n\n  const { data: hallBookings = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/hall-bookings\"],\n    refetchInterval: 3000\n  });\n\n  const { data: menuItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: guests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/guests\"],\n    refetchInterval: 3000\n  });\n\n  const filteredVouchers = vouchers.filter((v: any) => {\n    if (!v.createdAt) return false;\n    const vDate = new Date(v.createdAt);\n    const fromDate = new Date(dateRange.from);\n    const toDate = new Date(dateRange.to);\n    toDate.setHours(23, 59, 59, 999);\n    return vDate >= fromDate && vDate <= toDate;\n  });\n\n  const filteredStockRequests = stockRequests.filter((r: any) => {\n    if (!r.requestedAt) return false;\n    const rDate = new Date(r.requestedAt);\n    const fromDate = new Date(dateRange.from);\n    const toDate = new Date(dateRange.to);\n    toDate.setHours(23, 59, 59, 999);\n    return rDate >= fromDate && rDate <= toDate;\n  });\n\n  const filteredKotOrders = kotOrders.filter((o: any) => {\n    if (!o.createdAt) return false;\n    const oDate = new Date(o.createdAt);\n    const fromDate = new Date(dateRange.from);\n    const toDate = new Date(dateRange.to);\n    toDate.setHours(23, 59, 59, 999);\n    return oDate >= fromDate && oDate <= toDate;\n  });\n\n  const filteredReservations = reservations.filter((r: any) => {\n    if (!r.checkIn) return false;\n    const rDate = new Date(r.checkIn);\n    const fromDate = new Date(dateRange.from);\n    const toDate = new Date(dateRange.to);\n    toDate.setHours(23, 59, 59, 999);\n    return rDate >= fromDate && rDate <= toDate;\n  });\n\n  const filteredHallBookings = hallBookings.filter((b: any) => {\n    if (!b.bookingDate) return false;\n    const bDate = new Date(b.bookingDate);\n    const fromDate = new Date(dateRange.from);\n    const toDate = new Date(dateRange.to);\n    toDate.setHours(23, 59, 59, 999);\n    return bDate >= fromDate && bDate <= toDate;\n  });\n\n  const filteredConsumptions = consumptions.filter((c: any) => {\n    if (!c.createdAt) return false;\n    const cDate = new Date(c.createdAt);\n    const fromDate = new Date(dateRange.from);\n    const toDate = new Date(dateRange.to);\n    toDate.setHours(23, 59, 59, 999);\n    return cDate >= fromDate && cDate <= toDate;\n  });\n\n  const occupancyRate = rooms.length > 0 ? \n    (rooms.filter(r => r.isOccupied).length / rooms.length) * 100 : 0;\n\n  const activeStaff = staff.filter(s => s.isActive).length;\n\n  const getUserById = (id: string) => staff.find((u: any) => u.id === id);\n  const getGuestById = (id: string) => guests.find((g: any) => g.id === id);\n  const getItemById = (id: string) => inventory.find((i: any) => i.id === id);\n  const getMenuItemById = (id: string) => menuItems.find((m: any) => m.id === id);\n\n  const downloadCSV = (csvContent: string, filename: string) => {\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const exportComprehensiveReport = () => {\n    const dateFrom = new Date(dateRange.from).toLocaleDateString();\n    const dateTo = new Date(dateRange.to).toLocaleDateString();\n    \n    let csv = `COMPREHENSIVE HOTEL OPERATIONAL TRANSPARENCY REPORT (${dateFrom} - ${dateTo})\\n\\n`;\n    \n    csv += `=== OCCUPANCY SUMMARY ===\\n`;\n    csv += `Total Rooms,${rooms.length}\\n`;\n    csv += `Occupied,${rooms.filter(r => r.isOccupied).length}\\n`;\n    csv += `Available,${rooms.filter(r => !r.isOccupied).length}\\n`;\n    csv += `Occupancy Rate,${occupancyRate.toFixed(1)}%\\n\\n`;\n    \n    csv += `=== STAFF SUMMARY ===\\n`;\n    csv += `Total Staff,${staff.length}\\n`;\n    csv += `Active Staff,${activeStaff}\\n\\n`;\n    \n    csv += `=== DISCOUNT VOUCHERS ===\\n`;\n    csv += `Code,Type,Amount,Used/Max,Created By,Created At,Valid Until\\n`;\n    filteredVouchers.forEach((v: any) => {\n      const creator = getUserById(v.createdBy);\n      csv += `${v.code},${v.discountType || 'fixed'},${v.discountAmount || 0},${v.usedCount || 0}/${v.maxUses || 'unlimited'},${creator?.username || 'Unknown'},${new Date(v.createdAt).toLocaleString()},${v.validUntil ? new Date(v.validUntil).toLocaleDateString() : 'No expiry'}\\n`;\n    });\n    csv += `\\n`;\n    \n    csv += `=== STOCK REQUESTS ===\\n`;\n    csv += `Item,Quantity,Department,Requested By,Status,Requested At,Delivered At\\n`;\n    filteredStockRequests.forEach((r: any) => {\n      const requester = getUserById(r.requestedBy);\n      const item = getItemById(r.itemId);\n      csv += `${item?.name || 'Unknown'},${r.quantity} ${r.unit || ''},${requester?.role?.name || 'Unknown'},${requester?.username || 'Unknown'},${r.status},${new Date(r.requestedAt).toLocaleString()},${r.deliveredAt ? new Date(r.deliveredAt).toLocaleString() : 'Pending'}\\n`;\n    });\n    csv += `\\n`;\n    \n    csv += `=== FOOD & DRINK ORDERS (KOT) ===\\n`;\n    csv += `Table,Items,Status,Created By,Created At\\n`;\n    filteredKotOrders.forEach((order: any) => {\n      const creator = getUserById(order.createdBy);\n      const itemsDesc = order.items?.map((i: any) => `${i.description} (${i.qty})`).join('; ') || 'No items';\n      csv += `Table ${order.tableId},${itemsDesc},${order.status},${creator?.username || 'Unknown'},${new Date(order.createdAt).toLocaleString()}\\n`;\n    });\n    csv += `\\n`;\n    \n    csv += `=== INVENTORY CONSUMPTION ===\\n`;\n    csv += `Item,Quantity,Reason,Used By,Date\\n`;\n    filteredConsumptions.forEach((c: any) => {\n      const item = getItemById(c.itemId);\n      const user = getUserById(c.createdBy);\n      csv += `${item?.name || 'Unknown'},${c.qty} ${c.unit || ''},${c.reason || 'Usage'},${user?.username || 'System'},${new Date(c.createdAt).toLocaleString()}\\n`;\n    });\n    csv += `\\n`;\n    \n    csv += `=== ROOM RESERVATIONS ===\\n`;\n    csv += `Guest,Room,Check-In,Check-Out,Status,Meal Plan\\n`;\n    filteredReservations.forEach((r: any) => {\n      const guest = getGuestById(r.guestId);\n      csv += `${guest?.fullName || 'Unknown'},${r.roomNumber || r.roomId},${new Date(r.checkIn).toLocaleDateString()},${new Date(r.checkOut).toLocaleDateString()},${r.status},${r.mealPlan || 'None'}\\n`;\n    });\n    csv += `\\n`;\n    \n    csv += `=== HALL BOOKINGS ===\\n`;\n    csv += `Customer,Hall,Event Date,Purpose,Guests,Status\\n`;\n    filteredHallBookings.forEach((b: any) => {\n      csv += `${b.customerName || 'Unknown'},${b.hallId},${new Date(b.bookingDate).toLocaleDateString()},${b.purpose || 'Event'},${b.numberOfGuests || 0},${b.status}\\n`;\n    });\n    \n    downloadCSV(csv, `hotel_operational_report_${dateRange.from}_to_${dateRange.to}.csv`);\n    toast({ title: \"Operational Report Exported\", description: \"Complete hotel operational report downloaded\" });\n  };\n\n  return (\n    <DashboardLayout title=\"Hotel Operational Transparency\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Complete Operational Transparency</h2>\n            <p className=\"text-muted-foreground\">Full visibility into all hotel operations - vouchers, stock, orders, bookings & more</p>\n          </div>\n          <Button onClick={exportComprehensiveReport} data-testid=\"button-export-comprehensive\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Complete Report\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"date-from\">From Date</Label>\n            <Input\n              id=\"date-from\"\n              type=\"date\"\n              value={dateRange.from}\n              onChange={(e) => setDateRange(prev => ({ ...prev, from: e.target.value }))}\n              data-testid=\"input-date-from\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"date-to\">To Date</Label>\n            <Input\n              id=\"date-to\"\n              type=\"date\"\n              value={dateRange.to}\n              onChange={(e) => setDateRange(prev => ({ ...prev, to: e.target.value }))}\n              data-testid=\"input-date-to\"\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Occupancy Rate\"\n            value={`${occupancyRate.toFixed(1)}%`}\n            icon={<BarChart />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Active Staff\"\n            value={activeStaff}\n            icon={<Users />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Period Vouchers\"\n            value={filteredVouchers.length}\n            icon={<Ticket />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Stock Requests\"\n            value={filteredStockRequests.length}\n            icon={<Package />}\n            iconColor=\"text-orange-500\"\n          />\n        </div>\n\n        <Tabs defaultValue=\"vouchers\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5 gap-2\">\n            <TabsTrigger value=\"vouchers\" data-testid=\"tab-vouchers\">\n              <Ticket className=\"h-4 w-4 mr-2\" />\n              Vouchers\n            </TabsTrigger>\n            <TabsTrigger value=\"inventory\" data-testid=\"tab-inventory\">\n              <Package className=\"h-4 w-4 mr-2\" />\n              Inventory\n            </TabsTrigger>\n            <TabsTrigger value=\"restaurant\" data-testid=\"tab-restaurant\">\n              <Utensils className=\"h-4 w-4 mr-2\" />\n              Restaurant & Bar\n            </TabsTrigger>\n            <TabsTrigger value=\"bookings\" data-testid=\"tab-bookings\">\n              <Hotel className=\"h-4 w-4 mr-2\" />\n              Rooms & Bookings\n            </TabsTrigger>\n            <TabsTrigger value=\"operations\" data-testid=\"tab-operations\">\n              <Users className=\"h-4 w-4 mr-2\" />\n              Staff & Maintenance\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"vouchers\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Ticket className=\"h-5 w-5\" />\n                  Discount Vouchers - Creation & Usage\n                </CardTitle>\n                <CardDescription>Complete voucher tracking - who created, who used, when and how many times</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {filteredVouchers.length === 0 ? (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <Ticket className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No vouchers in selected period</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredVouchers.map((voucher: any) => {\n                      const creator = getUserById(voucher.createdBy);\n                      return (\n                        <Card key={voucher.id} className=\"border-2\">\n                          <CardContent className=\"pt-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  <h3 className=\"text-xl font-bold\">{voucher.code}</h3>\n                                  <Badge variant={voucher.usedCount >= (voucher.maxUses || Infinity) ? \"destructive\" : \"default\"}>\n                                    {voucher.discountType === 'percentage' ? `${voucher.discountAmount}%` : `Rs. ${voucher.discountAmount}`}\n                                  </Badge>\n                                </div>\n                                <div className=\"grid grid-cols-2 gap-x-6 gap-y-1 text-sm\">\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Created By:</span>\n                                    <span className=\"ml-2 font-medium\">{creator?.username || 'Unknown'}</span>\n                                    <span className=\"ml-1 text-xs text-muted-foreground\">({creator?.role?.name || 'Unknown'})</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Created At:</span>\n                                    <span className=\"ml-2 font-medium\">{new Date(voucher.createdAt).toLocaleString()}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Usage:</span>\n                                    <span className=\"ml-2 font-medium\">{voucher.usedCount || 0} / {voucher.maxUses || 'Unlimited'}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Valid Until:</span>\n                                    <span className=\"ml-2 font-medium\">{voucher.validUntil ? new Date(voucher.validUntil).toLocaleDateString() : 'No expiry'}</span>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"inventory\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5\" />\n                  Stock Requests & Issuance Tracking\n                </CardTitle>\n                <CardDescription>Complete storeroom activity - who took what stock, when, from which department</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {filteredStockRequests.length === 0 ? (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <Package className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No stock requests in selected period</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Item</TableHead>\n                        <TableHead>Quantity</TableHead>\n                        <TableHead>Requested By</TableHead>\n                        <TableHead>Department</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Requested At</TableHead>\n                        <TableHead>Delivered At</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredStockRequests.map((request: any) => {\n                        const requester = getUserById(request.requestedBy);\n                        const item = getItemById(request.itemId);\n                        return (\n                          <TableRow key={request.id}>\n                            <TableCell className=\"font-medium\">{item?.name || 'Unknown Item'}</TableCell>\n                            <TableCell>{request.quantity} {request.unit || ''}</TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{requester?.username || 'Unknown'}</div>\n                                <div className=\"text-xs text-muted-foreground\">{requester?.role?.name || 'Unknown'}</div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">{requester?.role?.name || 'Unknown'}</Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={\n                                request.status === 'delivered' ? 'default' :\n                                request.status === 'approved' ? 'secondary' : 'outline'\n                              }>\n                                {request.status === 'delivered' && <CheckCircle className=\"h-3 w-3 mr-1\" />}\n                                {request.status === 'pending' && <Clock className=\"h-3 w-3 mr-1\" />}\n                                {request.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-sm\">{new Date(request.requestedAt).toLocaleString()}</TableCell>\n                            <TableCell className=\"text-sm\">{request.deliveredAt ? new Date(request.deliveredAt).toLocaleString() : '-'}</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n\n            <Separator className=\"my-6\" />\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  Inventory Consumption & Usage\n                </CardTitle>\n                <CardDescription>Stock usage tracking - what was used, how much, and by whom</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {filteredConsumptions.length === 0 ? (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <ShoppingCart className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No consumption records in selected period</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Item</TableHead>\n                        <TableHead>Quantity</TableHead>\n                        <TableHead>Reason/Purpose</TableHead>\n                        <TableHead>Used By</TableHead>\n                        <TableHead>Date</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredConsumptions.map((consumption: any) => {\n                        const item = getItemById(consumption.itemId);\n                        const user = getUserById(consumption.createdBy);\n                        return (\n                          <TableRow key={consumption.id}>\n                            <TableCell className=\"font-medium\">{item?.name || 'Unknown'}</TableCell>\n                            <TableCell>{consumption.qty} {consumption.unit || ''}</TableCell>\n                            <TableCell>{consumption.reason || 'Usage'}</TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{user?.username || 'System'}</div>\n                                <div className=\"text-xs text-muted-foreground\">{user?.role?.name || ''}</div>\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-sm\">{new Date(consumption.createdAt).toLocaleString()}</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"restaurant\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Utensils className=\"h-5 w-5\" />\n                  Food & Drink Orders (KOT)\n                </CardTitle>\n                <CardDescription>All restaurant and bar orders with items and quantities</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {filteredKotOrders.length === 0 ? (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <Utensils className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No orders in selected period</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredKotOrders.map((order: any) => {\n                      const creator = getUserById(order.createdBy);\n                      return (\n                        <Card key={order.id} className=\"border-2\">\n                          <CardContent className=\"pt-6\">\n                            <div className=\"flex justify-between items-start mb-4\">\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <h3 className=\"text-lg font-bold\">Table {order.tableId}</h3>\n                                  <Badge variant={\n                                    order.status === 'closed' ? 'default' :\n                                    order.status === 'open' ? 'secondary' : 'outline'\n                                  }>\n                                    {order.status}\n                                  </Badge>\n                                </div>\n                                <div className=\"text-sm text-muted-foreground mt-1\">\n                                  Created by {creator?.username || 'Unknown'} on {new Date(order.createdAt).toLocaleString()}\n                                </div>\n                              </div>\n                            </div>\n                            {order.items && order.items.length > 0 && (\n                              <div className=\"space-y-2\">\n                                <h4 className=\"font-semibold text-sm\">Items Ordered:</h4>\n                                <Table>\n                                  <TableHeader>\n                                    <TableRow>\n                                      <TableHead>Item</TableHead>\n                                      <TableHead>Quantity</TableHead>\n                                      <TableHead>Unit</TableHead>\n                                      <TableHead>Status</TableHead>\n                                    </TableRow>\n                                  </TableHeader>\n                                  <TableBody>\n                                    {order.items.map((item: any, idx: number) => (\n                                      <TableRow key={idx}>\n                                        <TableCell className=\"font-medium\">{item.description || item.menuItemId}</TableCell>\n                                        <TableCell>{item.qty}</TableCell>\n                                        <TableCell>{item.unit || 'plate'}</TableCell>\n                                        <TableCell>\n                                          <Badge variant={\n                                            item.status === 'ready' ? 'default' :\n                                            item.status === 'approved' ? 'secondary' :\n                                            item.status === 'declined' ? 'destructive' : 'outline'\n                                          }>\n                                            {item.status}\n                                          </Badge>\n                                        </TableCell>\n                                      </TableRow>\n                                    ))}\n                                  </TableBody>\n                                </Table>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"bookings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Hotel className=\"h-5 w-5\" />\n                  Rooms & Occupancy Status\n                </CardTitle>\n                <CardDescription>Real-time room status and occupancy information</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                    <div className=\"text-sm text-muted-foreground\">Total Rooms</div>\n                    <div className=\"text-2xl font-bold\">{rooms.length}</div>\n                  </div>\n                  <div className=\"bg-green-50 dark:bg-green-950 p-4 rounded-lg\">\n                    <div className=\"text-sm text-muted-foreground\">Occupied</div>\n                    <div className=\"text-2xl font-bold\">{rooms.filter((r: any) => r.isOccupied).length}</div>\n                  </div>\n                  <div className=\"bg-orange-50 dark:bg-orange-950 p-4 rounded-lg\">\n                    <div className=\"text-sm text-muted-foreground\">Occupancy Rate</div>\n                    <div className=\"text-2xl font-bold\">{occupancyRate.toFixed(1)}%</div>\n                  </div>\n                </div>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Room Number</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Occupancy</TableHead>\n                      <TableHead>Price</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {rooms.map((room: any) => (\n                      <TableRow key={room.id}>\n                        <TableCell className=\"font-bold\">{room.roomNumber}</TableCell>\n                        <TableCell>{room.type?.name || 'Standard'}</TableCell>\n                        <TableCell>\n                          <Badge variant={\n                            room.status === 'available' ? 'default' :\n                            room.status === 'maintenance' ? 'destructive' : 'secondary'\n                          }>\n                            {room.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {room.isOccupied ? (\n                            <Badge variant=\"secondary\"><CheckCircle className=\"h-3 w-3 mr-1\" />Occupied</Badge>\n                          ) : (\n                            <Badge variant=\"outline\">Available</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"font-medium\">Rs. {room.pricePerNight || 0}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n\n            <Separator className=\"my-6\" />\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  Room Reservations & Hall Bookings\n                </CardTitle>\n                <CardDescription>All reservations and bookings in the selected period</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-semibold mb-4\">Room Reservations ({filteredReservations.length})</h3>\n                  {filteredReservations.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">No room reservations in selected period</p>\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Guest</TableHead>\n                          <TableHead>Room</TableHead>\n                          <TableHead>Check-In</TableHead>\n                          <TableHead>Check-Out</TableHead>\n                          <TableHead>Meal Plan</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredReservations.map((reservation: any) => {\n                          const guest = getGuestById(reservation.guestId);\n                          return (\n                            <TableRow key={reservation.id}>\n                              <TableCell className=\"font-medium\">{guest?.fullName || 'Unknown'}</TableCell>\n                              <TableCell>{reservation.roomNumber || reservation.roomId}</TableCell>\n                              <TableCell>{new Date(reservation.checkIn).toLocaleDateString()}</TableCell>\n                              <TableCell>{new Date(reservation.checkOut).toLocaleDateString()}</TableCell>\n                              <TableCell><Badge variant=\"outline\">{reservation.mealPlan || 'EP'}</Badge></TableCell>\n                              <TableCell>\n                                <Badge variant={\n                                  reservation.status === 'confirmed' ? 'default' :\n                                  reservation.status === 'cancelled' ? 'destructive' : 'secondary'\n                                }>\n                                  {reservation.status}\n                                </Badge>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  )}\n                </div>\n\n                <Separator />\n\n                <div>\n                  <h3 className=\"font-semibold mb-4\">Hall Bookings ({filteredHallBookings.length})</h3>\n                  {filteredHallBookings.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Hotel className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">No hall bookings in selected period</p>\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Hall</TableHead>\n                          <TableHead>Event Date</TableHead>\n                          <TableHead>Purpose</TableHead>\n                          <TableHead>Guests</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredHallBookings.map((booking: any) => (\n                          <TableRow key={booking.id}>\n                            <TableCell className=\"font-medium\">{booking.customerName || 'Unknown'}</TableCell>\n                            <TableCell>{booking.hallId}</TableCell>\n                            <TableCell>{new Date(booking.bookingDate).toLocaleDateString()}</TableCell>\n                            <TableCell>{booking.purpose || 'Event'}</TableCell>\n                            <TableCell>{booking.numberOfGuests || 0}</TableCell>\n                            <TableCell>\n                              <Badge variant={\n                                booking.status === 'confirmed' ? 'default' :\n                                booking.status === 'cancelled' ? 'destructive' : 'secondary'\n                              }>\n                                {booking.status}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"operations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Staff Directory & Activity\n                </CardTitle>\n                <CardDescription>Complete staff information and current status</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <div className=\"bg-purple-50 dark:bg-purple-950 p-4 rounded-lg\">\n                    <div className=\"text-sm text-muted-foreground\">Total Staff</div>\n                    <div className=\"text-2xl font-bold\">{staff.length}</div>\n                  </div>\n                  <div className=\"bg-green-50 dark:bg-green-950 p-4 rounded-lg\">\n                    <div className=\"text-sm text-muted-foreground\">Active</div>\n                    <div className=\"text-2xl font-bold\">{activeStaff}</div>\n                  </div>\n                  <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                    <div className=\"text-sm text-muted-foreground\">Online Now</div>\n                    <div className=\"text-2xl font-bold\">{staff.filter((s: any) => s.isOnline).length}</div>\n                  </div>\n                </div>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Username</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Online</TableHead>\n                      <TableHead>Last Login</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {staff.map((member: any) => (\n                      <TableRow key={member.id}>\n                        <TableCell className=\"font-medium\">{member.username}</TableCell>\n                        <TableCell><Badge variant=\"outline\">{member.role?.name || 'Unknown'}</Badge></TableCell>\n                        <TableCell>\n                          {member.isActive ? (\n                            <Badge variant=\"default\"><CheckCircle className=\"h-3 w-3 mr-1\" />Active</Badge>\n                          ) : (\n                            <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Inactive</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {member.isOnline ? (\n                            <div className=\"flex items-center gap-1\">\n                              <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n                              <span className=\"text-sm\">Online</span>\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center gap-1\">\n                              <div className=\"h-2 w-2 rounded-full bg-gray-400\"></div>\n                              <span className=\"text-sm\">Offline</span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">{member.lastLogin ? new Date(member.lastLogin).toLocaleString() : 'Never'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n\n            <Separator className=\"my-6\" />\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Maintenance Requests & History\n                </CardTitle>\n                <CardDescription>All maintenance requests with photos and complete details</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {maintenanceRequests.length === 0 ? (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <Activity className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No maintenance requests found</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {maintenanceRequests.map((request: any) => {\n                      return (\n                        <Card key={request.id} className=\"border-2\">\n                          <CardContent className=\"pt-6\">\n                            <div className=\"flex justify-between items-start mb-4\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <h3 className=\"text-lg font-bold\">{request.title}</h3>\n                                  <Badge variant={\n                                    request.status === 'completed' ? 'default' :\n                                    request.status === 'in_progress' ? 'secondary' :\n                                    request.status === 'pending' ? 'outline' : 'destructive'\n                                  }>\n                                    {request.status}\n                                  </Badge>\n                                  <Badge variant={\n                                    request.priority === 'high' ? 'destructive' :\n                                    request.priority === 'medium' ? 'secondary' : 'outline'\n                                  }>\n                                    {request.priority} priority\n                                  </Badge>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground mb-4\">{request.description}</p>\n                                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Location:</span>\n                                    <span className=\"ml-2 font-medium\">{request.location}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Reported By:</span>\n                                    <span className=\"ml-2 font-medium\">{request.reportedBy?.username || 'Unknown'}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Assigned To:</span>\n                                    <span className=\"ml-2 font-medium\">{request.assignedTo?.username || 'Unassigned'}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Created:</span>\n                                    <span className=\"ml-2 font-medium\">{new Date(request.createdAt).toLocaleString()}</span>\n                                  </div>\n                                </div>\n                              </div>\n                              {request.photo && (\n                                <img src={request.photo} alt=\"Maintenance issue\" className=\"w-32 h-32 object-cover rounded-lg ml-4\" />\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":43086},"client/src/pages/dashboard/security-head/staff-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Users, UserPlus, Shield, Eye } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nexport default function SecurityHeadStaffManagement() {\n  const { confirm } = useConfirmDialog();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newStaff, setNewStaff] = useState({\n    username: \"\",\n    email: \"\",\n    phone: \"\",\n    fullName: \"\",\n    address: \"\",\n    password: \"\",\n    role: \"surveillance_officer\"\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch all users\n  const { data: allStaff = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  // Filter for security staff (guards and surveillance officers)\n  const securityStaff = allStaff.filter(staff => \n    staff.role?.name === 'security_guard' || staff.role?.name === 'surveillance_officer'\n  );\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Create staff mutation\n  const createStaffMutation = useMutation({\n    mutationFn: async (staffData: any) => {\n      const response = await fetch(\"/api/hotels/current/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...staffData,\n          confirmPassword: staffData.password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create security staff\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      setIsAddDialogOpen(false);\n      setNewStaff({ username: \"\", email: \"\", phone: \"\", fullName: \"\", address: \"\", password: \"\", role: \"surveillance_officer\" });\n      toast.success(\"Security staff created successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleAddStaff = () => {\n    if (!newStaff.username || !newStaff.email || !newStaff.password || !newStaff.phone || !newStaff.fullName || !newStaff.address || !newStaff.role) {\n      toast.error(\"Please fill in all required fields (username, email, password, phone, full name, address, and role)\");\n      return;\n    }\n\n    createStaffMutation.mutate(newStaff);\n  };\n\n  const handleDeleteStaff = async (staff: any) => {\n    await confirm({\n      title: \"Remove Security Staff\",\n      description: `Are you sure you want to remove ${staff.fullName || staff.username}?`,\n      confirmText: \"Remove\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: async () => {\n        try {\n          const response = await fetch(`/api/hotels/current/users/${staff.id}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n          });\n          if (!response.ok) {\n            throw new Error(\"Failed to delete security staff\");\n          }\n          queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n          toast.success(\"Security staff removed successfully\");\n        } catch (error: any) {\n          toast.error(error.message);\n        }\n      }\n    });\n  };\n\n  const columns = [\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        // Display both full name and username\n        if (value && value.trim()) {\n          return `${value} (${row.username})`;\n        }\n        return row.username || '-';\n      }\n    },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => (\n        <div className=\"flex items-center space-x-2\">\n          {value?.name === 'security_guard' && <Shield className=\"h-4 w-4 text-blue-500\" />}\n          {value?.name === 'surveillance_officer' && <Eye className=\"h-4 w-4 text-purple-500\" />}\n          <span>{value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}</span>\n        </div>\n      )\n    },\n    { key: \"email\", label: \"Email\", sortable: true },\n    { key: \"phone\", label: \"Phone\", sortable: true },\n    { \n      key: \"address\", \n      label: \"Address\", \n      sortable: true,\n      render: (value: any) => value || '-'\n    },\n    { \n      key: \"id\", \n      label: \"Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-3 py-1 rounded-full text-xs ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n            {isOnDuty ? 'On Duty' : 'Off Duty'}\n          </span>\n        );\n      }\n    },\n    { \n      key: \"lastLogin\", \n      label: \"Last Active\", \n      sortable: true,\n      render: (value: string) => value ? new Date(value).toLocaleString('en-GB', { timeZone: 'Asia/Kathmandu' }) : 'Never'\n    }\n  ];\n\n  const actions = [\n    { \n      label: \"Remove\", \n      action: handleDeleteStaff, \n      variant: \"destructive\" as const \n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Security Staff Management\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Staff</p>\n                  <p className=\"text-2xl font-bold\">{securityStaff.length}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">On Duty</p>\n                  <p className=\"text-2xl font-bold\">{securityStaff.filter(s => dailyAttendance.some(a => a.userId === s.id && a.status === 'active')).length}</p>\n                </div>\n                <div className=\"h-8 w-8 rounded-full bg-green-100 flex items-center justify-center\">\n                  <div className=\"h-4 w-4 rounded-full bg-green-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Security Guards</p>\n                  <p className=\"text-2xl font-bold\">\n                    {securityStaff.filter(s => s.role?.name === 'security_guard').length}\n                  </p>\n                </div>\n                <Shield className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Surveillance Officers</p>\n                  <p className=\"text-2xl font-bold\">\n                    {securityStaff.filter(s => s.role?.name === 'surveillance_officer').length}\n                  </p>\n                </div>\n                <Eye className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Staff Table */}\n        <DataTable\n          title=\"Security Staff\"\n          data={securityStaff}\n          columns={columns}\n          actions={actions}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Add Security Staff\"\n          searchPlaceholder=\"Search security staff...\"\n        />\n\n        {/* Add Staff Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add Security Staff</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"username\">Username *</Label>\n                <Input\n                  id=\"username\"\n                  value={newStaff.username}\n                  onChange={(e) => setNewStaff({ ...newStaff, username: e.target.value })}\n                  placeholder=\"Enter username\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={newStaff.email}\n                  onChange={(e) => setNewStaff({ ...newStaff, email: e.target.value })}\n                  placeholder=\"Enter email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone *</Label>\n                <Input\n                  id=\"phone\"\n                  value={newStaff.phone}\n                  onChange={(e) => setNewStaff({ ...newStaff, phone: e.target.value })}\n                  placeholder=\"Enter phone number\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"fullName\">Full Name *</Label>\n                <Input\n                  id=\"fullName\"\n                  value={newStaff.fullName}\n                  onChange={(e) => setNewStaff({ ...newStaff, fullName: e.target.value })}\n                  placeholder=\"Enter full name\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"address\">Address *</Label>\n                <Input\n                  id=\"address\"\n                  value={newStaff.address}\n                  onChange={(e) => setNewStaff({ ...newStaff, address: e.target.value })}\n                  placeholder=\"Enter address\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"role\">Role *</Label>\n                <Select value={newStaff.role} onValueChange={(value) => setNewStaff({ ...newStaff, role: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"surveillance_officer\">Surveillance Officer</SelectItem>\n                    <SelectItem value=\"security_guard\">Security Guard</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={newStaff.password}\n                  onChange={(e) => setNewStaff({ ...newStaff, password: e.target.value })}\n                  placeholder=\"Enter password\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleAddStaff}\n                  disabled={createStaffMutation.isPending}\n                >\n                  {createStaffMutation.isPending ? \"Creating...\" : \"Create Staff\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":12540},"client/src/pages/dashboard/manager/meal-plans.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Edit, Trash2, UtensilsCrossed } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { DashboardLayout } from '@/components/layout/dashboard-layout';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface MealPlan {\n  id: string;\n  hotelId: string;\n  planType: string;\n  planName: string;\n  pricePerPerson: string;\n  description: string | null;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst MEAL_PLAN_TYPES = [\n  { value: 'EP', label: 'EP - European Plan', description: 'Room only, no meals included' },\n  { value: 'BB', label: 'BB - Bed & Breakfast', description: 'Room with breakfast' },\n  { value: 'AP', label: 'AP - American Plan', description: 'Room with all meals' },\n  { value: 'MAP', label: 'MAP - Modified American Plan', description: 'Room with breakfast and one meal' }\n];\n\nexport default function MealPlansPage() {\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingPlan, setEditingPlan] = useState<MealPlan | null>(null);\n  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null);\n  const [hotelId, setHotelId] = useState<string>('');\n\n  const [form, setForm] = useState({\n    planType: '',\n    planName: '',\n    pricePerPerson: '',\n    description: ''\n  });\n\n  const { data: user } = useQuery<{ hotelId?: string }>({\n    queryKey: ['/api/user'],\n    refetchInterval: 3000\n  });\n\n  const queryClientInstance = useQueryClient();\n\n  useEffect(() => {\n    if (user?.hotelId) {\n      setHotelId(user.hotelId);\n    }\n  }, [user]);\n\n  const { data: mealPlans = [], isLoading } = useQuery<MealPlan[]>({\n    queryKey: ['/api/hotels', hotelId, 'meal-plans'],\n    enabled: !!hotelId,\n    refetchInterval: 3000\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof form) => {\n      return apiRequest('POST', `/api/hotels/${hotelId}/meal-plans`, data);\n    },\n    onSuccess: () => {\n      queryClientInstance.invalidateQueries({ queryKey: ['/api/hotels', hotelId, 'meal-plans'] });\n      toast.success('Meal plan created successfully');\n      resetForm();\n      setShowDialog(false);\n    },\n    onError: () => {\n      toast.error('Failed to create meal plan');\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: string; values: Partial<typeof form> }) => {\n      return apiRequest('PUT', `/api/hotels/${hotelId}/meal-plans/${data.id}`, data.values);\n    },\n    onSuccess: () => {\n      queryClientInstance.invalidateQueries({ queryKey: ['/api/hotels', hotelId, 'meal-plans'] });\n      toast.success('Meal plan updated successfully');\n      resetForm();\n      setShowDialog(false);\n      setEditingPlan(null);\n    },\n    onError: () => {\n      toast.error('Failed to update meal plan');\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/hotels/${hotelId}/meal-plans/${id}`);\n    },\n    onSuccess: () => {\n      queryClientInstance.invalidateQueries({ queryKey: ['/api/hotels', hotelId, 'meal-plans'] });\n      toast.success('Meal plan deleted successfully');\n      setDeleteConfirm(null);\n    },\n    onError: () => {\n      toast.error('Failed to delete meal plan');\n    }\n  });\n\n  const resetForm = () => {\n    setForm({\n      planType: '',\n      planName: '',\n      pricePerPerson: '',\n      description: ''\n    });\n    setEditingPlan(null);\n  };\n\n  const handleEdit = (plan: MealPlan) => {\n    setEditingPlan(plan);\n    setForm({\n      planType: plan.planType,\n      planName: plan.planName,\n      pricePerPerson: plan.pricePerPerson,\n      description: plan.description || ''\n    });\n    setShowDialog(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!form.planType || !form.planName || !form.pricePerPerson) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n\n    if (editingPlan) {\n      updateMutation.mutate({ id: editingPlan.id, values: form });\n    } else {\n      createMutation.mutate(form);\n    }\n  };\n\n  const handlePlanTypeChange = (value: string) => {\n    const selectedPlan = MEAL_PLAN_TYPES.find(p => p.value === value);\n    setForm({\n      ...form,\n      planType: value,\n      planName: selectedPlan?.label || value\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"Meal Plans\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"heading-meal-plans\">Meal Plans</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage meal plan add-ons for room bookings</p>\n          </div>\n          <Dialog open={showDialog} onOpenChange={(open) => {\n            setShowDialog(open);\n            if (!open) resetForm();\n          }}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-meal-plan\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Meal Plan\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>{editingPlan ? 'Edit Meal Plan' : 'Add Meal Plan'}</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"planType\">Plan Type *</Label>\n                  <Select\n                    value={form.planType}\n                    onValueChange={handlePlanTypeChange}\n                    disabled={!!editingPlan}\n                  >\n                    <SelectTrigger data-testid=\"select-plan-type\">\n                      <SelectValue placeholder=\"Select plan type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {MEAL_PLAN_TYPES.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.planType && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      {MEAL_PLAN_TYPES.find(t => t.value === form.planType)?.description}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"planName\">Plan Name *</Label>\n                  <Input\n                    id=\"planName\"\n                    value={form.planName}\n                    onChange={(e) => setForm({ ...form, planName: e.target.value })}\n                    placeholder=\"e.g., BB - Bed & Breakfast\"\n                    required\n                    data-testid=\"input-plan-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"pricePerPerson\">Price per Person *</Label>\n                  <Input\n                    id=\"pricePerPerson\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={form.pricePerPerson}\n                    onChange={(e) => setForm({ ...form, pricePerPerson: e.target.value })}\n                    placeholder=\"0.00\"\n                    required\n                    data-testid=\"input-price-per-person\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description (Optional)</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={form.description}\n                    onChange={(e) => setForm({ ...form, description: e.target.value })}\n                    placeholder=\"Additional details about this meal plan...\"\n                    rows={3}\n                    data-testid=\"input-description\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowDialog(false);\n                      resetForm();\n                    }}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-submit-meal-plan\"\n                  >\n                    {editingPlan ? 'Update' : 'Create'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UtensilsCrossed className=\"h-5 w-5\" />\n              Available Meal Plans\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading...</div>\n            ) : mealPlans.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No meal plans configured. Add your first meal plan to get started.\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Plan Type</TableHead>\n                    <TableHead>Plan Name</TableHead>\n                    <TableHead>Price per Person</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {mealPlans.map((plan) => (\n                    <TableRow key={plan.id} data-testid={`row-meal-plan-${plan.id}`}>\n                      <TableCell>\n                        <Badge variant=\"outline\" data-testid={`badge-plan-type-${plan.id}`}>\n                          {plan.planType}\n                        </Badge>\n                      </TableCell>\n                      <TableCell data-testid={`text-plan-name-${plan.id}`}>\n                        {plan.planName}\n                      </TableCell>\n                      <TableCell data-testid={`text-price-${plan.id}`}>\n                        NPR {parseFloat(plan.pricePerPerson).toFixed(2)}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\" data-testid={`text-description-${plan.id}`}>\n                        {plan.description || '-'}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={plan.isActive ? 'default' : 'secondary'}>\n                          {plan.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(plan)}\n                            data-testid={`button-edit-${plan.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setDeleteConfirm(plan.id)}\n                            data-testid={`button-delete-${plan.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <AlertDialog open={!!deleteConfirm} onOpenChange={(open) => !open && setDeleteConfirm(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Meal Plan</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this meal plan? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteConfirm && deleteMutation.mutate(deleteConfirm)}\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":13949},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  uuid, \n  timestamp, \n  boolean, \n  integer, \n  serial, \n  numeric, \n  jsonb,\n  inet,\n  index,\n  unique\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Hotels Table\nexport const hotels = pgTable(\"hotels\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  zip: text(\"zip\"),\n  vatNo: text(\"vat_no\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n  deletedAt: timestamp(\"deleted_at\", { withTimezone: true }),\n  settings: jsonb(\"settings\").default('{}')\n});\n\n// Roles Table\nexport const roles = pgTable(\"roles\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").unique().notNull(),\n  description: text(\"description\")\n});\n\n// Role Creation Permissions Table\nexport const roleCreationPermissions = pgTable(\"role_creation_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  creatorRole: text(\"creator_role\").notNull(),\n  createeRole: text(\"createe_role\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Users Table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  roleId: integer(\"role_id\").references(() => roles.id),\n  username: text(\"username\").notNull(),\n  fullName: text(\"full_name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  passwordHash: text(\"password_hash\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  isOnline: boolean(\"is_online\").default(false),\n  lastLogin: timestamp(\"last_login\", { withTimezone: true }),\n  lastLogout: timestamp(\"last_logout\", { withTimezone: true }),\n  createdBy: uuid(\"created_by\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n  deletedAt: timestamp(\"deleted_at\", { withTimezone: true }),\n  verification: jsonb(\"verification\").default('{}')\n});\n\n// User Sessions Table\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  jwtToken: text(\"jwt_token\"),\n  deviceInfo: text(\"device_info\"),\n  ip: text(\"ip\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  lastSeen: timestamp(\"last_seen\", { withTimezone: true }).defaultNow(),\n  revokedAt: timestamp(\"revoked_at\", { withTimezone: true })\n});\n\n// Audit Logs Table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  userId: uuid(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(), // login, logout, create, update, delete, void, approve, etc.\n  resourceType: text(\"resource_type\").notNull(), // user, transaction, bill, inventory, etc.\n  resourceId: text(\"resource_id\"),\n  details: jsonb(\"details\"), // Store any additional context\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  success: boolean(\"success\").default(true),\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Guests Table\nexport const guests = pgTable(\"guests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  country: text(\"country\"),\n  idType: text(\"id_type\"),\n  idNumber: text(\"id_number\"),\n  nationality: text(\"nationality\"),\n  dateOfBirth: timestamp(\"date_of_birth\", { withTimezone: true }),\n  notes: text(\"notes\"),\n  currentReservationId: uuid(\"current_reservation_id\"),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n  deletedAt: timestamp(\"deleted_at\", { withTimezone: true })\n});\n\n// Room Types Table\nexport const roomTypes = pgTable(\"room_types\", {\n  id: serial(\"id\").primaryKey(),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  name: text(\"name\"),\n  description: text(\"description\"),\n  priceInhouse: numeric(\"price_inhouse\", { precision: 12, scale: 2 }),\n  priceWalkin: numeric(\"price_walkin\", { precision: 12, scale: 2 })\n});\n\n// Rooms Table\nexport const rooms = pgTable(\"rooms\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  roomNumber: text(\"room_number\"),\n  roomTypeId: integer(\"room_type_id\").references(() => roomTypes.id),\n  status: text(\"status\").default('available'),\n  currentReservationId: uuid(\"current_reservation_id\"),\n  isOccupied: boolean(\"is_occupied\").default(false),\n  occupantDetails: jsonb(\"occupant_details\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n  deletedAt: timestamp(\"deleted_at\", { withTimezone: true })\n});\n\n// Room Status Logs Table\nexport const roomStatusLogs = pgTable(\"room_status_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: uuid(\"room_id\").references(() => rooms.id),\n  roomNumber: text(\"room_number\"),\n  previousStatus: text(\"previous_status\"),\n  newStatus: text(\"new_status\"),\n  reason: text(\"reason\"),\n  changedBy: uuid(\"changed_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Halls Table\nexport const halls = pgTable(\"halls\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  name: text(\"name\"),\n  capacity: integer(\"capacity\"),\n  priceInhouse: numeric(\"price_inhouse\", { precision: 12, scale: 2 }),\n  priceWalkin: numeric(\"price_walkin\", { precision: 12, scale: 2 }),\n  hourlyRate: numeric(\"hourly_rate\", { precision: 12, scale: 2 }),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Pools Table\nexport const pools = pgTable(\"pools\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  name: text(\"name\"),\n  priceInhouse: numeric(\"price_inhouse\", { precision: 12, scale: 2 }),\n  priceWalkin: numeric(\"price_walkin\", { precision: 12, scale: 2 }),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Services Table\nexport const services = pgTable(\"services\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  kind: text(\"kind\"),\n  name: text(\"name\"),\n  priceInhouse: numeric(\"price_inhouse\", { precision: 12, scale: 2 }),\n  priceWalkin: numeric(\"price_walkin\", { precision: 12, scale: 2 })\n});\n\n// Inventory Items Table\nexport const inventoryItems = pgTable(\"inventory_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  sku: text(\"sku\"),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  unit: text(\"unit\"),\n  stockQty: numeric(\"stock_qty\", { precision: 12, scale: 3 }).default('0'),\n  packageUnit: text(\"package_unit\"),\n  baseUnit: text(\"base_unit\"),\n  baseUnitsPerPackage: numeric(\"base_units_per_package\", { precision: 12, scale: 3 }),\n  packageStockQty: numeric(\"package_stock_qty\", { precision: 12, scale: 3 }).default('0'),\n  baseStockQty: numeric(\"base_stock_qty\", { precision: 12, scale: 3 }).default('0'),\n  reorderLevel: numeric(\"reorder_level\", { precision: 12, scale: 3 }).default('0'),\n  storageLocation: text(\"storage_location\"),\n  costPerUnit: numeric(\"cost_per_unit\", { precision: 12, scale: 2 }).default('0'),\n  departments: text(\"departments\").array().default(sql`ARRAY[]::text[]`),\n  measurementCategory: text(\"measurement_category\").default('weight'),\n  conversionProfile: jsonb(\"conversion_profile\").default('{}'),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n  deletedAt: timestamp(\"deleted_at\", { withTimezone: true })\n});\n\n// Inventory Consumptions Table\nexport const inventoryConsumptions = pgTable(\"inventory_consumptions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  itemId: uuid(\"item_id\").references(() => inventoryItems.id),\n  qty: numeric(\"qty\", { precision: 12, scale: 3 }).notNull(),\n  unit: text(\"unit\"),\n  reason: text(\"reason\"),\n  referenceEntity: text(\"reference_entity\"),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Wastages Table\nexport const wastages = pgTable(\"wastages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  itemId: uuid(\"item_id\").references(() => inventoryItems.id),\n  qty: numeric(\"qty\", { precision: 12, scale: 3 }).notNull(),\n  unit: text(\"unit\"),\n  reason: text(\"reason\").notNull(),\n  recordedBy: uuid(\"recorded_by\").references(() => users.id),\n  status: text(\"status\").default('pending_approval'),\n  approvedBy: uuid(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\", { withTimezone: true }),\n  estimatedValue: numeric(\"estimated_value\", { precision: 12, scale: 2 }),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Inventory Transactions Table\nexport const inventoryTransactions = pgTable(\"inventory_transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  itemId: uuid(\"item_id\").references(() => inventoryItems.id),\n  transactionType: text(\"transaction_type\").notNull(),\n  qtyPackage: numeric(\"qty_package\", { precision: 12, scale: 3 }),\n  qtyBase: numeric(\"qty_base\", { precision: 12, scale: 3 }),\n  issuedToUserId: uuid(\"issued_to_user_id\").references(() => users.id),\n  department: text(\"department\"),\n  notes: text(\"notes\"),\n  recordedBy: uuid(\"recorded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Vendors Table\nexport const vendors = pgTable(\"vendors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  name: text(\"name\"),\n  contact: jsonb(\"contact\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Transactions Table\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  txnType: text(\"txn_type\").notNull(),\n  amount: numeric(\"amount\", { precision: 14, scale: 2 }).notNull(),\n  currency: text(\"currency\").default('NPR'),\n  paymentMethod: text(\"payment_method\"),\n  vendorId: uuid(\"vendor_id\").references(() => vendors.id),\n  purpose: text(\"purpose\"),\n  reference: text(\"reference\"),\n  details: jsonb(\"details\"),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  deletedAt: timestamp(\"deleted_at\", { withTimezone: true }),\n  isVoided: boolean(\"is_voided\").default(false),\n  voidedBy: uuid(\"voided_by\").references(() => users.id),\n  voidedAt: timestamp(\"voided_at\", { withTimezone: true }),\n  voidReason: text(\"void_reason\")\n});\n\n// Maintenance Requests Table\nexport const maintenanceRequests = pgTable(\"maintenance_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  reportedBy: uuid(\"reported_by\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  location: text(\"location\"),\n  description: text(\"description\"),\n  photo: text(\"photo\"),\n  priority: text(\"priority\").default('medium'),\n  status: text(\"status\").default('pending'),\n  assignedTo: uuid(\"assigned_to\").references(() => users.id),\n  approvedBy: uuid(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\", { withTimezone: true }),\n  declinedBy: uuid(\"declined_by\").references(() => users.id),\n  declinedAt: timestamp(\"declined_at\", { withTimezone: true }),\n  declineReason: text(\"decline_reason\"),\n  resolvedAt: timestamp(\"resolved_at\", { withTimezone: true }),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Maintenance Request Status History Table\nexport const maintenanceStatusHistory = pgTable(\"maintenance_status_history\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requestId: uuid(\"request_id\").references(() => maintenanceRequests.id, { onDelete: \"cascade\" }),\n  previousStatus: text(\"previous_status\"),\n  newStatus: text(\"new_status\").notNull(),\n  changedBy: uuid(\"changed_by\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Tasks Table\nexport const tasks = pgTable(\"tasks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  assignedTo: uuid(\"assigned_to\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").default('pending'),\n  priority: text(\"priority\").default('medium'),\n  dueDate: timestamp(\"due_date\", { withTimezone: true }),\n  context: jsonb(\"context\"),\n  approvedBy: uuid(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\", { withTimezone: true }),\n  completionNotes: text(\"completion_notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Room Cleaning Queue Table\nexport const roomCleaningQueue = pgTable(\"room_cleaning_queue\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  roomId: uuid(\"room_id\").references(() => rooms.id),\n  roomNumber: text(\"room_number\").notNull(),\n  guestName: text(\"guest_name\"),\n  guestId: uuid(\"guest_id\").references(() => guests.id),\n  checkoutAt: timestamp(\"checkout_at\", { withTimezone: true }).defaultNow(),\n  status: text(\"status\").default('pending'),\n  taskId: uuid(\"task_id\").references(() => tasks.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Restaurant Tables Table\nexport const restaurantTables = pgTable(\"restaurant_tables\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  name: text(\"name\"),\n  capacity: integer(\"capacity\"),\n  location: text(\"location\"),\n  status: text(\"status\").default('available'),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Menu Categories Table\nexport const menuCategories = pgTable(\"menu_categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  name: text(\"name\")\n});\n\n// Menu Items Table\nexport const menuItems = pgTable(\"menu_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  categoryId: uuid(\"category_id\").references(() => menuCategories.id),\n  name: text(\"name\"),\n  price: numeric(\"price\", { precision: 12, scale: 2 }),\n  description: text(\"description\"),\n  active: boolean(\"active\").default(true),\n  recipe: jsonb(\"recipe\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// KOT Orders Table\nexport const kotOrders = pgTable(\"kot_orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  tableId: uuid(\"table_id\").references(() => restaurantTables.id),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  status: text(\"status\").default('open'),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// KOT Items Table\nexport const kotItems = pgTable(\"kot_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  kotId: uuid(\"kot_id\").references(() => kotOrders.id, { onDelete: \"cascade\" }),\n  menuItemId: uuid(\"menu_item_id\"),\n  description: text(\"description\"),\n  qty: integer(\"qty\").default(1),\n  unit: text(\"unit\"),\n  inventoryUsage: jsonb(\"inventory_usage\"),\n  status: text(\"status\").default('pending'),\n  declineReason: text(\"decline_reason\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// KOT Audit Logs Table\nexport const kotAuditLogs = pgTable(\"kot_audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  kotItemId: uuid(\"kot_item_id\").references(() => kotItems.id),\n  action: text(\"action\").notNull(),\n  performedBy: uuid(\"performed_by\").references(() => users.id),\n  reason: text(\"reason\"),\n  previousStatus: text(\"previous_status\"),\n  newStatus: text(\"new_status\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Payments Table\nexport const payments = pgTable(\"payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  payerId: uuid(\"payer_id\").references(() => users.id),\n  amount: numeric(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  method: text(\"method\"),\n  reference: text(\"reference\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Password Reset Table\nexport const passwordResets = pgTable(\"password_resets\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  token: text(\"token\"),\n  expiresAt: timestamp(\"expires_at\", { withTimezone: true }),\n  used: boolean(\"used\").default(false),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Attendance Table\nexport const attendance = pgTable(\"attendance\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  userId: uuid(\"user_id\").references(() => users.id),\n  clockInTime: timestamp(\"clock_in_time\", { withTimezone: true }).notNull(),\n  clockOutTime: timestamp(\"clock_out_time\", { withTimezone: true }),\n  clockInLocation: text(\"clock_in_location\"),\n  clockOutLocation: text(\"clock_out_location\"),\n  clockInIp: text(\"clock_in_ip\"),\n  clockOutIp: text(\"clock_out_ip\"),\n  totalHours: numeric(\"total_hours\", { precision: 10, scale: 2 }),\n  status: text(\"status\").default('active').notNull(),\n  clockInSource: text(\"clock_in_source\"),\n  clockOutSource: text(\"clock_out_source\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Leave Requests Table\nexport const leaveRequests = pgTable(\"leave_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  requestedBy: uuid(\"requested_by\").references(() => users.id),\n  approvedBy: uuid(\"approved_by\").references(() => users.id),\n  leaveType: text(\"leave_type\").notNull(), // sick, vacation, emergency, etc.\n  startDate: timestamp(\"start_date\", { withTimezone: true }).notNull(),\n  endDate: timestamp(\"end_date\", { withTimezone: true }).notNull(),\n  reason: text(\"reason\"),\n  status: text(\"status\").default('pending'), // pending, approved, rejected\n  managerNotes: text(\"manager_notes\"),\n  approvalDate: timestamp(\"approval_date\", { withTimezone: true }),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Leave Policies Table\nexport const leavePolicies = pgTable(\"leave_policies\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  leaveType: text(\"leave_type\").notNull(), // sick, vacation, personal, emergency, family\n  displayName: text(\"display_name\").notNull(),\n  defaultDays: integer(\"default_days\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n}, (table) => ({\n  uniqueHotelLeaveType: unique().on(table.hotelId, table.leaveType)\n}));\n\n// Leave Balances Table\nexport const leaveBalances = pgTable(\"leave_balances\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  userId: uuid(\"user_id\").references(() => users.id),\n  leaveType: text(\"leave_type\").notNull(),\n  totalDays: numeric(\"total_days\", { precision: 5, scale: 1 }).notNull(),\n  usedDays: numeric(\"used_days\", { precision: 5, scale: 1 }).default('0'),\n  remainingDays: numeric(\"remaining_days\", { precision: 5, scale: 1 }).notNull(),\n  year: integer(\"year\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n}, (table) => ({\n  uniqueUserLeaveType: unique().on(table.userId, table.leaveType, table.year)\n}));\n\n// Notifications Table\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  userId: uuid(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // leave_approved, leave_rejected, etc.\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  relatedId: uuid(\"related_id\"), // ID of related entity (e.g., leave request ID)\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Hotel Taxes Table\nexport const hotelTaxes = pgTable(\"hotel_taxes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  taxType: text(\"tax_type\").notNull(),\n  percent: numeric(\"percent\", { precision: 5, scale: 2 }),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n}, (table) => ({\n  uniqueHotelTax: unique().on(table.hotelId, table.taxType)\n}));\n\n// Discount Vouchers Table\nexport const vouchers = pgTable(\"vouchers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  code: text(\"code\").unique().notNull(),\n  discountAmount: numeric(\"discount_amount\", { precision: 12, scale: 2 }),\n  discountType: text(\"discount_type\"),\n  validFrom: timestamp(\"valid_from\", { withTimezone: true }),\n  validUntil: timestamp(\"valid_until\", { withTimezone: true }),\n  maxUses: integer(\"max_uses\"),\n  usedCount: integer(\"used_count\").default(0),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Vehicle Logs Table\nexport const vehicleLogs = pgTable(\"vehicle_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  vehicleNumber: text(\"vehicle_number\").notNull(),\n  vehicleType: text(\"vehicle_type\"),\n  driverName: text(\"driver_name\"),\n  purpose: text(\"purpose\"),\n  checkIn: timestamp(\"check_in\", { withTimezone: true }).defaultNow(),\n  checkOut: timestamp(\"check_out\", { withTimezone: true }),\n  recordedBy: uuid(\"recorded_by\").references(() => users.id)\n});\n\n// Security Alerts Table\nexport const securityAlerts = pgTable(\"security_alerts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  type: text(\"type\").notNull(),\n  description: text(\"description\").notNull(),\n  vehicleLogId: uuid(\"vehicle_log_id\").references(() => vehicleLogs.id),\n  performedBy: uuid(\"performed_by\").references(() => users.id),\n  overriddenBy: uuid(\"overridden_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Room Service Orders Table\nexport const roomServiceOrders = pgTable(\"room_service_orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  roomId: uuid(\"room_id\").references(() => rooms.id),\n  requestedBy: uuid(\"requested_by\").references(() => users.id),\n  status: text(\"status\").default('pending'),\n  specialInstructions: text(\"special_instructions\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Meal Plans Table\nexport const mealPlans = pgTable(\"meal_plans\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  planType: text(\"plan_type\").notNull(),\n  planName: text(\"plan_name\").notNull(),\n  pricePerPerson: numeric(\"price_per_person\", { precision: 12, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Meal Vouchers Table\nexport const mealVouchers = pgTable(\"meal_vouchers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  roomId: uuid(\"room_id\").references(() => rooms.id),\n  guestName: text(\"guest_name\").notNull(),\n  mealPlanId: uuid(\"meal_plan_id\").references(() => mealPlans.id),\n  mealPlanType: text(\"meal_plan_type\").notNull(),\n  numberOfPersons: integer(\"number_of_persons\").notNull(),\n  voucherDate: timestamp(\"voucher_date\", { withTimezone: true }).notNull(),\n  status: text(\"status\").default('unused'),\n  usedAt: timestamp(\"used_at\", { withTimezone: true }),\n  redeemedBy: uuid(\"redeemed_by\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Room Reservations Table\nexport const roomReservations = pgTable(\"room_reservations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  guestId: uuid(\"guest_id\").references(() => guests.id),\n  guestName: text(\"guest_name\").notNull(),\n  guestEmail: text(\"guest_email\"),\n  guestPhone: text(\"guest_phone\").notNull(),\n  roomId: uuid(\"room_id\").references(() => rooms.id).notNull(),\n  checkInDate: timestamp(\"check_in_date\", { withTimezone: true }).notNull(),\n  checkOutDate: timestamp(\"check_out_date\", { withTimezone: true }).notNull(),\n  numberOfPersons: integer(\"number_of_persons\").notNull(),\n  mealPlanId: uuid(\"meal_plan_id\").references(() => mealPlans.id),\n  roomPrice: numeric(\"room_price\", { precision: 12, scale: 2 }),\n  mealPlanPrice: numeric(\"meal_plan_price\", { precision: 12, scale: 2 }),\n  totalPrice: numeric(\"total_price\", { precision: 12, scale: 2 }),\n  paidAmount: numeric(\"paid_amount\", { precision: 12, scale: 2 }).default('0'),\n  specialRequests: text(\"special_requests\"),\n  guestType: text(\"guest_type\").default('walkin'),\n  status: text(\"status\").default('pending'),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Room Service Charges Table\nexport const roomServiceCharges = pgTable(\"room_service_charges\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  reservationId: uuid(\"reservation_id\").references(() => roomReservations.id, { onDelete: \"cascade\" }),\n  serviceId: uuid(\"service_id\").references(() => services.id),\n  serviceName: text(\"service_name\").notNull(),\n  serviceKind: text(\"service_kind\").notNull(),\n  quantity: numeric(\"quantity\", { precision: 12, scale: 3 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  unitPrice: numeric(\"unit_price\", { precision: 12, scale: 2 }).notNull(),\n  totalCharge: numeric(\"total_charge\", { precision: 12, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  addedBy: uuid(\"added_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Stock Requests Table\nexport const stockRequests = pgTable(\"stock_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  requestedBy: uuid(\"requested_by\").references(() => users.id).notNull(),\n  itemId: uuid(\"item_id\").references(() => inventoryItems.id).notNull(),\n  quantity: numeric(\"quantity\", { precision: 12, scale: 3 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  status: text(\"status\").default('pending').notNull(),\n  approvedBy: uuid(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\", { withTimezone: true }),\n  deliveredAt: timestamp(\"delivered_at\", { withTimezone: true }),\n  department: text(\"department\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Service Packages Table\nexport const servicePackages = pgTable(\"service_packages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  basePrice: numeric(\"base_price\", { precision: 12, scale: 2 }).notNull(),\n  items: jsonb(\"items\").default('[]'),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow()\n});\n\n// Hall Bookings Table\nexport const hallBookings = pgTable(\"hall_bookings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  hallId: uuid(\"hall_id\").references(() => halls.id).notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  customerEmail: text(\"customer_email\"),\n  guestId: uuid(\"guest_id\").references(() => guests.id),\n  isInHouseGuest: boolean(\"is_in_house_guest\").default(false),\n  bookingStartTime: timestamp(\"booking_start_time\", { withTimezone: true }).notNull(),\n  bookingEndTime: timestamp(\"booking_end_time\", { withTimezone: true }).notNull(),\n  duration: numeric(\"duration\", { precision: 6, scale: 2 }),\n  numberOfPeople: integer(\"number_of_people\"),\n  actualNumberOfPeople: integer(\"actual_number_of_people\"),\n  hallBasePrice: numeric(\"hall_base_price\", { precision: 12, scale: 2 }),\n  foodServices: jsonb(\"food_services\").default('[]'),\n  otherServices: jsonb(\"other_services\").default('[]'),\n  servicePackages: jsonb(\"service_packages\").default('[]'),\n  customServices: text(\"custom_services\"),\n  totalAmount: numeric(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  advancePaid: numeric(\"advance_paid\", { precision: 12, scale: 2 }).default('0'),\n  balanceDue: numeric(\"balance_due\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\"),\n  status: text(\"status\").default('quotation').notNull(),\n  specialRequests: text(\"special_requests\"),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  confirmedBy: uuid(\"confirmed_by\").references(() => users.id),\n  cancelledBy: uuid(\"cancelled_by\").references(() => users.id),\n  cancellationReason: text(\"cancellation_reason\"),\n  finalizedBy: uuid(\"finalized_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n  confirmedAt: timestamp(\"confirmed_at\", { withTimezone: true }),\n  cancelledAt: timestamp(\"cancelled_at\", { withTimezone: true }),\n  finalizedAt: timestamp(\"finalized_at\", { withTimezone: true })\n});\n\n// Booking Payment Records Table\nexport const bookingPayments = pgTable(\"booking_payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id, { onDelete: \"cascade\" }),\n  bookingId: uuid(\"booking_id\").references(() => hallBookings.id, { onDelete: \"cascade\" }),\n  amount: numeric(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  receiptNumber: text(\"receipt_number\"),\n  notes: text(\"notes\"),\n  recordedBy: uuid(\"recorded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Restaurant Bills Table\nexport const restaurantBills = pgTable(\"restaurant_bills\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  billNumber: text(\"bill_number\").notNull(),\n  tableIds: text(\"table_ids\").array().notNull(),\n  orderIds: text(\"order_ids\").array().notNull(),\n  subtotal: numeric(\"subtotal\", { precision: 14, scale: 2 }).notNull(),\n  taxBreakdown: jsonb(\"tax_breakdown\").default('{}'),\n  totalTax: numeric(\"total_tax\", { precision: 14, scale: 2 }).default('0'),\n  discount: numeric(\"discount\", { precision: 14, scale: 2 }).default('0'),\n  voucherId: uuid(\"voucher_id\").references(() => vouchers.id),\n  voucherCode: text(\"voucher_code\"),\n  tipType: text(\"tip_type\"),\n  tipValue: numeric(\"tip_value\", { precision: 12, scale: 2 }).default('0'),\n  tipAmount: numeric(\"tip_amount\", { precision: 12, scale: 2 }).default('0'),\n  serviceCharge: numeric(\"service_charge\", { precision: 12, scale: 2 }).default('0'),\n  grandTotal: numeric(\"grand_total\", { precision: 14, scale: 2 }).notNull(),\n  splitMode: text(\"split_mode\"),\n  splitDetails: jsonb(\"split_details\"),\n  items: jsonb(\"items\").default('[]'),\n  status: text(\"status\").default('draft').notNull(),\n  amendmentNote: text(\"amendment_note\"),\n  originalBillId: uuid(\"original_bill_id\"),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  amendedBy: uuid(\"amended_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  amendedAt: timestamp(\"amended_at\", { withTimezone: true }),\n  finalizedAt: timestamp(\"finalized_at\", { withTimezone: true })\n});\n\n// Bill Payments Table\nexport const billPayments = pgTable(\"bill_payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  billId: uuid(\"bill_id\").references(() => restaurantBills.id, { onDelete: \"cascade\" }),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  amount: numeric(\"amount\", { precision: 14, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  transactionId: uuid(\"transaction_id\").references(() => transactions.id),\n  reference: text(\"reference\"),\n  receivedBy: uuid(\"received_by\").references(() => users.id),\n  isVoided: boolean(\"is_voided\").default(false),\n  voidedAt: timestamp(\"voided_at\", { withTimezone: true }),\n  voidedBy: uuid(\"voided_by\").references(() => users.id),\n  voidReason: text(\"void_reason\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\n// Relations\nexport const hotelRelations = relations(hotels, ({ many }) => ({\n  users: many(users),\n  rooms: many(rooms),\n  halls: many(halls),\n  pools: many(pools),\n  services: many(services),\n  inventoryItems: many(inventoryItems),\n  vendors: many(vendors),\n  transactions: many(transactions),\n  maintenanceRequests: many(maintenanceRequests),\n  tasks: many(tasks),\n  restaurantTables: many(restaurantTables),\n  menuCategories: many(menuCategories),\n  menuItems: many(menuItems),\n  kotOrders: many(kotOrders),\n  payments: many(payments),\n  attendance: many(attendance),\n  hotelTaxes: many(hotelTaxes),\n  vouchers: many(vouchers),\n  vehicleLogs: many(vehicleLogs),\n  roomServiceOrders: many(roomServiceOrders),\n  mealPlans: many(mealPlans),\n  stockRequests: many(stockRequests),\n  hallBookings: many(hallBookings),\n  servicePackages: many(servicePackages),\n  bookingPayments: many(bookingPayments),\n  restaurantBills: many(restaurantBills),\n  billPayments: many(billPayments)\n}));\n\nexport const userRelations = relations(users, ({ one, many }) => ({\n  hotel: one(hotels, {\n    fields: [users.hotelId],\n    references: [hotels.id]\n  }),\n  role: one(roles, {\n    fields: [users.roleId],\n    references: [roles.id]\n  }),\n  sessions: many(userSessions),\n  createdTasks: many(tasks, { relationName: \"createdTasks\" }),\n  assignedTasks: many(tasks, { relationName: \"assignedTasks\" }),\n  transactions: many(transactions),\n  payments: many(payments),\n  attendance: many(attendance),\n  vouchers: many(vouchers),\n  vehicleLogs: many(vehicleLogs),\n  roomServiceOrders: many(roomServiceOrders)\n}));\n\nexport const roomRelations = relations(rooms, ({ one, many }) => ({\n  hotel: one(hotels, {\n    fields: [rooms.hotelId],\n    references: [hotels.id]\n  }),\n  roomType: one(roomTypes, {\n    fields: [rooms.roomTypeId],\n    references: [roomTypes.id]\n  }),\n  roomServiceOrders: many(roomServiceOrders)\n}));\n\nexport const menuItemRelations = relations(menuItems, ({ one }) => ({\n  hotel: one(hotels, {\n    fields: [menuItems.hotelId],\n    references: [hotels.id]\n  }),\n  category: one(menuCategories, {\n    fields: [menuItems.categoryId],\n    references: [menuCategories.id]\n  })\n}));\n\nexport const kotOrderRelations = relations(kotOrders, ({ one, many }) => ({\n  hotel: one(hotels, {\n    fields: [kotOrders.hotelId],\n    references: [hotels.id]\n  }),\n  table: one(restaurantTables, {\n    fields: [kotOrders.tableId],\n    references: [restaurantTables.id]\n  }),\n  createdBy: one(users, {\n    fields: [kotOrders.createdBy],\n    references: [users.id]\n  }),\n  items: many(kotItems)\n}));\n\nexport const kotItemRelations = relations(kotItems, ({ one }) => ({\n  kot: one(kotOrders, {\n    fields: [kotItems.kotId],\n    references: [kotOrders.id]\n  })\n}));\n\nexport const taskRelations = relations(tasks, ({ one }) => ({\n  hotel: one(hotels, {\n    fields: [tasks.hotelId],\n    references: [hotels.id]\n  }),\n  createdBy: one(users, {\n    fields: [tasks.createdBy],\n    references: [users.id],\n    relationName: \"createdTasks\"\n  }),\n  assignedTo: one(users, {\n    fields: [tasks.assignedTo],\n    references: [users.id],\n    relationName: \"assignedTasks\"\n  })\n}));\n\nexport const hallRelations = relations(halls, ({ one, many }) => ({\n  hotel: one(hotels, {\n    fields: [halls.hotelId],\n    references: [hotels.id]\n  }),\n  bookings: many(hallBookings)\n}));\n\nexport const hallBookingRelations = relations(hallBookings, ({ one, many }) => ({\n  hotel: one(hotels, {\n    fields: [hallBookings.hotelId],\n    references: [hotels.id]\n  }),\n  hall: one(halls, {\n    fields: [hallBookings.hallId],\n    references: [halls.id]\n  }),\n  guest: one(guests, {\n    fields: [hallBookings.guestId],\n    references: [guests.id]\n  }),\n  createdBy: one(users, {\n    fields: [hallBookings.createdBy],\n    references: [users.id]\n  }),\n  payments: many(bookingPayments)\n}));\n\nexport const servicePackageRelations = relations(servicePackages, ({ one }) => ({\n  hotel: one(hotels, {\n    fields: [servicePackages.hotelId],\n    references: [hotels.id]\n  })\n}));\n\nexport const bookingPaymentRelations = relations(bookingPayments, ({ one }) => ({\n  hotel: one(hotels, {\n    fields: [bookingPayments.hotelId],\n    references: [hotels.id]\n  }),\n  booking: one(hallBookings, {\n    fields: [bookingPayments.bookingId],\n    references: [hallBookings.id]\n  }),\n  recordedBy: one(users, {\n    fields: [bookingPayments.recordedBy],\n    references: [users.id]\n  })\n}));\n\nexport const restaurantBillRelations = relations(restaurantBills, ({ one, many }) => ({\n  hotel: one(hotels, {\n    fields: [restaurantBills.hotelId],\n    references: [hotels.id]\n  }),\n  createdBy: one(users, {\n    fields: [restaurantBills.createdBy],\n    references: [users.id]\n  }),\n  payments: many(billPayments)\n}));\n\nexport const billPaymentRelations = relations(billPayments, ({ one }) => ({\n  bill: one(restaurantBills, {\n    fields: [billPayments.billId],\n    references: [restaurantBills.id]\n  }),\n  hotel: one(hotels, {\n    fields: [billPayments.hotelId],\n    references: [hotels.id]\n  }),\n  receivedBy: one(users, {\n    fields: [billPayments.receivedBy],\n    references: [users.id]\n  })\n}));\n\n// Schema exports for forms\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  deletedAt: true\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertHotelSchema = createInsertSchema(hotels).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  deletedAt: true\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  deletedAt: true\n});\n\nexport const insertRoomStatusLogSchema = createInsertSchema(roomStatusLogs).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertMenuItemSchema = createInsertSchema(menuItems).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  price: z.union([z.string(), z.number()])\n    .transform((val) => String(val))\n    .refine((val) => {\n      const num = parseFloat(val);\n      return !isNaN(num) && num >= 0 && num <= 99999999;\n    }, {\n      message: \"Price must be a non-negative number (max 99,999,999)\"\n    })\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n}).extend({\n  dueDate: z.union([z.string(), z.date(), z.null(), z.undefined()])\n    .transform((val) => {\n      if (!val) return null;\n      if (val instanceof Date) return val;\n      return new Date(val);\n    })\n    .optional()\n});\n\nexport const insertRoomCleaningQueueSchema = createInsertSchema(roomCleaningQueue).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport type InsertRoomCleaningQueue = z.infer<typeof insertRoomCleaningQueueSchema>;\nexport type SelectRoomCleaningQueue = typeof roomCleaningQueue.$inferSelect;\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n  deletedAt: true\n}).refine(\n  (data) => {\n    // For revenue transactions (those with _in in txnType), require a valid paymentMethod\n    if (data.txnType && (data.txnType.includes('_in') || data.txnType === 'revenue')) {\n      return data.paymentMethod && ['cash', 'pos', 'fonepay'].includes(data.paymentMethod);\n    }\n    // For vendor payments, allow additional payment methods\n    if (data.txnType === 'vendor_payment') {\n      return data.paymentMethod && ['cash', 'cheque', 'bank_transfer', 'digital_wallet', 'pos', 'fonepay'].includes(data.paymentMethod);\n    }\n    return true;\n  },\n  {\n    message: \"Invalid payment method for this transaction type\",\n    path: ['paymentMethod']\n  }\n);\n\nexport const insertMaintenanceRequestSchema = createInsertSchema(maintenanceRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  approvedAt: true,\n  declinedAt: true\n});\n\nexport const insertMaintenanceStatusHistorySchema = createInsertSchema(maintenanceStatusHistory).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertVoucherSchema = createInsertSchema(vouchers).omit({\n  id: true,\n  createdAt: true,\n  usedCount: true\n}).extend({\n  validFrom: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val)),\n  validUntil: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val))\n});\n\nexport const insertRoomTypeSchema = createInsertSchema(roomTypes).omit({\n  id: true\n});\n\nexport const insertHallSchema = createInsertSchema(halls).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertPoolSchema = createInsertSchema(pools).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true\n});\n\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  approvalDate: true\n}).extend({\n  startDate: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val)),\n  endDate: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val))\n});\n\nexport const insertLeavePolicySchema = createInsertSchema(leavePolicies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertLeaveBalanceSchema = createInsertSchema(leaveBalances).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n}).extend({\n  totalDays: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  usedDays: z.union([z.string(), z.number()]).transform((val) => String(val)).optional(),\n  remainingDays: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertWastageSchema = createInsertSchema(wastages).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertVehicleLogSchema = createInsertSchema(vehicleLogs).omit({\n  id: true,\n  hotelId: true,\n  recordedBy: true,\n  checkIn: true\n});\n\nexport const insertSecurityAlertSchema = createInsertSchema(securityAlerts).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertMealPlanSchema = createInsertSchema(mealPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n}).extend({\n  pricePerPerson: z.union([z.string(), z.number()])\n    .transform((val) => String(val))\n    .refine((val) => {\n      const num = parseFloat(val);\n      return !isNaN(num) && num >= 0 && num <= 99999999;\n    }, {\n      message: \"Price per person must be a non-negative number (max 99,999,999)\"\n    })\n});\n\nexport const insertMealVoucherSchema = createInsertSchema(mealVouchers).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  voucherDate: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val))\n});\n\nexport const insertRoomReservationSchema = createInsertSchema(roomReservations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n}).extend({\n  checkInDate: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val)),\n  checkOutDate: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val))\n});\n\nexport const insertRoomServiceChargeSchema = createInsertSchema(roomServiceCharges).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  quantity: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  unitPrice: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  totalCharge: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport const insertVendorSchema = createInsertSchema(vendors).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertGuestSchema = createInsertSchema(guests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  deletedAt: true,\n  currentReservationId: true\n});\n\nexport const insertStockRequestSchema = createInsertSchema(stockRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  approvedAt: true,\n  deliveredAt: true\n}).extend({\n  quantity: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport const insertHallBookingSchema = createInsertSchema(hallBookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  confirmedAt: true,\n  cancelledAt: true\n}).extend({\n  bookingStartTime: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val)),\n  bookingEndTime: z.string().or(z.date()).transform((val) => val instanceof Date ? val : new Date(val)),\n  numberOfPeople: z.union([z.string(), z.number()])\n    .transform((val) => Number(val))\n    .refine((val) => val >= 1 && val <= 100000, {\n      message: \"Number of people must be between 1 and 100,000\"\n    }),\n  hallBasePrice: z.union([z.string(), z.number()])\n    .transform((val) => String(val))\n    .refine((val) => {\n      const num = parseFloat(val);\n      return !isNaN(num) && num >= 0 && num <= 99999999;\n    }, {\n      message: \"Hall base price must be a non-negative number (max 99,999,999)\"\n    }),\n  totalAmount: z.union([z.string(), z.number()])\n    .transform((val) => String(val))\n    .refine((val) => {\n      const num = parseFloat(val);\n      return !isNaN(num) && num >= 0 && num <= 99999999;\n    }, {\n      message: \"Total amount must be a non-negative number (max 99,999,999)\"\n    }),\n  advancePaid: z.union([z.string(), z.number()])\n    .transform((val) => String(val))\n    .refine((val) => {\n      const num = parseFloat(val);\n      return !isNaN(num) && num >= 0 && num <= 99999999;\n    }, {\n      message: \"Advance paid must be a non-negative number (max 99,999,999)\"\n    }),\n  balanceDue: z.union([z.string(), z.number()])\n    .transform((val) => String(val))\n    .refine((val) => {\n      const num = parseFloat(val);\n      return !isNaN(num) && num >= -99999999 && num <= 99999999;\n    }, {\n      message: \"Balance due must be a valid number (between -99,999,999 and 99,999,999)\"\n    })\n});\n\nexport type InsertHallBooking = z.infer<typeof insertHallBookingSchema>;\nexport type SelectHallBooking = typeof hallBookings.$inferSelect;\n\nexport const insertServicePackageSchema = createInsertSchema(servicePackages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n}).extend({\n  basePrice: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport type InsertServicePackage = z.infer<typeof insertServicePackageSchema>;\nexport type SelectServicePackage = typeof servicePackages.$inferSelect;\n\nexport const insertBookingPaymentSchema = createInsertSchema(bookingPayments).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  amount: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport type InsertBookingPayment = z.infer<typeof insertBookingPaymentSchema>;\nexport type SelectBookingPayment = typeof bookingPayments.$inferSelect;\n\nexport const updateKotItemSchema = z.object({\n  status: z.enum(['pending', 'approved', 'declined', 'ready', 'served', 'completed', 'cancelled']).optional(),\n  qty: z.number().int().min(1).optional(),\n  declineReason: z.string().optional(),\n  inventoryVerified: z.boolean().optional()\n}).refine(\n  (data) => !data.status || data.status !== 'declined' || (data.declineReason && data.declineReason.trim().length >= 10),\n  { message: \"Decline reason requires minimum 10 characters when declining a KOT item\", path: ['declineReason'] }\n).refine(\n  (data) => !data.status || data.status !== 'cancelled' || (data.declineReason && data.declineReason.trim().length >= 10),\n  { message: \"Cancellation reason requires minimum 10 characters\", path: ['declineReason'] }\n);\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UserWithRole = User & { role?: Role };\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type Hotel = typeof hotels.$inferSelect;\nexport type InsertHotel = z.infer<typeof insertHotelSchema>;\nexport type Room = typeof rooms.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type RoomStatusLog = typeof roomStatusLogs.$inferSelect;\nexport type InsertRoomStatusLog = z.infer<typeof insertRoomStatusLogSchema>;\nexport type MenuItem = typeof menuItems.$inferSelect;\nexport type InsertMenuItem = z.infer<typeof insertMenuItemSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type MaintenanceRequest = typeof maintenanceRequests.$inferSelect;\nexport type InsertMaintenanceRequest = z.infer<typeof insertMaintenanceRequestSchema>;\nexport type MaintenanceStatusHistory = typeof maintenanceStatusHistory.$inferSelect;\nexport type InsertMaintenanceStatusHistory = z.infer<typeof insertMaintenanceStatusHistorySchema>;\nexport type InsertVoucher = z.infer<typeof insertVoucherSchema>;\nexport type KotOrder = typeof kotOrders.$inferSelect;\nexport type KotItem = typeof kotItems.$inferSelect;\nexport type Role = typeof roles.$inferSelect;\nexport type InventoryItem = typeof inventoryItems.$inferSelect;\nexport type Vendor = typeof vendors.$inferSelect;\nexport type InsertVendor = z.infer<typeof insertVendorSchema>;\nexport type RestaurantTable = typeof restaurantTables.$inferSelect;\nexport type MenuCategory = typeof menuCategories.$inferSelect;\nexport type HotelTax = typeof hotelTaxes.$inferSelect;\nexport type Voucher = typeof vouchers.$inferSelect;\nexport type VehicleLog = typeof vehicleLogs.$inferSelect;\nexport type InsertVehicleLog = z.infer<typeof insertVehicleLogSchema>;\nexport type SecurityAlert = typeof securityAlerts.$inferSelect;\nexport type InsertSecurityAlert = z.infer<typeof insertSecurityAlertSchema>;\nexport type RoomServiceOrder = typeof roomServiceOrders.$inferSelect;\nexport type RoomType = typeof roomTypes.$inferSelect;\nexport type InsertRoomType = z.infer<typeof insertRoomTypeSchema>;\nexport type Hall = typeof halls.$inferSelect;\nexport type InsertHall = z.infer<typeof insertHallSchema>;\nexport type Pool = typeof pools.$inferSelect;\nexport type InsertPool = z.infer<typeof insertPoolSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type InventoryConsumption = typeof inventoryConsumptions.$inferSelect;\nexport type Payment = typeof payments.$inferSelect;\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;\nexport type InsertLeaveRequest = z.infer<typeof insertLeaveRequestSchema>;\nexport type LeavePolicy = typeof leavePolicies.$inferSelect;\nexport type InsertLeavePolicy = z.infer<typeof insertLeavePolicySchema>;\nexport type LeaveBalance = typeof leaveBalances.$inferSelect;\nexport type InsertLeaveBalance = z.infer<typeof insertLeaveBalanceSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Wastage = typeof wastages.$inferSelect;\nexport type InsertWastage = z.infer<typeof insertWastageSchema>;\nexport type MealPlan = typeof mealPlans.$inferSelect;\nexport type InsertMealPlan = z.infer<typeof insertMealPlanSchema>;\nexport type MealVoucher = typeof mealVouchers.$inferSelect;\nexport type InsertMealVoucher = z.infer<typeof insertMealVoucherSchema>;\nexport type RoomReservation = typeof roomReservations.$inferSelect;\nexport type InsertRoomReservation = z.infer<typeof insertRoomReservationSchema>;\nexport type RoomServiceCharge = typeof roomServiceCharges.$inferSelect;\nexport type InsertRoomServiceCharge = z.infer<typeof insertRoomServiceChargeSchema>;\nexport type Guest = typeof guests.$inferSelect;\nexport type InsertGuest = z.infer<typeof insertGuestSchema>;\nexport type StockRequest = typeof stockRequests.$inferSelect;\nexport type InsertStockRequest = z.infer<typeof insertStockRequestSchema>;\n\nexport const insertRestaurantBillSchema = createInsertSchema(restaurantBills).omit({\n  id: true,\n  createdAt: true,\n  amendedAt: true,\n  finalizedAt: true\n}).extend({\n  subtotal: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  totalTax: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  discount: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  tipValue: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  tipAmount: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  serviceCharge: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  grandTotal: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport type InsertRestaurantBill = z.infer<typeof insertRestaurantBillSchema>;\nexport type SelectRestaurantBill = typeof restaurantBills.$inferSelect;\n\nexport const insertBillPaymentSchema = createInsertSchema(billPayments).omit({\n  id: true,\n  createdAt: true,\n  voidedAt: true\n}).extend({\n  amount: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport type InsertBillPayment = z.infer<typeof insertBillPaymentSchema>;\nexport type SelectBillPayment = typeof billPayments.$inferSelect;\n\n// Checkout Override Logs Table\nexport const checkoutOverrideLogs = pgTable(\"checkout_override_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reservationId: uuid(\"reservation_id\").references(() => roomReservations.id),\n  balanceDue: numeric(\"balance_due\", { precision: 14, scale: 2 }),\n  overriddenBy: uuid(\"overridden_by\").references(() => users.id),\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\nexport const insertCheckoutOverrideLogSchema = createInsertSchema(checkoutOverrideLogs).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  balanceDue: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport type InsertCheckoutOverrideLog = z.infer<typeof insertCheckoutOverrideLogSchema>;\nexport type CheckoutOverrideLog = typeof checkoutOverrideLogs.$inferSelect;\n\n// Price Change Logs Table\nexport const priceChangeLogs = pgTable(\"price_change_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  itemId: uuid(\"item_id\"),\n  itemType: text(\"item_type\"),\n  itemName: text(\"item_name\"),\n  previousPrice: numeric(\"previous_price\", { precision: 12, scale: 2 }),\n  newPrice: numeric(\"new_price\", { precision: 12, scale: 2 }),\n  changedBy: uuid(\"changed_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\nexport const insertPriceChangeLogSchema = createInsertSchema(priceChangeLogs).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  previousPrice: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  newPrice: z.union([z.string(), z.number()]).transform((val) => String(val))\n});\n\nexport type InsertPriceChangeLog = z.infer<typeof insertPriceChangeLogSchema>;\nexport type PriceChangeLog = typeof priceChangeLogs.$inferSelect;\n\n// Tax Change Logs Table\nexport const taxChangeLogs = pgTable(\"tax_change_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hotelId: uuid(\"hotel_id\").references(() => hotels.id),\n  taxType: text(\"tax_type\").notNull(),\n  previousPercent: numeric(\"previous_percent\", { precision: 5, scale: 2 }),\n  newPercent: numeric(\"new_percent\", { precision: 5, scale: 2 }),\n  previousActive: boolean(\"previous_active\"),\n  newActive: boolean(\"new_active\"),\n  changedBy: uuid(\"changed_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow()\n});\n\nexport const insertTaxChangeLogSchema = createInsertSchema(taxChangeLogs).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  previousPercent: z.union([z.string(), z.number(), z.null()]).transform((val) => val === null ? null : String(val)),\n  newPercent: z.union([z.string(), z.number(), z.null()]).transform((val) => val === null ? null : String(val))\n});\n\nexport type InsertTaxChangeLog = z.infer<typeof insertTaxChangeLogSchema>;\nexport type TaxChangeLog = typeof taxChangeLogs.$inferSelect;\n","size_bytes":60734},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    \n    try {\n      const json = JSON.parse(text);\n      throw new Error(json.message || json.errorMessage || \"An error occurred\");\n    } catch (parseError) {\n      throw new Error(text || \"An error occurred\");\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1554},"client/src/pages/dashboard/housekeeping-supervisor/maintenance-requests.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function HousekeepingSupervisorMaintenanceRequests() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: maintenanceRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/maintenance-requests\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch maintenance requests\");\n      const data = await response.json();\n      return data.filter((request: any) => \n        request.reportedBy?.role?.name === 'housekeeping_staff'\n      );\n    }\n  });\n\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await fetch(`/api/hotels/current/maintenance-requests/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status })\n      });\n      if (!response.ok) throw new Error(\"Failed to update request\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Request updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleDecline = (request: any) => {\n    updateRequestMutation.mutate({\n      id: request.id,\n      status: \"declined\"\n    });\n  };\n\n  const handleFixing = (request: any) => {\n    updateRequestMutation.mutate({\n      id: request.id,\n      status: \"fixing\"\n    });\n  };\n\n  const handleResolve = (request: any) => {\n    updateRequestMutation.mutate({\n      id: request.id,\n      status: \"resolved\"\n    });\n  };\n\n  const columns = [\n    { key: \"title\", label: \"Issue\", sortable: true },\n    { key: \"location\", label: \"Location\", sortable: true },\n    { \n      key: \"reportedBy\", \n      label: \"Reported By\", \n      render: (value: any) => value?.username || \"Unknown\"\n    },\n    { key: \"priority\", label: \"Priority\", sortable: true },\n    { key: \"status\", label: \"Status\", sortable: true },\n    { \n      key: \"createdAt\", \n      label: \"Reported At\", \n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleString('en-GB', { timeZone: 'Asia/Kathmandu' })\n    }\n  ];\n\n  const actions = [\n    {\n      label: \"Declined\",\n      action: (row: any) => handleDecline(row),\n      // Only show if status is pending or fixing (not approved or resolved)\n      show: (row: any) => row.status !== \"approved\" && row.status !== \"resolved\" && row.status !== \"declined\"\n    },\n    {\n      label: \"Fixing\",\n      action: (row: any) => handleFixing(row),\n      // Only show if status is pending or approved (not resolved)\n      show: (row: any) => row.status !== \"resolved\" && row.status !== \"fixing\" && row.status !== \"declined\"\n    },\n    {\n      label: \"Resolved\",\n      action: (row: any) => handleResolve(row),\n      // Only show if status is approved or fixing (not already resolved or declined)\n      show: (row: any) => (row.status === \"approved\" || row.status === \"fixing\") && row.status !== \"resolved\"\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <DataTable\n        title=\"Maintenance Requests from Housekeeping Staff\"\n        data={maintenanceRequests}\n        columns={columns}\n        actions={actions}\n        searchPlaceholder=\"Search maintenance requests...\"\n        isLoading={isLoading}\n      />\n    </DashboardLayout>\n  );\n}\n","size_bytes":3955},"client/src/pages/dashboard/manager/room-pricing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { DollarSign, Edit, Check, X } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\ninterface RoomType {\n  id: number;\n  hotelId: string;\n  name: string;\n  description?: string;\n  priceInhouse?: string;\n  priceWalkin?: string;\n}\n\nexport default function RoomPricingPage() {\n  const [roomTypes, setRoomTypes] = useState<RoomType[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingRoomType, setEditingRoomType] = useState<RoomType | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [priceInhouse, setPriceInhouse] = useState(\"\");\n  const [priceWalkin, setPriceWalkin] = useState(\"\");\n\n  useEffect(() => {\n    fetchRoomTypes();\n  }, []);\n\n  const fetchRoomTypes = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(\"/api/hotels/current/room-types\", {\n        credentials: \"include\"\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setRoomTypes(data);\n      } else {\n        toast.error(\"Failed to fetch room types\");\n      }\n    } catch (error) {\n      toast.error(\"Failed to fetch room types\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEditPricing = (roomType: RoomType) => {\n    setEditingRoomType(roomType);\n    setPriceInhouse(roomType.priceInhouse || \"\");\n    setPriceWalkin(roomType.priceWalkin || \"\");\n    setShowEditDialog(true);\n  };\n\n  const handleSavePricing = async () => {\n    if (!editingRoomType) return;\n\n    if (!priceInhouse || !priceWalkin) {\n      toast.error(\"Both in-house and walk-in prices are required\");\n      return;\n    }\n\n    if (isNaN(Number(priceInhouse)) || Number(priceInhouse) < 0) {\n      toast.error(\"Please enter a valid in-house price\");\n      return;\n    }\n\n    if (isNaN(Number(priceWalkin)) || Number(priceWalkin) < 0) {\n      toast.error(\"Please enter a valid walk-in price\");\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/room-types/${editingRoomType.id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          name: editingRoomType.name,\n          description: editingRoomType.description,\n          priceInhouse: Number(priceInhouse).toFixed(2),\n          priceWalkin: Number(priceWalkin).toFixed(2)\n        })\n      });\n\n      if (response.ok) {\n        toast.success(\"Room pricing updated successfully\");\n        fetchRoomTypes();\n        resetForm();\n      } else {\n        toast.error(\"Failed to update room pricing\");\n      }\n    } catch (error) {\n      toast.error(\"Failed to update room pricing\");\n    }\n  };\n\n  const resetForm = () => {\n    setEditingRoomType(null);\n    setPriceInhouse(\"\");\n    setPriceWalkin(\"\");\n    setShowEditDialog(false);\n  };\n\n  const formatPrice = (price?: string) => {\n    if (!price) return \"Not set\";\n    return `NPR ${Number(price).toLocaleString()}`;\n  };\n\n  const hasPricing = (roomType: RoomType) => {\n    return roomType.priceInhouse && roomType.priceWalkin;\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout title=\"Room Pricing\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">Loading room types...</div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  const roomTypesWithPricing = roomTypes.filter(rt => hasPricing(rt));\n  const roomTypesWithoutPricing = roomTypes.filter(rt => !hasPricing(rt));\n\n  return (\n    <DashboardLayout title=\"Room Pricing\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Room Pricing Management</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Set prices for different room types with separate rates for in-house guests and walk-in customers.\n          </p>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-8 w-8 text-green-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{roomTypes.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Room Types</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Check className=\"h-8 w-8 text-blue-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{roomTypesWithPricing.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Priced Room Types</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <X className=\"h-8 w-8 text-orange-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{roomTypesWithoutPricing.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Unpriced Room Types</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Room Types Pricing Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Room Type Pricing</CardTitle>\n            <CardDescription>\n              Configure daily rates for each room type\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {roomTypes.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <DollarSign className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No room types found</p>\n                <p className=\"text-sm\">Create room types in the Room Setup page first</p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Room Type</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>In-House Price</TableHead>\n                    <TableHead>Walk-in Price</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {roomTypes.map((roomType) => (\n                    <TableRow key={roomType.id}>\n                      <TableCell className=\"font-medium\">{roomType.name}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {roomType.description || \"No description\"}\n                      </TableCell>\n                      <TableCell>\n                        <span className={!roomType.priceInhouse ? \"text-muted-foreground italic\" : \"\"}>\n                          {formatPrice(roomType.priceInhouse)}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span className={!roomType.priceWalkin ? \"text-muted-foreground italic\" : \"\"}>\n                          {formatPrice(roomType.priceWalkin)}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        {hasPricing(roomType) ? (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                            <Check className=\"h-3 w-3 mr-1\" />\n                            Priced\n                          </span>\n                        ) : (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\">\n                            <X className=\"h-3 w-3 mr-1\" />\n                            Not Set\n                          </span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEditPricing(roomType)}\n                          data-testid={`button-edit-pricing-${roomType.id}`}\n                        >\n                          <Edit className=\"h-4 w-4 mr-1\" />\n                          {hasPricing(roomType) ? \"Edit\" : \"Set\"} Price\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Pricing Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={(open) => !open && resetForm()}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingRoomType ? `Set Pricing for ${editingRoomType.name}` : \"Set Room Pricing\"}\n              </DialogTitle>\n              <DialogDescription>\n                Configure daily rates for in-house guests and walk-in customers\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"price-inhouse\">In-House Price (NPR) *</Label>\n                <Input\n                  id=\"price-inhouse\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"2500.00\"\n                  value={priceInhouse}\n                  onChange={(e) => setPriceInhouse(e.target.value)}\n                  data-testid=\"input-price-inhouse\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Price per night for hotel guests\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"price-walkin\">Walk-in Price (NPR) *</Label>\n                <Input\n                  id=\"price-walkin\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"3500.00\"\n                  value={priceWalkin}\n                  onChange={(e) => setPriceWalkin(e.target.value)}\n                  data-testid=\"input-price-walkin\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Price per night for external customers\n                </p>\n              </div>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button onClick={handleSavePricing} className=\"flex-1\" data-testid=\"button-save-pricing\">\n                  Save Pricing\n                </Button>\n                <Button variant=\"outline\" onClick={resetForm} data-testid=\"button-cancel-pricing\">\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":11590},"server/seed.ts":{"content":"import { db } from './db';\nimport { roles, roleCreationPermissions, users, hotels, roomTypes, rooms, mealPlans, vouchers, menuCategories, menuItems, restaurantTables, halls, guests, transactions, vendors, maintenanceRequests, leavePolicies, services } from '@shared/schema';\nimport { hashPassword } from './auth';\nimport { eq, and } from 'drizzle-orm';\n\nconst ROLES = [\n  { name: 'super_admin', description: 'Full access across hotels' },\n  { name: 'owner', description: 'Hotel owner' },\n  { name: 'manager', description: 'Hotel manager' },\n  { name: 'housekeeping_supervisor', description: 'Housekeeping supervisor' },\n  { name: 'housekeeping_staff', description: 'Housekeeping staff' },\n  { name: 'restaurant_bar_manager', description: 'Restaurant and bar manager' },\n  { name: 'waiter', description: 'Waiter' },\n  { name: 'kitchen_staff', description: 'Kitchen staff' },\n  { name: 'bartender', description: 'Bartender' },\n  { name: 'barista', description: 'Barista' },\n  { name: 'security_head', description: 'Security head' },\n  { name: 'security_guard', description: 'Security guard' },\n  { name: 'surveillance_officer', description: 'Surveillance officer' },\n  { name: 'finance', description: 'Finance' },\n  { name: 'front_desk', description: 'Front desk' },\n  { name: 'cashier', description: 'Cashier' },\n  { name: 'storekeeper', description: 'Storekeeper' }\n];\n\nconst ROLE_PERMISSIONS = [\n  // Super admin permissions\n  { creatorRole: 'super_admin', createeRole: 'owner' },\n  { creatorRole: 'super_admin', createeRole: 'super_admin' },\n  \n  // Owner permissions\n  { creatorRole: 'owner', createeRole: 'manager' },\n  { creatorRole: 'owner', createeRole: 'housekeeping_supervisor' },\n  { creatorRole: 'owner', createeRole: 'restaurant_bar_manager' },\n  { creatorRole: 'owner', createeRole: 'security_head' },\n  { creatorRole: 'owner', createeRole: 'finance' },\n  \n  // Manager permissions\n  { creatorRole: 'manager', createeRole: 'housekeeping_supervisor' },\n  { creatorRole: 'manager', createeRole: 'restaurant_bar_manager' },\n  { creatorRole: 'manager', createeRole: 'security_head' },\n  { creatorRole: 'manager', createeRole: 'finance' },\n  { creatorRole: 'manager', createeRole: 'front_desk' },\n  { creatorRole: 'manager', createeRole: 'storekeeper' },\n  \n  // Housekeeping supervisor permissions\n  { creatorRole: 'housekeeping_supervisor', createeRole: 'housekeeping_staff' },\n  \n  // Restaurant & Bar manager permissions\n  { creatorRole: 'restaurant_bar_manager', createeRole: 'waiter' },\n  { creatorRole: 'restaurant_bar_manager', createeRole: 'kitchen_staff' },\n  { creatorRole: 'restaurant_bar_manager', createeRole: 'bartender' },\n  { creatorRole: 'restaurant_bar_manager', createeRole: 'barista' },\n  { creatorRole: 'restaurant_bar_manager', createeRole: 'cashier' },\n  \n  // Security head permissions\n  { creatorRole: 'security_head', createeRole: 'security_guard' },\n  { creatorRole: 'security_head', createeRole: 'surveillance_officer' }\n];\n\nasync function seed() {\n  console.log('🌱 Seeding database...');\n\n  try {\n    // Insert roles\n    console.log('📝 Creating roles...');\n    for (const role of ROLES) {\n      const existing = await db\n        .select()\n        .from(roles)\n        .where(eq(roles.name, role.name));\n      \n      if (existing.length === 0) {\n        await db.insert(roles).values(role);\n        console.log(`  ✓ Created role: ${role.name}`);\n      } else {\n        console.log(`  → Role already exists: ${role.name}`);\n      }\n    }\n\n    // Insert role creation permissions\n    console.log('\\n🔐 Setting up role creation permissions...');\n    for (const permission of ROLE_PERMISSIONS) {\n      try {\n        await db.insert(roleCreationPermissions).values(permission).onConflictDoNothing();\n      } catch (error) {\n        // Ignore conflicts\n      }\n    }\n    console.log('  ✓ Role permissions configured');\n\n    // Create superadmin user\n    console.log('\\n👤 Creating superadmin user...');\n    const superAdminRole = await db\n      .select()\n      .from(roles)\n      .where(eq(roles.name, 'super_admin'));\n\n    if (superAdminRole.length === 0) {\n      console.error('  ✗ Super admin role not found!');\n      process.exit(1);\n    }\n\n    const existingAdmin = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, 'superadmin'));\n\n    if (existingAdmin.length === 0) {\n      const passwordHash = await hashPassword('aef009750905865270b03eb27ceba80e');\n      \n      await db.insert(users).values({\n        username: 'superadmin',\n        roleId: superAdminRole[0].id,\n        passwordHash,\n        isActive: true,\n        email: 'superadmin@hotel.local',\n        hotelId: null\n      });\n      \n      console.log('  ✓ Superadmin user created');\n      console.log('    Username: superadmin');\n      console.log('    Password: aef009750905865270b03eb27ceba80e');\n    } else {\n      console.log('  → Superadmin already exists');\n    }\n\n    // Create test hotel\n    console.log('\\n🏨 Creating test hotel...');\n    const existingHotel = await db\n      .select()\n      .from(hotels)\n      .where(eq(hotels.name, 'Test Hotel'));\n\n    let testHotel;\n    if (existingHotel.length === 0) {\n      const [newHotel] = await db.insert(hotels).values({\n        name: 'Test Hotel',\n        address: 'Kathmandu, Nepal',\n        phone: '+977-1-1234567'\n      }).returning();\n      testHotel = newHotel;\n      console.log('  ✓ Test hotel created');\n    } else {\n      testHotel = existingHotel[0];\n      console.log('  → Test hotel already exists');\n    }\n\n    // Get role IDs\n    const ownerRole = await db.select().from(roles).where(eq(roles.name, 'owner'));\n    const managerRole = await db.select().from(roles).where(eq(roles.name, 'manager'));\n    const baristaRole = await db.select().from(roles).where(eq(roles.name, 'barista'));\n    const storekeeperRole = await db.select().from(roles).where(eq(roles.name, 'storekeeper'));\n    const frontDeskRole = await db.select().from(roles).where(eq(roles.name, 'front_desk'));\n    const restaurantBarManagerRole = await db.select().from(roles).where(eq(roles.name, 'restaurant_bar_manager'));\n    const waiterRole = await db.select().from(roles).where(eq(roles.name, 'waiter'));\n    const bartenderRole = await db.select().from(roles).where(eq(roles.name, 'bartender'));\n    const cashierRole = await db.select().from(roles).where(eq(roles.name, 'cashier'));\n    const housekeepingSupervisorRole = await db.select().from(roles).where(eq(roles.name, 'housekeeping_supervisor'));\n    const housekeepingStaffRole = await db.select().from(roles).where(eq(roles.name, 'housekeeping_staff'));\n    const financeRole = await db.select().from(roles).where(eq(roles.name, 'finance'));\n    const securityHeadRole = await db.select().from(roles).where(eq(roles.name, 'security_head'));\n    const surveillanceOfficerRole = await db.select().from(roles).where(eq(roles.name, 'surveillance_officer'));\n\n    // Create test users\n    console.log('\\n👥 Creating test users...');\n    \n    const testUsers = [\n      {\n        username: 'owner',\n        password: 'owner123',\n        roleId: ownerRole[0].id,\n        email: 'owner@testhotel.local'\n      },\n      {\n        username: 'manager',\n        password: 'manager',\n        roleId: managerRole[0].id,\n        email: 'manager@testhotel.local'\n      },\n      {\n        username: 'barista',\n        password: 'barista',\n        roleId: baristaRole[0].id,\n        email: 'barista@testhotel.local'\n      },\n      {\n        username: 'store',\n        password: 'storekeeper',\n        roleId: storekeeperRole[0].id,\n        email: 'storekeeper@testhotel.local'\n      },\n      {\n        username: 'sita',\n        password: 'sitasita',\n        roleId: frontDeskRole[0].id,\n        email: 'sita@testhotel.local'\n      },\n      {\n        username: 'rbmanager',\n        password: 'rbmanager',\n        roleId: restaurantBarManagerRole[0].id,\n        email: 'rbmanager@testhotel.local'\n      },\n      {\n        username: 'waiter',\n        password: 'waiter',\n        roleId: waiterRole[0].id,\n        email: 'waiter@testhotel.local'\n      },\n      {\n        username: 'bartender',\n        password: 'bartender',\n        roleId: bartenderRole[0].id,\n        email: 'bartender@testhotel.local'\n      },\n      {\n        username: 'cashier',\n        password: 'cashier',\n        roleId: cashierRole[0].id,\n        email: 'cashier@testhotel.local'\n      },\n      {\n        username: 'hksupervisor',\n        password: 'hksupervisor',\n        roleId: housekeepingSupervisorRole[0].id,\n        email: 'hksupervisor@testhotel.local'\n      },\n      {\n        username: 'hkstaff',\n        password: 'hkstaff',\n        roleId: housekeepingStaffRole[0].id,\n        email: 'hkstaff@testhotel.local'\n      },\n      {\n        username: 'finance',\n        password: 'finance',\n        roleId: financeRole[0].id,\n        email: 'finance@testhotel.local'\n      },\n      {\n        username: 'securityhead',\n        password: 'securityhead',\n        roleId: securityHeadRole[0].id,\n        email: 'securityhead@testhotel.local'\n      },\n      {\n        username: 'surveillance',\n        password: 'surveillance',\n        roleId: surveillanceOfficerRole[0].id,\n        email: 'surveillance@testhotel.local'\n      }\n    ];\n\n    for (const user of testUsers) {\n      const existing = await db\n        .select()\n        .from(users)\n        .where(eq(users.username, user.username));\n\n      if (existing.length === 0) {\n        const passwordHash = await hashPassword(user.password);\n        await db.insert(users).values({\n          username: user.username,\n          roleId: user.roleId,\n          passwordHash,\n          isActive: true,\n          email: user.email,\n          hotelId: testHotel.id\n        });\n        console.log(`  ✓ Created user: ${user.username} (password: ${user.password})`);\n      } else {\n        console.log(`  → User already exists: ${user.username}`);\n      }\n    }\n\n    // Create leave policies\n    console.log('\\n📋 Creating leave policies...');\n    const leavePolicyData = [\n      { leaveType: 'sick', displayName: 'Sick Leave', defaultDays: 10 },\n      { leaveType: 'vacation', displayName: 'Vacation Leave', defaultDays: 15 },\n      { leaveType: 'personal', displayName: 'Personal Leave', defaultDays: 5 },\n      { leaveType: 'emergency', displayName: 'Emergency Leave', defaultDays: 5 },\n      { leaveType: 'family', displayName: 'Family Leave', defaultDays: 5 }\n    ];\n\n    for (const policy of leavePolicyData) {\n      const existing = await db\n        .select()\n        .from(leavePolicies)\n        .where(and(\n          eq(leavePolicies.hotelId, testHotel.id),\n          eq(leavePolicies.leaveType, policy.leaveType)\n        ));\n\n      if (existing.length === 0) {\n        await db.insert(leavePolicies).values({\n          hotelId: testHotel.id,\n          ...policy,\n          isActive: true\n        });\n        console.log(`  ✓ Created leave policy: ${policy.displayName} (${policy.defaultDays} days)`);\n      }\n    }\n\n    // Create room types\n    console.log('\\n🛏️  Creating room types...');\n    const roomTypeData = [\n      { name: 'Standard', description: 'Standard room with basic amenities', priceInhouse: '2000', priceWalkin: '2500' },\n      { name: 'Deluxe', description: 'Deluxe room with premium amenities', priceInhouse: '3500', priceWalkin: '4000' },\n      { name: 'Suite', description: 'Luxury suite with separate living area', priceInhouse: '5000', priceWalkin: '6000' }\n    ];\n\n    const createdRoomTypes = [];\n    for (const rt of roomTypeData) {\n      const existing = await db.select().from(roomTypes).where(eq(roomTypes.name, rt.name));\n      if (existing.length === 0) {\n        const [created] = await db.insert(roomTypes).values({\n          hotelId: testHotel.id,\n          ...rt\n        }).returning();\n        createdRoomTypes.push(created);\n        console.log(`  ✓ Created room type: ${rt.name}`);\n      } else {\n        createdRoomTypes.push(existing[0]);\n        console.log(`  → Room type already exists: ${rt.name}`);\n      }\n    }\n\n    // Create rooms\n    console.log('\\n🚪 Creating rooms...');\n    const roomNumbers = ['101', '102', '103', '201', '202', '301'];\n    let roomIndex = 0;\n    for (const roomNum of roomNumbers) {\n      const existing = await db.select().from(rooms).where(eq(rooms.roomNumber, roomNum));\n      if (existing.length === 0) {\n        const roomTypeIndex = roomIndex % createdRoomTypes.length;\n        await db.insert(rooms).values({\n          hotelId: testHotel.id,\n          roomNumber: roomNum,\n          roomTypeId: createdRoomTypes[roomTypeIndex].id,\n          isOccupied: false\n        });\n        console.log(`  ✓ Created room: ${roomNum}`);\n      } else {\n        console.log(`  → Room already exists: ${roomNum}`);\n      }\n      roomIndex++;\n    }\n\n    // Create meal plans\n    console.log('\\n🍽️  Creating meal plans...');\n    const mealPlanData = [\n      { planType: 'EP', planName: 'European Plan (Room Only)', pricePerPerson: '0', description: 'Room only, no meals included' },\n      { planType: 'CP', planName: 'Continental Plan (Bed & Breakfast)', pricePerPerson: '500', description: 'Includes breakfast' },\n      { planType: 'MAP', planName: 'Modified American Plan', pricePerPerson: '1200', description: 'Includes breakfast and dinner' },\n      { planType: 'AP', planName: 'American Plan (Full Board)', pricePerPerson: '2000', description: 'Includes all three meals' }\n    ];\n\n    for (const plan of mealPlanData) {\n      const existing = await db.select().from(mealPlans).where(eq(mealPlans.planType, plan.planType));\n      if (existing.length === 0) {\n        await db.insert(mealPlans).values({\n          hotelId: testHotel.id,\n          ...plan\n        });\n        console.log(`  ✓ Created meal plan: ${plan.planType}`);\n      } else {\n        console.log(`  → Meal plan already exists: ${plan.planType}`);\n      }\n    }\n\n    // Create discount voucher\n    console.log('\\n🎟️  Creating discount voucher...');\n    const existingVoucher = await db.select().from(vouchers).where(eq(vouchers.code, 'DISCOUNT1000'));\n    if (existingVoucher.length === 0) {\n      await db.insert(vouchers).values({\n        hotelId: testHotel.id,\n        code: 'DISCOUNT1000',\n        discountAmount: '1000',\n        discountType: 'fixed',\n        validFrom: new Date(),\n        validUntil: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year from now\n        maxUses: 100,\n        usedCount: 0\n      });\n      console.log('  ✓ Created discount voucher: DISCOUNT1000 (Rs. 1000 off)');\n    } else {\n      console.log('  → Discount voucher already exists: DISCOUNT1000');\n    }\n\n    // Create menu categories\n    console.log('\\n🍴 Creating menu categories...');\n    const categoryData = [\n      { name: 'Breakfast' },\n      { name: 'Main Course' },\n      { name: 'Appetizers' },\n      { name: 'Beverages' },\n      { name: 'Desserts' }\n    ];\n\n    const createdCategories = [];\n    for (const cat of categoryData) {\n      const existing = await db.select().from(menuCategories).where(eq(menuCategories.name, cat.name));\n      if (existing.length === 0) {\n        const [created] = await db.insert(menuCategories).values({\n          hotelId: testHotel.id,\n          ...cat\n        }).returning();\n        createdCategories.push(created);\n        console.log(`  ✓ Created category: ${cat.name}`);\n      } else {\n        createdCategories.push(existing[0]);\n        console.log(`  → Category already exists: ${cat.name}`);\n      }\n    }\n\n    // Create menu items\n    console.log('\\n📋 Creating menu items...');\n    const menuItemsData = [\n      { categoryName: 'Breakfast', name: 'Pancakes with Syrup', price: '350', description: 'Fluffy pancakes with maple syrup' },\n      { categoryName: 'Breakfast', name: 'Eggs Benedict', price: '450', description: 'Poached eggs with hollandaise sauce' },\n      { categoryName: 'Breakfast', name: 'Continental Breakfast', price: '500', description: 'Toast, eggs, juice, and coffee' },\n      { categoryName: 'Main Course', name: 'Chicken Tikka Masala', price: '650', description: 'Creamy chicken curry with rice' },\n      { categoryName: 'Main Course', name: 'Grilled Salmon', price: '850', description: 'Fresh salmon with vegetables' },\n      { categoryName: 'Main Course', name: 'Vegetable Biryani', price: '450', description: 'Aromatic rice with mixed vegetables' },\n      { categoryName: 'Appetizers', name: 'Spring Rolls', price: '250', description: 'Crispy vegetable spring rolls' },\n      { categoryName: 'Appetizers', name: 'Chicken Wings', price: '400', description: 'Spicy buffalo wings' },\n      { categoryName: 'Beverages', name: 'Espresso', price: '150', description: 'Double shot espresso' },\n      { categoryName: 'Beverages', name: 'Cappuccino', price: '200', description: 'Espresso with steamed milk' },\n      { categoryName: 'Beverages', name: 'Fresh Orange Juice', price: '180', description: 'Freshly squeezed orange juice' },\n      { categoryName: 'Desserts', name: 'Chocolate Cake', price: '300', description: 'Rich chocolate layer cake' },\n      { categoryName: 'Desserts', name: 'Ice Cream Sundae', price: '250', description: 'Vanilla ice cream with toppings' }\n    ];\n\n    for (const item of menuItemsData) {\n      const category = createdCategories.find(c => c.name === item.categoryName);\n      if (category) {\n        const existing = await db.select().from(menuItems).where(eq(menuItems.name, item.name));\n        if (existing.length === 0) {\n          await db.insert(menuItems).values({\n            hotelId: testHotel.id,\n            categoryId: category.id,\n            name: item.name,\n            price: item.price,\n            description: item.description,\n            active: true\n          });\n          console.log(`  ✓ Created menu item: ${item.name}`);\n        } else {\n          console.log(`  → Menu item already exists: ${item.name}`);\n        }\n      }\n    }\n\n    // Create restaurant tables\n    console.log('\\n🍽️  Creating restaurant tables...');\n    const restaurantTableData = [\n      { name: 'Table 1', capacity: 2, status: 'available' },\n      { name: 'Table 2', capacity: 2, status: 'available' },\n      { name: 'Table 3', capacity: 4, status: 'available' },\n      { name: 'Table 4', capacity: 4, status: 'available' },\n      { name: 'Table 5', capacity: 6, status: 'available' },\n      { name: 'Table 6', capacity: 6, status: 'available' },\n      { name: 'Table 7', capacity: 8, status: 'available' },\n      { name: 'Table 8', capacity: 4, status: 'available' },\n      { name: 'VIP Table 1', capacity: 10, status: 'available' },\n      { name: 'VIP Table 2', capacity: 12, status: 'available' }\n    ];\n\n    for (const table of restaurantTableData) {\n      const existing = await db.select().from(restaurantTables).where(eq(restaurantTables.name, table.name));\n      if (existing.length === 0) {\n        await db.insert(restaurantTables).values({\n          hotelId: testHotel.id,\n          ...table\n        });\n        console.log(`  ✓ Created restaurant table: ${table.name} (Capacity: ${table.capacity})`);\n      } else {\n        console.log(`  → Restaurant table already exists: ${table.name}`);\n      }\n    }\n\n    // Create halls\n    console.log('\\n🏛️  Creating halls...');\n    const hallData = [\n      { name: 'Grand Ballroom', capacity: 200, priceInhouse: '15000', priceWalkin: '20000', hourlyRate: '5000' },\n      { name: 'Conference Hall A', capacity: 50, priceInhouse: '8000', priceWalkin: '10000', hourlyRate: '3000' },\n      { name: 'Conference Hall B', capacity: 50, priceInhouse: '8000', priceWalkin: '10000', hourlyRate: '3000' },\n      { name: 'Banquet Hall', capacity: 150, priceInhouse: '12000', priceWalkin: '15000', hourlyRate: '4000' },\n      { name: 'Meeting Room 1', capacity: 20, priceInhouse: '3000', priceWalkin: '4000', hourlyRate: '1500' },\n      { name: 'Meeting Room 2', capacity: 20, priceInhouse: '3000', priceWalkin: '4000', hourlyRate: '1500' },\n      { name: 'Executive Lounge', capacity: 30, priceInhouse: '5000', priceWalkin: '6500', hourlyRate: '2000' }\n    ];\n\n    for (const hall of hallData) {\n      const existing = await db.select().from(halls).where(eq(halls.name, hall.name));\n      if (existing.length === 0) {\n        await db.insert(halls).values({\n          hotelId: testHotel.id,\n          ...hall\n        });\n        console.log(`  ✓ Created hall: ${hall.name} (Capacity: ${hall.capacity})`);\n      } else {\n        console.log(`  → Hall already exists: ${hall.name}`);\n      }\n    }\n\n    // Create guests\n    console.log('\\n👥 Creating guests...');\n    \n    // Get front desk user for createdBy field\n    const frontDeskUser = await db.select().from(users).where(eq(users.username, 'sita'));\n    \n    const guestData = [\n      { firstName: 'John', lastName: 'Smith', email: 'john.smith@email.com', phone: '+1-555-0101', address: '123 Main St', city: 'New York', country: 'USA', idType: 'Passport', idNumber: 'US123456789', nationality: 'American', dateOfBirth: new Date('1985-03-15') },\n      { firstName: 'Emma', lastName: 'Johnson', email: 'emma.j@email.com', phone: '+44-20-1234567', address: '45 Baker Street', city: 'London', country: 'UK', idType: 'Passport', idNumber: 'UK987654321', nationality: 'British', dateOfBirth: new Date('1990-07-22') },\n      { firstName: 'Raj', lastName: 'Sharma', email: 'raj.sharma@email.com', phone: '+91-98765-43210', address: '789 MG Road', city: 'Mumbai', country: 'India', idType: 'Passport', idNumber: 'IN456789123', nationality: 'Indian', dateOfBirth: new Date('1988-11-30') },\n      { firstName: 'Maria', lastName: 'Garcia', email: 'maria.g@email.com', phone: '+34-91-234-5678', address: 'Calle Mayor 12', city: 'Madrid', country: 'Spain', idType: 'National ID', idNumber: 'ES789456123', nationality: 'Spanish', dateOfBirth: new Date('1992-05-18') },\n      { firstName: 'Chen', lastName: 'Wei', email: 'chen.wei@email.com', phone: '+86-10-8765-4321', address: '56 Beijing Road', city: 'Shanghai', country: 'China', idType: 'Passport', idNumber: 'CN147258369', nationality: 'Chinese', dateOfBirth: new Date('1987-09-10') },\n      { firstName: 'Sarah', lastName: 'Williams', email: 'sarah.w@email.com', phone: '+1-555-0202', address: '789 Oak Avenue', city: 'Los Angeles', country: 'USA', idType: 'Driver License', idNumber: 'DL987654321', nationality: 'American', dateOfBirth: new Date('1995-12-05') },\n      { firstName: 'Mohammed', lastName: 'Al-Rashid', email: 'mohammed.ar@email.com', phone: '+971-4-123-4567', address: 'Sheikh Zayed Road', city: 'Dubai', country: 'UAE', idType: 'Emirates ID', idNumber: 'UAE123456789', nationality: 'Emirati', dateOfBirth: new Date('1983-04-25') },\n      { firstName: 'Sophie', lastName: 'Dubois', email: 'sophie.d@email.com', phone: '+33-1-2345-6789', address: '23 Rue de Rivoli', city: 'Paris', country: 'France', idType: 'National ID', idNumber: 'FR456789123', nationality: 'French', dateOfBirth: new Date('1991-08-14') },\n      { firstName: 'Yuki', lastName: 'Tanaka', email: 'yuki.t@email.com', phone: '+81-3-1234-5678', address: '1-2-3 Shibuya', city: 'Tokyo', country: 'Japan', idType: 'Passport', idNumber: 'JP789123456', nationality: 'Japanese', dateOfBirth: new Date('1989-02-28') },\n      { firstName: 'David', lastName: 'Brown', email: 'david.b@email.com', phone: '+61-2-9876-5432', address: '456 George Street', city: 'Sydney', country: 'Australia', idType: 'Passport', idNumber: 'AU321654987', nationality: 'Australian', dateOfBirth: new Date('1986-10-12') },\n      { firstName: 'Anna', lastName: 'Kowalski', email: 'anna.k@email.com', phone: '+48-22-123-4567', address: 'ul. Nowy Świat 15', city: 'Warsaw', country: 'Poland', idType: 'National ID', idNumber: 'PL654987321', nationality: 'Polish', dateOfBirth: new Date('1993-06-20') },\n      { firstName: 'Carlos', lastName: 'Rodriguez', email: 'carlos.r@email.com', phone: '+52-55-8765-4321', address: 'Avenida Reforma 100', city: 'Mexico City', country: 'Mexico', idType: 'Passport', idNumber: 'MX852963741', nationality: 'Mexican', dateOfBirth: new Date('1984-01-08') },\n      { firstName: 'Lisa', lastName: 'Anderson', email: 'lisa.a@email.com', phone: '+1-555-0303', address: '321 Pine Street', city: 'Chicago', country: 'USA', idType: 'Passport', idNumber: 'US741852963', nationality: 'American', dateOfBirth: new Date('1994-03-17') },\n      { firstName: 'Ahmed', lastName: 'Hassan', email: 'ahmed.h@email.com', phone: '+20-2-3456-7890', address: 'Tahrir Square', city: 'Cairo', country: 'Egypt', idType: 'National ID', idNumber: 'EG963852741', nationality: 'Egyptian', dateOfBirth: new Date('1990-09-05') },\n      { firstName: 'Olivia', lastName: 'Taylor', email: 'olivia.t@email.com', phone: '+1-416-987-6543', address: '789 King Street', city: 'Toronto', country: 'Canada', idType: 'Passport', idNumber: 'CA159753486', nationality: 'Canadian', dateOfBirth: new Date('1992-11-22') },\n      { firstName: 'Lars', lastName: 'Nielsen', email: 'lars.n@email.com', phone: '+45-33-12-34-56', address: 'Strøget 25', city: 'Copenhagen', country: 'Denmark', idType: 'Passport', idNumber: 'DK357159486', nationality: 'Danish', dateOfBirth: new Date('1988-07-30') },\n      { firstName: 'Priya', lastName: 'Patel', email: 'priya.p@email.com', phone: '+91-22-9876-5432', address: 'Linking Road', city: 'Mumbai', country: 'India', idType: 'Aadhaar', idNumber: 'IN753951486', nationality: 'Indian', dateOfBirth: new Date('1996-04-12') },\n      { firstName: 'Thomas', lastName: 'Mueller', email: 'thomas.m@email.com', phone: '+49-30-1234-5678', address: 'Unter den Linden 10', city: 'Berlin', country: 'Germany', idType: 'Passport', idNumber: 'DE951357486', nationality: 'German', dateOfBirth: new Date('1987-12-03') },\n      { firstName: 'Isabella', lastName: 'Rossi', email: 'isabella.r@email.com', phone: '+39-06-8765-4321', address: 'Via Veneto 50', city: 'Rome', country: 'Italy', idType: 'National ID', idNumber: 'IT486159753', nationality: 'Italian', dateOfBirth: new Date('1991-02-14') },\n      { firstName: 'Kim', lastName: 'Min-Ho', email: 'kim.minho@email.com', phone: '+82-2-1234-5678', address: 'Gangnam-gu', city: 'Seoul', country: 'South Korea', idType: 'Passport', idNumber: 'KR753486159', nationality: 'Korean', dateOfBirth: new Date('1989-08-25') }\n    ];\n\n    for (const guest of guestData) {\n      const existing = await db.select().from(guests).where(eq(guests.email, guest.email || ''));\n      if (existing.length === 0) {\n        await db.insert(guests).values({\n          hotelId: testHotel.id,\n          ...guest,\n          createdBy: frontDeskUser[0].id\n        });\n        console.log(`  ✓ Created guest: ${guest.firstName} ${guest.lastName} (${guest.nationality})`);\n      } else {\n        console.log(`  → Guest already exists: ${guest.firstName} ${guest.lastName}`);\n      }\n    }\n\n    // Create vendors\n    console.log('\\n🏢 Creating vendors...');\n    const vendorData = [\n      { name: 'Nepal Electricity Authority', contact: { phone: '+977-1-4150220', email: 'nea@nea.org.np', address: 'Kathmandu' } },\n      { name: 'Fresh Foods Pvt Ltd', contact: { phone: '+977-1-4567890', email: 'sales@freshfoods.com.np', address: 'Baneshwor, Kathmandu' } },\n      { name: 'Cleaning Supplies Co', contact: { phone: '+977-1-7654321', email: 'info@cleaningsupplies.com.np', address: 'Teku, Kathmandu' } },\n      { name: 'Linens & More', contact: { phone: '+977-1-3456789', email: 'orders@linensmore.com.np', address: 'Putalisadak, Kathmandu' } },\n      { name: 'Tech Solutions Nepal', contact: { phone: '+977-1-2345678', email: 'support@techsolutions.com.np', address: 'Durbarmarg, Kathmandu' } }\n    ];\n\n    const createdVendors = [];\n    for (const vendor of vendorData) {\n      const existing = await db.select().from(vendors).where(eq(vendors.name, vendor.name));\n      if (existing.length === 0) {\n        const [created] = await db.insert(vendors).values({\n          hotelId: testHotel.id,\n          ...vendor\n        }).returning();\n        createdVendors.push(created);\n        console.log(`  ✓ Created vendor: ${vendor.name}`);\n      } else {\n        createdVendors.push(existing[0]);\n        console.log(`  → Vendor already exists: ${vendor.name}`);\n      }\n    }\n\n    // Create financial transactions\n    console.log('\\n💰 Creating financial transactions...');\n    \n    // Get finance user for createdBy field\n    const financeUser = await db.select().from(users).where(eq(users.username, 'finance'));\n    const managerUser = await db.select().from(users).where(eq(users.username, 'manager'));\n    \n    const transactionData = [\n      // Revenue transactions\n      { txnType: 'revenue', amount: '15000', paymentMethod: 'cash', purpose: 'Room Booking Payment', reference: 'ROOM-001', details: { roomNumber: '101', guestName: 'John Smith', nights: 5 }, createdBy: frontDeskUser[0].id, createdAt: new Date('2025-10-05') },\n      { txnType: 'revenue', amount: '8500', paymentMethod: 'credit_card', purpose: 'Restaurant Bill', reference: 'REST-045', details: { tableNumber: 'Table 5', items: 7 }, createdBy: cashierRole[0] ? financeUser[0].id : frontDeskUser[0].id, createdAt: new Date('2025-10-06') },\n      { txnType: 'revenue', amount: '12000', paymentMethod: 'bank_transfer', purpose: 'Hall Booking', reference: 'HALL-023', details: { hallName: 'Conference Hall A', duration: '4 hours' }, createdBy: frontDeskUser[0].id, createdAt: new Date('2025-10-07') },\n      { txnType: 'revenue', amount: '20000', paymentMethod: 'cash', purpose: 'Room Booking Payment', reference: 'ROOM-002', details: { roomNumber: '301', guestName: 'Emma Johnson', nights: 4 }, createdBy: frontDeskUser[0].id, createdAt: new Date('2025-10-07') },\n      { txnType: 'revenue', amount: '4500', paymentMethod: 'credit_card', purpose: 'Restaurant Bill', reference: 'REST-046', details: { tableNumber: 'Table 3' }, createdBy: financeUser[0].id, createdAt: new Date('2025-10-08') },\n      \n      // Vendor Payment transactions\n      { txnType: 'vendor_payment', amount: '25000', paymentMethod: 'bank_transfer', vendorId: createdVendors[0].id, purpose: 'Electricity Bill - September', reference: 'INV-NEA-202509', details: { billingMonth: 'September 2025', units: 5000 }, createdBy: financeUser[0].id, createdAt: new Date('2025-10-01') },\n      { txnType: 'vendor_payment', amount: '45000', paymentMethod: 'cash', vendorId: createdVendors[1].id, purpose: 'Fresh Food Supplies', reference: 'INV-FF-1234', details: { items: ['Vegetables', 'Fruits', 'Meat', 'Dairy'] }, createdBy: managerUser[0].id, createdAt: new Date('2025-10-03') },\n      { txnType: 'vendor_payment', amount: '12000', paymentMethod: 'cash', vendorId: createdVendors[2].id, purpose: 'Cleaning Supplies Monthly Stock', reference: 'INV-CS-567', details: { items: ['Detergent', 'Floor Cleaner', 'Disinfectant'] }, createdBy: managerUser[0].id, createdAt: new Date('2025-10-04') },\n      { txnType: 'vendor_payment', amount: '35000', paymentMethod: 'bank_transfer', vendorId: createdVendors[3].id, purpose: 'Bed Linens and Towels', reference: 'INV-LM-890', details: { items: ['Bed Sheets - 50', 'Towels - 100', 'Pillow Covers - 80'] }, createdBy: financeUser[0].id, createdAt: new Date('2025-10-05') },\n      { txnType: 'vendor_payment', amount: '18000', paymentMethod: 'bank_transfer', vendorId: createdVendors[4].id, purpose: 'IT Support & Maintenance', reference: 'INV-TS-456', details: { service: 'Monthly maintenance', duration: 'October 2025' }, createdBy: financeUser[0].id, createdAt: new Date('2025-10-06') },\n      \n      // Salary payments\n      { txnType: 'expense', amount: '40000', paymentMethod: 'bank_transfer', purpose: 'Salary - Manager', reference: 'SAL-202509-MGR', details: { month: 'September 2025', employeeName: 'Manager' }, createdBy: financeUser[0].id, createdAt: new Date('2025-10-01') },\n      { txnType: 'expense', amount: '25000', paymentMethod: 'bank_transfer', purpose: 'Salary - Finance Officer', reference: 'SAL-202509-FIN', details: { month: 'September 2025', employeeName: 'Finance' }, createdBy: financeUser[0].id, createdAt: new Date('2025-10-01') },\n      \n      // Refund\n      { txnType: 'refund', amount: '3000', paymentMethod: 'cash', purpose: 'Guest Complaint - Room Service Issue', reference: 'REF-001', details: { guestName: 'David Brown', roomNumber: '201', reason: 'Delayed room service' }, createdBy: managerUser[0].id, createdAt: new Date('2025-10-08') },\n      \n      // Miscellaneous\n      { txnType: 'miscellaneous', amount: '8000', paymentMethod: 'cash', purpose: 'Office Supplies Purchase', reference: 'MISC-123', details: { items: ['Stationery', 'Printer Paper', 'Ink Cartridges'] }, createdBy: managerUser[0].id, createdAt: new Date('2025-10-02') },\n      { txnType: 'miscellaneous', amount: '5000', paymentMethod: 'cash', purpose: 'Minor Repairs - Plumbing', reference: 'MISC-124', details: { location: 'Room 102 bathroom', issue: 'Leaking faucet' }, createdBy: managerUser[0].id, createdAt: new Date('2025-10-06') }\n    ];\n\n    let transactionCount = 0;\n    for (const txn of transactionData) {\n      const [created] = await db.insert(transactions).values({\n        hotelId: testHotel.id,\n        ...txn\n      }).returning();\n      transactionCount++;\n      console.log(`  ✓ Created transaction: ${txn.txnType} - ${txn.purpose} (Rs. ${txn.amount})`);\n    }\n\n    // Create maintenance requests\n    console.log('\\n🔧 Creating maintenance requests...');\n    \n    const hkSupervisorUser = await db.select().from(users).where(eq(users.username, 'hksupervisor'));\n    const hkStaffUser = await db.select().from(users).where(eq(users.username, 'hkstaff'));\n    \n    const maintenanceRequestData = [\n      {\n        reportedBy: hkStaffUser[0].id,\n        title: 'Air Conditioner Not Working',\n        location: 'Room 201',\n        description: 'The air conditioning unit in room 201 is not cooling properly. Guest complained about the room being too warm.',\n        photo: 'https://images.unsplash.com/photo-1581094794329-c8112a89af12?w=800',\n        priority: 'high',\n        status: 'approved',\n        assignedTo: hkSupervisorUser[0].id,\n        createdAt: new Date('2025-10-06T09:30:00'),\n        updatedAt: new Date('2025-10-06T10:15:00')\n      },\n      {\n        reportedBy: frontDeskUser[0].id,\n        title: 'Leaking Faucet in Bathroom',\n        location: 'Room 102',\n        description: 'Water is continuously dripping from the bathroom sink faucet. Needs immediate attention to avoid water wastage.',\n        photo: 'https://images.unsplash.com/photo-1607472586893-edb57bdc0e39?w=800',\n        priority: 'medium',\n        status: 'approved',\n        assignedTo: hkSupervisorUser[0].id,\n        createdAt: new Date('2025-10-07T14:20:00'),\n        updatedAt: new Date('2025-10-07T15:00:00')\n      },\n      {\n        reportedBy: hkStaffUser[0].id,\n        title: 'Broken Window Latch',\n        location: 'Room 301',\n        description: 'The window latch is broken and the window cannot be secured properly. This is a security concern.',\n        photo: 'https://images.unsplash.com/photo-1565008576549-57569a49371d?w=800',\n        priority: 'high',\n        status: 'approved',\n        assignedTo: hkSupervisorUser[0].id,\n        createdAt: new Date('2025-10-08T08:45:00'),\n        updatedAt: new Date('2025-10-08T09:30:00')\n      },\n      {\n        reportedBy: managerUser[0].id,\n        title: 'Damaged Carpet in Lobby',\n        location: 'Main Lobby',\n        description: 'Section of carpet near the entrance is torn and frayed. Needs replacement for aesthetic and safety reasons.',\n        photo: 'https://images.unsplash.com/photo-1565008447742-97f6f38c985c?w=800',\n        priority: 'medium',\n        status: 'approved',\n        assignedTo: hkSupervisorUser[0].id,\n        createdAt: new Date('2025-10-05T11:00:00'),\n        updatedAt: new Date('2025-10-05T12:00:00')\n      },\n      {\n        reportedBy: hkStaffUser[0].id,\n        title: 'Malfunctioning Door Lock',\n        location: 'Room 103',\n        description: 'Electronic door lock is not responding properly. Guest had difficulty entering the room.',\n        photo: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800',\n        priority: 'high',\n        status: 'approved',\n        assignedTo: hkSupervisorUser[0].id,\n        createdAt: new Date('2025-10-08T16:30:00'),\n        updatedAt: new Date('2025-10-08T17:00:00')\n      },\n      {\n        reportedBy: frontDeskUser[0].id,\n        title: 'Faulty Light Fixtures',\n        location: 'Conference Hall A',\n        description: 'Several ceiling light fixtures are flickering and some are completely non-functional. Affects meeting room ambiance.',\n        photo: 'https://images.unsplash.com/photo-1513506003901-1e6a229e2d15?w=800',\n        priority: 'medium',\n        status: 'approved',\n        assignedTo: hkSupervisorUser[0].id,\n        createdAt: new Date('2025-10-07T10:00:00'),\n        updatedAt: new Date('2025-10-07T11:30:00')\n      }\n    ];\n\n    let maintenanceCount = 0;\n    for (const request of maintenanceRequestData) {\n      await db.insert(maintenanceRequests).values({\n        hotelId: testHotel.id,\n        ...request\n      });\n      maintenanceCount++;\n      console.log(`  ✓ Created maintenance request: ${request.title} (${request.location}) - Status: ${request.status}`);\n    }\n\n    // Create services (amenities)\n    console.log('\\n🛎️  Creating services (amenities)...');\n    \n    const servicesData = [\n      {\n        kind: 'laundry',\n        name: 'Laundry Service',\n        priceInhouse: '500.00',\n        priceWalkin: '700.00'\n      },\n      {\n        kind: 'laundry',\n        name: 'Dry Cleaning',\n        priceInhouse: '800.00',\n        priceWalkin: '1000.00'\n      },\n      {\n        kind: 'laundry',\n        name: 'Ironing Service',\n        priceInhouse: '200.00',\n        priceWalkin: '300.00'\n      },\n      {\n        kind: 'transportation',\n        name: 'Airport Pickup',\n        priceInhouse: '1500.00',\n        priceWalkin: '2000.00'\n      },\n      {\n        kind: 'transportation',\n        name: 'Airport Drop-off',\n        priceInhouse: '1500.00',\n        priceWalkin: '2000.00'\n      },\n      {\n        kind: 'transportation',\n        name: 'City Tour',\n        priceInhouse: '3000.00',\n        priceWalkin: '4000.00'\n      },\n      {\n        kind: 'spa',\n        name: 'Full Body Massage',\n        priceInhouse: '2500.00',\n        priceWalkin: '3500.00'\n      },\n      {\n        kind: 'spa',\n        name: 'Facial Treatment',\n        priceInhouse: '1800.00',\n        priceWalkin: '2500.00'\n      },\n      {\n        kind: 'spa',\n        name: 'Foot Massage',\n        priceInhouse: '1200.00',\n        priceWalkin: '1500.00'\n      },\n      {\n        kind: 'room_service',\n        name: 'Room Service Delivery',\n        priceInhouse: '200.00',\n        priceWalkin: '300.00'\n      },\n      {\n        kind: 'room_service',\n        name: 'Extra Bedding',\n        priceInhouse: '500.00',\n        priceWalkin: '700.00'\n      },\n      {\n        kind: 'room_service',\n        name: 'Extra Towels',\n        priceInhouse: '200.00',\n        priceWalkin: '300.00'\n      },\n      {\n        kind: 'parking',\n        name: 'Valet Parking',\n        priceInhouse: '300.00',\n        priceWalkin: '500.00'\n      },\n      {\n        kind: 'parking',\n        name: 'Covered Parking (per day)',\n        priceInhouse: '500.00',\n        priceWalkin: '800.00'\n      },\n      {\n        kind: 'business',\n        name: 'Business Center Access',\n        priceInhouse: '500.00',\n        priceWalkin: '1000.00'\n      },\n      {\n        kind: 'business',\n        name: 'Printing/Scanning Service',\n        priceInhouse: '100.00',\n        priceWalkin: '200.00'\n      },\n      {\n        kind: 'recreation',\n        name: 'Gym Access (per day)',\n        priceInhouse: '500.00',\n        priceWalkin: '800.00'\n      },\n      {\n        kind: 'recreation',\n        name: 'Swimming Pool Access',\n        priceInhouse: '800.00',\n        priceWalkin: '1200.00'\n      },\n      {\n        kind: 'other',\n        name: 'Pet Care Service',\n        priceInhouse: '1000.00',\n        priceWalkin: '1500.00'\n      },\n      {\n        kind: 'other',\n        name: 'Baby Sitting Service',\n        priceInhouse: '1500.00',\n        priceWalkin: '2000.00'\n      }\n    ];\n\n    let servicesCount = 0;\n    for (const service of servicesData) {\n      const existing = await db\n        .select()\n        .from(services)\n        .where(and(\n          eq(services.hotelId, testHotel.id),\n          eq(services.name, service.name)\n        ));\n\n      if (existing.length === 0) {\n        await db.insert(services).values({\n          hotelId: testHotel.id,\n          ...service\n        });\n        servicesCount++;\n        console.log(`  ✓ Created service: ${service.name} (${service.kind})`);\n      } else {\n        console.log(`  → Service already exists: ${service.name}`);\n      }\n    }\n\n    console.log('\\n✅ Database seeded successfully!');\n    console.log('\\n📝 Summary:');\n    console.log('  - Hotel: Test Hotel');\n    console.log('  - Users: 14 users (including securityhead, surveillance)');\n    console.log('  - Guests: 20 international guests');\n    console.log('  - Rooms: 101, 102, 103, 201, 202, 301');\n    console.log('  - Meal Plans: EP, CP, MAP, AP');\n    console.log('  - Discount Code: DISCOUNT1000 (Rs. 1000 off)');\n    console.log('  - Menu Items: 13 items across 5 categories');\n    console.log('  - Restaurant Tables: 10 tables (2-12 seating capacity)');\n    console.log('  - Halls: 7 halls (20-200 capacity)');\n    console.log('  - Vendors: 5 vendors');\n    console.log(`  - Services/Amenities: ${servicesCount} services`);\n    console.log(`  - Financial Transactions: ${transactionCount} transactions (revenue, expenses, refunds)`);\n    console.log(`  - Maintenance Requests: ${maintenanceCount} approved requests with photos`);\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Seeding failed:', error);\n    process.exit(1);\n  }\n}\n\nseed();\n","size_bytes":41895},"client/src/components/modals/booking-wizard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar as CalendarIcon, Clock, Users, DollarSign, Package, CheckCircle, Loader2, Search, AlertCircle, Plus, Trash2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn, formatCurrency } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport type { Hall, SelectServicePackage, Guest } from \"@shared/schema\";\n\ninterface ServiceItem {\n  id: string;\n  name: string;\n  quantity: number;\n  unitPrice: number;\n}\n\nconst wizardSchema = z.object({\n  // Step 1: Hall & Time\n  hallId: z.string().min(1, \"Hall is required\"),\n  date: z.date(),\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n  duration: z.number().min(1, \"Duration must be at least 1 hour\"),\n  isInHouseGuest: z.boolean().default(false),\n  \n  // Step 2: Customer Info\n  customerName: z.string().min(1, \"Customer name is required\"),\n  customerPhone: z.string().min(1, \"Phone is required\"),\n  customerEmail: z.string().email().optional().or(z.literal(\"\")),\n  guestId: z.string().optional(),\n  numberOfPeople: z.number().min(1, \"Estimated number of people is required\"),\n  \n  // Step 3: Payment (quotation only)\n  totalAmount: z.number(),\n  advancePaid: z.number().min(0, \"Advance cannot be negative\"),\n  balanceDue: z.number(),\n  paymentMethod: z.string().optional(),\n  specialRequests: z.string().optional()\n}).refine((data) => data.advancePaid <= data.totalAmount, {\n  message: \"Advance payment cannot exceed total amount\",\n  path: [\"advancePaid\"]\n});\n\ntype WizardFormData = z.infer<typeof wizardSchema>;\n\ninterface BookingWizardProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n}\n\nexport function BookingWizard({ open, onOpenChange, onSuccess }: BookingWizardProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [guestSearch, setGuestSearch] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const [availabilityStatus, setAvailabilityStatus] = useState<{ available: boolean; suggestions?: any[] } | null>(null);\n  const [foodDescription, setFoodDescription] = useState(\"\");\n  const [perPersonFoodPrice, setPerPersonFoodPrice] = useState(0);\n  const [serviceItems, setServiceItems] = useState<ServiceItem[]>([]);\n\n  const form = useForm<WizardFormData>({\n    resolver: zodResolver(wizardSchema),\n    defaultValues: {\n      hallId: \"\",\n      date: new Date(),\n      startTime: \"\",\n      endTime: \"\",\n      duration: 1,\n      isInHouseGuest: false,\n      customerName: \"\",\n      customerPhone: \"\",\n      customerEmail: \"\",\n      numberOfPeople: 1,\n      totalAmount: 0,\n      advancePaid: 0,\n      balanceDue: 0,\n      paymentMethod: \"\",\n      specialRequests: \"\"\n    }\n  });\n\n  const { data: halls = [] } = useQuery<Hall[]>({\n    queryKey: [\"/api/halls\"],\n    enabled: !!user?.hotelId && open\n  });\n\n\n  const { data: hotelSettings } = useQuery({\n    queryKey: [\"/api/hotels/current\"],\n    enabled: !!user?.hotelId && open\n  });\n\n  const { data: hotelTaxes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/taxes\"],\n    enabled: !!user?.hotelId && open\n  });\n\n  const watchedHallId = form.watch(\"hallId\");\n  const watchedDate = form.watch(\"date\");\n  const watchedStartTime = form.watch(\"startTime\");\n  const watchedEndTime = form.watch(\"endTime\");\n  const watchedDuration = form.watch(\"duration\");\n  const watchedNumberOfPeople = form.watch(\"numberOfPeople\");\n\n  const selectedHall = halls.find(h => h.id === watchedHallId);\n  \n  // Clear availability status when key fields change\n  useEffect(() => {\n    setAvailabilityStatus(null);\n  }, [watchedHallId, watchedDate, watchedStartTime, watchedEndTime]);\n  \n  // Calculate duration when start/end time changes\n  const calculateDuration = (start: string, end: string) => {\n    if (!start || !end) return 0;\n    const [startHour, startMin] = start.split(\":\").map(Number);\n    const [endHour, endMin] = end.split(\":\").map(Number);\n    const startMinutes = startHour * 60 + startMin;\n    const endMinutes = endHour * 60 + endMin;\n    return Math.max(0, (endMinutes - startMinutes) / 60);\n  };\n\n  // Update duration when times change\n  const handleStartTimeChange = (value: string) => {\n    form.setValue(\"startTime\", value);\n    const duration = calculateDuration(value, watchedEndTime);\n    if (duration > 0) {\n      form.setValue(\"duration\", duration);\n      calculateTotal();\n    }\n  };\n\n  const handleEndTimeChange = (value: string) => {\n    form.setValue(\"endTime\", value);\n    const duration = calculateDuration(watchedStartTime, value);\n    if (duration > 0) {\n      form.setValue(\"duration\", duration);\n      calculateTotal();\n    }\n  };\n\n  // Check availability\n  const checkAvailability = async (): Promise<boolean> => {\n    if (!watchedHallId || !watchedDate || !watchedStartTime || !watchedEndTime) return true;\n    \n    // Clear any previous status first\n    setAvailabilityStatus(null);\n    \n    try {\n      const result = await apiRequest(\"POST\", \"/api/halls/check-availability-quick\", {\n        hallId: watchedHallId,\n        date: format(watchedDate, \"yyyy-MM-dd\"),\n        startTime: watchedStartTime,\n        endTime: watchedEndTime\n      }) as any;\n      \n      // Check if available is explicitly false\n      if (result && result.available === false) {\n        setAvailabilityStatus(result as { available: boolean; suggestions?: any[] });\n        toast({\n          title: \"Hall Not Available\",\n          description: result.suggestions?.length \n            ? \"Alternative time slots are suggested below\" \n            : \"No alternative slots available for this date\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n      \n      // If available is true or not explicitly false, allow proceeding\n      return true;\n    } catch (error) {\n      toast({\n        title: \"Error checking availability\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n  };\n\n  // Service item management\n  const addServiceItem = () => {\n    setServiceItems([...serviceItems, {\n      id: Date.now().toString(),\n      name: \"\",\n      quantity: 1,\n      unitPrice: 0\n    }]);\n  };\n\n  const updateServiceItem = (id: string, field: keyof ServiceItem, value: any) => {\n    setServiceItems(serviceItems.map(item => \n      item.id === id ? { ...item, [field]: value } : item\n    ));\n  };\n\n  const removeServiceItem = (id: string) => {\n    setServiceItems(serviceItems.filter(item => item.id !== id));\n  };\n\n  const getServicesTotal = () => {\n    return serviceItems.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);\n  };\n\n  // Calculate quotation total (hall base price + food + services + taxes)\n  const calculateTotal = () => {\n    if (!selectedHall) return;\n    \n    const isInHouse = form.getValues(\"isInHouseGuest\");\n    const hourlyRate = isInHouse \n      ? (selectedHall.priceInhouse ? Number(selectedHall.priceInhouse) : 0)\n      : (selectedHall.priceWalkin ? Number(selectedHall.priceWalkin) : 0);\n    const basePrice = hourlyRate * watchedDuration;\n    \n    // Add food cost\n    const foodCost = watchedNumberOfPeople * perPersonFoodPrice;\n    \n    // Add services cost\n    const servicesTotal = getServicesTotal();\n    \n    const subtotal = basePrice + foodCost + servicesTotal;\n    \n    // Calculate taxes from database (VAT, service charge, luxury tax)\n    let totalTax = 0;\n    hotelTaxes.forEach((tax: any) => {\n      if (tax.isActive) {\n        const taxAmount = subtotal * (Number(tax.percent) / 100);\n        totalTax += taxAmount;\n      }\n    });\n    \n    const total = subtotal + totalTax;\n    \n    form.setValue(\"totalAmount\", Number(total.toFixed(2)));\n    \n    const advance = form.getValues(\"advancePaid\") || 0;\n    form.setValue(\"balanceDue\", Number((total - advance).toFixed(2)));\n  };\n\n  // Search guest\n  const searchGuest = async () => {\n    if (!guestSearch) return;\n    \n    setIsSearching(true);\n    try {\n      const guest = await apiRequest(\"GET\", `/api/guests/search?phone=${encodeURIComponent(guestSearch)}`) as any;\n      \n      if (guest) {\n        form.setValue(\"customerName\", `${guest.firstName} ${guest.lastName}`);\n        form.setValue(\"customerPhone\", guest.phone);\n        form.setValue(\"customerEmail\", guest.email || \"\");\n        form.setValue(\"guestId\", guest.id);\n        toast({ title: \"Guest found\", description: \"Information auto-filled\" });\n      } else {\n        toast({ title: \"Guest not found\", description: \"Please enter details manually\" });\n      }\n    } catch (error) {\n      toast({ title: \"Search failed\", variant: \"destructive\" });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Recalculate when food or services change\n  useEffect(() => {\n    if (currentStep === 3) {\n      calculateTotal();\n    }\n  }, [perPersonFoodPrice, serviceItems, currentStep]);\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: WizardFormData) => {\n      // Format food and services as description\n      const servicesDescription = serviceItems\n        .filter(item => item.name.trim())\n        .map(item => `${item.name} (${item.quantity} × ${formatCurrency(item.unitPrice)} = ${formatCurrency(item.quantity * item.unitPrice)})`)\n        .join(', ');\n      \n      const foodDescriptionText = perPersonFoodPrice > 0 \n        ? `Food: ${foodDescription || 'Not specified'} (${data.numberOfPeople} persons × ${formatCurrency(perPersonFoodPrice)} = ${formatCurrency(data.numberOfPeople * perPersonFoodPrice)})`\n        : '';\n      \n      const fullServicesDescription = [foodDescriptionText, servicesDescription]\n        .filter(s => s)\n        .join(' | ');\n\n      const bookingData = {\n        hallId: data.hallId,\n        customerName: data.customerName,\n        customerPhone: data.customerPhone,\n        customerEmail: data.customerEmail || undefined,\n        guestId: data.guestId || undefined,\n        isInHouseGuest: data.isInHouseGuest,\n        bookingStartTime: new Date(`${format(data.date, \"yyyy-MM-dd\")}T${data.startTime}`),\n        bookingEndTime: new Date(`${format(data.date, \"yyyy-MM-dd\")}T${data.endTime}`),\n        duration: data.duration.toString(),\n        numberOfPeople: data.numberOfPeople,\n        hallBasePrice: (data.isInHouseGuest \n          ? (selectedHall?.priceInhouse ? Number(selectedHall.priceInhouse) * data.duration : 0)\n          : (selectedHall?.priceWalkin ? Number(selectedHall.priceWalkin) * data.duration : 0)\n        ).toFixed(2),\n        totalAmount: data.totalAmount.toString(),\n        advancePaid: data.advancePaid.toString(),\n        balanceDue: data.balanceDue.toString(),\n        paymentMethod: data.paymentMethod || undefined,\n        specialRequests: data.specialRequests || undefined,\n        foodServices: fullServicesDescription || undefined,\n        status: \"quotation\"\n      };\n\n      await apiRequest(\"POST\", `/api/hotels/${user?.hotelId}/hall-bookings`, bookingData);\n    },\n    onSuccess: () => {\n      toast({ title: \"Booking created successfully\" });\n      form.reset();\n      setCurrentStep(1);\n      setAvailabilityStatus(null);\n      setFoodDescription(\"\");\n      setPerPersonFoodPrice(0);\n      setServiceItems([]);\n      onSuccess();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking failed\",\n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleNext = async () => {\n    let isValid = false;\n    \n    switch (currentStep) {\n      case 1:\n        isValid = await form.trigger([\"hallId\", \"date\", \"startTime\", \"endTime\", \"duration\"]);\n        if (!isValid) {\n          toast({\n            title: \"Validation Error\",\n            description: \"Please fill in all required fields correctly\",\n            variant: \"destructive\"\n          });\n          return;\n        }\n        const isAvailable = await checkAvailability();\n        if (isAvailable) {\n          setCurrentStep(2);\n        }\n        break;\n      case 2:\n        isValid = await form.trigger([\"customerName\", \"customerPhone\", \"customerEmail\", \"numberOfPeople\"]);\n        if (!isValid) {\n          toast({\n            title: \"Validation Error\",\n            description: \"Please fill in all customer information\",\n            variant: \"destructive\"\n          });\n          return;\n        }\n        calculateTotal();\n        setCurrentStep(3);\n        break;\n      case 3:\n        form.handleSubmit((data) => createBookingMutation.mutate(data))();\n        break;\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const steps = [\n    { number: 1, title: \"Hall & Time\", icon: CalendarIcon },\n    { number: 2, title: \"Customer Info\", icon: Users },\n    { number: 3, title: \"Quotation\", icon: DollarSign }\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Booking</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center\">\n            {steps.map((step, index) => {\n              const Icon = step.icon;\n              const isActive = currentStep === step.number;\n              const isCompleted = currentStep > step.number;\n              \n              return (\n                <div key={step.number} className=\"flex items-center flex-1\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className={cn(\n                      \"w-10 h-10 rounded-full flex items-center justify-center transition-colors\",\n                      isActive && \"bg-primary text-primary-foreground\",\n                      isCompleted && \"bg-green-500 text-white\",\n                      !isActive && !isCompleted && \"bg-muted text-muted-foreground\"\n                    )}>\n                      {isCompleted ? <CheckCircle className=\"w-5 h-5\" /> : <Icon className=\"w-5 h-5\" />}\n                    </div>\n                    <span className={cn(\n                      \"text-sm mt-2\",\n                      isActive && \"font-semibold text-primary\",\n                      !isActive && \"text-muted-foreground\"\n                    )}>\n                      {step.title}\n                    </span>\n                  </div>\n                  {index < steps.length - 1 && (\n                    <Separator className={cn(\n                      \"flex-1 mx-2\",\n                      isCompleted && \"bg-green-500\"\n                    )} />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        <Form {...form}>\n          <div className=\"space-y-4\">\n            {currentStep === 1 && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"isInHouseGuest\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer Type</FormLabel>\n                      <Select onValueChange={(value) => {\n                        field.onChange(value === \"true\");\n                        calculateTotal();\n                      }} value={field.value ? \"true\" : \"false\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-customer-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"false\">Walk-in Customer</SelectItem>\n                          <SelectItem value=\"true\">In-House Guest</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"hallId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Select Hall</FormLabel>\n                      <Select onValueChange={(value) => { field.onChange(value); calculateTotal(); }} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-hall-wizard\">\n                            <SelectValue placeholder=\"Choose a hall\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"max-h-[300px] overflow-y-auto\">\n                          {halls.map((hall) => (\n                            <SelectItem key={hall.id} value={hall.id}>\n                              {hall.name} - Capacity: {hall.capacity}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"date\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-col\">\n                      <FormLabel>Date</FormLabel>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <FormControl>\n                            <Button variant=\"outline\" className={cn(\"w-full pl-3 text-left font-normal\", !field.value && \"text-muted-foreground\")} data-testid=\"button-select-date\">\n                              {field.value ? format(field.value, \"PPP\") : <span>Pick a date</span>}\n                              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <Calendar mode=\"single\" selected={field.value} onSelect={field.onChange} disabled={(date) => date < new Date(new Date().setHours(0, 0, 0, 0))} initialFocus />\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input type=\"time\" {...field} onChange={(e) => { field.onChange(e); handleStartTimeChange(e.target.value); }} data-testid=\"input-start-time\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"endTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Time</FormLabel>\n                        <FormControl>\n                          <Input type=\"time\" {...field} onChange={(e) => { field.onChange(e); handleEndTimeChange(e.target.value); }} data-testid=\"input-end-time\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"duration\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Duration: {field.value} hour(s)</FormLabel>\n                      <FormControl>\n                        <Slider\n                          min={1}\n                          max={24}\n                          step={0.5}\n                          value={[field.value]}\n                          onValueChange={(value) => { field.onChange(value[0]); calculateTotal(); }}\n                          data-testid=\"slider-duration\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {selectedHall && (\n                  <Card className=\"p-4 bg-muted\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Price Type:</span>\n                        <span className=\"font-medium\">{form.watch(\"isInHouseGuest\") ? \"In-House Guest\" : \"Walk-in Customer\"}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Hourly Rate:</span>\n                        <span className=\"font-medium\">\n                          {formatCurrency(form.watch(\"isInHouseGuest\") \n                            ? Number(selectedHall.priceInhouse || 0)\n                            : Number(selectedHall.priceWalkin || 0)\n                          )}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Base Price ({watchedDuration}h):</span>\n                        <span className=\"font-medium\">\n                          {formatCurrency((form.watch(\"isInHouseGuest\") \n                            ? Number(selectedHall.priceInhouse || 0)\n                            : Number(selectedHall.priceWalkin || 0)\n                          ) * watchedDuration)}\n                        </span>\n                      </div>\n                    </div>\n                  </Card>\n                )}\n\n                {availabilityStatus && !availabilityStatus.available && availabilityStatus.suggestions && availabilityStatus.suggestions.length > 0 && (\n                  <Card className=\"p-4 border-yellow-500\">\n                    <div className=\"flex items-start gap-2\">\n                      <AlertCircle className=\"w-5 h-5 text-yellow-500 mt-0.5\" />\n                      <div className=\"space-y-2 flex-1\">\n                        <p className=\"text-sm font-medium\">Alternative Time Slots:</p>\n                        {availabilityStatus.suggestions.map((slot, idx) => (\n                          <Button\n                            key={idx}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"w-full justify-start\"\n                            onClick={() => {\n                              const startTime = format(new Date(slot.startTime), \"HH:mm\");\n                              const endTime = format(new Date(slot.endTime), \"HH:mm\");\n                              form.setValue(\"startTime\", startTime);\n                              form.setValue(\"endTime\", endTime);\n                              handleStartTimeChange(startTime);\n                              handleEndTimeChange(endTime);\n                              setAvailabilityStatus(null);\n                            }}\n                          >\n                            <Clock className=\"w-4 h-4 mr-2\" />\n                            {format(new Date(slot.startTime), \"h:mm a\")} - {format(new Date(slot.endTime), \"h:mm a\")}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  </Card>\n                )}\n              </>\n            )}\n\n            {currentStep === 2 && (\n              <>\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Search by phone or email\"\n                    value={guestSearch}\n                    onChange={(e) => setGuestSearch(e.target.value)}\n                    data-testid=\"input-guest-search\"\n                  />\n                  <Button type=\"button\" onClick={searchGuest} disabled={isSearching} data-testid=\"button-search-guest\">\n                    {isSearching ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Search className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"customerName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter customer name\" data-testid=\"input-customer-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"customerPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Phone number\" data-testid=\"input-customer-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"customerEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" placeholder=\"email@example.com\" data-testid=\"input-customer-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"numberOfPeople\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of People</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" min={1} onChange={(e) => field.onChange(parseInt(e.target.value) || 1)} data-testid=\"input-number-people\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </>\n            )}\n\n            {currentStep === 3 && (\n              <>\n                <Separator className=\"my-4\" />\n                \n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-lg\">Food Buffet (Per Person)</h3>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium\">Food Items Description</label>\n                    <Textarea\n                      value={foodDescription}\n                      onChange={(e) => setFoodDescription(e.target.value)}\n                      placeholder=\"E.g., Chicken curry, Dal, Vegetable curry, Rice, Naan, Mixed salad, Dessert...\"\n                      rows={3}\n                      data-testid=\"textarea-food-description\"\n                    />\n                    <p className=\"text-sm text-muted-foreground mt-1\">Describe what food items are included in the buffet</p>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium\">Price Per Person</label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min={0}\n                      value={perPersonFoodPrice}\n                      onChange={(e) => setPerPersonFoodPrice(parseFloat(e.target.value) || 0)}\n                      data-testid=\"input-per-person-price\"\n                    />\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Total food cost: {formatCurrency(watchedNumberOfPeople * perPersonFoodPrice)}\n                    </p>\n                  </div>\n                </div>\n\n                <Separator className=\"my-4\" />\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-semibold text-lg\">Additional Services</h3>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={addServiceItem}\n                      data-testid=\"button-add-service\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-1\" />\n                      Add Service\n                    </Button>\n                  </div>\n                  \n                  {serviceItems.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No additional services added. Click \"Add Service\" to include decoration, sound system, etc.</p>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {serviceItems.map((item) => (\n                        <Card key={item.id} className=\"p-3\">\n                          <div className=\"grid grid-cols-12 gap-2 items-end\">\n                            <div className=\"col-span-5\">\n                              <label className=\"text-xs text-muted-foreground\">Service Name</label>\n                              <Input\n                                placeholder=\"E.g., Decoration, Sound System\"\n                                value={item.name}\n                                onChange={(e) => updateServiceItem(item.id, 'name', e.target.value)}\n                                data-testid={`input-service-name-${item.id}`}\n                              />\n                            </div>\n                            <div className=\"col-span-2\">\n                              <label className=\"text-xs text-muted-foreground\">Qty</label>\n                              <Input\n                                type=\"number\"\n                                min={1}\n                                value={item.quantity}\n                                onChange={(e) => updateServiceItem(item.id, 'quantity', parseInt(e.target.value) || 1)}\n                                data-testid={`input-service-qty-${item.id}`}\n                              />\n                            </div>\n                            <div className=\"col-span-3\">\n                              <label className=\"text-xs text-muted-foreground\">Unit Price</label>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                min={0}\n                                value={item.unitPrice}\n                                onChange={(e) => updateServiceItem(item.id, 'unitPrice', parseFloat(e.target.value) || 0)}\n                                data-testid={`input-service-price-${item.id}`}\n                              />\n                            </div>\n                            <div className=\"col-span-2 flex items-center gap-2\">\n                              <div className=\"text-sm font-medium\">\n                                {formatCurrency(item.quantity * item.unitPrice)}\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeServiceItem(item.id)}\n                                data-testid={`button-remove-service-${item.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4 text-destructive\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <Separator className=\"my-4\" />\n\n                <Card className=\"p-4 bg-muted\">\n                  <h3 className=\"font-semibold mb-3\">Quotation Breakdown</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Hall Base Price ({watchedDuration}h):</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency((form.watch(\"isInHouseGuest\")\n                          ? (selectedHall?.priceInhouse ? Number(selectedHall.priceInhouse) : 0)\n                          : (selectedHall?.priceWalkin ? Number(selectedHall.priceWalkin) : 0)\n                        ) * watchedDuration)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Food ({watchedNumberOfPeople} × {formatCurrency(perPersonFoodPrice)}):\n                      </span>\n                      <span className=\"font-medium\">{formatCurrency(watchedNumberOfPeople * perPersonFoodPrice)}</span>\n                    </div>\n                    {serviceItems.length > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Additional Services:</span>\n                        <span className=\"font-medium\">{formatCurrency(getServicesTotal())}</span>\n                      </div>\n                    )}\n                    <Separator />\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Subtotal:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency((form.watch(\"isInHouseGuest\")\n                          ? (selectedHall?.priceInhouse ? Number(selectedHall.priceInhouse) : 0)\n                          : (selectedHall?.priceWalkin ? Number(selectedHall.priceWalkin) : 0)\n                        ) * watchedDuration + watchedNumberOfPeople * perPersonFoodPrice + getServicesTotal())}\n                      </span>\n                    </div>\n                    {hotelTaxes.filter((tax: any) => tax.isActive).map((tax: any) => {\n                      const subtotal = (form.watch(\"isInHouseGuest\")\n                        ? (selectedHall?.priceInhouse ? Number(selectedHall.priceInhouse) : 0)\n                        : (selectedHall?.priceWalkin ? Number(selectedHall.priceWalkin) : 0)\n                      ) * watchedDuration + watchedNumberOfPeople * perPersonFoodPrice + getServicesTotal();\n                      const taxAmount = subtotal * (Number(tax.percent) / 100);\n                      \n                      return (\n                        <div key={tax.id} className=\"flex justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {tax.taxType.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())} ({tax.percent}%):\n                          </span>\n                          <span className=\"font-medium\">\n                            {formatCurrency(taxAmount)}\n                          </span>\n                        </div>\n                      );\n                    })}\n                    <Separator />\n                    <div className=\"flex justify-between text-lg font-bold\">\n                      <span>Quotation Amount:</span>\n                      <span>{formatCurrency(form.getValues(\"totalAmount\"))}</span>\n                    </div>\n                  </div>\n                </Card>\n\n                <FormField\n                  control={form.control}\n                  name=\"advancePaid\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Advance Payment</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={field.value}\n                          onChange={(e) => {\n                            const advance = Number(e.target.value || 0);\n                            field.onChange(advance);\n                            const total = form.getValues(\"totalAmount\");\n                            form.setValue(\"balanceDue\", Number((total - advance).toFixed(2)));\n                          }}\n                          data-testid=\"input-advance-paid\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-payment-method\">\n                            <SelectValue placeholder=\"Select payment method\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"pos\">POS/Card</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                          <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"specialRequests\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Special Requests (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Any special requirements or notes\" rows={3} data-testid=\"textarea-special-requests\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Card className=\"p-4 border-green-500 bg-green-50 dark:bg-green-950\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Balance Due:</span>\n                    <span className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                      {formatCurrency(form.getValues(\"balanceDue\"))}\n                    </span>\n                  </div>\n                </Card>\n              </>\n            )}\n          </div>\n\n          <div className=\"flex justify-between mt-6\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleBack}\n              disabled={currentStep === 1}\n              data-testid=\"button-back\"\n            >\n              Back\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={handleNext}\n              disabled={createBookingMutation.isPending}\n              data-testid=\"button-next\"\n            >\n              {createBookingMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n              {currentStep === 4 ? \"Create Booking\" : \"Next\"}\n            </Button>\n          </div>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":41161},"client/src/pages/dashboard/cashier/maintenance.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function CashierMaintenance() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    enabled: !!user,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy?.id === user?.id);\n    }\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    events: ['maintenance:created', 'maintenance:updated', 'maintenance:deleted']\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit New Request\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., POS system malfunction\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Cashier Counter, Front Desk\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                  data-testid=\"input-location\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                  data-testid=\"input-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  data-testid=\"input-photo\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" data-testid=\"img-photo-preview\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-request\"\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit Request\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-requests\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                    data-testid={`card-request-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\" data-testid={`text-title-${request.id}`}>\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`text-location-${request.id}`}>\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\" data-testid={`text-description-${request.id}`}>\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\" data-testid={`badge-priority-${request.id}`}>\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\" data-testid={`badge-status-${request.id}`}>\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\" data-testid={`text-date-${request.id}`}>\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 pl-8\" data-testid={`text-resolved-${request.id}`}>\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10562},"client/src/pages/dashboard/manager/vendor-payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Ban, Plus, DollarSign, Calendar, User, FileText } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\n\ninterface Vendor {\n  id: string;\n  name: string;\n  contact: any;\n  hotelId: string;\n  createdAt: string;\n}\n\ninterface Transaction {\n  id: string;\n  hotelId: string;\n  txnType: string;\n  amount: string;\n  currency: string;\n  paymentMethod: string;\n  vendorId: string | null;\n  purpose: string;\n  reference: string;\n  createdBy: string;\n  createdAt: string;\n  deletedAt: string | null;\n  isVoided: boolean;\n  voidedBy: string | null;\n  voidedAt: string | null;\n  voidReason: string | null;\n}\n\nexport default function VendorPayments() {\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n  const [showVoidDialog, setShowVoidDialog] = useState(false);\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [voidReason, setVoidReason] = useState(\"\");\n  const [vendorName, setVendorName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\n  const [purpose, setPurpose] = useState(\"\");\n  const [reference, setReference] = useState(\"\");\n\n  const queryClient = useQueryClient();\n\n  // Get current user and hotel info\n  const { data: currentUser, isLoading: userLoading } = useQuery<any>({\n    queryKey: [\"/api/user\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/user\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch user\");\n      return response.json();\n    }\n  });\n\n  // Fetch vendors for this hotel\n  const { data: vendors = [], isLoading: vendorsLoading } = useQuery<Vendor[]>({\n    queryKey: [\"/api/hotels/current/vendors\"],\n    refetchInterval: 3000,\n    enabled: !!currentUser?.hotelId,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/vendors\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch vendors\");\n      return response.json();\n    }\n  });\n\n  // Fetch vendor payments (transactions with vendorId)\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!currentUser?.hotelId,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/transactions\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch transactions\");\n      const allTransactions = await response.json();\n      // Filter to only vendor payments\n      return allTransactions.filter((t: Transaction) => t.vendorId && t.txnType === \"vendor_payment\");\n    }\n  });\n\n  // Create payment mutation\n  const createPayment = useMutation({\n    mutationFn: async (paymentData: any) => {\n      if (!currentUser?.hotelId || !currentUser?.id) {\n        throw new Error(\"User information not available\");\n      }\n      \n      const response = await fetch(\"/api/transactions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...paymentData,\n          hotelId: currentUser.hotelId,\n          txnType: \"vendor_payment\",\n          createdBy: currentUser.id\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to create payment\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast.success(\"Payment recorded successfully\");\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast.error(error.message || \"Failed to record payment\");\n    }\n  });\n\n  // Void payment mutation\n  const voidPayment = useMutation({\n    mutationFn: async ({ transactionId, reason }: { transactionId: string; reason: string }) => {\n      const response = await fetch(`/api/transactions/${transactionId}/void`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ reason })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to void payment\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast.success(\"Payment voided successfully\");\n      setShowVoidDialog(false);\n      setVoidReason(\"\");\n      setSelectedTransaction(null);\n    },\n    onError: (error: Error) => {\n      toast.error(error.message || \"Failed to void payment\");\n    }\n  });\n\n  const resetForm = () => {\n    setVendorName(\"\");\n    setAmount(\"\");\n    setPaymentMethod(\"\");\n    setPurpose(\"\");\n    setReference(\"\");\n    setShowPaymentForm(false);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!currentUser?.hotelId || !currentUser?.id) {\n      toast.error(\"Please wait for user information to load\");\n      return;\n    }\n    \n    if (!vendorName.trim() || !amount || !paymentMethod || !purpose || !reference.trim()) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (isNaN(Number(amount)) || Number(amount) <= 0) {\n      toast.error(\"Please enter a valid amount\");\n      return;\n    }\n\n    try {\n      // Find or create vendor\n      let vendor = vendors.find(v => v.name.toLowerCase() === vendorName.trim().toLowerCase());\n      \n      if (!vendor) {\n        // Create new vendor\n        const createResponse = await fetch(\"/api/hotels/current/vendors\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          credentials: \"include\",\n          body: JSON.stringify({\n            name: vendorName.trim(),\n            contact: {}\n          })\n        });\n        \n        if (!createResponse.ok) {\n          throw new Error(\"Failed to create vendor\");\n        }\n        \n        vendor = await createResponse.json();\n        queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vendors\"] });\n      }\n\n      if (!vendor) {\n        throw new Error(\"Failed to get vendor information\");\n      }\n\n      // Create payment with vendor ID\n      createPayment.mutate({\n        vendorId: vendor.id,\n        amount: Number(amount).toFixed(2),\n        currency: \"NPR\",\n        paymentMethod,\n        purpose,\n        reference: reference.trim()\n      });\n    } catch (error: any) {\n      toast.error(error.message || \"Failed to process payment\");\n    }\n  };\n\n  const getVendorName = (vendorId: string) => {\n    const vendor = vendors.find(v => v.id === vendorId);\n    return vendor?.name || \"Unknown Vendor\";\n  };\n\n  const formatCurrency = (amount: string) => {\n    return `NPR ${Number(amount).toLocaleString()}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n\n  if (userLoading || vendorsLoading || transactionsLoading) {\n    return (\n      <DashboardLayout title=\"Vendor Payments\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Vendor Payments\">\n      <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Vendor Payments</h1>\n          <p className=\"text-gray-600 mt-1\">Manage payments to vendors and suppliers</p>\n        </div>\n        <Button \n          onClick={() => setShowPaymentForm(true)}\n          className=\"flex items-center gap-2\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Record Payment\n        </Button>\n      </div>\n\n      {/* Payment Stats */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Payments</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrency(transactions.reduce((sum, t) => sum + Number(t.amount), 0).toFixed(2))}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Vendors</CardTitle>\n            <User className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{vendors.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Registered vendors</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Recent Payments</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{transactions.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Total records</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payment Form */}\n      {showPaymentForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Record New Payment</CardTitle>\n            <CardDescription>Enter payment details for vendor</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"vendor\">Vendor Name *</Label>\n                  <Input\n                    id=\"vendor\"\n                    placeholder=\"Enter vendor name\"\n                    value={vendorName}\n                    onChange={(e) => setVendorName(e.target.value)}\n                    required\n                  />\n                  <p className=\"text-xs text-muted-foreground\">Type vendor name (will be created if doesn't exist)</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"amount\">Amount (NPR) *</Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"0.00\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"paymentMethod\">Payment Method *</Label>\n                  <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"cheque\">Cheque</SelectItem>\n                      <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      <SelectItem value=\"digital_wallet\">Digital Wallet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"reference\">Reference Number <span className=\"text-red-500\">*</span></Label>\n                  <Input\n                    id=\"reference\"\n                    placeholder=\"Invoice/PO number, cheque number, etc.\"\n                    value={reference}\n                    onChange={(e) => setReference(e.target.value)}\n                    data-testid=\"input-reference\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"purpose\">Purpose *</Label>\n                <Textarea\n                  id=\"purpose\"\n                  placeholder=\"Description of payment purpose\"\n                  value={purpose}\n                  onChange={(e) => setPurpose(e.target.value)}\n                  required\n                />\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button type=\"submit\" disabled={createPayment.isPending}>\n                  {createPayment.isPending ? \"Recording...\" : \"Record Payment\"}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Payment History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Payment History</CardTitle>\n          <CardDescription>Recent vendor payments</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {transactions.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No vendor payments recorded yet</p>\n              <p className=\"text-sm\">Click \"Record Payment\" to add your first payment</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {transactions.map((transaction) => (\n                <div \n                  key={transaction.id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <h3 className=\"font-medium\">{getVendorName(transaction.vendorId!)}</h3>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {transaction.paymentMethod.replace('_', ' ')}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-1\">{transaction.purpose}</p>\n                    <p className=\"text-xs text-gray-500\">{formatDate(transaction.createdAt)}</p>\n                    {transaction.reference && (\n                      <p className=\"text-xs text-gray-500\">Ref: {transaction.reference}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-lg\">{formatCurrency(transaction.amount)}</p>\n                    {transaction.isVoided ? (\n                      <Badge variant=\"destructive\" className=\"mt-2\">VOIDED</Badge>\n                    ) : (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedTransaction(transaction);\n                          setShowVoidDialog(true);\n                        }}\n                        className=\"text-orange-600 hover:text-orange-700 hover:bg-orange-50\"\n                        disabled={voidPayment.isPending}\n                        data-testid={`button-void-${transaction.id}`}\n                      >\n                        <Ban className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n\n    {/* Void Transaction Dialog */}\n    <Dialog open={showVoidDialog} onOpenChange={setShowVoidDialog}>\n      <DialogContent data-testid=\"dialog-void-transaction\">\n        <DialogHeader>\n          <DialogTitle>Void Payment Transaction</DialogTitle>\n          <DialogDescription>\n            Voiding a payment transaction is permanent and creates an audit trail. \n            Please provide a detailed reason (minimum 15 characters).\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"void-reason\">Reason for Voiding</Label>\n            <Textarea\n              id=\"void-reason\"\n              placeholder=\"e.g., Duplicate payment entry, incorrect amount, payment reversal requested...\"\n              value={voidReason}\n              onChange={(e) => setVoidReason(e.target.value)}\n              rows={4}\n              data-testid=\"input-void-reason\"\n            />\n            <p className=\"text-sm text-gray-500\">\n              {voidReason.length}/15 characters minimum\n            </p>\n          </div>\n          {selectedTransaction && (\n            <div className=\"p-3 bg-gray-50 rounded-lg space-y-1\">\n              <p className=\"text-sm font-medium\">Transaction Details:</p>\n              <p className=\"text-sm text-gray-600\">Amount: {formatCurrency(selectedTransaction.amount)}</p>\n              <p className=\"text-sm text-gray-600\">Vendor: {getVendorName(selectedTransaction.vendorId!)}</p>\n              <p className=\"text-sm text-gray-600\">Purpose: {selectedTransaction.purpose}</p>\n            </div>\n          )}\n        </div>\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              setShowVoidDialog(false);\n              setVoidReason(\"\");\n              setSelectedTransaction(null);\n            }}\n            data-testid=\"button-cancel-void\"\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"destructive\"\n            onClick={() => {\n              if (selectedTransaction && voidReason.trim().length >= 15) {\n                voidPayment.mutate({\n                  transactionId: selectedTransaction.id,\n                  reason: voidReason.trim()\n                });\n              }\n            }}\n            disabled={voidReason.trim().length < 15 || voidPayment.isPending}\n            data-testid=\"button-confirm-void\"\n          >\n            {voidPayment.isPending ? \"Voiding...\" : \"Void Transaction\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n    </DashboardLayout>\n  );\n}","size_bytes":19367},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { lazy, Suspense } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ConfirmDialogProvider } from \"@/hooks/use-confirm-dialog\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\n\n// Eager load auth page only (needed immediately)\nimport AuthPage from \"@/pages/auth-page\";\n\n// Lazy load all dashboard pages for code splitting\nconst NotFound = lazy(() => import(\"@/pages/not-found\"));\nconst SuperAdminDashboard = lazy(() => import(\"@/pages/dashboard/super-admin\"));\nconst OwnerDashboard = lazy(() => import(\"@/pages/dashboard/owner\"));\nconst OwnerFinancialOverview = lazy(() => import(\"@/pages/dashboard/owner/financial-overview\"));\nconst OwnerInventoryTracking = lazy(() => import(\"@/pages/dashboard/owner/inventory-tracking\"));\nconst OwnerRoomOccupancy = lazy(() => import(\"@/pages/dashboard/owner/room-occupancy\"));\nconst OwnerTaxConfiguration = lazy(() => import(\"@/pages/dashboard/owner/tax-configuration\"));\nconst OwnerStaffManagement = lazy(() => import(\"@/pages/dashboard/owner/staff-management\"));\nconst OwnerAttendanceReports = lazy(() => import(\"@/pages/dashboard/owner/attendance-reports\"));\nconst OwnerLeavePolicies = lazy(() => import(\"@/pages/dashboard/owner/leave-policies\"));\nconst OwnerReports = lazy(() => import(\"@/pages/dashboard/owner/reports\"));\nconst OwnerReport = lazy(() => import(\"@/pages/dashboard/owner/report\"));\nconst OwnerAuditTransparency = lazy(() => import(\"@/pages/dashboard/owner/audit-transparency\"));\nconst OwnerAmenities = lazy(() => import(\"@/pages/dashboard/owner/amenities\"));\nconst ManagerDashboard = lazy(() => import(\"@/pages/dashboard/manager\"));\nconst StaffManagement = lazy(() => import(\"@/pages/dashboard/manager/staff-management\"));\nconst AttendanceReports = lazy(() => import(\"@/pages/dashboard/manager/attendance-reports\"));\nconst VendorPayments = lazy(() => import(\"@/pages/dashboard/manager/vendor-payments\"));\nconst DiscountVouchers = lazy(() => import(\"@/pages/dashboard/manager/discount-vouchers\"));\nconst RoomSetup = lazy(() => import(\"@/pages/dashboard/manager/room-setup\"));\nconst RoomPricing = lazy(() => import(\"@/pages/dashboard/manager/room-pricing\"));\nconst AmenitiesSetup = lazy(() => import(\"@/pages/dashboard/manager/amenities\"));\nconst ManagerTransactions = lazy(() => import(\"@/pages/dashboard/manager/transactions\"));\nconst ManagerLeaveApprovals = lazy(() => import(\"@/pages/dashboard/manager/leave-approvals\"));\nconst ManagerMealPlans = lazy(() => import(\"@/pages/dashboard/manager/meal-plans\"));\nconst ManagerMaintenanceRequests = lazy(() => import(\"@/pages/dashboard/manager/maintenance-requests\"));\nconst HousekeepingSupervisorDashboard = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor\"));\nconst HousekeepingSupervisorStaffManagement = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor/staff-management\"));\nconst HousekeepingSupervisorDutyTracking = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor/duty-tracking\"));\nconst HousekeepingSupervisorCleaningQueue = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor/cleaning-queue\"));\nconst HousekeepingSupervisorTaskAssignment = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor/task-assignment\"));\nconst HousekeepingSupervisorMaintenanceRequests = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor/maintenance-requests\"));\nconst HousekeepingSupervisorStaffTracking = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor/staff-tracking\"));\nconst HousekeepingSupervisorLeaveRequests = lazy(() => import(\"@/pages/dashboard/housekeeping-supervisor/leave-requests\"));\nconst HousekeepingStaffDashboard = lazy(() => import(\"@/pages/dashboard/housekeeping-staff\"));\nconst HousekeepingStaffDutyStatus = lazy(() => import(\"@/pages/dashboard/housekeeping-staff/duty-status\"));\nconst HousekeepingStaffMyTasks = lazy(() => import(\"@/pages/dashboard/housekeeping-staff/my-tasks\"));\nconst HousekeepingStaffMaintenanceReports = lazy(() => import(\"@/pages/dashboard/housekeeping-staff/maintenance-reports\"));\nconst RestaurantBarManagerDashboard = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager\"));\nconst RestaurantStaffManagement = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/staff-management\"));\nconst RestaurantTaskAssignment = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/task-assignment\"));\nconst RestaurantMenuManagement = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/menu-management\"));\nconst RestaurantTableSetup = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/table-setup\"));\nconst RestaurantInventoryTracking = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/inventory-tracking\"));\nconst RestaurantDutyTracking = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/duty-tracking\"));\nconst RestaurantLeaveRequests = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/leave-requests\"));\nconst RestaurantMaintenanceRequests = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/maintenance-requests\"));\nconst RestaurantBarManagerWastage = lazy(() => import(\"@/pages/dashboard/restaurant-bar-manager/wastage\"));\nconst WaiterDashboard = lazy(() => import(\"@/pages/dashboard/waiter\"));\nconst WaiterMyTasks = lazy(() => import(\"@/pages/dashboard/waiter/my-tasks\"));\nconst WaiterMaintenance = lazy(() => import(\"@/pages/dashboard/waiter/maintenance\"));\nconst WaiterDutyStatus = lazy(() => import(\"@/pages/dashboard/waiter/duty-status\"));\nconst WaiterOrders = lazy(() => import(\"@/pages/dashboard/waiter/orders\"));\nconst WaiterBilling = lazy(() => import(\"@/pages/dashboard/waiter/billing\"));\nconst WaiterFoodSearch = lazy(() => import(\"@/pages/dashboard/waiter/food-search\"));\nconst KitchenStaffDashboard = lazy(() => import(\"@/pages/dashboard/kitchen-staff\"));\nconst KitchenStaffMaintenance = lazy(() => import(\"@/pages/dashboard/kitchen-staff/maintenance\"));\nconst BartenderDashboard = lazy(() => import(\"@/pages/dashboard/bartender\"));\nconst BartenderMaintenance = lazy(() => import(\"@/pages/dashboard/bartender/maintenance\"));\nconst BaristaDashboard = lazy(() => import(\"@/pages/dashboard/barista\"));\nconst BaristaMaintenance = lazy(() => import(\"@/pages/dashboard/barista/maintenance\"));\nconst CashierDashboard = lazy(() => import(\"@/pages/dashboard/cashier\"));\nconst CashierTableBilling = lazy(() => import(\"@/pages/dashboard/cashier/table-billing\"));\nconst CashierMaintenance = lazy(() => import(\"@/pages/dashboard/cashier/maintenance\"));\nconst SecurityHeadDashboard = lazy(() => import(\"@/pages/dashboard/security-head\"));\nconst SecurityHeadStaffManagement = lazy(() => import(\"@/pages/dashboard/security-head/staff-management\"));\nconst SecurityHeadLeaveRequests = lazy(() => import(\"@/pages/dashboard/security-head/leave-requests\"));\nconst SecurityHeadVehicleLogs = lazy(() => import(\"@/pages/dashboard/security-head/vehicle-logs\"));\nconst SecurityGuardDashboard = lazy(() => import(\"@/pages/dashboard/security-guard\"));\nconst SurveillanceOfficerDashboard = lazy(() => import(\"@/pages/dashboard/surveillance-officer\"));\nconst SurveillanceOfficerDutyStatus = lazy(() => import(\"@/pages/dashboard/surveillance-officer/duty-status\"));\nconst SurveillanceOfficerMyTasks = lazy(() => import(\"@/pages/dashboard/surveillance-officer/my-tasks\"));\nconst SurveillanceOfficerVehicleLogs = lazy(() => import(\"@/pages/dashboard/surveillance-officer/vehicle-logs\"));\nconst SurveillanceOfficerMaintenanceReports = lazy(() => import(\"@/pages/dashboard/surveillance-officer/maintenance-reports\"));\nconst FinanceDashboard = lazy(() => import(\"@/pages/dashboard/finance\"));\nconst FinanceTransactions = lazy(() => import(\"@/pages/dashboard/finance/transactions\"));\nconst FinanceRevenue = lazy(() => import(\"@/pages/dashboard/finance/revenue\"));\nconst FinanceExpenses = lazy(() => import(\"@/pages/dashboard/finance/expenses\"));\nconst FinanceCashFlow = lazy(() => import(\"@/pages/dashboard/finance/cashflow\"));\nconst FinanceReconciliation = lazy(() => import(\"@/pages/dashboard/finance/reconciliation\"));\nconst FinanceReports = lazy(() => import(\"@/pages/dashboard/finance/reports\"));\nconst FinanceMaintenanceRequests = lazy(() => import(\"@/pages/dashboard/finance/maintenance-requests\"));\nconst FrontDeskDashboard = lazy(() => import(\"@/pages/dashboard/front-desk\"));\nconst FrontdeskMaintenanceRequests = lazy(() => import(\"@/pages/dashboard/frontdesk/maintenance-requests\"));\nconst GuestsPage = lazy(() => import(\"@/pages/dashboard/guests\"));\nconst StorekeeperDashboard = lazy(() => import(\"@/pages/dashboard/storekeeper\"));\nconst StorekeeperDutyStatus = lazy(() => import(\"@/pages/dashboard/storekeeper/duty-status\"));\nconst StorekeeperInventoryTracking = lazy(() => import(\"@/pages/dashboard/storekeeper/inventory-tracking\"));\nconst StorekeeperInventoryManagement = lazy(() => import(\"@/pages/dashboard/storekeeper/inventory-management\"));\nconst StorekeeperMaintenanceRequests = lazy(() => import(\"@/pages/dashboard/storekeeper/maintenance-requests\"));\nconst StorekeeperMyTasks = lazy(() => import(\"@/pages/dashboard/storekeeper/my-tasks\"));\nconst RequestStock = lazy(() => import(\"@/pages/dashboard/stock-requests/request-stock\"));\nconst StorekeeperStockRequests = lazy(() => import(\"@/pages/dashboard/storekeeper/stock-requests\"));\nconst DepartmentStockRequests = lazy(() => import(\"@/pages/dashboard/department-stock-requests\"));\nconst MyProfile = lazy(() => import(\"@/pages/dashboard/my-profile\"));\nconst HallBookings = lazy(() => import(\"@/pages/dashboard/hall-bookings\"));\nconst HallCalendar = lazy(() => import(\"@/pages/dashboard/hall-calendar\"));\nconst BookingDetail = lazy(() => import(\"@/pages/dashboard/booking-detail\"));\nconst LeaveRequests = lazy(() => import(\"@/pages/dashboard/leave-requests\"));\n\n// Loading component\nfunction LoadingFallback() {\n  return (\n    <div className=\"flex items-center justify-center h-screen\">\n      <div className=\"text-center\">\n        <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]\" role=\"status\">\n          <span className=\"!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]\">Loading...</span>\n        </div>\n        <p className=\"mt-2 text-sm text-muted-foreground\">Loading...</p>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Suspense fallback={<LoadingFallback />}>\n      <Switch>\n        <ProtectedRoute path=\"/\" component={SuperAdminDashboard} allowedRoles={[\"super_admin\"]} />\n        \n        {/* Owner Routes */}\n        <ProtectedRoute path=\"/owner\" component={OwnerDashboard} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/financial\" component={OwnerFinancialOverview} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/inventory\" component={OwnerInventoryTracking} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/occupancy\" component={OwnerRoomOccupancy} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/taxes\" component={OwnerTaxConfiguration} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/staff\" component={OwnerStaffManagement} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/attendance\" component={OwnerAttendanceReports} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/leave-policies\" component={OwnerLeavePolicies} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/leave-approvals\" component={ManagerLeaveApprovals} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/report\" component={OwnerReport} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/reports\" component={OwnerReports} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/audit-transparency\" component={OwnerAuditTransparency} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/amenities\" component={OwnerAmenities} allowedRoles={[\"owner\"]} />\n        <ProtectedRoute path=\"/owner/vouchers\" component={DiscountVouchers} allowedRoles={[\"owner\"]} />\n        \n        <ProtectedRoute path=\"/manager\" component={ManagerDashboard} allowedRoles={[\"manager\"]} />\n        <ProtectedRoute path=\"/manager/staff\" component={StaffManagement} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/attendance-reports\" component={AttendanceReports} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/vendor-payments\" component={VendorPayments} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/discount-vouchers\" component={DiscountVouchers} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/room-setup\" component={RoomSetup} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/room-pricing\" component={RoomPricing} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/amenities\" component={AmenitiesSetup} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/meal-plans\" component={ManagerMealPlans} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/transactions\" component={ManagerTransactions} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/leave-approvals\" component={ManagerLeaveApprovals} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/manager/maintenance-requests\" component={ManagerMaintenanceRequests} allowedRoles={[\"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor\" component={HousekeepingSupervisorDashboard} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/staff-management\" component={HousekeepingSupervisorStaffManagement} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/duty-tracking\" component={HousekeepingSupervisorDutyTracking} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/cleaning-queue\" component={HousekeepingSupervisorCleaningQueue} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/task-assignment\" component={HousekeepingSupervisorTaskAssignment} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/maintenance-requests\" component={HousekeepingSupervisorMaintenanceRequests} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/staff-tracking\" component={HousekeepingSupervisorStaffTracking} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/leave-requests\" component={HousekeepingSupervisorLeaveRequests} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-supervisor/leave-approvals\" component={ManagerLeaveApprovals} allowedRoles={[\"housekeeping_supervisor\"]} />\n        <ProtectedRoute path=\"/housekeeping-staff\" component={HousekeepingStaffDashboard} allowedRoles={[\"housekeeping_staff\"]} />\n        <ProtectedRoute path=\"/housekeeping-staff/duty-status\" component={HousekeepingStaffDutyStatus} allowedRoles={[\"housekeeping_staff\"]} />\n        <ProtectedRoute path=\"/housekeeping-staff/my-tasks\" component={HousekeepingStaffMyTasks} allowedRoles={[\"housekeeping_staff\"]} />\n        <ProtectedRoute path=\"/housekeeping-staff/request-stock\" component={RequestStock} allowedRoles={[\"housekeeping_staff\"]} />\n        <ProtectedRoute path=\"/housekeeping-staff/maintenance-reports\" component={HousekeepingStaffMaintenanceReports} allowedRoles={[\"housekeeping_staff\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager\" component={RestaurantBarManagerDashboard} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/staff-management\" component={RestaurantStaffManagement} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/task-assignment\" component={RestaurantTaskAssignment} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/menu-management\" component={RestaurantMenuManagement} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/table-setup\" component={RestaurantTableSetup} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/inventory-tracking\" component={RestaurantInventoryTracking} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/stock-requests\" component={DepartmentStockRequests} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/duty-tracking\" component={RestaurantDutyTracking} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/leave-requests\" component={RestaurantLeaveRequests} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/leave-approvals\" component={ManagerLeaveApprovals} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/maintenance-requests\" component={RestaurantMaintenanceRequests} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/restaurant-bar-manager/wastage\" component={RestaurantBarManagerWastage} allowedRoles={[\"restaurant_bar_manager\"]} />\n        <ProtectedRoute path=\"/waiter\" component={WaiterDashboard} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/waiter/my-tasks\" component={WaiterMyTasks} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/waiter/maintenance\" component={WaiterMaintenance} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/waiter/duty-status\" component={WaiterDutyStatus} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/waiter/orders\" component={WaiterOrders} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/waiter/billing\" component={WaiterBilling} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/waiter/food-search\" component={WaiterFoodSearch} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/waiter/request-stock\" component={RequestStock} allowedRoles={[\"waiter\"]} />\n        <ProtectedRoute path=\"/kitchen-staff\" component={KitchenStaffDashboard} allowedRoles={[\"kitchen_staff\"]} />\n        <ProtectedRoute path=\"/kitchen-staff/request-stock\" component={RequestStock} allowedRoles={[\"kitchen_staff\"]} />\n        <ProtectedRoute path=\"/kitchen-staff/maintenance\" component={KitchenStaffMaintenance} allowedRoles={[\"kitchen_staff\"]} />\n        <ProtectedRoute path=\"/bartender\" component={BartenderDashboard} allowedRoles={[\"bartender\"]} />\n        <ProtectedRoute path=\"/bartender/request-stock\" component={RequestStock} allowedRoles={[\"bartender\"]} />\n        <ProtectedRoute path=\"/bartender/maintenance\" component={BartenderMaintenance} allowedRoles={[\"bartender\"]} />\n        <ProtectedRoute path=\"/barista\" component={BaristaDashboard} allowedRoles={[\"barista\"]} />\n        <ProtectedRoute path=\"/barista/request-stock\" component={RequestStock} allowedRoles={[\"barista\"]} />\n        <ProtectedRoute path=\"/barista/maintenance\" component={BaristaMaintenance} allowedRoles={[\"barista\"]} />\n        <ProtectedRoute path=\"/cashier\" component={CashierDashboard} allowedRoles={[\"cashier\"]} />\n        <ProtectedRoute path=\"/cashier/table-billing\" component={CashierTableBilling} allowedRoles={[\"cashier\"]} />\n        <ProtectedRoute path=\"/cashier/maintenance\" component={CashierMaintenance} allowedRoles={[\"cashier\"]} />\n        <ProtectedRoute path=\"/security-head\" component={SecurityHeadDashboard} allowedRoles={[\"security_head\"]} />\n        <ProtectedRoute path=\"/security-head/staff-management\" component={SecurityHeadStaffManagement} allowedRoles={[\"security_head\"]} />\n        <ProtectedRoute path=\"/security-head/vehicles\" component={SecurityHeadVehicleLogs} allowedRoles={[\"security_head\"]} />\n        <ProtectedRoute path=\"/security-head/request-stock\" component={RequestStock} allowedRoles={[\"security_head\"]} />\n        <ProtectedRoute path=\"/security-head/leave-requests\" component={SecurityHeadLeaveRequests} allowedRoles={[\"security_head\"]} />\n        <ProtectedRoute path=\"/security-head/leave-approvals\" component={ManagerLeaveApprovals} allowedRoles={[\"security_head\"]} />\n        <ProtectedRoute path=\"/security-guard\" component={SecurityGuardDashboard} allowedRoles={[\"security_guard\"]} />\n        <ProtectedRoute path=\"/security-guard/request-stock\" component={RequestStock} allowedRoles={[\"security_guard\"]} />\n        <ProtectedRoute path=\"/surveillance-officer\" component={SurveillanceOfficerDashboard} allowedRoles={[\"surveillance_officer\"]} />\n        <ProtectedRoute path=\"/surveillance-officer/duty-status\" component={SurveillanceOfficerDutyStatus} allowedRoles={[\"surveillance_officer\"]} />\n        <ProtectedRoute path=\"/surveillance-officer/my-tasks\" component={SurveillanceOfficerMyTasks} allowedRoles={[\"surveillance_officer\"]} />\n        <ProtectedRoute path=\"/surveillance-officer/vehicle-logs\" component={SurveillanceOfficerVehicleLogs} allowedRoles={[\"surveillance_officer\"]} />\n        <ProtectedRoute path=\"/surveillance-officer/maintenance-reports\" component={SurveillanceOfficerMaintenanceReports} allowedRoles={[\"surveillance_officer\"]} />\n        <ProtectedRoute path=\"/surveillance-officer/request-stock\" component={RequestStock} allowedRoles={[\"surveillance_officer\"]} />\n        \n        {/* Finance Routes - Specific routes MUST come before general /finance route */}\n        <ProtectedRoute path=\"/finance/transactions\" component={FinanceTransactions} allowedRoles={[\"finance\"]} />\n        <ProtectedRoute path=\"/finance/revenue\" component={FinanceRevenue} allowedRoles={[\"finance\"]} />\n        <ProtectedRoute path=\"/finance/expenses\" component={FinanceExpenses} allowedRoles={[\"finance\"]} />\n        <ProtectedRoute path=\"/finance/cashflow\" component={FinanceCashFlow} allowedRoles={[\"finance\"]} />\n        <ProtectedRoute path=\"/finance/reconciliation\" component={FinanceReconciliation} allowedRoles={[\"finance\"]} />\n        <ProtectedRoute path=\"/finance/reports\" component={FinanceReports} allowedRoles={[\"finance\"]} />\n        <ProtectedRoute path=\"/finance/maintenance-requests\" component={FinanceMaintenanceRequests} allowedRoles={[\"finance\"]} />\n        <ProtectedRoute path=\"/finance\" component={FinanceDashboard} allowedRoles={[\"finance\"]} />\n        \n        <ProtectedRoute path=\"/front-desk\" component={FrontDeskDashboard} allowedRoles={[\"front_desk\"]} />\n        <ProtectedRoute path=\"/front-desk/request-stock\" component={RequestStock} allowedRoles={[\"front_desk\"]} />\n        <ProtectedRoute path=\"/front-desk/maintenance-requests\" component={FrontdeskMaintenanceRequests} allowedRoles={[\"front_desk\"]} />\n        <ProtectedRoute path=\"/guests\" component={GuestsPage} allowedRoles={[\"front_desk\", \"manager\", \"owner\"]} />\n        <ProtectedRoute path=\"/dashboard/hall-calendar\" component={HallCalendar} allowedRoles={[\"front_desk\", \"manager\", \"owner\", \"finance\", \"cashier\"]} />\n        <ProtectedRoute path=\"/dashboard/bookings/:id\" component={BookingDetail} allowedRoles={[\"front_desk\", \"manager\", \"owner\", \"finance\", \"cashier\"]} />\n        <ProtectedRoute path=\"/dashboard/hall-bookings\" component={HallBookings} allowedRoles={[\"front_desk\", \"manager\", \"owner\", \"finance\", \"cashier\"]} />\n        <ProtectedRoute path=\"/hall-bookings\" component={HallBookings} allowedRoles={[\"front_desk\", \"manager\", \"owner\", \"finance\", \"cashier\"]} />\n        \n        {/* Storekeeper Routes */}\n        <ProtectedRoute path=\"/storekeeper\" component={StorekeeperDashboard} allowedRoles={[\"storekeeper\"]} />\n        <ProtectedRoute path=\"/storekeeper/duty-status\" component={StorekeeperDutyStatus} allowedRoles={[\"storekeeper\"]} />\n        <ProtectedRoute path=\"/storekeeper/inventory-tracking\" component={StorekeeperInventoryTracking} allowedRoles={[\"storekeeper\"]} />\n        <ProtectedRoute path=\"/storekeeper/inventory-management\" component={StorekeeperInventoryManagement} allowedRoles={[\"storekeeper\"]} />\n        <ProtectedRoute path=\"/storekeeper/stock-requests\" component={StorekeeperStockRequests} allowedRoles={[\"storekeeper\"]} />\n        <ProtectedRoute path=\"/storekeeper/maintenance-requests\" component={StorekeeperMaintenanceRequests} allowedRoles={[\"storekeeper\"]} />\n        <ProtectedRoute path=\"/storekeeper/my-tasks\" component={StorekeeperMyTasks} allowedRoles={[\"storekeeper\"]} />\n        \n        {/* Leave Requests - accessible to all staff members */}\n        <ProtectedRoute path=\"/leave-requests\" component={LeaveRequests} allowedRoles={[\"manager\", \"housekeeping_staff\", \"kitchen_staff\", \"bartender\", \"barista\", \"security_guard\", \"surveillance_officer\", \"waiter\", \"storekeeper\", \"restaurant_bar_manager\", \"cashier\", \"finance\", \"front_desk\"]} />\n        \n        {/* My Profile - accessible to all authenticated users */}\n        <ProtectedRoute path=\"/my-profile\" component={MyProfile} allowedRoles={[\"super_admin\", \"owner\", \"manager\", \"housekeeping_supervisor\", \"housekeeping_staff\", \"restaurant_bar_manager\", \"waiter\", \"kitchen_staff\", \"bartender\", \"barista\", \"security_head\", \"security_guard\", \"surveillance_officer\", \"finance\", \"front_desk\", \"cashier\", \"storekeeper\"]} />\n        \n        <Route path=\"/auth\" component={AuthPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <ConfirmDialogProvider />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":26161},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-[calc(100%-2rem)] max-w-lg translate-x-[-50%] translate-y-[-50%] gap-3 md:gap-4 border bg-background p-4 md:p-6 shadow-lg duration-200 max-h-[90vh] overflow-y-auto data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-3 md:right-4 top-3 md:top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground tap-target\">\n        <X className=\"h-5 w-5 md:h-4 md:w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left mb-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end gap-2 sm:gap-0 sm:space-x-2 mt-4\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-base md:text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3986},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/dashboard/surveillance-officer/maintenance-reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { AlertTriangle, Plus } from \"lucide-react\";\n\nexport default function SurveillanceOfficerMaintenanceReports() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showForm, setShowForm] = useState(false);\n  const [maintenanceForm, setMaintenanceForm] = useState({\n    title: \"\",\n    location: \"\",\n    description: \"\",\n    priority: \"medium\",\n    photo: \"\"\n  });\n\n  const { data: maintenanceRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000\n  });\n\n  const createMaintenanceMutation = useMutation({\n    mutationFn: async (data: typeof maintenanceForm) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request sent to Security Head successfully\" });\n      setMaintenanceForm({ title: \"\", location: \"\", description: \"\", priority: \"medium\", photo: \"\" });\n      setShowForm(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to send maintenance request\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleMaintenanceSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!maintenanceForm.title || !maintenanceForm.location) {\n      toast({ title: \"Title and location are required\", variant: \"destructive\" });\n      return;\n    }\n    if (!maintenanceForm.photo) {\n      toast({ title: \"Photo is required\", variant: \"destructive\" });\n      return;\n    }\n    createMaintenanceMutation.mutate(maintenanceForm);\n  };\n\n  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setMaintenanceForm({ ...maintenanceForm, photo: reader.result as string });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const myMaintenanceRequests = maintenanceRequests.filter(r => r.reportedBy?.id === user?.id);\n  const pendingRequests = myMaintenanceRequests.filter(r => r.status === 'pending');\n  const resolvedRequests = myMaintenanceRequests.filter(r => r.status === 'resolved');\n\n  return (\n    <DashboardLayout title=\"Maintenance Reports\">\n      <div className=\"space-y-6\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pending Requests</p>\n                  <p className=\"text-3xl font-bold\">{pendingRequests.length}</p>\n                </div>\n                <AlertTriangle className=\"h-10 w-10 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Resolved Requests</p>\n                  <p className=\"text-3xl font-bold\">{resolvedRequests.length}</p>\n                </div>\n                <AlertTriangle className=\"h-10 w-10 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Submit Form */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Submit Maintenance Request</CardTitle>\n                <CardDescription>Report issues to Security Head</CardDescription>\n              </div>\n              <Button \n                onClick={() => setShowForm(!showForm)} \n                size=\"sm\"\n                data-testid=\"button-toggle-form\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {showForm ? 'Cancel' : 'New Request'}\n              </Button>\n            </div>\n          </CardHeader>\n          {showForm && (\n            <CardContent>\n              <form onSubmit={handleMaintenanceSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Issue Title *</Label>\n                    <Input\n                      id=\"title\"\n                      data-testid=\"input-maintenance-title\"\n                      value={maintenanceForm.title}\n                      onChange={(e) => setMaintenanceForm({ ...maintenanceForm, title: e.target.value })}\n                      placeholder=\"e.g., CCTV Camera Malfunction\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"location\">Location *</Label>\n                    <Input\n                      id=\"location\"\n                      data-testid=\"input-maintenance-location\"\n                      value={maintenanceForm.location}\n                      onChange={(e) => setMaintenanceForm({ ...maintenanceForm, location: e.target.value })}\n                      placeholder=\"e.g., Main Entrance\"\n                      required\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select \n                    value={maintenanceForm.priority} \n                    onValueChange={(value) => setMaintenanceForm({ ...maintenanceForm, priority: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-maintenance-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    data-testid=\"textarea-maintenance-description\"\n                    value={maintenanceForm.description}\n                    onChange={(e) => setMaintenanceForm({ ...maintenanceForm, description: e.target.value })}\n                    placeholder=\"Detailed description of the issue\"\n                    rows={3}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"photo\">Photo *</Label>\n                  <Input\n                    id=\"photo\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    data-testid=\"input-maintenance-photo\"\n                    onChange={handlePhotoChange}\n                    required\n                  />\n                  {maintenanceForm.photo && (\n                    <div className=\"mt-2\">\n                      <img src={maintenanceForm.photo} alt=\"Preview\" className=\"max-w-xs rounded border\" />\n                    </div>\n                  )}\n                </div>\n                <Button \n                  type=\"submit\" \n                  disabled={createMaintenanceMutation.isPending}\n                  data-testid=\"button-submit-maintenance\"\n                >\n                  {createMaintenanceMutation.isPending ? 'Submitting...' : 'Submit Request'}\n                </Button>\n              </form>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* My Requests */}\n        <Card>\n          <CardHeader>\n            <CardTitle>My Maintenance Requests</CardTitle>\n            <CardDescription>Track your submitted requests</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\" data-testid=\"loading-maintenance\">Loading maintenance requests...</div>\n            ) : myMaintenanceRequests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-maintenance\">\n                No maintenance requests yet.\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {myMaintenanceRequests.map((request) => (\n                  <div \n                    key={request.id} \n                    className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\" \n                    data-testid={`maintenance-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                          <h4 className=\"font-medium\" data-testid={`maintenance-title-${request.id}`}>\n                            {request.title}\n                          </h4>\n                          <span className={`px-2 py-0.5 rounded text-xs ${\n                            request.priority === 'high' ? 'bg-red-100 text-red-800' :\n                            request.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                            'bg-blue-100 text-blue-800'\n                          }`}>\n                            {request.priority}\n                          </span>\n                          <span className={`px-2 py-0.5 rounded text-xs ${\n                            request.status === 'resolved' ? 'bg-green-100 text-green-800' :\n                            request.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                            'bg-gray-100 text-gray-800'\n                          }`} data-testid={`maintenance-status-${request.id}`}>\n                            {request.status.replace('_', ' ')}\n                          </span>\n                        </div>\n                        {request.description && (\n                          <p className=\"text-sm text-muted-foreground mb-2\">{request.description}</p>\n                        )}\n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                          <span>Location: {request.location}</span>\n                          <span>{format(new Date(request.createdAt), 'MMM dd, yyyy')}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":11591},"tests/test-brutal-v2.js":{"content":"#!/usr/bin/env node\n\n/**\n * BRUTAL API TESTING SUITE V2\n * Fixed cookie/session handling\n */\n\nconst BASE_URL = 'http://localhost:5000';\n\nlet cookies = '';\nlet testResults = { passed: 0, failed: 0, errors: [] };\n\nconst colors = {\n  reset: '\\x1b[0m', red: '\\x1b[31m', green: '\\x1b[32m',\n  yellow: '\\x1b[33m', blue: '\\x1b[34m', cyan: '\\x1b[36m', magenta: '\\x1b[35m',\n};\n\nfunction log(msg, color = 'reset') {\n  console.log(`${colors[color]}${msg}${colors.reset}`);\n}\n\nfunction logSuccess(msg) {\n  log(`✓ ${msg}`, 'green');\n  testResults.passed++;\n}\n\nfunction logError(msg, details = '') {\n  log(`✗ ${msg}`, 'red');\n  if (details) log(`  Details: ${details}`, 'yellow');\n  testResults.failed++;\n  testResults.errors.push({ msg, details });\n}\n\nfunction logSection(msg) {\n  log(`\\n${'='.repeat(80)}`, 'cyan');\n  log(`  ${msg}`, 'cyan');\n  log('='.repeat(80), 'cyan');\n}\n\nasync function request(endpoint, options = {}) {\n  const url = `${BASE_URL}${endpoint}`;\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers,\n  };\n  \n  if (cookies) {\n    headers['Cookie'] = cookies;\n  }\n  \n  const response = await fetch(url, {\n    ...options,\n    headers,\n  });\n  \n  // Store cookies from response\n  const setCookie = response.headers.get('set-cookie');\n  if (setCookie) {\n    cookies = setCookie.split(';')[0];\n  }\n  \n  const text = await response.text();\n  let data;\n  try {\n    data = text ? JSON.parse(text) : null;\n  } catch {\n    data = text;\n  }\n  \n  return { status: response.status, data };\n}\n\nasync function login(username, password) {\n  const response = await request('/api/login', {\n    method: 'POST',\n    body: JSON.stringify({ username, password }),\n  });\n  return response;\n}\n\nasync function logout() {\n  const res = await request('/api/logout', { method: 'POST' });\n  cookies = ''; // Clear cookies\n  return res;\n}\n\n// =============================================================================\n// BRUTAL TESTS\n// =============================================================================\n\nasync function runTests() {\n  log('\\n🔥🔥🔥 BRUTAL API TESTING SUITE V2 🔥🔥🔥\\n', 'magenta');\n  \n  // ===== TEST 1: Authentication Attacks =====\n  logSection('TEST 1: AUTHENTICATION ATTACKS');\n  \n  log('\\n[1.1] SQL Injection in login', 'blue');\n  const sql = await login(\"admin' OR '1'='1\", \"anything\");\n  (sql.status === 401) ? logSuccess('SQL injection blocked') : logError('SQL INJECTION POSSIBLE!', JSON.stringify(sql));\n  \n  log('\\n[1.2] XSS in username', 'blue');\n  const xss = await login(\"<script>alert('xss')</script>\", \"test\");\n  (xss.status === 401) ? logSuccess('XSS in username blocked') : logError('XSS ACCEPTED!', JSON.stringify(xss));\n  \n  log('\\n[1.3] Null bytes', 'blue');\n  const nullbyte = await login(\"admin\\x00\", \"test\\x00\");\n  (nullbyte.status === 401) ? logSuccess('Null bytes blocked') : logError('NULL BYTES ACCEPTED!');\n  \n  log('\\n[1.4] Valid login', 'blue');\n  const valid = await login('manager', 'manager');\n  if (valid.status === 200 && valid.data?.user) {\n    logSuccess(`Logged in as ${valid.data.user.username}`);\n  } else {\n    logError('Valid login failed!', JSON.stringify(valid));\n  }\n  \n  // ===== TEST 2: Authorization Bypass =====\n  logSection('TEST 2: AUTHORIZATION BYPASS ATTACKS');\n  \n  log('\\n[2.1] Access another hotel\\'s data', 'blue');\n  const fakeId = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';\n  const bypass = await request(`/api/hotels/${fakeId}/users`, { method: 'GET' });\n  (bypass.status === 403 || bypass.status === 404) ? \n    logSuccess('Cross-hotel access blocked') : \n    logError('AUTHORIZATION BYPASS!', `Status: ${bypass.status}, Data: ${JSON.stringify(bypass.data)?.substring(0,100)}`);\n  \n  // ===== TEST 3: Input Validation =====\n  logSection('TEST 3: INPUT VALIDATION ATTACKS');\n  \n  log('\\n[3.1] Negative transaction amount', 'blue');\n  const neg = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: -999999,\n      transactionType: 'cash',\n      category: 'room',\n      description: 'Negative',\n      paymentMethod: 'cash',\n    }),\n  });\n  (neg.status === 400) ? logSuccess('Negative amount blocked') : \n    logError('NEGATIVE AMOUNT ACCEPTED!', `Status: ${neg.status}`);\n  \n  log('\\n[3.2] Massive number (overflow)', 'blue');\n  const overflow = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: 9999999999999999999999999999,\n      transactionType: 'cash',\n      category: 'room',\n      description: 'Overflow',\n      paymentMethod: 'cash',\n    }),\n  });\n  (overflow.status === 400) ? logSuccess('Overflow prevented') : \n    log(`  ⚠ Warning: Large number handled with status ${overflow.status}`, 'yellow');\n  \n  log('\\n[3.3] XSS in description', 'blue');\n  const xssDesc = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: 100,\n      transactionType: 'cash',\n      category: 'room',\n      description: '<script>alert(\"XSS\")</script><img src=x onerror=alert(1)>',\n      paymentMethod: 'cash',\n    }),\n  });\n  if (xssDesc.status === 201) {\n    const hasScript = xssDesc.data?.description?.includes('<script>');\n    hasScript ? logError('XSS NOT SANITIZED!', xssDesc.data.description) : \n      logSuccess('XSS sanitized or encoded');\n  } else {\n    log(`  ℹ Transaction creation failed: ${xssDesc.status}`, 'yellow');\n  }\n  \n  log('\\n[3.4] SQL injection in description', 'blue');\n  const sqlDesc = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: 100,\n      transactionType: 'cash',\n      category: 'room',\n      description: \"'; DROP TABLE transactions; --\",\n      paymentMethod: 'cash',\n    }),\n  });\n  (sqlDesc.status >= 200 && sqlDesc.status < 300) ? \n    logSuccess('SQL in description handled (using ORM)') : \n    log(`  ℹ Status: ${sqlDesc.status}`, 'yellow');\n  \n  // ===== TEST 4: Void Transaction Rules =====\n  logSection('TEST 4: VOID TRANSACTION RULES');\n  \n  log('\\n[4.1] Create transaction to void', 'blue');\n  const trans = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: 500,\n      transactionType: 'cash',\n      category: 'test',\n      description: 'Test void transaction',\n      paymentMethod: 'cash',\n    }),\n  });\n  \n  if (trans.status === 201 && trans.data?.id) {\n    logSuccess(`Transaction created: ${trans.data.id}`);\n    \n    log('\\n[4.2] Void with SHORT reason (should fail)', 'blue');\n    const shortVoid = await request(`/api/transactions/${trans.data.id}/void`, {\n      method: 'POST',\n      body: JSON.stringify({ reason: 'short' }),\n    });\n    (shortVoid.status === 400) ? logSuccess('Short reason rejected') : \n      logError('SHORT REASON ACCEPTED!', `Status: ${shortVoid.status}`);\n    \n    log('\\n[4.3] Void with valid reason', 'blue');\n    const validVoid = await request(`/api/transactions/${trans.data.id}/void`, {\n      method: 'POST',\n      body: JSON.stringify({ reason: 'Valid void reason with more than fifteen characters required' }),\n    });\n    (validVoid.status === 200) ? logSuccess('Transaction voided') : \n      logError('VOID FAILED!', `Status: ${validVoid.status}`);\n    \n    if (validVoid.status === 200) {\n      log('\\n[4.4] Double void (should fail)', 'blue');\n      const doubleVoid = await request(`/api/transactions/${trans.data.id}/void`, {\n        method: 'POST',\n        body: JSON.stringify({ reason: 'Trying to void already voided transaction here' }),\n      });\n      (doubleVoid.status === 400) ? logSuccess('Double void prevented') : \n        logError('DOUBLE VOID ALLOWED!', `Status: ${doubleVoid.status}`);\n    }\n  } else {\n    log(`  ⚠ Could not create test transaction: ${trans.status}`, 'yellow');\n  }\n  \n  await logout();\n  \n  log('\\n[4.5] Void as non-manager (waiter)', 'blue');\n  await login('waiter', 'waiter');\n  const transId = trans.data?.id || 'fake-id';\n  const noAuth = await request(`/api/transactions/${transId}/void`, {\n    method: 'POST',\n    body: JSON.stringify({ reason: 'Waiter attempting void - should fail due to role' }),\n  });\n  (noAuth.status === 403) ? logSuccess('Non-manager void blocked') : \n    logError('NON-MANAGER CAN VOID!', `Status: ${noAuth.status}`);\n  \n  await logout();\n  \n  // ===== TEST 5: API Rate & Edge Cases =====\n  logSection('TEST 5: EDGE CASES & STRESS');\n  \n  await login('manager', 'manager');\n  \n  log('\\n[5.1] Empty string in amount', 'blue');\n  const empty = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: '',\n      transactionType: 'cash',\n      category: 'room',\n      description: 'Empty amount',\n      paymentMethod: 'cash',\n    }),\n  });\n  (empty.status === 400) ? logSuccess('Empty amount rejected') : \n    logError('EMPTY AMOUNT ACCEPTED!', `Status: ${empty.status}`);\n  \n  log('\\n[5.2] String in amount', 'blue');\n  const stringAmt = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: 'hacker',\n      transactionType: 'cash',\n      category: 'room',\n      description: 'String amount',\n      paymentMethod: 'cash',\n    }),\n  });\n  (stringAmt.status === 400) ? logSuccess('String amount rejected') : \n    logError('STRING AMOUNT ACCEPTED!', `Status: ${stringAmt.status}`);\n  \n  log('\\n[5.3] Missing required fields', 'blue');\n  const missing = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({ amount: 100 }),\n  });\n  (missing.status === 400) ? logSuccess('Missing fields rejected') : \n    logError('MISSING FIELDS ACCEPTED!', `Status: ${missing.status}`);\n  \n  log('\\n[5.4] Invalid transaction type', 'blue');\n  const invalidType = await request('/api/transactions', {\n    method: 'POST',\n    body: JSON.stringify({\n      amount: 100,\n      transactionType: 'hacked',\n      category: 'room',\n      description: 'Invalid type',\n      paymentMethod: 'cash',\n    }),\n  });\n  (invalidType.status === 400) ? logSuccess('Invalid type rejected') : \n    logError('INVALID TYPE ACCEPTED!', `Status: ${invalidType.status}`);\n  \n  await logout();\n  \n  // ===== SUMMARY =====\n  logSection('TEST SUMMARY');\n  const total = testResults.passed + testResults.failed;\n  log(`\\nTotal: ${total} | Passed: ${testResults.passed} | Failed: ${testResults.failed}`, 'cyan');\n  \n  if (testResults.failed > 0) {\n    log('\\n❌ CRITICAL ISSUES:', 'red');\n    testResults.errors.forEach((err, i) => {\n      log(`\\n${i+1}. ${err.msg}`, 'red');\n      if (err.details) log(`   ${err.details}`, 'yellow');\n    });\n    process.exit(1);\n  } else {\n    log('\\n✅ ALL TESTS PASSED! System is ROCK SOLID! 💪', 'green');\n    process.exit(0);\n  }\n}\n\nrunTests().catch(err => {\n  log(`\\n💥 FATAL: ${err.message}`, 'red');\n  console.error(err);\n  process.exit(1);\n});\n","size_bytes":10750},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 touch-manipulation\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 active:bg-primary/80\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 active:bg-destructive/80\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground active:bg-accent/80\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 active:bg-secondary/70\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground active:bg-accent/80\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"min-h-[44px] h-10 md:h-10 px-4 py-2\",\n        sm: \"min-h-[40px] h-9 md:h-9 rounded-md px-3 text-xs md:text-sm\",\n        lg: \"min-h-[48px] h-11 md:h-11 rounded-md px-6 md:px-8\",\n        icon: \"min-h-[44px] min-w-[44px] h-10 w-10 md:h-10 md:w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2160},"client/src/pages/dashboard/security-head.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Users, Shield, Car, ClipboardList, UserPlus, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { format } from \"date-fns\";\nimport { Link } from \"wouter\";\n\nexport default function SecurityHeadDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isCreateOfficerOpen, setIsCreateOfficerOpen] = useState(false);\n  const [isCreateTaskOpen, setIsCreateTaskOpen] = useState(false);\n  \n  // New officer form\n  const [newOfficer, setNewOfficer] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    phone: \"\",\n    fullName: \"\",\n    address: \"\"\n  });\n  \n  // New task form\n  const [newTask, setNewTask] = useState({\n    assignedTo: \"\",\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    dueDate: \"\"\n  });\n\n  // Fetch surveillance officers\n  const { data: officers = [], isLoading: officersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/security/officers\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch tasks\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/security/tasks\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch vehicle logs\n  const { data: vehicleLogs = [], isLoading: vehicleLogsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vehicle-logs\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch maintenance requests (filter officer-submitted ones)\n  const { data: allMaintenanceRequests = [], isLoading: maintenanceLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Filter maintenance requests from surveillance officers\n  const maintenanceRequests = allMaintenanceRequests.filter(req => {\n    return req.reportedBy?.role?.name === 'surveillance_officer';\n  });\n\n  // Create officer mutation\n  const createOfficerMutation = useMutation({\n    mutationFn: async (data: typeof newOfficer) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/security/officers\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/security/officers\"] });\n      toast({ title: \"Surveillance Officer created successfully\" });\n      setIsCreateOfficerOpen(false);\n      setNewOfficer({ username: \"\", password: \"\", email: \"\", phone: \"\", fullName: \"\", address: \"\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create officer\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Create task mutation\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: typeof newTask) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/security/tasks\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/security/tasks\"] });\n      toast({ title: \"Task assigned successfully\" });\n      setIsCreateTaskOpen(false);\n      setNewTask({ assignedTo: \"\", title: \"\", description: \"\", priority: \"medium\", dueDate: \"\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create task\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Approve maintenance request mutation\n  const approveMaintenanceMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return await apiRequest(\"PUT\", `/api/maintenance-requests/${requestId}`, { \n        status: 'approved'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request approved successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to approve request\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Mark as resolved mutation\n  const resolveMaintenanceMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return await apiRequest(\"PUT\", `/api/maintenance-requests/${requestId}`, { \n        status: 'resolved'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request marked as resolved\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to resolve request\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Decline maintenance request mutation\n  const declineMaintenanceMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return await apiRequest(\"PUT\", `/api/maintenance-requests/${requestId}`, { \n        status: 'declined'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request declined successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to decline request\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleCreateOfficer = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newOfficer.username || !newOfficer.password || !newOfficer.email || !newOfficer.phone || !newOfficer.fullName || !newOfficer.address) {\n      toast({ title: \"All fields are required (username, password, email, phone, full name, and address)\", variant: \"destructive\" });\n      return;\n    }\n    createOfficerMutation.mutate(newOfficer);\n  };\n\n  const handleCreateTask = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newTask.assignedTo || !newTask.title) {\n      toast({ title: \"Please select an officer and enter task title\", variant: \"destructive\" });\n      return;\n    }\n    createTaskMutation.mutate(newTask);\n  };\n\n  const onlineOfficers = officers.filter(o => {\n    return dailyAttendance.some(a => a.userId === o.id && a.status === 'active');\n  });\n  const pendingTasks = tasks.filter(t => t.status === 'pending');\n  const activeVehicles = vehicleLogs.filter(v => !v.checkOut);\n  const pendingMaintenance = maintenanceRequests.filter(r => r.status === 'pending');\n\n  return (\n    <DashboardLayout title=\"Security Head Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Surveillance Officers\"\n            value={officers.length}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"On Duty\"\n            value={onlineOfficers.length}\n            icon={<Shield />}\n            iconColor=\"text-green-500\"\n            trend={{ \n              value: officers.length > 0 ? Math.round((onlineOfficers.length / officers.length) * 100) : 0, \n              label: \"coverage\", \n              isPositive: true \n            }}\n          />\n          <StatsCard\n            title=\"Vehicles on Premises\"\n            value={activeVehicles.length}\n            icon={<Car />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Pending Tasks\"\n            value={pendingTasks.length}\n            icon={<ClipboardList />}\n            iconColor=\"text-orange-500\"\n          />\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              <Dialog open={isCreateOfficerOpen} onOpenChange={setIsCreateOfficerOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-add-officer\">\n                    <UserPlus className=\"h-6 w-6\" />\n                    <span className=\"text-sm\">Add Officer</span>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent data-testid=\"dialog-create-officer\">\n                  <DialogHeader>\n                    <DialogTitle>Create Surveillance Officer</DialogTitle>\n                    <DialogDescription>\n                      Create a new surveillance officer account with username and password\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateOfficer} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"username\">Username *</Label>\n                      <Input\n                        id=\"username\"\n                        data-testid=\"input-officer-username\"\n                        value={newOfficer.username}\n                        onChange={(e) => setNewOfficer({ ...newOfficer, username: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"password\">Password *</Label>\n                      <Input\n                        id=\"password\"\n                        type=\"password\"\n                        data-testid=\"input-officer-password\"\n                        value={newOfficer.password}\n                        onChange={(e) => setNewOfficer({ ...newOfficer, password: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\">Email *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        data-testid=\"input-officer-email\"\n                        value={newOfficer.email}\n                        onChange={(e) => setNewOfficer({ ...newOfficer, email: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone *</Label>\n                      <Input\n                        id=\"phone\"\n                        data-testid=\"input-officer-phone\"\n                        value={newOfficer.phone}\n                        onChange={(e) => setNewOfficer({ ...newOfficer, phone: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"fullName\">Full Name *</Label>\n                      <Input\n                        id=\"fullName\"\n                        data-testid=\"input-officer-fullname\"\n                        value={newOfficer.fullName}\n                        onChange={(e) => setNewOfficer({ ...newOfficer, fullName: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"address\">Address *</Label>\n                      <Input\n                        id=\"address\"\n                        data-testid=\"input-officer-address\"\n                        value={newOfficer.address}\n                        onChange={(e) => setNewOfficer({ ...newOfficer, address: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <DialogFooter>\n                      <Button \n                        type=\"submit\" \n                        disabled={createOfficerMutation.isPending}\n                        data-testid=\"button-submit-officer\"\n                      >\n                        {createOfficerMutation.isPending ? \"Creating...\" : \"Create Officer\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              <Dialog open={isCreateTaskOpen} onOpenChange={setIsCreateTaskOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" data-testid=\"button-assign-task\">\n                    <ClipboardList className=\"h-6 w-6\" />\n                    <span className=\"text-sm\">Assign Task</span>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent data-testid=\"dialog-create-task\">\n                  <DialogHeader>\n                    <DialogTitle>Assign Task to Officer</DialogTitle>\n                    <DialogDescription>\n                      Create a new task and assign it to a surveillance officer\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateTask} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"officer\">Assign To *</Label>\n                      <Select value={newTask.assignedTo} onValueChange={(value) => setNewTask({ ...newTask, assignedTo: value })}>\n                        <SelectTrigger data-testid=\"select-task-officer\">\n                          <SelectValue placeholder=\"Select an officer\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {officers.map((officer) => {\n                            const isOnDuty = dailyAttendance.some(a => a.userId === officer.id && a.status === 'active');\n                            return (\n                              <SelectItem key={officer.id} value={officer.id}>\n                                {officer.username} {isOnDuty ? '(On Duty)' : '(Off Duty)'}\n                              </SelectItem>\n                            );\n                          })}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"title\">Task Title *</Label>\n                      <Input\n                        id=\"title\"\n                        data-testid=\"input-task-title\"\n                        value={newTask.title}\n                        onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        data-testid=\"textarea-task-description\"\n                        value={newTask.description}\n                        onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"priority\">Priority</Label>\n                      <Select value={newTask.priority} onValueChange={(value) => setNewTask({ ...newTask, priority: value })}>\n                        <SelectTrigger data-testid=\"select-task-priority\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"dueDate\">Due Date</Label>\n                      <Input\n                        id=\"dueDate\"\n                        type=\"datetime-local\"\n                        data-testid=\"input-task-duedate\"\n                        value={newTask.dueDate}\n                        onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}\n                      />\n                    </div>\n                    <DialogFooter>\n                      <Button \n                        type=\"submit\" \n                        disabled={createTaskMutation.isPending}\n                        data-testid=\"button-submit-task\"\n                      >\n                        {createTaskMutation.isPending ? \"Assigning...\" : \"Assign Task\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              <Link href=\"/security-head/vehicles\">\n                <Button \n                  variant=\"outline\" \n                  className=\"h-20 w-full flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                  data-testid=\"button-vehicle-logs\"\n                >\n                  <Car className=\"h-6 w-6\" />\n                  <span className=\"text-sm\">View Vehicles</span>\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Tabs */}\n        <Tabs defaultValue=\"officers\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"officers\" data-testid=\"tab-officers\">Officers</TabsTrigger>\n            <TabsTrigger value=\"tasks\" data-testid=\"tab-tasks\">Tasks</TabsTrigger>\n            <TabsTrigger value=\"vehicles\" data-testid=\"tab-vehicles\">Vehicles</TabsTrigger>\n            <TabsTrigger value=\"maintenance\" data-testid=\"tab-maintenance\">Maintenance</TabsTrigger>\n          </TabsList>\n\n          {/* Officers Tab */}\n          <TabsContent value=\"officers\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Surveillance Officers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {officersLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"loading-officers\">Loading officers...</div>\n                ) : officers.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-officers\">\n                    No surveillance officers yet. Create one to get started.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {officers.map((officer) => {\n                      const isOnDuty = dailyAttendance.some(a => a.userId === officer.id && a.status === 'active');\n                      return (\n                        <div key={officer.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`officer-${officer.id}`}>\n                          <div className=\"flex items-center space-x-4\">\n                            <div className={`w-3 h-3 rounded-full ${isOnDuty ? 'bg-green-500' : 'bg-gray-400'}`} />\n                            <div>\n                              <div className=\"font-medium\" data-testid={`officer-name-${officer.id}`}>{officer.username}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {officer.email || 'No email'} • {officer.phone || 'No phone'}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className={`px-3 py-1 rounded-full text-xs ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`} data-testid={`officer-status-${officer.id}`}>\n                              {isOnDuty ? 'On Duty' : 'Off Duty'}\n                            </span>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Tasks Tab */}\n          <TabsContent value=\"tasks\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Assigned Tasks</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {tasksLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"loading-tasks\">Loading tasks...</div>\n                ) : tasks.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-tasks\">\n                    No tasks assigned yet.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {tasks.map((task) => {\n                      const assignee = officers.find(o => o.id === task.assignedTo);\n                      return (\n                        <div key={task.id} className=\"p-4 border rounded-lg\" data-testid={`task-${task.id}`}>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2\">\n                                <h4 className=\"font-medium\" data-testid={`task-title-${task.id}`}>{task.title}</h4>\n                                <span className={`px-2 py-0.5 rounded text-xs ${\n                                  task.priority === 'high' ? 'bg-red-100 text-red-800' :\n                                  task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                                  'bg-blue-100 text-blue-800'\n                                }`}>\n                                  {task.priority}\n                                </span>\n                              </div>\n                              {task.description && (\n                                <p className=\"text-sm text-muted-foreground mt-1\">{task.description}</p>\n                              )}\n                              <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                                <span data-testid={`task-assignee-${task.id}`}>Assigned to: {assignee?.username || 'Unknown'}</span>\n                                <span data-testid={`task-status-${task.id}`}>Status: {task.status}</span>\n                                {task.dueDate && (\n                                  <span>Due: {format(new Date(task.dueDate), 'MMM dd, yyyy')}</span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Vehicles Tab */}\n          <TabsContent value=\"vehicles\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Vehicle Check-in/Check-out Logs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {vehicleLogsLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"loading-vehicles\">Loading vehicle logs...</div>\n                ) : vehicleLogs.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-vehicles\">\n                    No vehicle logs yet.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {vehicleLogs.map((log) => (\n                      <div key={log.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`vehicle-${log.id}`}>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Car className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"font-medium\" data-testid={`vehicle-number-${log.id}`}>{log.vehicleNumber}</span>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground mt-1\">\n                            Driver: {log.driverName} • Purpose: {log.purpose}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            Check-in: {format(new Date(log.checkIn), 'MMM dd, yyyy HH:mm')}\n                            {log.checkOut && ` • Check-out: ${format(new Date(log.checkOut), 'MMM dd, yyyy HH:mm')}`}\n                          </div>\n                        </div>\n                        <span className={`px-3 py-1 rounded-full text-xs ${\n                          log.checkOut ? 'bg-gray-100 text-gray-800' : 'bg-green-100 text-green-800'\n                        }`} data-testid={`vehicle-status-${log.id}`}>\n                          {log.checkOut ? 'Checked Out' : 'On Premises'}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Maintenance Tab */}\n          <TabsContent value=\"maintenance\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Maintenance Requests from Officers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {maintenanceLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"loading-maintenance\">Loading maintenance requests...</div>\n                ) : maintenanceRequests.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-maintenance\">\n                    No maintenance requests from officers yet.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {maintenanceRequests.map((request) => (\n                        <div key={request.id} className=\"p-4 border rounded-lg\" data-testid={`maintenance-${request.id}`}>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2\">\n                                <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                                <h4 className=\"font-medium\" data-testid={`maintenance-title-${request.id}`}>{request.title}</h4>\n                                <span className={`px-2 py-0.5 rounded text-xs ${\n                                  request.priority === 'high' ? 'bg-red-100 text-red-800' :\n                                  request.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                                  'bg-blue-100 text-blue-800'\n                                }`}>\n                                  {request.priority}\n                                </span>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground mt-1\">{request.description}</p>\n                              <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                                <span>Reported by: {request.reportedBy?.username || 'Unknown'}</span>\n                                <span>Location: {request.location}</span>\n                                <span data-testid={`maintenance-status-${request.id}`}>Status: {request.status}</span>\n                              </div>\n                            </div>\n                            {request.status === 'pending' && (\n                              <div className=\"flex gap-2\">\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"default\"\n                                  onClick={() => approveMaintenanceMutation.mutate(request.id)}\n                                  disabled={approveMaintenanceMutation.isPending}\n                                  data-testid={`button-approve-${request.id}`}\n                                >\n                                  Approve\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"destructive\"\n                                  onClick={() => declineMaintenanceMutation.mutate(request.id)}\n                                  disabled={declineMaintenanceMutation.isPending}\n                                  data-testid={`button-decline-${request.id}`}\n                                >\n                                  Decline\n                                </Button>\n                              </div>\n                            )}\n                            {request.status === 'approved' && (\n                              <Button \n                                size=\"sm\" \n                                variant=\"default\"\n                                onClick={() => resolveMaintenanceMutation.mutate(request.id)}\n                                disabled={resolveMaintenanceMutation.isPending}\n                                data-testid={`button-resolve-${request.id}`}\n                              >\n                                Mark as Resolved\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":30476},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    ...(process.env.NODE_ENV !== \"production\"\n      ? [\n          runtimeErrorOverlay(),\n          ...(process.env.REPL_ID !== undefined\n            ? [\n                await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n                  m.cartographer(),\n                ),\n                await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n                  m.devBanner(),\n                ),\n              ]\n            : []),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    hmr: {\n      protocol: 'wss',\n      host: process.env.REPLIT_DEV_DOMAIN || 'localhost',\n      port: process.env.REPLIT_DEV_DOMAIN ? 443 : 5000,\n      clientPort: process.env.REPLIT_DEV_DOMAIN ? 443 : 5000,\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1456},"client/src/pages/dashboard/storekeeper/maintenance-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function StorekeeperMaintenanceRequests() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy?.id === user?.id);\n    }\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully to Manager\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600 dark:text-green-400\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500 dark:text-orange-400\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit Request to Manager\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Broken shelf in storage room\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-maintenance-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Storage Room A, Shelf 3\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                  data-testid=\"input-maintenance-location\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-maintenance-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                  data-testid=\"input-maintenance-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  data-testid=\"input-maintenance-photo\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-maintenance\"\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit to Manager\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                    data-testid={`maintenance-request-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\">\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\">\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\">\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\">\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 dark:text-green-400 pl-8\">\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10334},"README.md":{"content":"# hotel-main5\n","size_bytes":14},"client/src/pages/dashboard/waiter.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table2, ShoppingCart, Receipt, Search, Plus, Minus } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\nimport { formatCurrency, getStatusColor } from \"@/lib/utils\";\n\nexport default function WaiterDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { confirm } = useConfirmDialog();\n  const [selectedTable, setSelectedTable] = useState<any>(null);\n  const [currentOrder, setCurrentOrder] = useState<any[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isTableModalOpen, setIsTableModalOpen] = useState(false);\n  const [editingOrderId, setEditingOrderId] = useState<string | null>(null);\n  const [editedItems, setEditedItems] = useState<Record<string, number>>({});\n\n  const { data: tables = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 3000\n  });\n\n  const { data: menuItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: kotOrders = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      await apiRequest(\"POST\", \"/api/kot-orders\", orderData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"Order placed successfully\" });\n      setCurrentOrder([]);\n    }\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/kot-orders/${orderId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"Order updated successfully\" });\n    }\n  });\n\n  const deleteOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      await apiRequest(\"DELETE\", `/api/kot-orders/${orderId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"Order deleted successfully\" });\n    }\n  });\n\n  const updateKotItemMutation = useMutation({\n    mutationFn: async ({ itemId, qty }: { itemId: string; qty: number }) => {\n      await apiRequest(\"PUT\", `/api/kot-items/${itemId}`, { qty });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/kot-orders\"] });\n      toast({ title: \"Item quantity updated successfully\" });\n    }\n  });\n\n  const filteredMenuItems = menuItems.filter(item =>\n    item.name.toLowerCase().includes(searchTerm.toLowerCase()) && item.active\n  );\n\n  const myOrders = kotOrders.filter(order => order.createdBy === user?.id);\n  const activeOrders = myOrders.filter(order => ['open', 'preparing'].includes(order.status));\n\n  const getTableOrders = (tableId: string) => {\n    return kotOrders.filter(order => order.tableId === tableId && ['open', 'preparing', 'ready'].includes(order.status));\n  };\n\n  const addToOrder = (menuItem: any) => {\n    const existingItem = currentOrder.find(item => item.id === menuItem.id);\n    if (existingItem) {\n      setCurrentOrder(prev =>\n        prev.map(item =>\n          item.id === menuItem.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        )\n      );\n    } else {\n      setCurrentOrder(prev => [...prev, { ...menuItem, quantity: 1 }]);\n    }\n  };\n\n  const removeFromOrder = (menuItemId: string) => {\n    setCurrentOrder(prev => prev.filter(item => item.id !== menuItemId));\n  };\n\n  const updateQuantity = (menuItemId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromOrder(menuItemId);\n      return;\n    }\n    setCurrentOrder(prev =>\n      prev.map(item =>\n        item.id === menuItemId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const calculateTotal = () => {\n    return currentOrder.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n\n  const handleTableClick = (table: any) => {\n    setSelectedTable(table);\n    setCurrentOrder([]);\n    setIsTableModalOpen(true);\n  };\n\n  const handlePlaceOrder = () => {\n    if (!selectedTable || currentOrder.length === 0) {\n      toast({ title: \"Error\", description: \"Please add items to order\", variant: \"destructive\" });\n      return;\n    }\n\n    createOrderMutation.mutate({\n      hotelId: user?.hotelId,\n      tableId: selectedTable.id,\n      createdBy: user?.id,\n      status: 'open',\n      items: currentOrder.map(item => ({\n        menuItemId: item.id,\n        description: item.name,\n        qty: item.quantity,\n        unit: 'piece'\n      }))\n    });\n  };\n\n  const handleOrderStatusUpdate = (order: any, newStatus: string) => {\n    updateOrderMutation.mutate({ orderId: order.id, status: newStatus });\n  };\n\n  const handleDeleteOrder = async (orderId: string) => {\n    await confirm({\n      title: \"Delete Order\",\n      description: \"Are you sure you want to delete this order? This action cannot be undone.\",\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: () => {\n        deleteOrderMutation.mutate(orderId);\n      }\n    });\n  };\n\n  const handleEditOrder = (order: any) => {\n    setEditingOrderId(order.id);\n    const itemQuantities: Record<string, number> = {};\n    order.items?.forEach((item: any) => {\n      itemQuantities[item.id] = item.qty;\n    });\n    setEditedItems(itemQuantities);\n  };\n\n  const handleCancelEdit = () => {\n    setEditingOrderId(null);\n    setEditedItems({});\n  };\n\n  const handleSaveEdit = async (order: any) => {\n    try {\n      const updatePromises = order.items\n        .filter((item: any) => editedItems[item.id] && editedItems[item.id] !== item.qty)\n        .map((item: any) => \n          updateKotItemMutation.mutateAsync({\n            itemId: item.id,\n            qty: editedItems[item.id]\n          })\n        );\n      \n      await Promise.all(updatePromises);\n      setEditingOrderId(null);\n      setEditedItems({});\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to update items\", variant: \"destructive\" });\n    }\n  };\n\n  const updateEditedItemQty = (itemId: string, qty: number) => {\n    setEditedItems(prev => ({\n      ...prev,\n      [itemId]: Math.max(1, qty)\n    }));\n  };\n\n  const tableOrders = selectedTable ? getTableOrders(selectedTable.id) : [];\n\n  return (\n    <DashboardLayout title=\"Waiter Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <StatsCard\n            title=\"Active Orders\"\n            value={activeOrders.length}\n            icon={<ShoppingCart />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Available Tables\"\n            value={tables.length}\n            icon={<Table2 />}\n            iconColor=\"text-purple-500\"\n          />\n        </div>\n\n        {/* Table Layout */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Restaurant Layout</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">Click on any table to view orders or add new items</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n              {tables.map((table, index) => {\n                const ordersCount = getTableOrders(table.id).length;\n                return (\n                  <div\n                    key={table.id}\n                    className=\"p-4 border-2 rounded-lg cursor-pointer transition-colors hover:border-primary/50 hover:bg-accent/50\"\n                    onClick={() => handleTableClick(table)}\n                    data-testid={`table-${index}`}\n                  >\n                    <div className=\"text-center\">\n                      <Table2 className=\"h-8 w-8 mx-auto mb-2 text-gray-600\" />\n                      <h3 className=\"font-medium text-foreground\">{table.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{table.capacity} seats</p>\n                      {ordersCount > 0 ? (\n                        <Badge variant=\"default\" className=\"mt-2\">\n                          {ordersCount} {ordersCount === 1 ? 'Order' : 'Orders'}\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"secondary\" className=\"mt-2\">Available</Badge>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Current Orders */}\n        <Card>\n          <CardHeader>\n            <CardTitle>My Active Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {activeOrders.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-orders-message\">\n                  No active orders\n                </p>\n              ) : (\n                activeOrders.map((order, index) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`order-item-${index}`}>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h4 className=\"font-medium text-foreground\">\n                          {tables.find(t => t.id === order.tableId)?.name || `Table ${index + 1}`}\n                        </h4>\n                        <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                          {order.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Order #{order.id.slice(0, 8)} • {new Date(order.createdAt).toLocaleTimeString()}\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      {order.status === 'ready' && (\n                        <Button\n                          className=\"h-11 min-h-11\"\n                          onClick={() => handleOrderStatusUpdate(order, 'served')}\n                          disabled={updateOrderMutation.isPending}\n                          data-testid={`button-mark-served-${index}`}\n                        >\n                          Mark as Served\n                        </Button>\n                      )}\n                      <Button\n                        className=\"h-11 min-h-11\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          const table = tables.find(t => t.id === order.tableId);\n                          if (table) handleTableClick(table);\n                        }}\n                        data-testid={`button-view-${index}`}\n                      >\n                        View Table\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Table Modal with Tabs */}\n        <Dialog open={isTableModalOpen} onOpenChange={setIsTableModalOpen}>\n          <DialogContent className=\"max-w-5xl max-h-[85vh] overflow-hidden flex flex-col\">\n            <DialogHeader>\n              <DialogTitle>\n                {selectedTable?.name} ({selectedTable?.capacity} seats)\n              </DialogTitle>\n            </DialogHeader>\n            \n            <Tabs defaultValue=\"menu\" className=\"flex-1 flex flex-col overflow-hidden\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"menu\">Menu & New Order</TabsTrigger>\n                <TabsTrigger value=\"orders\">\n                  Active Orders ({tableOrders.length})\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"menu\" className=\"flex-1 overflow-auto\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 p-4\">\n                  {/* Menu Items */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Menu Items</h3>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search menu items...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-9\"\n                        data-testid=\"input-menu-search\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                      {filteredMenuItems.map((item, index) => (\n                        <div key={item.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`menu-item-${index}`}>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-foreground\">{item.name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                            <p className=\"text-sm font-medium text-primary\">{formatCurrency(item.price)}</p>\n                          </div>\n                          <Button\n                            size=\"icon\"\n                            onClick={() => addToOrder(item)}\n                            data-testid={`button-add-item-${index}`}\n                          >\n                            <Plus className=\"h-5 w-5\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Current Order */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Order Summary</h3>\n                    \n                    <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                      {currentOrder.length === 0 ? (\n                        <p className=\"text-center text-muted-foreground py-4\" data-testid=\"empty-order-message\">\n                          No items added to order\n                        </p>\n                      ) : (\n                        currentOrder.map((item, index) => (\n                          <div key={item.id} className=\"flex items-center justify-between p-3 border rounded-lg bg-card\" data-testid={`order-item-${index}`}>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-foreground\">{item.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{formatCurrency(item.price)} each</p>\n                            </div>\n                            <div className=\"flex items-center gap-3\">\n                              <Button\n                                size=\"icon\"\n                                variant=\"outline\"\n                                onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                                data-testid={`button-decrease-${index}`}\n                              >\n                                <Minus className=\"h-5 w-5\" />\n                              </Button>\n                              <span className=\"w-10 text-center font-medium text-foreground\">{item.quantity}</span>\n                              <Button\n                                size=\"icon\"\n                                variant=\"outline\"\n                                onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                                data-testid={`button-increase-${index}`}\n                              >\n                                <Plus className=\"h-5 w-5\" />\n                              </Button>\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                onClick={() => removeFromOrder(item.id)}\n                                data-testid={`button-remove-${index}`}\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n\n                    {currentOrder.length > 0 && (\n                      <div className=\"border-t pt-4\">\n                        <div className=\"flex justify-between items-center mb-4\">\n                          <span className=\"text-lg font-semibold\">Total:</span>\n                          <span className=\"text-lg font-bold text-primary\" data-testid=\"order-total\">\n                            {formatCurrency(calculateTotal())}\n                          </span>\n                        </div>\n                        <Button\n                          className=\"w-full\"\n                          onClick={handlePlaceOrder}\n                          disabled={createOrderMutation.isPending}\n                          data-testid=\"button-place-order\"\n                        >\n                          {createOrderMutation.isPending ? \"Placing Order...\" : \"Place Order\"}\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"orders\" className=\"flex-1 overflow-auto p-4\">\n                <div className=\"space-y-4\">\n                  {tableOrders.length === 0 ? (\n                    <p className=\"text-center text-muted-foreground py-8\">\n                      No active orders for this table\n                    </p>\n                  ) : (\n                    tableOrders.map((order) => {\n                      const isEditing = editingOrderId === order.id;\n                      return (\n                        <Card key={order.id}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <div>\n                                <h4 className=\"font-medium\">Order #{order.id.slice(0, 8)}</h4>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {new Date(order.createdAt).toLocaleString()}\n                                </p>\n                              </div>\n                              <Badge className={getStatusColor(order.status)} variant=\"secondary\">\n                                {order.status}\n                              </Badge>\n                            </div>\n                            \n                            {order.items && order.items.length > 0 && (\n                              <div className=\"mb-3 space-y-2\">\n                                {order.items.map((item: any, idx: number) => (\n                                  <div key={idx} className=\"text-sm flex items-center justify-between p-2 rounded border bg-card\">\n                                    <span className=\"flex-1\">{item.menuItem?.name || item.notes || 'Unknown Item'}</span>\n                                    {isEditing ? (\n                                      <div className=\"flex items-center gap-2\">\n                                        <Button\n                                          size=\"icon\"\n                                          variant=\"outline\"\n                                          className=\"h-8 w-8\"\n                                          onClick={() => updateEditedItemQty(item.id, (editedItems[item.id] || item.qty) - 1)}\n                                          data-testid={`button-decrease-edit-${idx}`}\n                                        >\n                                          <Minus className=\"h-4 w-4\" />\n                                        </Button>\n                                        <span className=\"w-12 text-center font-medium\">\n                                          {editedItems[item.id] || item.qty}\n                                        </span>\n                                        <Button\n                                          size=\"icon\"\n                                          variant=\"outline\"\n                                          className=\"h-8 w-8\"\n                                          onClick={() => updateEditedItemQty(item.id, (editedItems[item.id] || item.qty) + 1)}\n                                          data-testid={`button-increase-edit-${idx}`}\n                                        >\n                                          <Plus className=\"h-4 w-4\" />\n                                        </Button>\n                                      </div>\n                                    ) : (\n                                      <span className=\"text-muted-foreground\">x{item.qty}</span>\n                                    )}\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                            \n                            <div className=\"flex space-x-2 mt-4\">\n                              {isEditing ? (\n                                <>\n                                  <Button\n                                    variant=\"outline\"\n                                    className=\"flex-1\"\n                                    onClick={handleCancelEdit}\n                                    data-testid=\"button-cancel-edit\"\n                                  >\n                                    Cancel\n                                  </Button>\n                                  <Button\n                                    className=\"flex-1\"\n                                    onClick={() => handleSaveEdit(order)}\n                                    disabled={updateKotItemMutation.isPending}\n                                    data-testid=\"button-save-edit\"\n                                  >\n                                    {updateKotItemMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                                  </Button>\n                                </>\n                              ) : (\n                                <>\n                                  {order.status === 'ready' && (\n                                    <Button\n                                      className=\"flex-1\"\n                                      onClick={() => handleOrderStatusUpdate(order, 'served')}\n                                      disabled={updateOrderMutation.isPending}\n                                      data-testid=\"button-mark-served\"\n                                    >\n                                      Mark as Served\n                                    </Button>\n                                  )}\n                                  <Button\n                                    variant=\"outline\"\n                                    className=\"flex-1\"\n                                    onClick={() => handleEditOrder(order)}\n                                    data-testid=\"button-edit-order\"\n                                  >\n                                    Edit Order\n                                  </Button>\n                                  <Button\n                                    variant=\"destructive\"\n                                    className=\"flex-1\"\n                                    onClick={() => handleDeleteOrder(order.id)}\n                                    data-testid=\"button-delete-order\"\n                                  >\n                                    Delete Order\n                                  </Button>\n                                </>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":25184},"client/src/pages/dashboard/kitchen-staff/maintenance.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function KitchenStaffMaintenance() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    enabled: !!user,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy?.id === user?.id);\n    }\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    events: ['maintenance:created', 'maintenance:updated', 'maintenance:deleted']\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit New Request\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Oven temperature issue\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Main Kitchen, Prep Area\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                  data-testid=\"input-location\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                  data-testid=\"input-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  data-testid=\"input-photo\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" data-testid=\"img-photo-preview\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-request\"\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit Request\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-requests\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                    data-testid={`card-request-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\" data-testid={`text-title-${request.id}`}>\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`text-location-${request.id}`}>\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\" data-testid={`text-description-${request.id}`}>\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\" data-testid={`badge-priority-${request.id}`}>\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\" data-testid={`badge-status-${request.id}`}>\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\" data-testid={`text-date-${request.id}`}>\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 pl-8\" data-testid={`text-resolved-${request.id}`}>\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10563},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Use postgres-js for better compatibility\nconst client = postgres(process.env.DATABASE_URL);\nexport const db = drizzle(client, { schema });\n","size_bytes":402},"client/src/pages/dashboard/bartender/maintenance.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function BartenderMaintenance() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    enabled: !!user,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy?.id === user?.id);\n    }\n  });\n\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    events: ['maintenance:created', 'maintenance:updated', 'maintenance:deleted']\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit New Request\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Ice maker not working\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Bar Counter, Storage Area\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                  data-testid=\"input-location\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                  data-testid=\"input-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  data-testid=\"input-photo\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" data-testid=\"img-photo-preview\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-request\"\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit Request\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-requests\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                    data-testid={`card-request-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\" data-testid={`text-title-${request.id}`}>\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`text-location-${request.id}`}>\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\" data-testid={`text-description-${request.id}`}>\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\" data-testid={`badge-priority-${request.id}`}>\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\" data-testid={`badge-status-${request.id}`}>\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\" data-testid={`text-date-${request.id}`}>\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 pl-8\" data-testid={`text-resolved-${request.id}`}>\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10561},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/pages/dashboard/housekeeping-staff/maintenance-reports.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Wrench, AlertTriangle } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function HousekeepingStaffMaintenanceReports() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    defaultValues: {\n      title: \"\",\n      location: \"\",\n      description: \"\",\n      priority: \"medium\"\n    }\n  });\n\n  const { data: myRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/maintenance-requests\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch maintenance requests\");\n      const data = await response.json();\n      return data.filter((req: any) => req.reportedBy?.id === user?.id);\n    },\n    enabled: !!user?.id\n  });\n\n  const createMaintenanceRequestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/maintenance-requests\", {\n        hotelId: user?.hotelId,\n        reportedBy: user?.id,\n        title: data.title,\n        location: data.location,\n        description: data.description,\n        priority: data.priority,\n        status: \"pending\"\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully\" });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: error.message || \"Failed to submit request\", variant: \"destructive\" });\n    }\n  });\n\n  const onSubmitMaintenanceRequest = (data: any) => {\n    createMaintenanceRequestMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'in_progress': return 'bg-blue-100 text-blue-800';\n      case 'resolved': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-orange-100 text-orange-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Reports\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Wrench className=\"h-5 w-5\" />\n              <span>Report Maintenance Issue</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmitMaintenanceRequest)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Issue Title</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"e.g., Broken AC in Room 305\"\n                          data-testid=\"input-title\" \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"e.g., Room 305, Floor 3\"\n                          data-testid=\"input-location\" \n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Describe the maintenance issue in detail...\"\n                          rows={4}\n                          data-testid=\"textarea-description\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"priority\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Priority</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-priority\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  disabled={createMaintenanceRequestMutation.isPending}\n                  className=\"w-full\"\n                  data-testid=\"button-submit\"\n                >\n                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                  {createMaintenanceRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Maintenance Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <p className=\"text-muted-foreground\">Loading...</p>\n            ) : myRequests.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-requests\">\n                No maintenance requests submitted\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {myRequests.map((request, index) => (\n                  <div key={request.id} className=\"p-4 border rounded-lg\" data-testid={`request-item-${index}`}>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-medium text-foreground\">{request.title}</h4>\n                      <Badge className={getStatusColor(request.status)} variant=\"secondary\">\n                        {request.status}\n                      </Badge>\n                    </div>\n                    {request.location && (\n                      <p className=\"text-sm text-muted-foreground mb-1\">\n                        <strong>Location:</strong> {request.location}\n                      </p>\n                    )}\n                    {request.description && (\n                      <p className=\"text-sm text-muted-foreground mb-2\">{request.description}</p>\n                    )}\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\">\n                        {request.priority} priority\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(request.createdAt).toLocaleString('en-GB', { timeZone: 'Asia/Kathmandu' })}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":9097},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/pages/dashboard/waiter/my-tasks.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle2, Circle, Clock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function WaiterMyTasks() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/tasks\"],\n    refetchInterval: 3000\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/hotels/current/tasks/${taskId}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/tasks\"] });\n      toast({ title: \"Task status updated successfully\" });\n    }\n  });\n\n  const myTasks = tasks\n    .filter((task: any) => task.assignedTo === user?.id)\n    .sort((a: any, b: any) => {\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      return priorityOrder[a.priority as keyof typeof priorityOrder] - priorityOrder[b.priority as keyof typeof priorityOrder];\n    });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n      case 'in_progress':\n        return <Clock className=\"h-5 w-5 text-blue-600\" />;\n      case 'pending_review':\n        return <CheckCircle2 className=\"h-5 w-5 text-yellow-600\" />;\n      case 'pending':\n      default:\n        return <Circle className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  const handleStatusChange = (taskId: string, newStatus: string) => {\n    updateTaskMutation.mutate({ taskId, status: newStatus });\n  };\n\n  const pendingTasks = myTasks.filter((task: any) => task.status === 'pending');\n  const performingTasks = myTasks.filter((task: any) => task.status === 'in_progress');\n  const completedTasks = myTasks.filter((task: any) => task.status === 'completed' || task.status === 'pending_review');\n\n  return (\n    <DashboardLayout title=\"My Tasks\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Pending</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-foreground\">{pendingTasks.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">In Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-blue-600\">{performingTasks.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Completed</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-green-600\">{completedTasks.length}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myTasks.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">No tasks assigned to you</p>\n              ) : (\n                myTasks.map((task: any) => (\n                  <div\n                    key={task.id}\n                    className=\"flex flex-col sm:flex-row sm:items-center justify-between p-4 border rounded-lg space-y-3 sm:space-y-0 hover:bg-accent/50 transition-colors\"\n                  >\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"flex items-start space-x-3\">\n                        {getStatusIcon(task.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\">{task.title}</h4>\n                          {task.description && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">{task.description}</p>\n                          )}\n                          <div className=\"flex flex-wrap gap-2 mt-2\">\n                            <Badge className={getPriorityColor(task.priority)} variant=\"outline\">\n                              {task.priority.toUpperCase()} PRIORITY\n                            </Badge>\n                            <Badge variant=\"secondary\">\n                              {task.status.charAt(0).toUpperCase() + task.status.slice(1)}\n                            </Badge>\n                            {task.dueDate && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                Due: {new Date(task.dueDate).toLocaleDateString()}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {task.status === 'pending' && (\n                        <Button\n                          className=\"h-11 min-h-11\"\n                          onClick={() => handleStatusChange(task.id, 'in_progress')}\n                          disabled={updateTaskMutation.isPending}\n                        >\n                          Start Task\n                        </Button>\n                      )}\n                      {task.status === 'in_progress' && (\n                        <>\n                          <Button\n                            className=\"h-11 min-h-11\"\n                            variant=\"outline\"\n                            onClick={() => handleStatusChange(task.id, 'pending')}\n                            disabled={updateTaskMutation.isPending}\n                          >\n                            Mark Pending\n                          </Button>\n                          <Button\n                            className=\"h-11 min-h-11\"\n                            onClick={() => handleStatusChange(task.id, 'completed')}\n                            disabled={updateTaskMutation.isPending}\n                          >\n                            Complete\n                          </Button>\n                        </>\n                      )}\n                      {task.status === 'pending_review' && (\n                        <Badge className=\"bg-yellow-100 text-yellow-800 h-11 flex items-center px-4\" variant=\"secondary\">\n                          Pending Approval\n                        </Badge>\n                      )}\n                      {task.status === 'completed' && (\n                        <Button\n                          className=\"h-11 min-h-11\"\n                          variant=\"outline\"\n                          onClick={() => handleStatusChange(task.id, 'pending')}\n                          disabled={updateTaskMutation.isPending}\n                        >\n                          Reopen\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":8260},"client/src/pages/dashboard/housekeeping-supervisor/duty-tracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, UserCheck, UserX } from \"lucide-react\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { formatDateTime } from \"@/lib/utils\";\n\nexport default function HousekeepingSupervisorDutyTracking() {\n  const { data: staff = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/users\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch staff\");\n      return response.json();\n    }\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/attendance/daily\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch attendance\");\n      return response.json();\n    }\n  });\n\n  const housekeepingStaff = staff.filter(s => s.role?.name === 'housekeeping_staff');\n  const activeAttendanceUserIds = dailyAttendance.filter(a => a.status === 'active').map(a => a.userId);\n  const onlineStaff = housekeepingStaff.filter(s => activeAttendanceUserIds.includes(s.id));\n  const offlineStaff = housekeepingStaff.filter(s => !activeAttendanceUserIds.includes(s.id));\n\n  return (\n    <DashboardLayout title=\"Duty Tracking\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <StatsCard\n            title=\"Total Staff\"\n            value={housekeepingStaff.length}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"On Duty\"\n            value={onlineStaff.length}\n            icon={<UserCheck />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Off Duty\"\n            value={offlineStaff.length}\n            icon={<UserX />}\n            iconColor=\"text-gray-500\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Staff On Duty</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <p className=\"text-muted-foreground\">Loading...</p>\n              ) : onlineStaff.length === 0 ? (\n                <p className=\"text-muted-foreground\" data-testid=\"no-online-staff\">No staff currently on duty</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {onlineStaff.map((member, index) => {\n                    const attendance = dailyAttendance.find(a => a.userId === member.id && a.status === 'active');\n                    return (\n                      <div key={member.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`online-staff-${index}`}>\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">{member.username}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{member.phone}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\" variant=\"secondary\">On Duty</Badge>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {attendance?.clockInTime ? formatDateTime(attendance.clockInTime) : 'Active'}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Staff Off Duty</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <p className=\"text-muted-foreground\">Loading...</p>\n              ) : offlineStaff.length === 0 ? (\n                <p className=\"text-muted-foreground\" data-testid=\"no-offline-staff\">All staff are on duty</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {offlineStaff.map((member, index) => {\n                    const lastAttendance = dailyAttendance\n                      .filter(a => a.userId === member.id && a.status === 'completed')\n                      .sort((a, b) => new Date(b.clockOutTime).getTime() - new Date(a.clockOutTime).getTime())[0];\n                    return (\n                      <div key={member.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`offline-staff-${index}`}>\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">{member.username}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{member.phone}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100\" variant=\"secondary\">Off Duty</Badge>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {lastAttendance?.clockOutTime ? formatDateTime(lastAttendance.clockOutTime) : 'No recent activity'}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":5885},"client/src/pages/dashboard/frontdesk/maintenance-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wrench, Send, Clock, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function FrontdeskMaintenanceRequests() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [location, setLocation] = useState(\"\");\n  const [photo, setPhoto] = useState<string>(\"\");\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000,\n    select: (data: any) => {\n      return data.filter((req: any) => req.reportedBy === user?.id);\n    }\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request submitted successfully to Manager\" });\n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setLocation(\"\");\n      setPhoto(\"\");\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit request\", \n        description: \"Please try again later\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !description || !location || !photo) {\n      toast({ \n        title: \"Missing information\", \n        description: \"Please fill in all required fields including photo\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title,\n      description,\n      priority,\n      location,\n      photo,\n      status: 'pending'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600 dark:text-green-400\" />;\n      case 'in_progress':\n        return <Wrench className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-orange-500 dark:text-orange-400\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Maintenance Requests\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Send className=\"h-5 w-5 mr-2\" />\n              Submit Request to Manager\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Issue Title *</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Broken AC in Lobby\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                  data-testid=\"input-maintenance-title\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location *</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., Room 101, Lobby Area\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  required\n                  data-testid=\"input-maintenance-location\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"priority\">Priority *</Label>\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger id=\"priority\" className=\"h-11\" data-testid=\"select-maintenance-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Can wait</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Soon</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about the issue...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={4}\n                  required\n                  data-testid=\"input-maintenance-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"photo\">Photo *</Label>\n                <Input\n                  id=\"photo\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  data-testid=\"input-maintenance-photo\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      const reader = new FileReader();\n                      reader.onloadend = () => {\n                        setPhoto(reader.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                />\n                {photo && (\n                  <div className=\"mt-2\">\n                    <img src={photo} alt=\"Preview\" className=\"max-w-full h-32 object-cover rounded border\" />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-11 min-h-11\"\n                disabled={createRequestMutation.isPending}\n                data-testid=\"button-submit-maintenance\"\n              >\n                {createRequestMutation.isPending ? (\n                  \"Submitting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Submit to Manager\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {myRequests.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No maintenance requests submitted yet\n                </p>\n              ) : (\n                myRequests.map((request: any) => (\n                  <div\n                    key={request.id}\n                    className=\"p-4 border rounded-lg space-y-2 hover:bg-accent/50 transition-colors\"\n                    data-testid={`maintenance-request-${request.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        {getStatusIcon(request.status)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground leading-tight\">\n                            {request.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            {request.location}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground pl-8\">\n                      {request.description}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 pl-8\">\n                      <Badge className={getPriorityColor(request.priority)} variant=\"outline\">\n                        {request.priority.toUpperCase()}\n                      </Badge>\n                      <Badge variant=\"secondary\">\n                        {request.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(request.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n\n                    {request.resolvedAt && (\n                      <p className=\"text-xs text-green-600 dark:text-green-400 pl-8\">\n                        ✓ Resolved on {new Date(request.resolvedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10315},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/modals/room-service-charge-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface RoomServiceChargeModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  reservationId?: string;\n  roomId?: string;\n}\n\nexport function RoomServiceChargeModal({ open, onOpenChange, reservationId, roomId }: RoomServiceChargeModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedServiceId, setSelectedServiceId] = useState(\"\");\n  const [quantity, setQuantity] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [hours, setHours] = useState(\"\");\n  const [days, setDays] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [calculatedTotal, setCalculatedTotal] = useState(0);\n  const [serviceSearchQuery, setServiceSearchQuery] = useState(\"\");\n\n  const { data: services = [] } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n    enabled: !!user?.hotelId && open\n  });\n\n  const { data: rooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels\", user?.hotelId, \"rooms\"],\n    enabled: !!user?.hotelId && open\n  });\n\n  const { data: reservations = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/reservations\"],\n    enabled: !!user?.hotelId && open\n  });\n\n  const selectedService = services.find(s => s.id === selectedServiceId);\n  const selectedReservation = reservations.find(r => r.id === reservationId);\n  \n  // Always use in-house pricing for all services\n  // Services should always be charged at in-house rates regardless of guest type\n  const isInHouseGuest = true;\n\n  // Determine service type and calculation method based on user requirements\n  const getServiceType = (serviceKind: string) => {\n    const lowerKind = serviceKind?.toLowerCase() || '';\n    \n    // Fixed price services\n    if (lowerKind.includes('airport') || lowerKind.includes('transfer')) return 'fixed';\n    if (lowerKind.includes('tour guide')) return 'fixed';\n    if (lowerKind.includes('business center')) return 'fixed';\n    \n    // Per hour services\n    if (lowerKind.includes('spa')) return 'hours';\n    if (lowerKind.includes('jacuzzi')) return 'hours';\n    if (lowerKind.includes('massage')) return 'hours';\n    if (lowerKind.includes('sauna')) return 'hours';\n    if (lowerKind.includes('beauty salon')) return 'hours';\n    \n    // Per kg services\n    if (lowerKind.includes('laundry')) return 'kg';\n    \n    // Per day services\n    if (lowerKind.includes('gym') || lowerKind.includes('fitness')) return 'days';\n    if (lowerKind.includes('car rental')) return 'days';\n    if (lowerKind.includes('conference room')) return 'days';\n    \n    // Default to other (can be fixed or custom)\n    if (lowerKind.includes('other')) return 'custom';\n    \n    return 'quantity';\n  };\n\n  // Get display unit based on service kind\n  const getServiceUnit = (serviceKind: string) => {\n    const type = getServiceType(serviceKind);\n    if (type === 'kg') return 'kg';\n    if (type === 'hours') return 'hour';\n    if (type === 'days') return 'day';\n    if (type === 'fixed') return 'service';\n    if (type === 'custom') return 'unit';\n    return 'unit';\n  };\n\n  // Calculate total when service or inputs change\n  useEffect(() => {\n    if (selectedService) {\n      const unitPrice = isInHouseGuest \n        ? Number(selectedService.priceInhouse || 0)\n        : Number(selectedService.priceWalkin || 0);\n      \n      const serviceType = getServiceType(selectedService.kind);\n      let total = 0;\n\n      switch (serviceType) {\n        case 'kg':\n          // Laundry: price per kg\n          total = unitPrice * (Number(weight) || 0);\n          break;\n        case 'hours':\n          // Spa, Jacuzzi, Massage, Sauna, Beauty Salon: price per hour\n          total = unitPrice * (Number(hours) || 0);\n          break;\n        case 'days':\n          // Gym, Car Rental, Conference Room: price per day\n          total = unitPrice * (Number(days) || 0);\n          break;\n        case 'fixed':\n          // Airport Transfer, Tour Guide, Business Center: fixed price\n          total = unitPrice;\n          break;\n        case 'custom':\n          // Other services: can use quantity or be fixed\n          total = unitPrice * (Number(quantity) || 1);\n          break;\n        case 'quantity':\n        default:\n          total = unitPrice * (Number(quantity) || 0);\n          break;\n      }\n\n      setCalculatedTotal(total);\n    } else {\n      setCalculatedTotal(0);\n    }\n  }, [selectedService, quantity, weight, hours, days, isInHouseGuest]);\n\n  const addServiceChargeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/room-service-charges\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/room-service-charges\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/reservations\"] });\n      toast({ title: \"Service charge added successfully\" });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Failed to add service charge\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const resetForm = () => {\n    setSelectedServiceId(\"\");\n    setQuantity(\"\");\n    setWeight(\"\");\n    setHours(\"\");\n    setDays(\"\");\n    setNotes(\"\");\n    setCalculatedTotal(0);\n    setServiceSearchQuery(\"\");\n  };\n\n  // Filter services based on search query\n  const filteredServices = services.filter((service) => {\n    if (!serviceSearchQuery.trim()) return true;\n    const query = serviceSearchQuery.toLowerCase();\n    return (\n      service.name?.toLowerCase().includes(query) ||\n      service.kind?.toLowerCase().includes(query)\n    );\n  });\n\n  const handleSubmit = () => {\n    if (!selectedService || !reservationId) {\n      toast({ \n        title: \"Missing required fields\",\n        description: \"Please select a service\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    const serviceType = getServiceType(selectedService.kind);\n    let quantityValue = \"\";\n    \n    // Validate based on service type\n    switch (serviceType) {\n      case 'kg':\n        if (!weight) {\n          toast({ \n            title: \"Missing weight\",\n            description: \"Please enter weight in kg\",\n            variant: \"destructive\" \n          });\n          return;\n        }\n        quantityValue = weight;\n        break;\n      case 'hours':\n        if (!hours) {\n          toast({ \n            title: \"Missing hours\",\n            description: \"Please enter number of hours\",\n            variant: \"destructive\" \n          });\n          return;\n        }\n        quantityValue = hours;\n        break;\n      case 'days':\n        if (!days) {\n          toast({ \n            title: \"Missing days\",\n            description: \"Please enter number of days\",\n            variant: \"destructive\" \n          });\n          return;\n        }\n        quantityValue = days;\n        break;\n      case 'fixed':\n        // Fixed price services don't need quantity input\n        quantityValue = \"1\";\n        break;\n      case 'custom':\n        quantityValue = quantity || \"1\";\n        break;\n      default:\n        if (!quantity) {\n          toast({ \n            title: \"Missing quantity\",\n            description: \"Please enter quantity\",\n            variant: \"destructive\" \n          });\n          return;\n        }\n        quantityValue = quantity;\n    }\n\n    const unitPrice = isInHouseGuest \n      ? Number(selectedService.priceInhouse || 0)\n      : Number(selectedService.priceWalkin || 0);\n\n    const unit = getServiceUnit(selectedService.kind);\n\n    addServiceChargeMutation.mutate({\n      reservationId,\n      serviceId: selectedService.id,\n      serviceName: selectedService.name,\n      serviceKind: selectedService.kind,\n      quantity: quantityValue,\n      unit: unit,\n      unitPrice: unitPrice.toFixed(2),\n      totalCharge: calculatedTotal.toFixed(2),\n      notes: notes || null\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Add Room Service Charge</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"service\">Service *</Label>\n            <Select value={selectedServiceId} onValueChange={setSelectedServiceId}>\n              <SelectTrigger id=\"service\" data-testid=\"select-service\">\n                <SelectValue placeholder=\"Select service\" />\n              </SelectTrigger>\n              <SelectContent>\n                <div className=\"px-2 pb-2 sticky top-0 bg-background z-10\">\n                  <Input\n                    placeholder=\"Search services...\"\n                    value={serviceSearchQuery}\n                    onChange={(e) => setServiceSearchQuery(e.target.value)}\n                    className=\"h-8 text-sm\"\n                    onClick={(e) => e.stopPropagation()}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n                {filteredServices.length > 0 ? (\n                  filteredServices.map((service) => (\n                    <SelectItem key={service.id} value={service.id}>\n                      {service.name} ({service.kind})\n                    </SelectItem>\n                  ))\n                ) : (\n                  <div className=\"px-2 py-6 text-center text-sm text-muted-foreground\">\n                    No services found\n                  </div>\n                )}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {selectedService && (\n            <>\n              <div className=\"p-3 bg-muted rounded-md\">\n                <div className=\"text-sm space-y-1\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Service Type:</span>\n                    <span className=\"font-medium\">{selectedService.kind}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Rate ({isInHouseGuest ? 'In-House' : 'Walk-In'}):</span>\n                    <span className=\"font-medium\">\n                      {formatCurrency(isInHouseGuest ? selectedService.priceInhouse : selectedService.priceWalkin)} / {getServiceUnit(selectedService.kind)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Different forms based on service type */}\n              {getServiceType(selectedService.kind) === 'kg' && (\n                <div>\n                  <Label htmlFor=\"weight\">Weight (kg) *</Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={weight}\n                    onChange={(e) => setWeight(e.target.value)}\n                    placeholder=\"Enter weight in kg\"\n                    data-testid=\"input-weight\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Charged at {formatCurrency(isInHouseGuest ? selectedService.priceInhouse : selectedService.priceWalkin)} per kg\n                  </p>\n                </div>\n              )}\n\n              {getServiceType(selectedService.kind) === 'hours' && (\n                <div>\n                  <Label htmlFor=\"hours\">Hours *</Label>\n                  <Input\n                    id=\"hours\"\n                    type=\"number\"\n                    step=\"0.5\"\n                    min=\"0.5\"\n                    value={hours}\n                    onChange={(e) => setHours(e.target.value)}\n                    placeholder=\"Enter number of hours\"\n                    data-testid=\"input-hours\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Charged at {formatCurrency(isInHouseGuest ? selectedService.priceInhouse : selectedService.priceWalkin)} per hour\n                  </p>\n                </div>\n              )}\n\n              {getServiceType(selectedService.kind) === 'days' && (\n                <div>\n                  <Label htmlFor=\"days\">Days *</Label>\n                  <Input\n                    id=\"days\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={days}\n                    onChange={(e) => setDays(e.target.value)}\n                    placeholder=\"Enter number of days\"\n                    data-testid=\"input-days\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Charged at {formatCurrency(isInHouseGuest ? selectedService.priceInhouse : selectedService.priceWalkin)} per day\n                  </p>\n                </div>\n              )}\n\n              {getServiceType(selectedService.kind) === 'fixed' && (\n                <div className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded-md border border-blue-200 dark:border-blue-800\">\n                  <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                    This is a fixed-price service. The full amount will be charged.\n                  </p>\n                </div>\n              )}\n\n              {getServiceType(selectedService.kind) === 'custom' && (\n                <div>\n                  <Label htmlFor=\"quantity\">Quantity (Optional)</Label>\n                  <Input\n                    id=\"quantity\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(e.target.value)}\n                    placeholder=\"Enter quantity (default: 1)\"\n                    data-testid=\"input-quantity\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Charged at {formatCurrency(isInHouseGuest ? selectedService.priceInhouse : selectedService.priceWalkin)} per unit\n                  </p>\n                </div>\n              )}\n\n              {getServiceType(selectedService.kind) === 'quantity' && (\n                <div>\n                  <Label htmlFor=\"quantity\">Quantity *</Label>\n                  <Input\n                    id=\"quantity\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(e.target.value)}\n                    placeholder=\"Enter quantity\"\n                    data-testid=\"input-quantity\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Charged at {formatCurrency(isInHouseGuest ? selectedService.priceInhouse : selectedService.priceWalkin)} per unit\n                  </p>\n                </div>\n              )}\n\n              {calculatedTotal > 0 && (\n                <div className=\"p-3 bg-primary/10 rounded-md\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Total Charge:</span>\n                    <span className=\"text-lg font-bold\">{formatCurrency(calculatedTotal)}</span>\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  placeholder=\"Any additional notes...\"\n                  rows={2}\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n            </>\n          )}\n\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              onClick={handleSubmit}\n              disabled={!selectedService || addServiceChargeMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-add-charge\"\n            >\n              {addServiceChargeMutation.isPending ? \"Adding...\" : \"Add Charge\"}\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                onOpenChange(false);\n                resetForm();\n              }}\n              className=\"flex-1\"\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":17093},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/pages/dashboard/finance/expenses.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { Plus, TrendingDown, Building, Truck, Users, Wrench, Download } from \"lucide-react\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function FinanceExpensesPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isVendorPaymentModalOpen, setIsVendorPaymentModalOpen] = useState(false);\n  const [isExpenseModalOpen, setIsExpenseModalOpen] = useState(false);\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Listen for real-time transaction updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  const { data: vendors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vendors\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  const vendorPaymentForm = useForm({\n    defaultValues: {\n      vendorName: \"\",\n      amount: \"\",\n      paymentMethod: \"cash\",\n      chequeNumber: \"\",\n      bankName: \"\",\n      reference: \"\"\n    }\n  });\n\n  const expenseForm = useForm({\n    defaultValues: {\n      category: \"utilities\",\n      amount: \"\",\n      paymentMethod: \"cash\",\n      chequeNumber: \"\",\n      bankName: \"\",\n      description: \"\"\n    }\n  });\n\n  const createVendorPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Validate amount\n      const amount = parseFloat(data.amount);\n      if (isNaN(amount) || amount <= 0) {\n        throw new Error(\"Please enter a valid amount\");\n      }\n\n      // Validate cheque details if payment method is cheque\n      if (data.paymentMethod === \"cheque\") {\n        if (!data.chequeNumber || data.chequeNumber.trim() === \"\") {\n          throw new Error(\"Cheque number is required\");\n        }\n        if (!data.bankName || data.bankName.trim() === \"\") {\n          throw new Error(\"Bank name is required for cheque payment\");\n        }\n      }\n\n      const details: any = {\n        vendorName: data.vendorName,\n        notes: data.reference || \"\"\n      };\n\n      if (data.paymentMethod === \"cheque\") {\n        details.chequeNumber = data.chequeNumber.trim();\n        details.bankName = data.bankName.trim();\n      }\n\n      await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user?.hotelId,\n        txnType: \"vendor_payment\",\n        amount: amount.toFixed(2),\n        paymentMethod: data.paymentMethod,\n        purpose: `Vendor Payment - ${data.vendorName}`,\n        reference: data.reference,\n        details,\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Vendor payment recorded successfully\" });\n      vendorPaymentForm.reset();\n      setIsVendorPaymentModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to process vendor payment\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const amount = parseFloat(data.amount);\n      if (isNaN(amount) || amount <= 0) {\n        throw new Error(\"Please enter a valid amount\");\n      }\n\n      // Validate cheque details if payment method is cheque\n      if (data.paymentMethod === \"cheque\") {\n        if (!data.chequeNumber || data.chequeNumber.trim() === \"\") {\n          throw new Error(\"Cheque number is required\");\n        }\n        if (!data.bankName || data.bankName.trim() === \"\") {\n          throw new Error(\"Bank name is required for cheque payment\");\n        }\n      }\n\n      const details: any = {};\n      if (data.paymentMethod === \"cheque\") {\n        details.chequeNumber = data.chequeNumber.trim();\n        details.bankName = data.bankName.trim();\n      }\n\n      await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user?.hotelId,\n        txnType: \"cash_out\",\n        amount: amount.toFixed(2),\n        paymentMethod: data.paymentMethod,\n        purpose: `${data.category} - ${data.description}`,\n        reference: data.category,\n        details,\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Expense recorded successfully\" });\n      expenseForm.reset();\n      setIsExpenseModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to record expense\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Filter expense transactions\n  const expenseTransactions = transactions.filter(t => \n    t.txnType === 'cash_out' || t.txnType === 'vendor_payment' || t.txnType?.includes('_out')\n  );\n\n  const totalExpenses = expenseTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const vendorPayments = expenseTransactions.filter(t => t.txnType === 'vendor_payment');\n  const otherExpenses = expenseTransactions.filter(t => t.txnType !== 'vendor_payment');\n  \n  const totalVendorPayments = vendorPayments.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalOtherExpenses = otherExpenses.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n\n  return (\n    <DashboardLayout title=\"Expense Tracking\">\n      <div className=\"space-y-6\">\n        {/* Add Expense Button */}\n        <div className=\"flex justify-end\">\n          <Button \n            onClick={() => setIsExpenseModalOpen(true)}\n            data-testid=\"button-add-expense\"\n            className=\"gap-2\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            Add Expense\n          </Button>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"bg-gradient-to-r from-red-500 to-pink-600 text-white\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm opacity-90\">Total Expenses</p>\n                  <p className=\"text-3xl font-bold mt-2\">{formatCurrency(totalExpenses)}</p>\n                  <p className=\"text-sm opacity-90 mt-1\">{expenseTransactions.length} transactions</p>\n                </div>\n                <TrendingDown className=\"h-12 w-12 opacity-50\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Vendor Payments</p>\n                  <p className=\"text-2xl font-bold text-red-600\">{formatCurrency(totalVendorPayments)}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{vendorPayments.length} payments</p>\n                </div>\n                <Truck className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Other Expenses</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">{formatCurrency(totalOtherExpenses)}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{otherExpenses.length} expenses</p>\n                </div>\n                <Building className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Expenses */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Expenses</CardTitle>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Date</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Type</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Amount</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Payment Method</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Purpose</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {expenseTransactions.length === 0 ? (\n                      <tr>\n                        <td colSpan={5} className=\"px-4 py-8 text-center text-muted-foreground\">\n                          No expenses recorded yet\n                        </td>\n                      </tr>\n                    ) : (\n                      expenseTransactions.slice(0, 20).map((expense) => (\n                        <tr key={expense.id} className=\"border-t hover:bg-muted/50\">\n                          <td className=\"px-4 py-3 text-sm\">{formatDate(expense.createdAt)}</td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <span className=\"inline-block px-2 py-1 rounded text-xs bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\">\n                              {expense.txnType}\n                            </span>\n                          </td>\n                          <td className=\"px-4 py-3 text-sm font-medium text-red-600\">\n                            {formatCurrency(Number(expense.amount))}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm capitalize\">{expense.paymentMethod}</td>\n                          <td className=\"px-4 py-3 text-sm\">{expense.purpose || '-'}</td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Vendor Payment Modal */}\n        <Dialog open={isVendorPaymentModalOpen} onOpenChange={setIsVendorPaymentModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Record Vendor Payment</DialogTitle>\n            </DialogHeader>\n            <Form {...vendorPaymentForm}>\n              <form onSubmit={vendorPaymentForm.handleSubmit((data) => createVendorPaymentMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"vendorName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vendor *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter vendor name\" data-testid=\"input-vendor-name\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-vendor-amount\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-vendor-payment-method\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"cheque\">Cheque</SelectItem>\n                          <SelectItem value=\"pos\">POS</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n\n                {vendorPaymentForm.watch(\"paymentMethod\") === \"cheque\" && (\n                  <>\n                    <FormField\n                      control={vendorPaymentForm.control}\n                      name=\"chequeNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Cheque Number *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter cheque number\" data-testid=\"input-cheque-number\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={vendorPaymentForm.control}\n                      name=\"bankName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bank Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Which bank cheque issued from\" data-testid=\"input-cheque-bank\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </>\n                )}\n\n                <FormField\n                  control={vendorPaymentForm.control}\n                  name=\"reference\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reference</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Invoice number or reference\" data-testid=\"input-vendor-reference\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2\">\n                  <Button type=\"submit\" className=\"flex-1\" disabled={createVendorPaymentMutation.isPending}>\n                    {createVendorPaymentMutation.isPending ? \"Processing...\" : \"Record Payment\"}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" className=\"flex-1\" onClick={() => setIsVendorPaymentModalOpen(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Add Expense Modal */}\n        <Dialog open={isExpenseModalOpen} onOpenChange={setIsExpenseModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Expense</DialogTitle>\n            </DialogHeader>\n            <Form {...expenseForm}>\n              <form onSubmit={expenseForm.handleSubmit((data) => createExpenseMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={expenseForm.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-category\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"utilities\">Utilities</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                          <SelectItem value=\"supplies\">Supplies</SelectItem>\n                          <SelectItem value=\"salaries\">Salaries</SelectItem>\n                          <SelectItem value=\"rent\">Rent</SelectItem>\n                          <SelectItem value=\"insurance\">Insurance</SelectItem>\n                          <SelectItem value=\"marketing\">Marketing</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={expenseForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-expense-amount\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={expenseForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-expense-payment-method\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"cheque\">Cheque</SelectItem>\n                          <SelectItem value=\"pos\">POS</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n\n                {expenseForm.watch(\"paymentMethod\") === \"cheque\" && (\n                  <>\n                    <FormField\n                      control={expenseForm.control}\n                      name=\"chequeNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Cheque Number *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter cheque number\" data-testid=\"input-expense-cheque-number\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={expenseForm.control}\n                      name=\"bankName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bank Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Which bank cheque issued from\" data-testid=\"input-expense-cheque-bank\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </>\n                )}\n\n                <FormField\n                  control={expenseForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Expense description\" rows={3} data-testid=\"input-expense-description\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2\">\n                  <Button type=\"submit\" className=\"flex-1\" disabled={createExpenseMutation.isPending}>\n                    {createExpenseMutation.isPending ? \"Recording...\" : \"Record Expense\"}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" className=\"flex-1\" onClick={() => setIsExpenseModalOpen(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":22008},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { NAVIGATION_ITEMS } from \"@/lib/constants\";\nimport { useLocation } from \"wouter\";\nimport * as Icons from \"lucide-react\";\n\ninterface SidebarProps {\n  onItemClick?: () => void;\n}\n\nexport function Sidebar({ onItemClick }: SidebarProps = {}) {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  \n  const userRole = user?.role?.name;\n  const navigationItems = userRole ? (NAVIGATION_ITEMS as any)[userRole] || [] : [];\n\n  const getItemPath = (itemId: string, role: string) => {\n    const pathMaps: Record<string, Record<string, string>> = {\n      'super_admin': {\n        'dashboard': '/',\n        'hotels': '/super-admin/hotels',\n        'owners': '/super-admin/owners',\n        'superadmins': '/super-admin/superadmins',\n        'alldata': '/super-admin/alldata',\n        'deleted': '/super-admin/deleted',\n        'analytics': '/super-admin/analytics'\n      },\n      'owner': {\n        'dashboard': '/owner',\n        'guests': '/guests',\n        'hall-bookings': '/hall-bookings',\n        'financial': '/owner/financial',\n        'inventory': '/owner/inventory',\n        'occupancy': '/owner/occupancy',\n        'amenities': '/owner/amenities',\n        'vouchers': '/owner/vouchers',\n        'taxes': '/owner/taxes',\n        'staff': '/owner/staff',\n        'attendance': '/owner/attendance',\n        'leave-policies': '/owner/leave-policies',\n        'leave-approvals': '/owner/leave-approvals',\n        'report': '/owner/report',\n        'reports': '/owner/reports'\n      },\n      'manager': {\n        'dashboard': '/manager',\n        'guests': '/guests',\n        'hall-bookings': '/hall-bookings',\n        'staff': '/manager/staff',\n        'attendance': '/manager/attendance-reports',\n        'payments': '/manager/vendor-payments',\n        'vouchers': '/manager/discount-vouchers',\n        'rooms': '/manager/room-setup',\n        'pricing': '/manager/room-pricing',\n        'amenities': '/manager/amenities',\n        'meal-plans': '/manager/meal-plans',\n        'maintenance-requests': '/manager/maintenance-requests',\n        'leave': '/leave-requests',\n        'leave-approvals': '/manager/leave-approvals',\n        'transactions': '/manager/transactions'\n      },\n      'housekeeping_supervisor': {\n        'dashboard': '/housekeeping-supervisor',\n        'staff': '/housekeeping-supervisor/staff-management',\n        'duty': '/housekeeping-supervisor/duty-tracking',\n        'cleaning-queue': '/housekeeping-supervisor/cleaning-queue',\n        'tasks': '/housekeeping-supervisor/task-assignment',\n        'maintenance': '/housekeeping-supervisor/maintenance-requests',\n        'tracking': '/housekeeping-supervisor/staff-tracking',\n        'leave': '/housekeeping-supervisor/leave-requests'\n      },\n      'restaurant_bar_manager': {\n        'dashboard': '/restaurant-bar-manager',\n        'staff': '/restaurant-bar-manager/staff-management',\n        'tables': '/restaurant-bar-manager/table-setup',\n        'stock-requests': '/restaurant-bar-manager/stock-requests',\n        'duty': '/restaurant-bar-manager/duty-tracking',\n        'tasks': '/restaurant-bar-manager/task-assignment',\n        'menu': '/restaurant-bar-manager/menu-management',\n        'maintenance': '/restaurant-bar-manager/maintenance-requests',\n        'leave': '/restaurant-bar-manager/leave-requests',\n        'leave-approvals': '/restaurant-bar-manager/leave-approvals',\n        'wastage': '/restaurant-bar-manager/wastage'\n      },\n      'security_head': {\n        'dashboard': '/security-head',\n        'staff': '/security-head/staff-management',\n        'vehicles': '/security-head/vehicles',\n        'request-stock': '/security-head/request-stock',\n        'leave': '/security-head/leave-requests',\n        'leave-approvals': '/security-head/leave-approvals'\n      },\n      'finance': {\n        'dashboard': '/finance',\n        'hall-bookings': '/hall-bookings',\n        'transactions': '/finance/transactions',\n        'revenue': '/finance/revenue',\n        'expenses': '/finance/expenses',\n        'cashflow': '/finance/cashflow',\n        'reconciliation': '/finance/reconciliation',\n        'reports': '/finance/reports',\n        'maintenance-requests': '/finance/maintenance-requests',\n        'leave': '/leave-requests'\n      },\n      'waiter': {\n        'dashboard': '/waiter',\n        'duty': '/waiter/duty-status',\n        'tasks': '/waiter/my-tasks',\n        'orders': '/waiter/orders',\n        'billing': '/waiter/billing',\n        'search': '/waiter/food-search',\n        'request-stock': '/waiter/request-stock',\n        'maintenance': '/waiter/maintenance',\n        'leave': '/leave-requests'\n      },\n      'cashier': {\n        'dashboard': '/cashier',\n        'table-billing': '/cashier/table-billing',\n        'hall-bookings': '/hall-bookings',\n        'maintenance': '/cashier/maintenance',\n        'leave': '/leave-requests'\n      },\n      'front_desk': {\n        'dashboard': '/front-desk',\n        'guests': '/guests',\n        'hall-bookings': '/hall-bookings',\n        'request-stock': '/front-desk/request-stock',\n        'maintenance': '/front-desk/maintenance-requests',\n        'leave': '/leave-requests'\n      },\n      'surveillance_officer': {\n        'dashboard': '/surveillance-officer',\n        'duty': '/surveillance-officer/duty-status',\n        'tasks': '/surveillance-officer/my-tasks',\n        'vehicles': '/surveillance-officer/vehicle-logs',\n        'maintenance': '/surveillance-officer/maintenance-reports',\n        'request-stock': '/surveillance-officer/request-stock',\n        'leave': '/leave-requests'\n      },\n      'housekeeping_staff': {\n        'dashboard': '/housekeeping-staff',\n        'duty': '/housekeeping-staff/duty-status',\n        'tasks': '/housekeeping-staff/my-tasks',\n        'request-stock': '/housekeeping-staff/request-stock',\n        'maintenance': '/housekeeping-staff/maintenance-reports',\n        'leave': '/leave-requests'\n      },\n      'kitchen_staff': {\n        'dashboard': '/kitchen-staff',\n        'duty': '/duty-status',\n        'tasks': '/my-tasks',\n        'kot': '/kot-orders',\n        'request-stock': '/kitchen-staff/request-stock',\n        'maintenance': '/kitchen-staff/maintenance',\n        'leave': '/leave-requests'\n      },\n      'bartender': {\n        'dashboard': '/bartender',\n        'duty': '/duty-status',\n        'tasks': '/my-tasks',\n        'kot': '/kot-orders',\n        'request-stock': '/bartender/request-stock',\n        'maintenance': '/bartender/maintenance',\n        'leave': '/leave-requests'\n      },\n      'barista': {\n        'dashboard': '/barista',\n        'duty': '/duty-status',\n        'tasks': '/my-tasks',\n        'kot': '/kot-orders',\n        'request-stock': '/barista/request-stock',\n        'maintenance': '/barista/maintenance',\n        'leave': '/leave-requests'\n      },\n      'security_guard': {\n        'dashboard': '/security-guard',\n        'duty': '/duty-status',\n        'tasks': '/my-tasks',\n        'vehicles': '/vehicle-check',\n        'maintenance': '/maintenance-reports',\n        'request-stock': '/security-guard/request-stock',\n        'leave': '/leave-requests'\n      },\n      'storekeeper': {\n        'dashboard': '/storekeeper',\n        'duty': '/storekeeper/duty-status',\n        'inventory': '/storekeeper/inventory-tracking',\n        'management': '/storekeeper/inventory-management',\n        'stock-requests': '/storekeeper/stock-requests',\n        'maintenance': '/storekeeper/maintenance-requests',\n        'tasks': '/storekeeper/my-tasks',\n        'leave': '/leave-requests'\n      }\n    };\n\n    const rolePathMap = pathMaps[role];\n    if (rolePathMap && rolePathMap[itemId]) {\n      return rolePathMap[itemId];\n    }\n    \n    // Fallback to role base path\n    const roleDashboards: Record<string, string> = {\n      'super_admin': '/super-admin',\n      'owner': '/owner',\n      'manager': '/manager',\n      'housekeeping_supervisor': '/housekeeping-supervisor',\n      'housekeeping_staff': '/housekeeping-staff',\n      'restaurant_bar_manager': '/restaurant-bar-manager',\n      'waiter': '/waiter',\n      'kitchen_staff': '/kitchen-staff',\n      'bartender': '/bartender',\n      'barista': '/barista',\n      'cashier': '/cashier',\n      'security_head': '/security-head',\n      'security_guard': '/security-guard',\n      'surveillance_officer': '/surveillance-officer',\n      'finance': '/finance',\n      'front_desk': '/front-desk',\n      'storekeeper': '/storekeeper'\n    };\n    \n    return roleDashboards[role] || `/${role}`;\n  };\n\n  const isActiveItem = (itemId: string) => {\n    if (!userRole) return false;\n    const expectedPath = getItemPath(itemId, userRole);\n    return location === expectedPath;\n  };\n\n  const handleItemClick = (itemId: string) => {\n    if (!userRole) return;\n    const path = getItemPath(itemId, userRole);\n    setLocation(path);\n    onItemClick?.();\n  };\n\n  const getIcon = (iconName: string) => {\n    const IconComponent = Icons[iconName as keyof typeof Icons] as any;\n    return IconComponent ? <IconComponent className=\"w-4 h-4\" /> : <Icons.Circle className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border h-[calc(100vh-80px)] overflow-y-auto\" data-testid=\"sidebar\">\n      <nav className=\"p-4 space-y-2\">\n        {navigationItems.map((item: any) => (\n          <Button\n            key={item.id}\n            variant={isActiveItem(item.id) ? \"default\" : \"ghost\"}\n            className={cn(\n              \"w-full justify-start space-x-3\",\n              isActiveItem(item.id) && \"bg-primary text-primary-foreground\"\n            )}\n            onClick={() => handleItemClick(item.id)}\n            data-testid={`nav-item-${item.id}`}\n          >\n            {getIcon(item.icon)}\n            <span>{item.label}</span>\n          </Button>\n        ))}\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":9942},"client/src/pages/dashboard/restaurant-bar-manager/leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, User, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function LeaveRequests() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newRequest, setNewRequest] = useState({\n    leaveType: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\"\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch user's leave requests\n  const { data: myRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests/my-requests\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch leave balances\n  const { data: leaveBalances = [] } = useQuery<any[]>({\n    queryKey: [\"/api/leave-balances\"],\n    refetchInterval: 3000\n  });\n\n  // Create leave request mutation\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      const response = await fetch(\"/api/hotels/current/leave-requests\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/my-requests\"] });\n      setIsAddDialogOpen(false);\n      setNewRequest({ leaveType: \"\", startDate: \"\", endDate: \"\", reason: \"\" });\n      toast.success(\"Leave request submitted successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateRequest = () => {\n    if (!newRequest.leaveType || !newRequest.startDate || !newRequest.endDate) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (new Date(newRequest.endDate) < new Date(newRequest.startDate)) {\n      toast.error(\"End date must be after start date\");\n      return;\n    }\n\n    createRequestMutation.mutate(newRequest);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected': return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default: return <Clock className=\"h-4 w-4 text-orange-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-orange-100 text-orange-800 border-orange-200';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDaysDifference = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; // +1 to include both start and end dates\n    return diffDays;\n  };\n\n  const columns = [\n    { \n      key: \"leaveType\", \n      label: \"Type\", \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium capitalize\">\n          {value?.replace(/_/g, ' ')}\n        </span>\n      )\n    },\n    { \n      key: \"startDate\", \n      label: \"Start Date\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    },\n    { \n      key: \"endDate\", \n      label: \"End Date\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    },\n    {\n      key: \"duration\",\n      label: \"Duration\",\n      render: (value: any, row: any) => (\n        <span className=\"text-sm text-muted-foreground\">\n          {getDaysDifference(row.startDate, row.endDate)} day(s)\n        </span>\n      )\n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: string) => (\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon(value)}\n          <Badge variant=\"outline\" className={getStatusColor(value)}>\n            {value?.charAt(0).toUpperCase() + value?.slice(1)}\n          </Badge>\n        </div>\n      )\n    },\n    { \n      key: \"reason\", \n      label: \"Reason\", \n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\">\n          {value || 'No reason provided'}\n        </span>\n      )\n    },\n    {\n      key: \"managerNotes\",\n      label: \"Manager Notes\",\n      render: (value: string) => (\n        <span className=\"text-sm text-muted-foreground max-w-xs truncate\">\n          {value || '-'}\n        </span>\n      )\n    },\n    { \n      key: \"createdAt\", \n      label: \"Submitted\", \n      sortable: true,\n      render: (value: string) => formatDate(value)\n    }\n  ];\n\n  const pendingRequests = myRequests.filter(r => r.status === 'pending').length;\n  const approvedRequests = myRequests.filter(r => r.status === 'approved').length;\n  const rejectedRequests = myRequests.filter(r => r.status === 'rejected').length;\n\n  return (\n    <DashboardLayout title=\"Leave Requests\">\n      <div className=\"space-y-6\">\n        {/* Leave Balance Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {leaveBalances.map((balance: any) => (\n            <Card key={balance.id} data-testid={`balance-card-${balance.leaveType}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground capitalize\">\n                    {balance.leaveType.replace(/_/g, ' ')} Leave Balance\n                  </p>\n                  <div className=\"flex items-baseline space-x-2\">\n                    <p className=\"text-3xl font-bold\" data-testid={`balance-remaining-${balance.leaveType}`}>\n                      {parseFloat(balance.remainingDays)}\n                    </p>\n                    <span className=\"text-sm text-muted-foreground\">\n                      / {parseFloat(balance.totalDays)} days\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Used: {parseFloat(balance.usedDays)} days\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold\">{pendingRequests}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                  <p className=\"text-2xl font-bold\">{approvedRequests}</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Rejected</p>\n                  <p className=\"text-2xl font-bold\">{rejectedRequests}</p>\n                </div>\n                <XCircle className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Leave Requests Table */}\n        <DataTable\n          title=\"My Leave Requests\"\n          data={myRequests}\n          columns={columns}\n          isLoading={isLoading}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Request Leave\"\n          searchPlaceholder=\"Search leave requests...\"\n        />\n\n        {/* Add Leave Request Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request Leave</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"leaveType\">Leave Type *</Label>\n                <Select \n                  value={newRequest.leaveType} \n                  onValueChange={(value) => setNewRequest({ ...newRequest, leaveType: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select leave type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                    <SelectItem value=\"vacation\">Vacation</SelectItem>\n                    <SelectItem value=\"personal\">Personal Leave</SelectItem>\n                    <SelectItem value=\"emergency\">Emergency Leave</SelectItem>\n                    <SelectItem value=\"family\">Family Leave</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"startDate\">Start Date *</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={newRequest.startDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, startDate: e.target.value })}\n                  min={new Date().toISOString().split('T')[0]}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"endDate\">End Date *</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={newRequest.endDate}\n                  onChange={(e) => setNewRequest({ ...newRequest, endDate: e.target.value })}\n                  min={newRequest.startDate || new Date().toISOString().split('T')[0]}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"reason\">Reason</Label>\n                <Textarea\n                  id=\"reason\"\n                  value={newRequest.reason}\n                  onChange={(e) => setNewRequest({ ...newRequest, reason: e.target.value })}\n                  placeholder=\"Please provide a reason for your leave request\"\n                  rows={3}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateRequest}\n                  disabled={createRequestMutation.isPending}\n                >\n                  {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":12254},"client/src/pages/dashboard/security-guard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Shield, Car, Clock, CheckSquare, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { format } from \"date-fns\";\n\nexport default function SurveillanceOfficerDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Vehicle check-in form\n  const [vehicleForm, setVehicleForm] = useState({\n    vehicleNumber: \"\",\n    driverName: \"\",\n    purpose: \"\"\n  });\n  \n  // Maintenance request form\n  const [maintenanceForm, setMaintenanceForm] = useState({\n    title: \"\",\n    location: \"\",\n    description: \"\",\n    priority: \"medium\",\n    photo: \"\"\n  });\n\n  // Fetch my tasks\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/security/tasks\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch vehicle logs\n  const { data: vehicleLogs = [], isLoading: vehicleLogsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vehicle-logs\"],\n    refetchInterval: 3000\n  });\n\n  // Fetch my maintenance requests\n  const { data: maintenanceRequests = [], isLoading: maintenanceLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000\n  });\n\n  // Vehicle check-in mutation\n  const checkInVehicleMutation = useMutation({\n    mutationFn: async (data: typeof vehicleForm) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/vehicle-logs\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vehicle-logs\"] });\n      toast({ title: \"Vehicle checked in successfully\" });\n      setVehicleForm({ vehicleNumber: \"\", driverName: \"\", purpose: \"\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to check in vehicle\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Vehicle check-out mutation\n  const checkOutVehicleMutation = useMutation({\n    mutationFn: async (vehicleId: string) => {\n      return await apiRequest(\"PATCH\", `/api/vehicle-logs/${vehicleId}/checkout`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vehicle-logs\"] });\n      toast({ title: \"Vehicle checked out successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to check out vehicle\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Update task status mutation\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/tasks/${taskId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/security/tasks\"] });\n      toast({ title: \"Task status updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update task\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Create maintenance request mutation (using waiter pattern)\n  const createMaintenanceMutation = useMutation({\n    mutationFn: async (data: typeof maintenanceForm) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/maintenance-requests\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/maintenance-requests\"] });\n      toast({ title: \"Maintenance request sent to Security Head successfully\" });\n      setMaintenanceForm({ title: \"\", location: \"\", description: \"\", priority: \"medium\", photo: \"\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to send maintenance request\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleVehicleCheckIn = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!vehicleForm.vehicleNumber || !vehicleForm.driverName) {\n      toast({ title: \"Vehicle number and driver name are required\", variant: \"destructive\" });\n      return;\n    }\n    checkInVehicleMutation.mutate(vehicleForm);\n  };\n\n  const handleMaintenanceSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!maintenanceForm.title || !maintenanceForm.location) {\n      toast({ title: \"Title and location are required\", variant: \"destructive\" });\n      return;\n    }\n    createMaintenanceMutation.mutate(maintenanceForm);\n  };\n\n  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setMaintenanceForm({ ...maintenanceForm, photo: reader.result as string });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const myTasks = tasks.filter(t => t.assignedTo === user?.id);\n  const pendingTasks = myTasks.filter(t => t.status === 'pending');\n  const inProgressTasks = myTasks.filter(t => t.status === 'in_progress');\n  const completedTasks = myTasks.filter(t => t.status === 'completed');\n  \n  const myVehicleLogs = vehicleLogs.filter(v => v.recordedBy === user?.id);\n  const activeVehicles = myVehicleLogs.filter(v => !v.checkOut);\n  \n  const myMaintenanceRequests = maintenanceRequests.filter(r => r.reportedBy === user?.id);\n\n  return (\n    <DashboardLayout title=\"Surveillance Officer Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Pending Tasks\"\n            value={pendingTasks.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"In Progress\"\n            value={inProgressTasks.length}\n            icon={<Shield />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Completed\"\n            value={completedTasks.length}\n            icon={<CheckSquare />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Active Vehicles\"\n            value={activeVehicles.length}\n            icon={<Car />}\n            iconColor=\"text-purple-500\"\n          />\n        </div>\n\n        {/* Main Tabs */}\n        <Tabs defaultValue=\"tasks\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"tasks\" data-testid=\"tab-tasks\">My Tasks</TabsTrigger>\n            <TabsTrigger value=\"vehicles\" data-testid=\"tab-vehicles\">Vehicle Logs</TabsTrigger>\n            <TabsTrigger value=\"maintenance\" data-testid=\"tab-maintenance\">Maintenance</TabsTrigger>\n            <TabsTrigger value=\"checkin\" data-testid=\"tab-checkin\">Check-in Vehicle</TabsTrigger>\n          </TabsList>\n\n          {/* Tasks Tab */}\n          <TabsContent value=\"tasks\">\n            <Card>\n              <CardHeader>\n                <CardTitle>My Assigned Tasks</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {tasksLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"loading-tasks\">Loading tasks...</div>\n                ) : myTasks.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-tasks\">\n                    No tasks assigned yet.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {myTasks.map((task) => (\n                      <div key={task.id} className=\"p-4 border rounded-lg\" data-testid={`task-${task.id}`}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <h4 className=\"font-medium\" data-testid={`task-title-${task.id}`}>{task.title}</h4>\n                              <span className={`px-2 py-0.5 rounded text-xs ${\n                                task.priority === 'high' ? 'bg-red-100 text-red-800' :\n                                task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                                'bg-blue-100 text-blue-800'\n                              }`}>\n                                {task.priority}\n                              </span>\n                              <span className={`px-2 py-0.5 rounded text-xs ${\n                                task.status === 'completed' ? 'bg-green-100 text-green-800' :\n                                task.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                                'bg-gray-100 text-gray-800'\n                              }`} data-testid={`task-status-${task.id}`}>\n                                {task.status}\n                              </span>\n                            </div>\n                            {task.description && (\n                              <p className=\"text-sm text-muted-foreground mt-1\">{task.description}</p>\n                            )}\n                            {task.dueDate && (\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                Due: {format(new Date(task.dueDate), 'MMM dd, yyyy HH:mm')}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex space-x-2 ml-4\">\n                            {task.status === 'pending' && (\n                              <Button \n                                size=\"sm\" \n                                onClick={() => updateTaskMutation.mutate({ taskId: task.id, status: 'in_progress' })}\n                                disabled={updateTaskMutation.isPending}\n                                data-testid={`button-start-${task.id}`}\n                              >\n                                Start\n                              </Button>\n                            )}\n                            {task.status === 'in_progress' && (\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => updateTaskMutation.mutate({ taskId: task.id, status: 'completed' })}\n                                disabled={updateTaskMutation.isPending}\n                                data-testid={`button-complete-${task.id}`}\n                              >\n                                Complete\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Vehicles Tab */}\n          <TabsContent value=\"vehicles\">\n            <Card>\n              <CardHeader>\n                <CardTitle>My Vehicle Logs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {vehicleLogsLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"loading-vehicles\">Loading vehicle logs...</div>\n                ) : myVehicleLogs.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-vehicles\">\n                    No vehicle logs yet.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {myVehicleLogs.map((log) => (\n                      <div key={log.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`vehicle-${log.id}`}>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Car className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"font-medium\" data-testid={`vehicle-number-${log.id}`}>{log.vehicleNumber}</span>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground mt-1\">\n                            Driver: {log.driverName} • Purpose: {log.purpose}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            Check-in: {format(new Date(log.checkIn), 'MMM dd, yyyy HH:mm')}\n                            {log.checkOut && ` • Check-out: ${format(new Date(log.checkOut), 'MMM dd, yyyy HH:mm')}`}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`px-3 py-1 rounded-full text-xs ${\n                            log.checkOut ? 'bg-gray-100 text-gray-800' : 'bg-green-100 text-green-800'\n                          }`} data-testid={`vehicle-status-${log.id}`}>\n                            {log.checkOut ? 'Checked Out' : 'On Premises'}\n                          </span>\n                          {!log.checkOut && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => checkOutVehicleMutation.mutate(log.id)}\n                              disabled={checkOutVehicleMutation.isPending}\n                              data-testid={`button-checkout-${log.id}`}\n                            >\n                              Check Out\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Maintenance Tab */}\n          <TabsContent value=\"maintenance\">\n            <Card>\n              <CardHeader>\n                <CardTitle>My Maintenance Requests</CardTitle>\n                <CardDescription>Requests sent to Security Head</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {maintenanceLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"loading-maintenance\">Loading maintenance requests...</div>\n                ) : myMaintenanceRequests.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-maintenance\">\n                    No maintenance requests yet.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {myMaintenanceRequests.map((request) => (\n                      <div key={request.id} className=\"p-4 border rounded-lg\" data-testid={`maintenance-${request.id}`}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                              <h4 className=\"font-medium\" data-testid={`maintenance-title-${request.id}`}>{request.title}</h4>\n                              <span className={`px-2 py-0.5 rounded text-xs ${\n                                request.priority === 'high' ? 'bg-red-100 text-red-800' :\n                                request.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                                'bg-blue-100 text-blue-800'\n                              }`}>\n                                {request.priority}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mt-1\">{request.description}</p>\n                            <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                              <span>Location: {request.location}</span>\n                              <span data-testid={`maintenance-status-${request.id}`}>Status: {request.status}</span>\n                              <span>{format(new Date(request.createdAt), 'MMM dd, yyyy')}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Maintenance Request Form */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>Submit New Maintenance Request</CardTitle>\n                <CardDescription>Report maintenance issues to Security Head</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleMaintenanceSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Issue Title *</Label>\n                    <Input\n                      id=\"title\"\n                      data-testid=\"input-maintenance-title\"\n                      value={maintenanceForm.title}\n                      onChange={(e) => setMaintenanceForm({ ...maintenanceForm, title: e.target.value })}\n                      placeholder=\"e.g., CCTV Camera Malfunction\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"location\">Location *</Label>\n                    <Input\n                      id=\"location\"\n                      data-testid=\"input-maintenance-location\"\n                      value={maintenanceForm.location}\n                      onChange={(e) => setMaintenanceForm({ ...maintenanceForm, location: e.target.value })}\n                      placeholder=\"e.g., Main Entrance\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"priority\">Priority</Label>\n                    <Select value={maintenanceForm.priority} onValueChange={(value) => setMaintenanceForm({ ...maintenanceForm, priority: value })}>\n                      <SelectTrigger data-testid=\"select-maintenance-priority\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      data-testid=\"textarea-maintenance-description\"\n                      value={maintenanceForm.description}\n                      onChange={(e) => setMaintenanceForm({ ...maintenanceForm, description: e.target.value })}\n                      placeholder=\"Detailed description of the issue\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"photo\">Photo (optional)</Label>\n                    <Input\n                      id=\"photo\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      data-testid=\"input-maintenance-photo\"\n                      onChange={handlePhotoChange}\n                    />\n                    {maintenanceForm.photo && (\n                      <img src={maintenanceForm.photo} alt=\"Preview\" className=\"mt-2 h-32 rounded\" />\n                    )}\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMaintenanceMutation.isPending}\n                    data-testid=\"button-submit-maintenance\"\n                  >\n                    {createMaintenanceMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Check-in Vehicle Tab */}\n          <TabsContent value=\"checkin\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Vehicle Check-in</CardTitle>\n                <CardDescription>Register a vehicle entering the premises</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleVehicleCheckIn} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"vehicleNumber\">Vehicle Number *</Label>\n                    <Input\n                      id=\"vehicleNumber\"\n                      data-testid=\"input-vehicle-number\"\n                      value={vehicleForm.vehicleNumber}\n                      onChange={(e) => setVehicleForm({ ...vehicleForm, vehicleNumber: e.target.value })}\n                      placeholder=\"e.g., BA-1234\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"driverName\">Driver Name *</Label>\n                    <Input\n                      id=\"driverName\"\n                      data-testid=\"input-driver-name\"\n                      value={vehicleForm.driverName}\n                      onChange={(e) => setVehicleForm({ ...vehicleForm, driverName: e.target.value })}\n                      placeholder=\"e.g., John Doe\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"purpose\">Purpose</Label>\n                    <Input\n                      id=\"purpose\"\n                      data-testid=\"input-vehicle-purpose\"\n                      value={vehicleForm.purpose}\n                      onChange={(e) => setVehicleForm({ ...vehicleForm, purpose: e.target.value })}\n                      placeholder=\"e.g., Delivery\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    disabled={checkInVehicleMutation.isPending}\n                    data-testid=\"button-checkin-vehicle\"\n                  >\n                    {checkInVehicleMutation.isPending ? \"Checking in...\" : \"Check In Vehicle\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":23414},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/audit.ts":{"content":"import { db } from \"./db\";\nimport { auditLogs } from \"@shared/schema\";\n\nexport async function logAudit(params: {\n  hotelId?: string | null;\n  userId: string | null;\n  action: string;\n  resourceType: string;\n  resourceId?: string;\n  details?: any;\n  ipAddress?: string;\n  userAgent?: string;\n  success?: boolean;\n  errorMessage?: string;\n}) {\n  try {\n    await db.insert(auditLogs).values({\n      hotelId: params.hotelId,\n      userId: params.userId,\n      action: params.action,\n      resourceType: params.resourceType,\n      resourceId: params.resourceId,\n      details: params.details || {},\n      ipAddress: params.ipAddress,\n      userAgent: params.userAgent,\n      success: params.success !== false,\n      errorMessage: params.errorMessage,\n      createdAt: new Date()\n    });\n  } catch (error) {\n    console.error('Audit logging failed:', error);\n    // Don't throw - audit failure shouldn't break operations\n  }\n}\n","size_bytes":921},"server/storage.ts":{"content":"import {\n  users,\n  hotels,\n  roles,\n  rooms,\n  roomTypes,\n  menuItems,\n  menuCategories,\n  tasks,\n  roomCleaningQueue,\n  transactions,\n  maintenanceRequests,\n  kotOrders,\n  kotItems,\n  kotAuditLogs,\n  inventoryItems,\n  inventoryConsumptions,\n  inventoryTransactions,\n  vendors,\n  restaurantTables,\n  hotelTaxes,\n  vouchers,\n  vehicleLogs,\n  roomServiceOrders,\n  payments,\n  attendance,\n  halls,\n  pools,\n  services,\n  leaveRequests,\n  leavePolicies,\n  leaveBalances,\n  notifications,\n  wastages,\n  mealPlans,\n  mealVouchers,\n  guests,\n  stockRequests,\n  hallBookings,\n  bookingPayments,\n  restaurantBills,\n  billPayments,\n  auditLogs,\n  priceChangeLogs,\n  taxChangeLogs,\n  type User,\n  type UserWithRole,\n  type InsertUser,\n  type Hotel,\n  type InsertHotel,\n  type Room,\n  type InsertRoom,\n  type MenuItem,\n  type InsertMenuItem,\n  type Task,\n  type InsertTask,\n  type SelectRoomCleaningQueue,\n  type InsertRoomCleaningQueue,\n  type Transaction,\n  type InsertTransaction,\n  type MaintenanceRequest,\n  type InsertMaintenanceRequest,\n  type KotOrder,\n  type KotItem,\n  type Role,\n  type InventoryItem,\n  type InventoryConsumption,\n  type RoomType,\n  type InsertRoomType,\n  type Payment,\n  type Vendor,\n  type InsertVendor,\n  type RestaurantTable,\n  type MenuCategory,\n  type HotelTax,\n  type Voucher,\n  type InsertVoucher,\n  type VehicleLog,\n  type InsertVehicleLog,\n  type RoomServiceOrder,\n  type Hall,\n  type InsertHall,\n  type Pool,\n  type InsertPool,\n  type Service,\n  type InsertService,\n  type LeaveRequest,\n  type InsertLeaveRequest,\n  type LeavePolicy,\n  type InsertLeavePolicy,\n  type Wastage,\n  type InsertWastage,\n  type MealPlan,\n  type InsertMealPlan,\n  type MealVoucher,\n  type InsertMealVoucher,\n  type Guest,\n  type InsertGuest,\n  type StockRequest,\n  type InsertStockRequest,\n  type SelectHallBooking,\n  type InsertHallBooking,\n  type SelectRestaurantBill,\n  type InsertRestaurantBill,\n  type SelectBillPayment,\n  type InsertBillPayment,\n  type RoomReservation,\n  type InsertRoomReservation,\n  roomReservations,\n  type RoomServiceCharge,\n  type InsertRoomServiceCharge,\n  roomServiceCharges,\n  type Attendance,\n  type InsertAttendance,\n  checkoutOverrideLogs,\n  type CheckoutOverrideLog,\n  type InsertCheckoutOverrideLog,\n  roomStatusLogs,\n  type RoomStatusLog,\n  type InsertRoomStatusLog,\n  securityAlerts,\n  type SecurityAlert,\n  type InsertSecurityAlert\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, not, isNull, desc, asc, sql, gte, lte, gt, lt, ne, inArray } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Session store\n  sessionStore: connectPg.PGStore;\n  \n  // User operations\n  getUser(id: string): Promise<UserWithRole | undefined>;\n  getUserByUsername(username: string): Promise<UserWithRole | undefined>;\n  getUsersByHotel(hotelId: string): Promise<UserWithRole[]>;\n  getUsersByRole(roleId: number): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  updateUserSecure(id: string, user: Partial<InsertUser>, options?: { allowReactivation?: boolean }): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  updateUserOnlineStatus(id: string, isOnline: boolean): Promise<void>;\n  \n  // Hotel operations\n  getHotel(id: string): Promise<Hotel | undefined>;\n  getAllHotels(): Promise<Hotel[]>;\n  createHotel(hotel: InsertHotel): Promise<Hotel>;\n  updateHotel(id: string, hotel: Partial<InsertHotel>): Promise<Hotel>;\n  deleteHotel(id: string): Promise<void>;\n  \n  // Role operations\n  getAllRoles(): Promise<Role[]>;\n  getRoleByName(name: string): Promise<Role | undefined>;\n  getRole(id: number): Promise<Role | undefined>;\n  \n  // Room operations\n  getRoomsByHotel(hotelId: string): Promise<Room[]>;\n  getRoom(id: string): Promise<Room | undefined>;\n  createRoom(room: InsertRoom): Promise<Room>;\n  updateRoom(id: string, room: Partial<InsertRoom>): Promise<Room>;\n  deleteRoom(id: string): Promise<void>;\n  createRoomStatusLog(log: InsertRoomStatusLog): Promise<RoomStatusLog>;\n\n  // Room reservation operations\n  createRoomReservation(reservation: InsertRoomReservation): Promise<RoomReservation>;\n  getRoomReservationsByHotel(hotelId: string): Promise<RoomReservation[]>;\n  getRoomReservation(id: string): Promise<RoomReservation | undefined>;\n  updateRoomReservation(id: string, data: Partial<InsertRoomReservation>): Promise<RoomReservation>;\n  createCheckoutOverrideLog(log: InsertCheckoutOverrideLog): Promise<CheckoutOverrideLog>;\n\n  // Room service charge operations\n  createRoomServiceCharge(charge: InsertRoomServiceCharge): Promise<RoomServiceCharge>;\n  getRoomServiceCharges(reservationId: string): Promise<RoomServiceCharge[]>;\n  getAllRoomServiceChargesByHotel(hotelId: string): Promise<RoomServiceCharge[]>;\n  deleteRoomServiceCharge(id: string): Promise<void>;\n\n  // Room type operations\n  getRoomTypesByHotel(hotelId: string): Promise<RoomType[]>;\n  createRoomType(roomType: InsertRoomType): Promise<RoomType>;\n  updateRoomType(id: number, hotelId: string, roomType: Partial<InsertRoomType>): Promise<RoomType | null>;\n  deleteRoomType(id: number, hotelId: string): Promise<boolean>;\n  \n  // Amenity operations - Halls\n  getHallsByHotel(hotelId: string): Promise<Hall[]>;\n  getHall(id: string): Promise<Hall | undefined>;\n  createHall(hall: InsertHall): Promise<Hall>;\n  updateHall(id: string, hotelId: string, hall: Partial<InsertHall>): Promise<Hall | null>;\n  deleteHall(id: string, hotelId: string): Promise<boolean>;\n  \n  // Amenity operations - Pools\n  getPoolsByHotel(hotelId: string): Promise<Pool[]>;\n  createPool(pool: InsertPool): Promise<Pool>;\n  updatePool(id: string, hotelId: string, pool: Partial<InsertPool>): Promise<Pool | null>;\n  deletePool(id: string, hotelId: string): Promise<boolean>;\n  \n  // Amenity operations - Services\n  getServicesByHotel(hotelId: string): Promise<Service[]>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, hotelId: string, service: Partial<InsertService>): Promise<Service | null>;\n  deleteService(id: string, hotelId: string): Promise<boolean>;\n  \n  // Menu operations\n  getMenuItemsByHotel(hotelId: string): Promise<MenuItem[]>;\n  getMenuCategoriesByHotel(hotelId: string): Promise<MenuCategory[]>;\n  getMenuItem(id: string): Promise<MenuItem | undefined>;\n  createMenuItem(item: InsertMenuItem): Promise<MenuItem>;\n  updateMenuItem(id: string, item: Partial<InsertMenuItem>): Promise<MenuItem>;\n  deleteMenuItem(id: string): Promise<void>;\n  \n  // Menu category operations\n  createMenuCategory(category: { hotelId: string; name: string }): Promise<MenuCategory>;\n  updateMenuCategory(id: string, category: { name: string }): Promise<MenuCategory | undefined>;\n  deleteMenuCategory(id: string): Promise<void>;\n  \n  // Task operations\n  getTasksByUser(userId: string): Promise<Task[]>;\n  getTasksByHotel(hotelId: string): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  \n  // Room Cleaning Queue operations\n  getRoomCleaningQueueByHotel(hotelId: string): Promise<SelectRoomCleaningQueue[]>;\n  createRoomCleaningQueue(queue: InsertRoomCleaningQueue): Promise<SelectRoomCleaningQueue>;\n  updateRoomCleaningQueue(id: string, queue: Partial<InsertRoomCleaningQueue>): Promise<SelectRoomCleaningQueue>;\n  \n  // Transaction operations\n  getTransactionsByHotel(hotelId: string): Promise<Transaction[]>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, transaction: Partial<InsertTransaction>): Promise<Transaction>;\n  voidTransaction(id: string, voidedBy: string, reason: string): Promise<Transaction>;\n  \n  // Maintenance operations\n  getMaintenanceRequestsByHotel(hotelId: string): Promise<MaintenanceRequest[]>;\n  createMaintenanceRequest(request: InsertMaintenanceRequest): Promise<MaintenanceRequest>;\n  updateMaintenanceRequest(id: string, request: Partial<InsertMaintenanceRequest>): Promise<MaintenanceRequest>;\n  getMaintenanceRequest(id: string): Promise<MaintenanceRequest | undefined>;\n  \n  // KOT operations\n  getKotOrdersByHotel(hotelId: string): Promise<KotOrder[]>;\n  getKotItems(kotId: string): Promise<KotItem[]>;\n  getKotItemById(id: string): Promise<KotItem | undefined>;\n  createKotOrder(kot: any): Promise<KotOrder>;\n  updateKotOrder(id: string, kot: any): Promise<KotOrder>;\n  updateKotItem(id: string, item: Partial<KotItem>): Promise<KotItem>;\n  createKotAuditLog(log: { kotItemId: string; action: string; performedBy: string; reason?: string; previousStatus?: string; newStatus?: string }): Promise<any>;\n  \n  // Wastage operations\n  createWastage(wastageData: any): Promise<any>;\n  getWastagesByHotel(hotelId: string): Promise<any[]>;\n  getWastage(id: string): Promise<any | undefined>;\n  approveWastage(id: string, approvedBy: string): Promise<any>;\n  rejectWastage(id: string, rejectedBy: string, rejectionReason: string): Promise<any>;\n  \n  // Inventory operations\n  getInventoryItemsByHotel(hotelId: string): Promise<InventoryItem[]>;\n  getLowStockItems(hotelId: string): Promise<InventoryItem[]>;\n  getInventoryItem(id: string): Promise<InventoryItem | undefined>;\n  createInventoryItem(item: any): Promise<InventoryItem>;\n  updateInventoryItem(id: string, item: any): Promise<InventoryItem>;\n  deleteInventoryItem(id: string): Promise<void>;\n  getInventoryTransactionsByHotel(hotelId: string): Promise<any[]>;\n  createInventoryTransaction(transaction: any): Promise<any>;\n  \n  // Vendor operations\n  getVendorsByHotel(hotelId: string): Promise<Vendor[]>;\n  \n  // Restaurant operations\n  getRestaurantTablesByHotel(hotelId: string): Promise<RestaurantTable[]>;\n  getRestaurantTable(id: string): Promise<RestaurantTable | undefined>;\n  createRestaurantTable(table: any): Promise<RestaurantTable>;\n  updateRestaurantTable(id: string, table: any): Promise<RestaurantTable>;\n  deleteRestaurantTable(id: string): Promise<void>;\n  \n  // Tax operations\n  getHotelTaxes(hotelId: string): Promise<HotelTax[]>;\n  getHotelTax(hotelId: string, taxType: string): Promise<HotelTax | undefined>;\n  updateHotelTax(hotelId: string, taxType: string, isActive: boolean, percent?: number): Promise<HotelTax>;\n  createTaxChangeLog(log: { hotelId: string; taxType: string; previousPercent?: string | number | null; newPercent?: string | number | null; previousActive?: boolean; newActive?: boolean; changedBy: string }): Promise<any>;\n  \n  // Voucher operations\n  getVouchersByHotel(hotelId: string): Promise<Voucher[]>;\n  createVoucher(voucherData: InsertVoucher): Promise<Voucher>;\n  updateVoucher(id: string, voucherData: Partial<InsertVoucher>): Promise<Voucher>;\n  deleteVoucher(id: string): Promise<void>;\n  \n  // Vehicle operations\n  getVehicleLogsByHotel(hotelId: string): Promise<VehicleLog[]>;\n  createVehicleLog(log: any): Promise<VehicleLog>;\n  updateVehicleLog(id: string, log: Partial<VehicleLog>): Promise<VehicleLog>;\n  getVehicleLog(id: string): Promise<VehicleLog | undefined>;\n  \n  // Security alert operations\n  createSecurityAlert(alert: InsertSecurityAlert): Promise<SecurityAlert>;\n  \n  // Room service operations\n  getRoomServiceOrdersByHotel(hotelId: string): Promise<RoomServiceOrder[]>;\n  createRoomServiceOrder(order: any): Promise<RoomServiceOrder>;\n  \n  // Leave request operations\n  getLeaveRequestsByHotel(hotelId: string): Promise<LeaveRequest[]>;\n  getLeaveRequestsByUser(userId: string): Promise<LeaveRequest[]>;\n  getLeaveRequestsForManager(hotelId: string): Promise<LeaveRequest[]>;\n  getPendingLeaveRequestsForManager(hotelId: string): Promise<LeaveRequest[]>;\n  getPendingLeaveRequestsForApprover(approverRole: string, hotelId: string): Promise<LeaveRequest[]>;\n  getLeaveRequestsForApprover(approverRole: string, hotelId: string): Promise<LeaveRequest[]>;\n  createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest>;\n  updateLeaveRequest(id: string, request: Partial<any>): Promise<LeaveRequest>;\n  getLeaveRequest(id: string): Promise<LeaveRequest | undefined>;\n  getOverlappingLeaves(userId: string, startDate: Date, endDate: Date, excludeId?: string): Promise<LeaveRequest[]>;\n  \n  // Leave balance operations\n  getLeaveBalancesByUser(userId: string, year?: number): Promise<any[]>;\n  getLeaveBalance(userId: string, leaveType: string, year: number): Promise<any | undefined>;\n  createLeaveBalance(balance: any): Promise<any>;\n  updateLeaveBalance(id: string, balance: any): Promise<any>;\n  initializeLeaveBalances(userId: string, hotelId: string, year: number): Promise<void>;\n  \n  // Leave policy operations\n  getLeavePoliciesByHotel(hotelId: string): Promise<LeavePolicy[]>;\n  getLeavePolicy(id: string): Promise<LeavePolicy | undefined>;\n  createLeavePolicy(policy: InsertLeavePolicy): Promise<LeavePolicy>;\n  updateLeavePolicy(id: string, policy: Partial<InsertLeavePolicy>): Promise<LeavePolicy>;\n  deleteLeavePolicy(id: string): Promise<void>;\n  \n  // Notification operations\n  getNotificationsByUser(userId: string): Promise<any[]>;\n  getUnreadNotificationsByUser(userId: string): Promise<any[]>;\n  createNotification(notification: any): Promise<any>;\n  markNotificationAsRead(id: string): Promise<any>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  \n  // Meal plan operations\n  getMealPlansByHotel(hotelId: string): Promise<MealPlan[]>;\n  getMealPlan(id: string): Promise<MealPlan | undefined>;\n  createMealPlan(plan: InsertMealPlan): Promise<MealPlan>;\n  updateMealPlan(id: string, plan: Partial<InsertMealPlan>): Promise<MealPlan>;\n  deleteMealPlan(id: string, hotelId: string): Promise<boolean>;\n  \n  // Meal voucher operations\n  createMealVoucher(voucher: InsertMealVoucher): Promise<MealVoucher>;\n  getMealVouchers(hotelId: string, filters?: { status?: string; date?: Date }): Promise<MealVoucher[]>;\n  getMealVouchersByRoom(roomId: string): Promise<MealVoucher[]>;\n  redeemMealVoucher(id: string, redeemedBy: string, notes?: string): Promise<MealVoucher | null>;\n  \n  // Guest operations\n  getGuestsByHotel(hotelId: string): Promise<Guest[]>;\n  getGuest(id: string): Promise<Guest | undefined>;\n  createGuest(guest: InsertGuest): Promise<Guest>;\n  updateGuest(id: string, guest: Partial<InsertGuest>): Promise<Guest>;\n  deleteGuest(id: string): Promise<void>;\n  restoreGuest(id: string, hotelId: string): Promise<Guest>;\n  searchGuests(hotelId: string, searchTerm: string): Promise<Guest[]>;\n  \n  // Stock request operations\n  getStockRequestsByHotel(hotelId: string): Promise<StockRequest[]>;\n  getStockRequestsByUser(userId: string): Promise<StockRequest[]>;\n  getPendingStockRequestsForStorekeeper(hotelId: string): Promise<StockRequest[]>;\n  getStockRequestsByDepartment(hotelId: string, department: string): Promise<StockRequest[]>;\n  getStockRequest(id: string): Promise<StockRequest | undefined>;\n  createStockRequest(request: InsertStockRequest): Promise<StockRequest>;\n  updateStockRequest(id: string, request: Partial<StockRequest>): Promise<StockRequest>;\n  approveStockRequest(id: string, approvedBy: string): Promise<StockRequest>;\n  deliverStockRequest(id: string, deliveredBy: string): Promise<StockRequest>;\n  \n  // Hall booking operations\n  getHallBookingsByHotel(hotelId: string): Promise<SelectHallBooking[]>;\n  getHallBookingsByHall(hallId: string): Promise<SelectHallBooking[]>;\n  getHallBooking(id: string): Promise<SelectHallBooking | undefined>;\n  createHallBooking(booking: InsertHallBooking): Promise<SelectHallBooking>;\n  updateHallBooking(id: string, booking: Partial<InsertHallBooking>): Promise<SelectHallBooking>;\n  confirmHallBooking(id: string, confirmedBy: string): Promise<SelectHallBooking>;\n  cancelHallBooking(id: string, cancelledBy: string, reason: string): Promise<SelectHallBooking>;\n  checkHallAvailability(hallId: string, startTime: Date, endTime: Date, excludeBookingId?: string): Promise<boolean>;\n  createBookingPayment(payment: any): Promise<any>;\n  \n  // Restaurant bill operations\n  getRestaurantBillsByHotel(hotelId: string, filters?: { startDate?: Date; endDate?: Date; status?: string }): Promise<any[]>;\n  getRestaurantBill(id: string): Promise<any | undefined>;\n  createRestaurantBill(bill: any): Promise<any>;\n  updateRestaurantBill(id: string, bill: Partial<any>): Promise<any>;\n  getBillPayments(billId: string): Promise<any[]>;\n  createBillPayment(payment: any): Promise<any>;\n  getBillPayment(paymentId: string): Promise<any | undefined>;\n  voidBillPayment(paymentId: string, voidedBy: string, reason: string): Promise<any>;\n  \n  // Attendance operations\n  createAttendance(userId: string, hotelId: string, clockInTime: Date, location: string | null, ip: string | null, source: string | null): Promise<any>;\n  getActiveAttendance(userId: string): Promise<any | null>;\n  clockOut(attendanceId: string, clockOutTime: Date, location: string | null, ip: string | null, source: string | null): Promise<any>;\n  getAttendanceByUser(userId: string, startDate?: Date, endDate?: Date): Promise<any[]>;\n  getAttendanceByHotel(hotelId: string, date: Date): Promise<any[]>;\n  getAllAttendanceByHotel(hotelId: string, startDate?: Date, endDate?: Date): Promise<any[]>;\n  canClockIn(userId: string): Promise<{ canClockIn: boolean; reason?: string }>;\n  \n  // Audit log operations\n  createAuditLog(log: { hotelId: string; resourceType: string; resourceId: string; action: string; userId: string; details: any }): Promise<any>;\n  \n  // Price change log operations\n  createPriceChangeLog(log: { hotelId: string; itemId: string; itemType: string; itemName: string; previousPrice: string | number; newPrice: string | number; changedBy: string }): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: connectPg.PGStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true\n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<UserWithRole | undefined> {\n    const [result] = await db\n      .select({\n        id: users.id,\n        hotelId: users.hotelId,\n        roleId: users.roleId,\n        username: users.username,\n        fullName: users.fullName,\n        email: users.email,\n        phone: users.phone,\n        address: users.address,\n        passwordHash: users.passwordHash,\n        isActive: users.isActive,\n        isOnline: users.isOnline,\n        lastLogin: users.lastLogin,\n        lastLogout: users.lastLogout,\n        createdBy: users.createdBy,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        deletedAt: users.deletedAt,\n        verification: users.verification,\n        role: roles\n      })\n      .from(users)\n      .leftJoin(roles, eq(users.roleId, roles.id))\n      .where(and(eq(users.id, id), isNull(users.deletedAt)));\n    if (!result) return undefined;\n    return {\n      ...result,\n      role: result.role || undefined\n    };\n  }\n\n  async getUserByUsername(username: string): Promise<UserWithRole | undefined> {\n    const [result] = await db\n      .select({\n        id: users.id,\n        hotelId: users.hotelId,\n        roleId: users.roleId,\n        username: users.username,\n        fullName: users.fullName,\n        email: users.email,\n        phone: users.phone,\n        address: users.address,\n        passwordHash: users.passwordHash,\n        isActive: users.isActive,\n        isOnline: users.isOnline,\n        lastLogin: users.lastLogin,\n        lastLogout: users.lastLogout,\n        createdBy: users.createdBy,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        deletedAt: users.deletedAt,\n        verification: users.verification,\n        role: roles\n      })\n      .from(users)\n      .leftJoin(roles, eq(users.roleId, roles.id))\n      .where(and(eq(users.username, username), isNull(users.deletedAt)));\n    if (!result) return undefined;\n    return {\n      ...result,\n      role: result.role || undefined\n    };\n  }\n\n  async getUsersByHotel(hotelId: string): Promise<UserWithRole[]> {\n    const results = await db\n      .select({\n        id: users.id,\n        hotelId: users.hotelId,\n        roleId: users.roleId,\n        username: users.username,\n        fullName: users.fullName,\n        email: users.email,\n        phone: users.phone,\n        address: users.address,\n        passwordHash: users.passwordHash,\n        isActive: users.isActive,\n        isOnline: users.isOnline,\n        lastLogin: users.lastLogin,\n        lastLogout: users.lastLogout,\n        createdBy: users.createdBy,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        deletedAt: users.deletedAt,\n        verification: users.verification,\n        role: roles\n      })\n      .from(users)\n      .leftJoin(roles, eq(users.roleId, roles.id))\n      .where(and(eq(users.hotelId, hotelId), isNull(users.deletedAt)))\n      .orderBy(asc(users.username));\n      \n    return results.map((result: any) => ({\n      ...result,\n      role: result.role || undefined\n    }));\n  }\n\n  async getUsersByRole(roleId: number): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(and(eq(users.roleId, roleId), isNull(users.deletedAt)))\n      .orderBy(asc(users.username));\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    // CRITICAL SECURITY: Check current user state BEFORE any updates\n    const currentUser = await this.getUser(id);\n    if (!currentUser) {\n      throw new Error('User not found');\n    }\n    \n    // Block setting isOnline=true if user is CURRENTLY deactivated\n    // This check uses the CURRENT state, not the new state being applied\n    if ('isOnline' in userData && userData.isOnline === true && !currentUser.isActive) {\n      throw new Error('Cannot set online status for deactivated user');\n    }\n    \n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserSecure(id: string, userData: Partial<InsertUser>, options?: { allowReactivation?: boolean }): Promise<User> {\n    // This method is for use by API routes that have already checked permissions\n    return this.updateUser(id, userData);\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ deletedAt: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  async updateUserOnlineStatus(id: string, isOnline: boolean): Promise<void> {\n    // CRITICAL SECURITY: Prevent deactivated users from going online\n    if (isOnline) {\n      const user = await this.getUser(id);\n      if (!user || !user.isActive) {\n        throw new Error('Cannot set online status for deactivated user');\n      }\n    }\n    \n    await db\n      .update(users)\n      .set({ \n        isOnline,\n        lastLogin: isOnline ? new Date() : undefined,\n        lastLogout: !isOnline ? new Date() : undefined\n      })\n      .where(eq(users.id, id));\n  }\n\n  // Hotel operations\n  async getHotel(id: string): Promise<Hotel | undefined> {\n    const [hotel] = await db\n      .select()\n      .from(hotels)\n      .where(and(eq(hotels.id, id), isNull(hotels.deletedAt)));\n    return hotel || undefined;\n  }\n\n  async getAllHotels(): Promise<Hotel[]> {\n    return await db\n      .select()\n      .from(hotels)\n      .where(isNull(hotels.deletedAt))\n      .orderBy(asc(hotels.name));\n  }\n\n  async createHotel(hotelData: InsertHotel): Promise<Hotel> {\n    const [hotel] = await db\n      .insert(hotels)\n      .values(hotelData)\n      .returning();\n    return hotel;\n  }\n\n  async updateHotel(id: string, hotelData: Partial<InsertHotel>): Promise<Hotel> {\n    const [hotel] = await db\n      .update(hotels)\n      .set({ ...hotelData, updatedAt: new Date() })\n      .where(eq(hotels.id, id))\n      .returning();\n    return hotel;\n  }\n\n  async deleteHotel(id: string): Promise<void> {\n    await db\n      .update(hotels)\n      .set({ deletedAt: new Date() })\n      .where(eq(hotels.id, id));\n  }\n\n  // Role operations\n  async getAllRoles(): Promise<Role[]> {\n    return await db\n      .select()\n      .from(roles)\n      .orderBy(asc(roles.name));\n  }\n\n  async getRoleByName(name: string): Promise<Role | undefined> {\n    const [role] = await db\n      .select()\n      .from(roles)\n      .where(eq(roles.name, name));\n    return role || undefined;\n  }\n\n  async getRole(id: number): Promise<Role | undefined> {\n    const [role] = await db\n      .select()\n      .from(roles)\n      .where(eq(roles.id, id));\n    return role || undefined;\n  }\n\n  // Room operations\n  async getRoomsByHotel(hotelId: string): Promise<Room[]> {\n    const results = await db\n      .select({\n        id: rooms.id,\n        hotelId: rooms.hotelId,\n        roomNumber: rooms.roomNumber,\n        roomTypeId: rooms.roomTypeId,\n        isOccupied: rooms.isOccupied,\n        occupantDetails: rooms.occupantDetails,\n        currentReservationId: rooms.currentReservationId,\n        status: rooms.status,\n        createdAt: rooms.createdAt,\n        updatedAt: rooms.updatedAt,\n        deletedAt: rooms.deletedAt,\n        roomType: roomTypes\n      })\n      .from(rooms)\n      .leftJoin(roomTypes, eq(rooms.roomTypeId, roomTypes.id))\n      .where(and(eq(rooms.hotelId, hotelId), isNull(rooms.deletedAt)))\n      .orderBy(asc(rooms.roomNumber));\n    return results as any;\n  }\n\n  async getRoom(id: string): Promise<Room | undefined> {\n    const [room] = await db\n      .select()\n      .from(rooms)\n      .where(and(eq(rooms.id, id), isNull(rooms.deletedAt)));\n    return room || undefined;\n  }\n\n  async createRoom(roomData: InsertRoom): Promise<Room> {\n    const [room] = await db\n      .insert(rooms)\n      .values(roomData)\n      .returning();\n    return room;\n  }\n\n  async updateRoom(id: string, roomData: Partial<InsertRoom>): Promise<Room> {\n    const [room] = await db\n      .update(rooms)\n      .set({ ...roomData, updatedAt: new Date() })\n      .where(eq(rooms.id, id))\n      .returning();\n    return room;\n  }\n\n  async deleteRoom(id: string): Promise<void> {\n    await db\n      .update(rooms)\n      .set({ deletedAt: new Date() })\n      .where(eq(rooms.id, id));\n  }\n\n  async createRoomStatusLog(logData: InsertRoomStatusLog): Promise<RoomStatusLog> {\n    const [log] = await db\n      .insert(roomStatusLogs)\n      .values(logData)\n      .returning();\n    return log;\n  }\n\n  // Room reservation operations\n  async createRoomReservation(reservationData: InsertRoomReservation): Promise<RoomReservation> {\n    // CRITICAL: Use database transaction with row locking\n    return await db.transaction(async (tx) => {\n      const { roomId, checkInDate, checkOutDate } = reservationData;\n      \n      // Lock the room for update\n      const [room] = await tx\n        .select()\n        .from(rooms)\n        .where(eq(rooms.id, roomId))\n        .for('update'); // PostgreSQL row lock\n      \n      if (!room) {\n        throw new Error('Room not found');\n      }\n      \n      // Check availability with locked row\n      const overlapping = await tx\n        .select()\n        .from(roomReservations)\n        .where(\n          and(\n            eq(roomReservations.roomId, roomId),\n            or(\n              eq(roomReservations.status, 'confirmed'),\n              eq(roomReservations.status, 'checked_in')\n            ),\n            // Date overlap check\n            or(\n              and(\n                lte(roomReservations.checkInDate, checkInDate),\n                gt(roomReservations.checkOutDate, checkInDate)\n              ),\n              and(\n                lt(roomReservations.checkInDate, checkOutDate),\n                gte(roomReservations.checkOutDate, checkOutDate)\n              ),\n              and(\n                gte(roomReservations.checkInDate, checkInDate),\n                lte(roomReservations.checkOutDate, checkOutDate)\n              )\n            )\n          )\n        )\n        .limit(1);\n      \n      if (overlapping.length > 0) {\n        throw new Error('Room is already booked for selected dates');\n      }\n      \n      // Create reservation\n      const [reservation] = await tx\n        .insert(roomReservations)\n        .values(reservationData)\n        .returning();\n      \n      return reservation;\n    });\n  }\n\n  async getRoomReservationsByHotel(hotelId: string): Promise<RoomReservation[]> {\n    const reservations = await db\n      .select()\n      .from(roomReservations)\n      .where(eq(roomReservations.hotelId, hotelId));\n    return reservations;\n  }\n\n  async getRoomReservation(id: string): Promise<RoomReservation | undefined> {\n    const [reservation] = await db\n      .select()\n      .from(roomReservations)\n      .where(eq(roomReservations.id, id));\n    return reservation;\n  }\n\n  async updateRoomReservation(id: string, data: Partial<InsertRoomReservation>): Promise<RoomReservation> {\n    const [updated] = await db\n      .update(roomReservations)\n      .set({\n        ...data,\n        updatedAt: new Date()\n      })\n      .where(eq(roomReservations.id, id))\n      .returning();\n    \n    if (!updated) {\n      throw new Error('Reservation not found');\n    }\n    \n    return updated;\n  }\n\n  async createCheckoutOverrideLog(log: InsertCheckoutOverrideLog): Promise<CheckoutOverrideLog> {\n    const [createdLog] = await db\n      .insert(checkoutOverrideLogs)\n      .values(log)\n      .returning();\n    return createdLog;\n  }\n\n  // Room service charge operations\n  async createRoomServiceCharge(chargeData: InsertRoomServiceCharge): Promise<RoomServiceCharge> {\n    const [charge] = await db\n      .insert(roomServiceCharges)\n      .values(chargeData)\n      .returning();\n    return charge;\n  }\n\n  async getRoomServiceCharges(reservationId: string): Promise<RoomServiceCharge[]> {\n    const charges = await db\n      .select()\n      .from(roomServiceCharges)\n      .where(eq(roomServiceCharges.reservationId, reservationId))\n      .orderBy(desc(roomServiceCharges.createdAt));\n    return charges;\n  }\n\n  async getAllRoomServiceChargesByHotel(hotelId: string): Promise<RoomServiceCharge[]> {\n    const charges = await db\n      .select()\n      .from(roomServiceCharges)\n      .where(eq(roomServiceCharges.hotelId, hotelId))\n      .orderBy(desc(roomServiceCharges.createdAt));\n    return charges;\n  }\n\n  async deleteRoomServiceCharge(id: string): Promise<void> {\n    await db\n      .delete(roomServiceCharges)\n      .where(eq(roomServiceCharges.id, id));\n  }\n\n  async checkRoomAvailability(\n    hotelId: string,\n    roomId: string,\n    checkInDate: Date,\n    checkOutDate: Date,\n    excludeReservationId?: string\n  ): Promise<boolean> {\n    const overlapping = await db\n      .select()\n      .from(roomReservations)\n      .where(\n        and(\n          eq(roomReservations.roomId, roomId),\n          or(\n            eq(roomReservations.status, 'confirmed'),\n            eq(roomReservations.status, 'checked_in')\n          ),\n          or(\n            and(\n              lte(roomReservations.checkInDate, checkInDate),\n              gt(roomReservations.checkOutDate, checkInDate)\n            ),\n            and(\n              lt(roomReservations.checkInDate, checkOutDate),\n              gte(roomReservations.checkOutDate, checkOutDate)\n            ),\n            and(\n              gte(roomReservations.checkInDate, checkInDate),\n              lte(roomReservations.checkOutDate, checkOutDate)\n            )\n          )\n        )\n      )\n      .limit(1);\n    \n    return overlapping.length === 0;\n  }\n\n  async getReservationsByDateRange(\n    hotelId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<RoomReservation[]> {\n    const { and, or, lte, gte } = await import('drizzle-orm');\n\n    const reservations = await db\n      .select()\n      .from(roomReservations)\n      .where(\n        and(\n          eq(roomReservations.hotelId, hotelId),\n          or(\n            and(\n              lte(roomReservations.checkInDate, endDate),\n              gte(roomReservations.checkOutDate, startDate)\n            )\n          )\n        )\n      );\n    return reservations;\n  }\n\n  async checkInGuest(reservationId: string): Promise<RoomReservation> {\n    const { and } = await import('drizzle-orm');\n    \n    // Get the reservation\n    const [reservation] = await db\n      .select()\n      .from(roomReservations)\n      .where(eq(roomReservations.id, reservationId));\n\n    if (!reservation) {\n      throw new Error('Reservation not found');\n    }\n\n    if (reservation.status === 'checked-in') {\n      throw new Error('Guest is already checked in');\n    }\n\n    if (reservation.status === 'checked-out') {\n      throw new Error('This reservation is already completed');\n    }\n\n    if (reservation.status === 'cancelled') {\n      throw new Error('This reservation has been cancelled');\n    }\n\n    // Update room status\n    await db\n      .update(rooms)\n      .set({\n        status: 'occupied',\n        isOccupied: true,\n        currentReservationId: reservationId,\n        occupantDetails: {\n          name: reservation.guestName,\n          email: reservation.guestEmail,\n          phone: reservation.guestPhone,\n          checkInDate: reservation.checkInDate,\n          checkOutDate: reservation.checkOutDate,\n          numberOfPersons: reservation.numberOfPersons,\n          reservationId: reservationId\n        },\n        updatedAt: new Date()\n      })\n      .where(eq(rooms.id, reservation.roomId));\n\n    // Update guest if guestId exists\n    if (reservation.guestId) {\n      await db\n        .update(guests)\n        .set({\n          currentReservationId: reservationId,\n          updatedAt: new Date()\n        })\n        .where(eq(guests.id, reservation.guestId));\n    }\n\n    // Update reservation status\n    const [updatedReservation] = await db\n      .update(roomReservations)\n      .set({\n        status: 'checked_in',\n        updatedAt: new Date()\n      })\n      .where(eq(roomReservations.id, reservationId))\n      .returning();\n\n    return updatedReservation;\n  }\n\n  async checkOutGuest(reservationId: string): Promise<RoomReservation> {\n    // Get the reservation\n    const [reservation] = await db\n      .select()\n      .from(roomReservations)\n      .where(eq(roomReservations.id, reservationId));\n\n    if (!reservation) {\n      throw new Error('Reservation not found');\n    }\n\n    if (reservation.status === 'checked_out') {\n      throw new Error('Guest is already checked out');\n    }\n\n    if (reservation.status !== 'checked_in') {\n      throw new Error('Guest must be checked in before checkout');\n    }\n\n    // Get room details for cleaning queue\n    const [room] = await db\n      .select()\n      .from(rooms)\n      .where(eq(rooms.id, reservation.roomId));\n\n    // Update room status\n    await db\n      .update(rooms)\n      .set({\n        status: 'available',\n        isOccupied: false,\n        currentReservationId: null,\n        occupantDetails: null,\n        updatedAt: new Date()\n      })\n      .where(eq(rooms.id, reservation.roomId));\n\n    // Update guest if guestId exists\n    if (reservation.guestId) {\n      await db\n        .update(guests)\n        .set({\n          currentReservationId: null,\n          updatedAt: new Date()\n        })\n        .where(eq(guests.id, reservation.guestId));\n    }\n\n    // Add room to cleaning queue\n    await db\n      .insert(roomCleaningQueue)\n      .values({\n        hotelId: reservation.hotelId,\n        roomId: reservation.roomId,\n        roomNumber: room?.roomNumber || 'Unknown',\n        guestName: reservation.guestName,\n        guestId: reservation.guestId,\n        checkoutAt: new Date(),\n        status: 'pending'\n      });\n\n    // Update reservation status\n    const [updatedReservation] = await db\n      .update(roomReservations)\n      .set({\n        status: 'checked-out',\n        updatedAt: new Date()\n      })\n      .where(eq(roomReservations.id, reservationId))\n      .returning();\n\n    return updatedReservation;\n  }\n\n  // Menu operations\n  async getMenuItemsByHotel(hotelId: string): Promise<MenuItem[]> {\n    const items = await db\n      .select({\n        id: menuItems.id,\n        hotelId: menuItems.hotelId,\n        categoryId: menuItems.categoryId,\n        name: menuItems.name,\n        price: menuItems.price,\n        description: menuItems.description,\n        active: menuItems.active,\n        recipe: menuItems.recipe,\n        createdAt: menuItems.createdAt,\n        category: {\n          id: menuCategories.id,\n          name: menuCategories.name,\n          hotelId: menuCategories.hotelId\n        }\n      })\n      .from(menuItems)\n      .leftJoin(menuCategories, eq(menuItems.categoryId, menuCategories.id))\n      .where(eq(menuItems.hotelId, hotelId))\n      .orderBy(asc(menuItems.name));\n    return items as any;\n  }\n\n  async getMenuCategoriesByHotel(hotelId: string): Promise<MenuCategory[]> {\n    return await db\n      .select()\n      .from(menuCategories)\n      .where(eq(menuCategories.hotelId, hotelId))\n      .orderBy(asc(menuCategories.name));\n  }\n\n  async createMenuItem(itemData: InsertMenuItem): Promise<MenuItem> {\n    const [item] = await db\n      .insert(menuItems)\n      .values(itemData)\n      .returning();\n    return item;\n  }\n\n  async updateMenuItem(id: string, itemData: Partial<InsertMenuItem>): Promise<MenuItem> {\n    const [item] = await db\n      .update(menuItems)\n      .set(itemData)\n      .where(eq(menuItems.id, id))\n      .returning();\n    return item;\n  }\n\n  async deleteMenuItem(id: string): Promise<void> {\n    await db\n      .update(menuItems)\n      .set({ active: false })\n      .where(eq(menuItems.id, id));\n  }\n\n  // Menu category operations\n  async createMenuCategory(category: { hotelId: string; name: string }): Promise<MenuCategory> {\n    const [newCategory] = await db\n      .insert(menuCategories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateMenuCategory(id: string, category: { name: string }): Promise<MenuCategory | undefined> {\n    const [updated] = await db\n      .update(menuCategories)\n      .set(category)\n      .where(eq(menuCategories.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteMenuCategory(id: string): Promise<void> {\n    await db\n      .delete(menuCategories)\n      .where(eq(menuCategories.id, id));\n  }\n\n  // Task operations\n  async getTasksByUser(userId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.assignedTo, userId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByHotel(hotelId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.hotelId, hotelId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async createTask(taskData: InsertTask): Promise<Task> {\n    const [task] = await db\n      .insert(tasks)\n      .values(taskData)\n      .returning();\n    return task;\n  }\n\n  async updateTask(id: string, taskData: Partial<InsertTask>): Promise<Task> {\n    const [task] = await db\n      .update(tasks)\n      .set({ ...taskData, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db\n      .delete(tasks)\n      .where(eq(tasks.id, id));\n  }\n\n  // Room Cleaning Queue operations\n  async getRoomCleaningQueueByHotel(hotelId: string): Promise<SelectRoomCleaningQueue[]> {\n    return await db\n      .select()\n      .from(roomCleaningQueue)\n      .where(eq(roomCleaningQueue.hotelId, hotelId))\n      .orderBy(desc(roomCleaningQueue.checkoutAt));\n  }\n\n  async createRoomCleaningQueue(queueData: InsertRoomCleaningQueue): Promise<SelectRoomCleaningQueue> {\n    const [queue] = await db\n      .insert(roomCleaningQueue)\n      .values(queueData)\n      .returning();\n    return queue;\n  }\n\n  async updateRoomCleaningQueue(id: string, queueData: Partial<InsertRoomCleaningQueue>): Promise<SelectRoomCleaningQueue> {\n    const [queue] = await db\n      .update(roomCleaningQueue)\n      .set({ ...queueData, updatedAt: new Date() })\n      .where(eq(roomCleaningQueue.id, id))\n      .returning();\n    return queue;\n  }\n\n  // Transaction operations\n  async getTransactionsByHotel(hotelId: string): Promise<any[]> {\n    const results = await db\n      .select({\n        id: transactions.id,\n        hotelId: transactions.hotelId,\n        txnType: transactions.txnType,\n        amount: transactions.amount,\n        currency: transactions.currency,\n        paymentMethod: transactions.paymentMethod,\n        vendorId: transactions.vendorId,\n        purpose: transactions.purpose,\n        reference: transactions.reference,\n        details: transactions.details,\n        createdBy: transactions.createdBy,\n        createdAt: transactions.createdAt,\n        deletedAt: transactions.deletedAt,\n        isVoided: transactions.isVoided,\n        voidedBy: transactions.voidedBy,\n        voidedAt: transactions.voidedAt,\n        voidReason: transactions.voidReason,\n        creator: {\n          id: users.id,\n          username: users.username,\n          role: roles.name\n        }\n      })\n      .from(transactions)\n      .leftJoin(users, eq(transactions.createdBy, users.id))\n      .leftJoin(roles, eq(users.roleId, roles.id))\n      .where(and(eq(transactions.hotelId, hotelId), isNull(transactions.deletedAt)))\n      .orderBy(desc(transactions.createdAt));\n    return results;\n  }\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(transactionData)\n      .returning();\n    return transaction;\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.id, id));\n    return transaction;\n  }\n\n  async updateTransaction(id: string, transactionData: Partial<InsertTransaction>): Promise<Transaction> {\n    const [transaction] = await db\n      .update(transactions)\n      .set(transactionData)\n      .where(eq(transactions.id, id))\n      .returning();\n    return transaction;\n  }\n\n  async voidTransaction(id: string, voidedBy: string, reason: string): Promise<Transaction> {\n    const [voided] = await db\n      .update(transactions)\n      .set({\n        isVoided: true,\n        voidedBy,\n        voidedAt: new Date(),\n        voidReason: reason\n      })\n      .where(eq(transactions.id, id))\n      .returning();\n    \n    return voided;\n  }\n\n  // Maintenance operations\n  async getMaintenanceRequestsByHotel(hotelId: string): Promise<any[]> {\n    const results = await db\n      .select({\n        id: maintenanceRequests.id,\n        hotelId: maintenanceRequests.hotelId,\n        title: maintenanceRequests.title,\n        location: maintenanceRequests.location,\n        description: maintenanceRequests.description,\n        photo: maintenanceRequests.photo,\n        priority: maintenanceRequests.priority,\n        status: maintenanceRequests.status,\n        reportedBy: maintenanceRequests.reportedBy,\n        assignedTo: maintenanceRequests.assignedTo,\n        resolvedAt: maintenanceRequests.resolvedAt,\n        createdAt: maintenanceRequests.createdAt,\n        updatedAt: maintenanceRequests.updatedAt,\n        reportedById: users.id,\n        reportedByUsername: users.username,\n        reportedByRoleId: roles.id,\n        reportedByRoleName: roles.name\n      })\n      .from(maintenanceRequests)\n      .leftJoin(users, eq(maintenanceRequests.reportedBy, users.id))\n      .leftJoin(roles, eq(users.roleId, roles.id))\n      .where(eq(maintenanceRequests.hotelId, hotelId))\n      .orderBy(desc(maintenanceRequests.createdAt));\n    \n    // Fetch all unique assignee IDs\n    const assigneeIds = Array.from(new Set(results.map(r => r.assignedTo).filter(Boolean)));\n    \n    // Fetch assignee user data\n    const assignees = assigneeIds.length > 0 ? await db\n      .select({\n        id: users.id,\n        username: users.username,\n        roleId: roles.id,\n        roleName: roles.name\n      })\n      .from(users)\n      .leftJoin(roles, eq(users.roleId, roles.id))\n      .where(inArray(users.id, assigneeIds as string[]))\n      : [];\n    \n    // Create a map for quick lookup\n    const assigneeMap = new Map(\n      assignees.map(a => [a.id, {\n        id: a.id,\n        username: a.username,\n        role: a.roleId ? { id: a.roleId, name: a.roleName } : null\n      }])\n    );\n    \n    // Transform the flat results into the expected structure\n    return results.map(result => ({\n      id: result.id,\n      hotelId: result.hotelId,\n      title: result.title,\n      location: result.location,\n      description: result.description,\n      photo: result.photo,\n      priority: result.priority,\n      status: result.status,\n      resolvedAt: result.resolvedAt,\n      createdAt: result.createdAt,\n      updatedAt: result.updatedAt,\n      reportedBy: result.reportedById ? {\n        id: result.reportedById,\n        username: result.reportedByUsername,\n        role: result.reportedByRoleId ? {\n          id: result.reportedByRoleId,\n          name: result.reportedByRoleName\n        } : null\n      } : null,\n      assignedTo: result.assignedTo ? assigneeMap.get(result.assignedTo) || null : null\n    }));\n  }\n\n  async createMaintenanceRequest(requestData: InsertMaintenanceRequest): Promise<MaintenanceRequest> {\n    const [request] = await db\n      .insert(maintenanceRequests)\n      .values(requestData)\n      .returning();\n    return request;\n  }\n\n  async updateMaintenanceRequest(id: string, requestData: Partial<InsertMaintenanceRequest>): Promise<MaintenanceRequest> {\n    const [request] = await db\n      .update(maintenanceRequests)\n      .set({ ...requestData, updatedAt: new Date() })\n      .where(eq(maintenanceRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async getMaintenanceRequest(id: string): Promise<MaintenanceRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(maintenanceRequests)\n      .where(eq(maintenanceRequests.id, id));\n    return request;\n  }\n\n  // KOT operations\n  async getKotOrdersByHotel(hotelId: string): Promise<any[]> {\n    const orders = await db\n      .select()\n      .from(kotOrders)\n      .where(eq(kotOrders.hotelId, hotelId))\n      .orderBy(desc(kotOrders.createdAt));\n    \n    const ordersWithItems = await Promise.all(\n      orders.map(async (order) => {\n        const itemResults = await db\n          .select({\n            itemId: kotItems.id,\n            itemKotId: kotItems.kotId,\n            itemMenuItemId: kotItems.menuItemId,\n            itemQty: kotItems.qty,\n            itemNotes: kotItems.description, // Changed from .notes to .description to match schema\n            itemStatus: kotItems.status,\n            itemDeclineReason: kotItems.declineReason,\n            menuItemId: menuItems.id,\n            menuItemName: menuItems.name,\n            menuItemPrice: menuItems.price,\n            menuItemCategory: menuItems.categoryId // Reading categoryId from DB but aliasing as category for API contract\n          })\n          .from(kotItems)\n          .leftJoin(menuItems, eq(kotItems.menuItemId, menuItems.id))\n          .where(eq(kotItems.kotId, order.id));\n        \n        const items = itemResults.map(row => ({\n          id: row.itemId,\n          kotId: row.itemKotId,\n          menuItemId: row.itemMenuItemId,\n          qty: row.itemQty,\n          notes: row.itemNotes,\n          status: row.itemStatus,\n          declineReason: row.itemDeclineReason,\n          menuItem: row.menuItemId ? {\n            id: row.menuItemId,\n            name: row.menuItemName,\n            price: row.menuItemPrice,\n            category: row.menuItemCategory // Keeping original field name for API contract\n          } : null\n        }));\n        \n        return {\n          ...order,\n          items\n        };\n      })\n    );\n    \n    return ordersWithItems;\n  }\n\n  async getKotItems(kotId: string): Promise<KotItem[]> {\n    return await db\n      .select()\n      .from(kotItems)\n      .where(eq(kotItems.kotId, kotId))\n      .orderBy(asc(kotItems.createdAt));\n  }\n\n  async getKotItemById(id: string): Promise<KotItem | undefined> {\n    const [item] = await db\n      .select()\n      .from(kotItems)\n      .where(eq(kotItems.id, id))\n      .limit(1);\n    return item;\n  }\n\n  async getKotOrderById(id: string): Promise<KotOrder | undefined> {\n    const [order] = await db\n      .select()\n      .from(kotOrders)\n      .where(eq(kotOrders.id, id))\n      .limit(1);\n    return order;\n  }\n\n  async createKotOrder(kotData: any): Promise<KotOrder> {\n    const [kot] = await db\n      .insert(kotOrders)\n      .values(kotData)\n      .returning();\n    return kot;\n  }\n\n  async updateKotOrder(id: string, kotData: any): Promise<KotOrder> {\n    const [kot] = await db\n      .update(kotOrders)\n      .set({ ...kotData, updatedAt: new Date() })\n      .where(eq(kotOrders.id, id))\n      .returning();\n    return kot;\n  }\n\n  async updateKotItem(id: string, itemData: Partial<KotItem>): Promise<KotItem> {\n    const [item] = await db\n      .update(kotItems)\n      .set(itemData)\n      .where(eq(kotItems.id, id))\n      .returning();\n    return item;\n  }\n\n  async createKotAuditLog(log: { kotItemId: string; action: string; performedBy: string; reason?: string; previousStatus?: string; newStatus?: string }): Promise<any> {\n    const [auditLog] = await db\n      .insert(kotAuditLogs)\n      .values({\n        kotItemId: log.kotItemId,\n        action: log.action,\n        performedBy: log.performedBy,\n        reason: log.reason,\n        previousStatus: log.previousStatus,\n        newStatus: log.newStatus\n      })\n      .returning();\n    return auditLog;\n  }\n\n  async updateKotOrderStatus(kotOrderId: string): Promise<void> {\n    try {\n      // Fetch all items for this order\n      const items = await this.getKotItems(kotOrderId);\n      \n      if (items.length === 0) {\n        // No items, keep order as 'open'\n        return;\n      }\n\n      // Count statuses\n      const statusCounts = items.reduce((acc, item) => {\n        const status = item.status || 'pending';\n        acc[status] = (acc[status] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n\n      let newOrderStatus = 'open';\n\n      // Determine order status based on item statuses\n      if (statusCounts['declined'] && statusCounts['declined'] > 0) {\n        // If any item is declined, keep order as 'open'\n        newOrderStatus = 'open';\n      } else if (items.every(item => item.status === 'served')) {\n        // All items served -> order completed\n        newOrderStatus = 'completed';\n      } else if (items.every(item => item.status === 'ready')) {\n        // All items ready -> order ready\n        newOrderStatus = 'ready';\n      } else if (items.every(item => item.status === 'approved' || item.status === 'ready' || item.status === 'served')) {\n        // All items are at least approved (could be mix of approved/ready/served) -> in_progress\n        newOrderStatus = 'in_progress';\n      } else {\n        // Mixed statuses including pending -> keep as open\n        newOrderStatus = 'open';\n      }\n\n      // Update the order status\n      await db\n        .update(kotOrders)\n        .set({ status: newOrderStatus, updatedAt: new Date() })\n        .where(eq(kotOrders.id, kotOrderId));\n\n      console.log(`KOT Order ${kotOrderId} status updated to: ${newOrderStatus}`);\n    } catch (error) {\n      console.error(`Failed to update KOT order status for ${kotOrderId}:`, error);\n      // Don't throw - this is a background sync operation\n    }\n  }\n\n  async deductInventoryForKotItem(kotItemId: string): Promise<void> {\n    // Get the KOT item\n    const kotItem = await this.getKotItemById(kotItemId);\n    if (!kotItem || !kotItem.menuItemId) {\n      return;\n    }\n\n    // Check if inventory was already deducted\n    if (kotItem.inventoryUsage) {\n      console.log('Inventory already deducted for this KOT item');\n      return;\n    }\n\n    // Get the menu item with its recipe\n    const menuItem = await db.query.menuItems.findFirst({\n      where: (menuItemsTable, { eq }) => eq(menuItemsTable.id, kotItem.menuItemId!)\n    });\n\n    const recipe = menuItem?.recipe as any;\n    if (!recipe?.ingredients || !Array.isArray(recipe.ingredients)) {\n      return;\n    }\n\n    const ingredients = recipe.ingredients;\n    const usageRecords = [];\n\n    // Deduct inventory for each ingredient\n    for (const ingredient of ingredients) {\n      if (ingredient.inventoryItemId && ingredient.quantity) {\n        const inventoryItem = await db.query.inventoryItems.findFirst({\n          where: (inventoryItemsTable, { eq }) => eq(inventoryItemsTable.id, ingredient.inventoryItemId)\n        });\n\n        if (inventoryItem) {\n          let quantityInBaseUnit = ingredient.quantity;\n          \n          if (ingredient.unit && ingredient.unit !== inventoryItem.baseUnit) {\n            const { convertToBase, MeasurementCategory } = await import('@shared/measurements');\n            const category = (inventoryItem.measurementCategory || 'weight') as any;\n            const conversionProfile = inventoryItem.conversionProfile as any;\n            \n            try {\n              quantityInBaseUnit = convertToBase(\n                ingredient.quantity,\n                ingredient.unit as any,\n                (inventoryItem.baseUnit || 'kg') as any,\n                category,\n                conversionProfile\n              );\n            } catch (error) {\n              console.error(`Unit conversion error for ${inventoryItem.name}:`, error);\n            }\n          }\n          \n          const totalQuantityToDeduct = quantityInBaseUnit * (kotItem.qty || 1);\n          const currentStock = Number(inventoryItem.baseStockQty || inventoryItem.stockQty || 0);\n          const newQuantity = currentStock - totalQuantityToDeduct;\n          \n          await db\n            .update(inventoryItems)\n            .set({ \n              baseStockQty: String(newQuantity),\n              stockQty: String(newQuantity),\n              updatedAt: new Date()\n            })\n            .where(eq(inventoryItems.id, ingredient.inventoryItemId));\n\n          usageRecords.push({\n            inventoryItemId: ingredient.inventoryItemId,\n            inventoryItemName: inventoryItem.name,\n            quantityUsed: totalQuantityToDeduct,\n            originalQuantity: ingredient.quantity,\n            originalUnit: ingredient.unit || inventoryItem.baseUnit,\n            unit: inventoryItem.baseUnit\n          });\n        }\n      }\n    }\n\n    // Update the KOT item with inventory usage record\n    if (usageRecords.length > 0) {\n      await db\n        .update(kotItems)\n        .set({ \n          inventoryUsage: { usedIngredients: usageRecords }\n        })\n        .where(eq(kotItems.id, kotItemId));\n    }\n  }\n\n  // Wastage operations\n  async createWastage(wastageData: any): Promise<any> {\n    const inventoryItem = await this.getInventoryItem(wastageData.itemId);\n    if (!inventoryItem) {\n      throw new Error('Inventory item not found');\n    }\n\n    const wastageQty = Number(wastageData.qty);\n    \n    // CRITICAL SECURITY: Guard against invalid quantities\n    if (!Number.isFinite(wastageQty) || wastageQty <= 0) {\n      throw new Error('Quantity must be a positive number');\n    }\n    const wastageUnit = wastageData.unit || inventoryItem.baseUnit;\n    const baseUnit = (inventoryItem.baseUnit || inventoryItem.unit) as any;\n    const category = (inventoryItem.measurementCategory || 'weight') as any;\n    const conversionProfile = inventoryItem.conversionProfile as any;\n\n    let wastageQtyInBaseUnits = wastageQty;\n    if (wastageUnit !== baseUnit) {\n      const { convertToBase } = await import('@shared/measurements');\n      try {\n        wastageQtyInBaseUnits = convertToBase(\n          wastageQty,\n          wastageUnit as any,\n          baseUnit,\n          category,\n          conversionProfile\n        );\n      } catch (error) {\n        console.error(`Unit conversion error for ${inventoryItem.name}:`, error);\n        throw new Error(`Cannot convert from ${wastageUnit} to ${baseUnit}`);\n      }\n    }\n\n    const currentStock = Number(inventoryItem.baseStockQty || inventoryItem.stockQty || 0);\n    \n    if (wastageQtyInBaseUnits > currentStock) {\n      throw new Error(`Insufficient stock. Current stock: ${currentStock} ${baseUnit}, requested wastage: ${wastageQty} ${wastageUnit} (${wastageQtyInBaseUnits.toFixed(3)} ${baseUnit})`);\n    }\n    \n    // Only deduct stock if status is 'approved'\n    if (wastageData.status === 'approved') {\n      const newQuantity = currentStock - wastageQtyInBaseUnits;\n\n      await db\n        .update(inventoryItems)\n        .set({ \n          baseStockQty: String(newQuantity),\n          stockQty: String(newQuantity),\n          updatedAt: new Date()\n        })\n        .where(eq(inventoryItems.id, wastageData.itemId));\n\n      await db\n        .insert(inventoryConsumptions)\n        .values({\n          hotelId: wastageData.hotelId,\n          itemId: wastageData.itemId,\n          qty: String(wastageQtyInBaseUnits),\n          unit: baseUnit,\n          reason: `Wastage: ${wastageData.reason}`,\n          referenceEntity: 'wastage',\n          createdBy: wastageData.recordedBy\n        });\n\n      await db\n        .insert(inventoryTransactions)\n        .values({\n          hotelId: wastageData.hotelId,\n          itemId: wastageData.itemId,\n          transactionType: 'wastage',\n          qtyBase: String(wastageQtyInBaseUnits),\n          notes: wastageData.reason,\n          recordedBy: wastageData.recordedBy\n        });\n    }\n\n    const [wastage] = await db\n      .insert(wastages)\n      .values({\n        ...wastageData,\n        unit: wastageUnit\n      })\n      .returning();\n\n    return wastage;\n  }\n\n  async getWastagesByHotel(hotelId: string): Promise<any[]> {\n    return db\n      .select()\n      .from(wastages)\n      .where(eq(wastages.hotelId, hotelId))\n      .orderBy(desc(wastages.createdAt));\n  }\n\n  async getWastage(id: string): Promise<any | undefined> {\n    const [wastage] = await db\n      .select()\n      .from(wastages)\n      .where(eq(wastages.id, id));\n    return wastage;\n  }\n\n  async approveWastage(id: string, approvedBy: string): Promise<any> {\n    const wastage = await this.getWastage(id);\n    if (!wastage) {\n      throw new Error('Wastage not found');\n    }\n\n    const inventoryItem = await this.getInventoryItem(wastage.itemId);\n    if (!inventoryItem) {\n      throw new Error('Inventory item not found');\n    }\n\n    const wastageQty = Number(wastage.qty);\n    \n    // CRITICAL SECURITY: Guard against invalid quantities\n    if (!Number.isFinite(wastageQty) || wastageQty <= 0) {\n      throw new Error('Quantity must be a positive number');\n    }\n    const wastageUnit = wastage.unit || inventoryItem.baseUnit;\n    const baseUnit = (inventoryItem.baseUnit || inventoryItem.unit) as any;\n    const category = (inventoryItem.measurementCategory || 'weight') as any;\n    const conversionProfile = inventoryItem.conversionProfile as any;\n\n    let wastageQtyInBaseUnits = wastageQty;\n    if (wastageUnit !== baseUnit) {\n      const { convertToBase } = await import('@shared/measurements');\n      try {\n        wastageQtyInBaseUnits = convertToBase(\n          wastageQty,\n          wastageUnit as any,\n          baseUnit,\n          category,\n          conversionProfile\n        );\n      } catch (error) {\n        console.error(`Unit conversion error:`, error);\n        throw new Error(`Cannot convert from ${wastageUnit} to ${baseUnit}`);\n      }\n    }\n\n    // Note: Wastage is recorded but NOT deducted from inventory\n    // This keeps wastage as a record only for tracking purposes\n    \n    // Record transaction\n    await db\n      .insert(inventoryTransactions)\n      .values({\n        hotelId: wastage.hotelId,\n        itemId: wastage.itemId,\n        transactionType: 'wastage',\n        qtyBase: String(wastageQtyInBaseUnits),\n        notes: wastage.reason,\n        recordedBy: wastage.recordedBy\n      });\n\n    // Update wastage status\n    const [approvedWastage] = await db\n      .update(wastages)\n      .set({\n        status: 'approved',\n        approvedBy,\n        approvedAt: new Date()\n      })\n      .where(eq(wastages.id, id))\n      .returning();\n\n    return approvedWastage;\n  }\n\n  async rejectWastage(id: string, rejectedBy: string, rejectionReason: string): Promise<any> {\n    const wastage = await this.getWastage(id);\n    if (!wastage) {\n      throw new Error('Wastage not found');\n    }\n\n    // No need to return inventory - it was never deducted for pending approvals\n    const [rejectedWastage] = await db\n      .update(wastages)\n      .set({\n        status: 'rejected',\n        approvedBy: rejectedBy,\n        approvedAt: new Date(),\n        rejectionReason\n      })\n      .where(eq(wastages.id, id))\n      .returning();\n\n    return rejectedWastage;\n  }\n\n  // Inventory operations\n  async getInventoryItemsByHotel(hotelId: string): Promise<InventoryItem[]> {\n    return await db\n      .select()\n      .from(inventoryItems)\n      .where(and(eq(inventoryItems.hotelId, hotelId), isNull(inventoryItems.deletedAt)))\n      .orderBy(asc(inventoryItems.name));\n  }\n\n  async getLowStockItems(hotelId: string): Promise<InventoryItem[]> {\n    return await db\n      .select()\n      .from(inventoryItems)\n      .where(and(\n        eq(inventoryItems.hotelId, hotelId),\n        isNull(inventoryItems.deletedAt),\n        sql`CAST(${inventoryItems.baseStockQty} AS DECIMAL) < CAST(${inventoryItems.reorderLevel} AS DECIMAL)`\n      ))\n      .orderBy(asc(inventoryItems.name));\n  }\n\n  // Vendor operations\n  async getVendorsByHotel(hotelId: string): Promise<Vendor[]> {\n    return await db\n      .select()\n      .from(vendors)\n      .where(eq(vendors.hotelId, hotelId))\n      .orderBy(asc(vendors.name));\n  }\n\n  async createVendor(vendorData: InsertVendor): Promise<Vendor> {\n    const [vendor] = await db.insert(vendors).values(vendorData).returning();\n    return vendor;\n  }\n\n  async updateVendor(id: string, vendorData: Partial<InsertVendor>): Promise<Vendor> {\n    const [vendor] = await db\n      .update(vendors)\n      .set(vendorData)\n      .where(eq(vendors.id, id))\n      .returning();\n    return vendor;\n  }\n\n  async deleteVendor(id: string): Promise<void> {\n    await db.delete(vendors).where(eq(vendors.id, id));\n  }\n\n  // Restaurant operations\n  async getRestaurantTablesByHotel(hotelId: string): Promise<RestaurantTable[]> {\n    return await db\n      .select()\n      .from(restaurantTables)\n      .where(eq(restaurantTables.hotelId, hotelId))\n      .orderBy(asc(restaurantTables.name));\n  }\n\n  // Tax operations\n  async getHotelTaxes(hotelId: string): Promise<HotelTax[]> {\n    return await db\n      .select()\n      .from(hotelTaxes)\n      .where(eq(hotelTaxes.hotelId, hotelId))\n      .orderBy(asc(hotelTaxes.taxType));\n  }\n\n  async getHotelTax(hotelId: string, taxType: string): Promise<HotelTax | undefined> {\n    const [tax] = await db\n      .select()\n      .from(hotelTaxes)\n      .where(and(\n        eq(hotelTaxes.hotelId, hotelId),\n        eq(hotelTaxes.taxType, taxType)\n      ));\n    return tax || undefined;\n  }\n\n  async updateHotelTax(hotelId: string, taxType: string, isActive: boolean, percent?: number): Promise<HotelTax> {\n    const [tax] = await db\n      .insert(hotelTaxes)\n      .values({\n        hotelId,\n        taxType,\n        isActive,\n        percent: percent !== undefined ? percent.toString() : null\n      })\n      .onConflictDoUpdate({\n        target: [hotelTaxes.hotelId, hotelTaxes.taxType],\n        set: {\n          isActive,\n          percent: percent !== undefined ? percent.toString() : null\n        }\n      })\n      .returning();\n    return tax;\n  }\n\n  async createTaxChangeLog(log: { hotelId: string; taxType: string; previousPercent?: string | number | null; newPercent?: string | number | null; previousActive?: boolean; newActive?: boolean; changedBy: string }): Promise<any> {\n    const [taxChangeLog] = await db\n      .insert(taxChangeLogs)\n      .values({\n        hotelId: log.hotelId,\n        taxType: log.taxType,\n        previousPercent: log.previousPercent !== undefined && log.previousPercent !== null ? String(log.previousPercent) : null,\n        newPercent: log.newPercent !== undefined && log.newPercent !== null ? String(log.newPercent) : null,\n        previousActive: log.previousActive,\n        newActive: log.newActive,\n        changedBy: log.changedBy\n      })\n      .returning();\n    \n    return taxChangeLog;\n  }\n\n  // Voucher operations\n  async getVouchersByHotel(hotelId: string): Promise<Voucher[]> {\n    return await db\n      .select()\n      .from(vouchers)\n      .where(eq(vouchers.hotelId, hotelId))\n      .orderBy(desc(vouchers.createdAt));\n  }\n\n  async createVoucher(voucherData: InsertVoucher): Promise<Voucher> {\n    const [voucher] = await db\n      .insert(vouchers)\n      .values(voucherData)\n      .returning();\n    return voucher;\n  }\n\n  async updateVoucher(id: string, voucherData: Partial<InsertVoucher>): Promise<Voucher> {\n    const [voucher] = await db\n      .update(vouchers)\n      .set(voucherData)\n      .where(eq(vouchers.id, id))\n      .returning();\n    return voucher;\n  }\n\n  async deleteVoucher(id: string): Promise<void> {\n    await db\n      .delete(vouchers)\n      .where(eq(vouchers.id, id));\n  }\n\n  // Vehicle operations\n  async getVehicleLogsByHotel(hotelId: string): Promise<VehicleLog[]> {\n    return await db\n      .select()\n      .from(vehicleLogs)\n      .where(eq(vehicleLogs.hotelId, hotelId))\n      .orderBy(desc(vehicleLogs.checkIn));\n  }\n\n  async createVehicleLog(log: InsertVehicleLog): Promise<VehicleLog> {\n    const [result] = await db.insert(vehicleLogs).values(log).returning();\n    return result;\n  }\n\n  async updateVehicleLog(id: string, log: Partial<VehicleLog>): Promise<VehicleLog> {\n    const [result] = await db\n      .update(vehicleLogs)\n      .set(log)\n      .where(eq(vehicleLogs.id, id))\n      .returning();\n    return result;\n  }\n\n  async getVehicleLog(id: string): Promise<VehicleLog | undefined> {\n    const [result] = await db\n      .select()\n      .from(vehicleLogs)\n      .where(eq(vehicleLogs.id, id));\n    return result;\n  }\n\n  // Security alert operations\n  async createSecurityAlert(alertData: InsertSecurityAlert): Promise<SecurityAlert> {\n    const [alert] = await db\n      .insert(securityAlerts)\n      .values(alertData)\n      .returning();\n    return alert;\n  }\n\n  // Room service operations\n  async getRoomServiceOrdersByHotel(hotelId: string): Promise<RoomServiceOrder[]> {\n    return await db\n      .select()\n      .from(roomServiceOrders)\n      .where(eq(roomServiceOrders.hotelId, hotelId))\n      .orderBy(desc(roomServiceOrders.createdAt));\n  }\n\n  async createRoomServiceOrder(orderData: any): Promise<RoomServiceOrder> {\n    const [order] = await db\n      .insert(roomServiceOrders)\n      .values(orderData)\n      .returning();\n    return order;\n  }\n\n  // Inventory consumption operations\n  async getInventoryConsumptionsByHotel(hotelId: string): Promise<InventoryConsumption[]> {\n    return await db\n      .select()\n      .from(inventoryConsumptions)\n      .where(eq(inventoryConsumptions.hotelId, hotelId))\n      .orderBy(desc(inventoryConsumptions.createdAt));\n  }\n\n  // Room type operations\n  async getRoomTypesByHotel(hotelId: string): Promise<RoomType[]> {\n    return await db\n      .select()\n      .from(roomTypes)\n      .where(eq(roomTypes.hotelId, hotelId))\n      .orderBy(asc(roomTypes.name));\n  }\n\n  async createRoomType(roomType: InsertRoomType): Promise<RoomType> {\n    const [created] = await db.insert(roomTypes).values(roomType).returning();\n    return created;\n  }\n\n  async updateRoomType(id: number, hotelId: string, roomType: Partial<InsertRoomType>): Promise<RoomType | null> {\n    const [updated] = await db\n      .update(roomTypes)\n      .set(roomType)\n      .where(and(eq(roomTypes.id, id), eq(roomTypes.hotelId, hotelId)))\n      .returning();\n    return updated || null;\n  }\n\n  async deleteRoomType(id: number, hotelId: string): Promise<boolean> {\n    const result = await db\n      .delete(roomTypes)\n      .where(and(eq(roomTypes.id, id), eq(roomTypes.hotelId, hotelId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Amenity operations - Halls\n  async getHallsByHotel(hotelId: string): Promise<Hall[]> {\n    return await db\n      .select()\n      .from(halls)\n      .where(eq(halls.hotelId, hotelId))\n      .orderBy(asc(halls.name));\n  }\n\n  async getHall(id: string): Promise<Hall | undefined> {\n    const [hall] = await db\n      .select()\n      .from(halls)\n      .where(eq(halls.id, id))\n      .limit(1);\n    return hall;\n  }\n\n  async createHall(hall: InsertHall): Promise<Hall> {\n    const [created] = await db.insert(halls).values(hall).returning();\n    return created;\n  }\n\n  async updateHall(id: string, hotelId: string, hall: Partial<InsertHall>): Promise<Hall | null> {\n    const [updated] = await db\n      .update(halls)\n      .set(hall)\n      .where(and(eq(halls.id, id), eq(halls.hotelId, hotelId)))\n      .returning();\n    return updated || null;\n  }\n\n  async deleteHall(id: string, hotelId: string): Promise<boolean> {\n    const result = await db\n      .delete(halls)\n      .where(and(eq(halls.id, id), eq(halls.hotelId, hotelId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Amenity operations - Pools\n  async getPoolsByHotel(hotelId: string): Promise<Pool[]> {\n    return await db\n      .select()\n      .from(pools)\n      .where(eq(pools.hotelId, hotelId))\n      .orderBy(asc(pools.name));\n  }\n\n  async createPool(pool: InsertPool): Promise<Pool> {\n    const [created] = await db.insert(pools).values(pool).returning();\n    return created;\n  }\n\n  async updatePool(id: string, hotelId: string, pool: Partial<InsertPool>): Promise<Pool | null> {\n    const [updated] = await db\n      .update(pools)\n      .set(pool)\n      .where(and(eq(pools.id, id), eq(pools.hotelId, hotelId)))\n      .returning();\n    return updated || null;\n  }\n\n  async deletePool(id: string, hotelId: string): Promise<boolean> {\n    const result = await db\n      .delete(pools)\n      .where(and(eq(pools.id, id), eq(pools.hotelId, hotelId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Amenity operations - Services\n  async getServicesByHotel(hotelId: string): Promise<Service[]> {\n    return await db\n      .select()\n      .from(services)\n      .where(eq(services.hotelId, hotelId))\n      .orderBy(asc(services.name));\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const [created] = await db.insert(services).values(service).returning();\n    return created;\n  }\n\n  async updateService(id: string, hotelId: string, service: Partial<InsertService>): Promise<Service | null> {\n    const [updated] = await db\n      .update(services)\n      .set(service)\n      .where(and(eq(services.id, id), eq(services.hotelId, hotelId)))\n      .returning();\n    return updated || null;\n  }\n\n  async deleteService(id: string, hotelId: string): Promise<boolean> {\n    const result = await db\n      .delete(services)\n      .where(and(eq(services.id, id), eq(services.hotelId, hotelId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Payment operations\n  async getPaymentsByHotel(hotelId: string): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.hotelId, hotelId))\n      .orderBy(desc(payments.createdAt));\n  }\n\n  // Menu item operations\n  async getMenuItem(id: string): Promise<MenuItem | undefined> {\n    const [result] = await db\n      .select()\n      .from(menuItems)\n      .where(eq(menuItems.id, id));\n    return result;\n  }\n\n  // Task operations\n  async getTask(id: string): Promise<Task | undefined> {\n    const [result] = await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.id, id));\n    return result;\n  }\n\n  // Restaurant table operations\n  async getRestaurantTable(id: string): Promise<RestaurantTable | undefined> {\n    const [result] = await db\n      .select()\n      .from(restaurantTables)\n      .where(eq(restaurantTables.id, id));\n    return result;\n  }\n\n  async createRestaurantTable(tableData: any): Promise<RestaurantTable> {\n    const [table] = await db\n      .insert(restaurantTables)\n      .values(tableData)\n      .returning();\n    return table;\n  }\n\n  async updateRestaurantTable(id: string, tableData: any): Promise<RestaurantTable> {\n    const [table] = await db\n      .update(restaurantTables)\n      .set(tableData)\n      .where(eq(restaurantTables.id, id))\n      .returning();\n    return table;\n  }\n\n  async deleteRestaurantTable(id: string): Promise<void> {\n    await db\n      .delete(restaurantTables)\n      .where(eq(restaurantTables.id, id));\n  }\n\n  // Inventory item operations\n  async getInventoryItem(id: string): Promise<InventoryItem | undefined> {\n    const [result] = await db\n      .select()\n      .from(inventoryItems)\n      .where(and(eq(inventoryItems.id, id), isNull(inventoryItems.deletedAt)));\n    return result;\n  }\n\n  async createInventoryItem(itemData: any): Promise<InventoryItem> {\n    const { getCategoryForUnit } = await import('@shared/measurements');\n    const category = itemData.baseUnit ? getCategoryForUnit(itemData.baseUnit) : 'count';\n    \n    const [item] = await db\n      .insert(inventoryItems)\n      .values({\n        ...itemData,\n        measurementCategory: category\n      })\n      .returning();\n    return item;\n  }\n\n  async updateInventoryItem(id: string, itemData: any): Promise<InventoryItem> {\n    const updateData = { ...itemData, updatedAt: new Date() };\n    \n    if (itemData.baseUnit) {\n      const { getCategoryForUnit } = await import('@shared/measurements');\n      updateData.measurementCategory = getCategoryForUnit(itemData.baseUnit);\n    }\n    \n    const [item] = await db\n      .update(inventoryItems)\n      .set(updateData)\n      .where(eq(inventoryItems.id, id))\n      .returning();\n    return item;\n  }\n\n  async deleteInventoryItem(id: string): Promise<void> {\n    await db\n      .update(inventoryItems)\n      .set({ deletedAt: new Date() })\n      .where(eq(inventoryItems.id, id));\n  }\n\n  async getInventoryTransactionsByHotel(hotelId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(inventoryTransactions)\n      .where(eq(inventoryTransactions.hotelId, hotelId))\n      .orderBy(desc(inventoryTransactions.createdAt));\n  }\n\n  async createInventoryTransaction(transactionData: any): Promise<any> {\n    // CRITICAL: Use database transaction with row-level locking to prevent race conditions\n    return await db.transaction(async (tx) => {\n      const transactionType = transactionData.transactionType;\n      \n      // For operations that reduce stock, acquire a row lock to prevent concurrent modifications\n      if (['issue', 'wastage'].includes(transactionType)) {\n        // SELECT FOR UPDATE locks the row until transaction completes\n        const [item] = await tx\n          .select()\n          .from(inventoryItems)\n          .where(eq(inventoryItems.id, transactionData.itemId))\n          .for('update')\n          .limit(1);\n        \n        if (!item) {\n          throw new Error('Inventory item not found');\n        }\n        \n        const currentStock = Number(item.baseStockQty || item.stockQty || 0);\n        const requestedQty = Number(transactionData.qtyBase || 0);\n        \n        // Double-check stock sufficiency within the transaction\n        if (requestedQty > currentStock) {\n          throw new Error(`Insufficient stock: Available ${currentStock}, Requested ${requestedQty}`);\n        }\n        \n        const newStock = currentStock - requestedQty;\n        \n        // Update inventory stock atomically within the same transaction\n        await tx\n          .update(inventoryItems)\n          .set({\n            baseStockQty: String(Math.max(0, newStock)),\n            stockQty: String(Math.max(0, newStock)),\n            updatedAt: new Date()\n          })\n          .where(eq(inventoryItems.id, transactionData.itemId));\n      }\n      \n      // For 'receive' and 'return' operations, lock and ADD to stock\n      if (['receive', 'return'].includes(transactionType)) {\n        const [item] = await tx\n          .select()\n          .from(inventoryItems)\n          .where(eq(inventoryItems.id, transactionData.itemId))\n          .for('update')\n          .limit(1);\n        \n        if (!item) {\n          throw new Error('Inventory item not found');\n        }\n        \n        const currentStock = Number(item.baseStockQty || item.stockQty || 0);\n        const addedQty = Number(transactionData.qtyBase || 0);\n        const newStock = currentStock + addedQty;\n        \n        await tx\n          .update(inventoryItems)\n          .set({\n            baseStockQty: String(newStock),\n            stockQty: String(newStock),\n            updatedAt: new Date()\n          })\n          .where(eq(inventoryItems.id, transactionData.itemId));\n      }\n      \n      // For 'adjustment' operations, lock and apply DELTA (positive or negative)\n      if (transactionType === 'adjustment') {\n        const [item] = await tx\n          .select()\n          .from(inventoryItems)\n          .where(eq(inventoryItems.id, transactionData.itemId))\n          .for('update')\n          .limit(1);\n        \n        if (!item) {\n          throw new Error('Inventory item not found');\n        }\n        \n        const currentStock = Number(item.baseStockQty || item.stockQty || 0);\n        // Adjustment is a DELTA - can be positive (add) or negative (subtract)\n        const adjustmentDelta = Number(transactionData.qtyBase || 0);\n        const newStock = currentStock + adjustmentDelta;\n        \n        // Prevent negative stock from adjustments\n        if (newStock < 0) {\n          throw new Error(`Adjustment would result in negative stock: Current ${currentStock}, Delta ${adjustmentDelta}`);\n        }\n        \n        await tx\n          .update(inventoryItems)\n          .set({\n            baseStockQty: String(newStock),\n            stockQty: String(newStock),\n            updatedAt: new Date()\n          })\n          .where(eq(inventoryItems.id, transactionData.itemId));\n      }\n      \n      // Insert the transaction record\n      const [transaction] = await tx\n        .insert(inventoryTransactions)\n        .values(transactionData)\n        .returning();\n      \n      return transaction;\n    });\n  }\n\n  async createKotOrderWithItems(kotData: any, items: any[]): Promise<KotOrder> {\n    // Create the KOT order first\n    const [kot] = await db\n      .insert(kotOrders)\n      .values(kotData)\n      .returning();\n\n    // Insert each KOT item without inventory deduction\n    // Inventory will be deducted when kitchen staff/bartender/barista approves the item\n    for (const item of items) {\n      await db\n        .insert(kotItems)\n        .values({\n          ...item,\n          kotId: kot.id,\n          inventoryUsage: null\n        });\n    }\n\n    return kot;\n  }\n\n  async updateKotItemQuantity(kotItemId: string, oldQty: number, newQty: number): Promise<void> {\n    // Update the KOT item quantity\n    await db\n      .update(kotItems)\n      .set({ qty: newQty })\n      .where(eq(kotItems.id, kotItemId));\n  }\n\n  async deleteKotOrderWithInventoryRestore(kotId: string): Promise<void> {\n    // Delete the KOT items\n    await db\n      .delete(kotItems)\n      .where(eq(kotItems.kotId, kotId));\n\n    // Delete the KOT order\n    await db\n      .delete(kotOrders)\n      .where(eq(kotOrders.id, kotId));\n  }\n\n  // Leave request operations\n  async getLeaveRequestsByHotel(hotelId: string): Promise<LeaveRequest[]> {\n    return await db\n      .select()\n      .from(leaveRequests)\n      .where(eq(leaveRequests.hotelId, hotelId))\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async getLeaveRequestsByUser(userId: string): Promise<LeaveRequest[]> {\n    return await db\n      .select()\n      .from(leaveRequests)\n      .where(eq(leaveRequests.requestedBy, userId))\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async getLeaveRequestsForManager(hotelId: string): Promise<LeaveRequest[]> {\n    // Get all leave requests for the hotel (for manager overview)\n    const allRequests = await db\n      .select({\n        leaveRequest: leaveRequests,\n        user: users,\n        role: roles\n      })\n      .from(leaveRequests)\n      .leftJoin(users, eq(leaveRequests.requestedBy, users.id))\n      .leftJoin(roles, eq(users.roleId, roles.id))\n      .where(eq(leaveRequests.hotelId, hotelId))\n      .orderBy(desc(leaveRequests.createdAt));\n\n    // Return leave requests with user info attached\n    return allRequests.map(r => ({\n      ...r.leaveRequest,\n      requestedByUser: r.user,\n      requestedByRole: r.role\n    })) as any;\n  }\n\n  async getPendingLeaveRequestsForManager(hotelId: string): Promise<LeaveRequest[]> {\n    // Get leave requests that need manager approval (pending status only)\n    return await db\n      .select()\n      .from(leaveRequests)\n      .where(and(\n        eq(leaveRequests.hotelId, hotelId),\n        eq(leaveRequests.status, 'pending')\n      ))\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async getPendingLeaveRequestsForApprover(approverRole: string, hotelId: string): Promise<LeaveRequest[]> {\n    // Define role hierarchy: which roles each approver can approve\n    const approvalMapping: Record<string, string[]> = {\n      'restaurant_bar_manager': ['waiter', 'cashier', 'bartender', 'kitchen_staff', 'barista'],\n      'housekeeping_supervisor': ['housekeeping_staff'],\n      'security_head': ['surveillance_officer', 'security_guard'],\n      'manager': ['restaurant_bar_manager', 'housekeeping_supervisor', 'security_head', 'finance', 'front_desk', 'storekeeper'],\n      'owner': ['manager']\n    };\n\n    const rolesCanApprove = approvalMapping[approverRole] || [];\n    \n    if (rolesCanApprove.length === 0) {\n      return [];\n    }\n\n    // First, get all users with the subordinate roles\n    const subordinateUsers = await db\n      .select({ id: users.id })\n      .from(users)\n      .innerJoin(roles, eq(users.roleId, roles.id))\n      .where(and(\n        eq(users.hotelId, hotelId),\n        inArray(roles.name, rolesCanApprove)\n      ));\n\n    const subordinateUserIds = subordinateUsers.map(u => u.id);\n\n    if (subordinateUserIds.length === 0) {\n      return [];\n    }\n\n    // Get all pending leave requests from those subordinate users\n    const allRequests = await db\n      .select({\n        leaveRequest: leaveRequests,\n        user: users,\n        role: roles\n      })\n      .from(leaveRequests)\n      .innerJoin(users, eq(leaveRequests.requestedBy, users.id))\n      .innerJoin(roles, eq(users.roleId, roles.id))\n      .where(and(\n        eq(leaveRequests.hotelId, hotelId),\n        eq(leaveRequests.status, 'pending'),\n        inArray(leaveRequests.requestedBy, subordinateUserIds)\n      ))\n      .orderBy(desc(leaveRequests.createdAt));\n\n    // Return just the leave requests with user info attached\n    return allRequests.map(r => ({\n      ...r.leaveRequest,\n      requestedByUser: r.user,\n      requestedByRole: r.role\n    })) as any;\n  }\n\n  async getLeaveRequestsForApprover(approverRole: string, hotelId: string): Promise<LeaveRequest[]> {\n    // Define role hierarchy: which roles each approver can approve\n    const approvalMapping: Record<string, string[]> = {\n      'restaurant_bar_manager': ['waiter', 'cashier', 'bartender', 'kitchen_staff', 'barista'],\n      'housekeeping_supervisor': ['housekeeping_staff'],\n      'security_head': ['surveillance_officer', 'security_guard'],\n      'manager': ['restaurant_bar_manager', 'housekeeping_supervisor', 'security_head', 'finance', 'front_desk', 'storekeeper'],\n      'owner': ['manager']\n    };\n\n    const rolesCanApprove = approvalMapping[approverRole] || [];\n    \n    if (rolesCanApprove.length === 0) {\n      return [];\n    }\n\n    // First, get all users with the subordinate roles\n    const subordinateUsers = await db\n      .select({ id: users.id })\n      .from(users)\n      .innerJoin(roles, eq(users.roleId, roles.id))\n      .where(and(\n        eq(users.hotelId, hotelId),\n        inArray(roles.name, rolesCanApprove)\n      ));\n\n    const subordinateUserIds = subordinateUsers.map(u => u.id);\n\n    if (subordinateUserIds.length === 0) {\n      return [];\n    }\n\n    // Get ALL leave requests from those subordinate users (all statuses)\n    const allRequests = await db\n      .select({\n        leaveRequest: leaveRequests,\n        user: users,\n        role: roles\n      })\n      .from(leaveRequests)\n      .innerJoin(users, eq(leaveRequests.requestedBy, users.id))\n      .innerJoin(roles, eq(users.roleId, roles.id))\n      .where(and(\n        eq(leaveRequests.hotelId, hotelId),\n        inArray(leaveRequests.requestedBy, subordinateUserIds)\n      ))\n      .orderBy(desc(leaveRequests.createdAt));\n\n    // Return just the leave requests with user info attached\n    return allRequests.map(r => ({\n      ...r.leaveRequest,\n      requestedByUser: r.user,\n      requestedByRole: r.role\n    })) as any;\n  }\n\n  async createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest> {\n    const [leaveRequest] = await db\n      .insert(leaveRequests)\n      .values(request)\n      .returning();\n    return leaveRequest;\n  }\n\n  async updateLeaveRequest(id: string, request: Partial<InsertLeaveRequest>): Promise<LeaveRequest> {\n    const [leaveRequest] = await db\n      .update(leaveRequests)\n      .set({ ...request, updatedAt: new Date() })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return leaveRequest;\n  }\n\n  async getLeaveRequest(id: string): Promise<LeaveRequest | undefined> {\n    const [leaveRequest] = await db\n      .select()\n      .from(leaveRequests)\n      .where(eq(leaveRequests.id, id));\n    return leaveRequest || undefined;\n  }\n\n  async getOverlappingLeaves(userId: string, startDate: Date, endDate: Date, excludeId?: string): Promise<LeaveRequest[]> {\n    const conditions = [\n      eq(leaveRequests.requestedBy, userId),\n      or(\n        eq(leaveRequests.status, 'approved'),\n        eq(leaveRequests.status, 'pending')\n      ),\n      or(\n        and(\n          lte(leaveRequests.startDate, startDate),\n          gte(leaveRequests.endDate, startDate)\n        ),\n        and(\n          lte(leaveRequests.startDate, endDate),\n          gte(leaveRequests.endDate, endDate)\n        ),\n        and(\n          gte(leaveRequests.startDate, startDate),\n          lte(leaveRequests.endDate, endDate)\n        )\n      )\n    ];\n\n    if (excludeId) {\n      conditions.push(not(eq(leaveRequests.id, excludeId)));\n    }\n\n    return await db\n      .select()\n      .from(leaveRequests)\n      .where(and(...conditions));\n  }\n\n  // Leave balance operations\n  async getLeaveBalancesByUser(userId: string, year?: number): Promise<any[]> {\n    const currentYear = year || new Date().getFullYear();\n    const balances = await db\n      .select()\n      .from(leaveBalances)\n      .where(and(\n        eq(leaveBalances.userId, userId),\n        eq(leaveBalances.year, currentYear)\n      ));\n    \n    // Enrich balances with leave policy details\n    if (balances.length === 0) {\n      return [];\n    }\n    \n    const firstBalance = balances[0];\n    const hotelPolicies = await db\n      .select()\n      .from(leavePolicies)\n      .where(eq(leavePolicies.hotelId, firstBalance.hotelId as string));\n    \n    const enrichedBalances = balances.map((balance) => {\n      const policy = hotelPolicies.find(p => p.leaveType === balance.leaveType);\n      return {\n        ...balance,\n        leaveTypeDetails: policy || { name: balance.leaveType, leaveType: balance.leaveType }\n      };\n    });\n    \n    return enrichedBalances;\n  }\n\n  async getLeaveBalance(userId: string, leaveType: string, year: number): Promise<any | undefined> {\n    const [balance] = await db\n      .select()\n      .from(leaveBalances)\n      .where(and(\n        eq(leaveBalances.userId, userId),\n        eq(leaveBalances.leaveType, leaveType),\n        eq(leaveBalances.year, year)\n      ));\n    return balance || undefined;\n  }\n\n  async createLeaveBalance(balance: any): Promise<any> {\n    const [leaveBalance] = await db\n      .insert(leaveBalances)\n      .values(balance)\n      .returning();\n    return leaveBalance;\n  }\n\n  async updateLeaveBalance(id: string, balance: any): Promise<any> {\n    const [leaveBalance] = await db\n      .update(leaveBalances)\n      .set({ ...balance, updatedAt: new Date() })\n      .where(eq(leaveBalances.id, id))\n      .returning();\n    return leaveBalance;\n  }\n\n  async initializeLeaveBalances(userId: string, hotelId: string, year: number): Promise<void> {\n    const policies = await this.getLeavePoliciesByHotel(hotelId);\n    const activePolicies = policies.filter(p => p.isActive);\n\n    for (const policy of activePolicies) {\n      const existing = await this.getLeaveBalance(userId, policy.leaveType, year);\n      if (!existing) {\n        await this.createLeaveBalance({\n          hotelId,\n          userId,\n          leaveType: policy.leaveType,\n          totalDays: policy.defaultDays.toString(),\n          usedDays: '0',\n          remainingDays: policy.defaultDays.toString(),\n          year\n        });\n      }\n    }\n  }\n\n  // Leave policy operations\n  async getLeavePoliciesByHotel(hotelId: string): Promise<LeavePolicy[]> {\n    return await db\n      .select()\n      .from(leavePolicies)\n      .where(eq(leavePolicies.hotelId, hotelId))\n      .orderBy(asc(leavePolicies.leaveType));\n  }\n\n  async getLeavePolicy(id: string): Promise<LeavePolicy | undefined> {\n    const [policy] = await db\n      .select()\n      .from(leavePolicies)\n      .where(eq(leavePolicies.id, id));\n    return policy || undefined;\n  }\n\n  async createLeavePolicy(policy: InsertLeavePolicy): Promise<LeavePolicy> {\n    const [newPolicy] = await db\n      .insert(leavePolicies)\n      .values(policy)\n      .returning();\n    return newPolicy;\n  }\n\n  async updateLeavePolicy(id: string, policy: Partial<InsertLeavePolicy>): Promise<LeavePolicy> {\n    const [updatedPolicy] = await db\n      .update(leavePolicies)\n      .set({ ...policy, updatedAt: new Date() })\n      .where(eq(leavePolicies.id, id))\n      .returning();\n    return updatedPolicy;\n  }\n\n  async deleteLeavePolicy(id: string): Promise<void> {\n    await db\n      .delete(leavePolicies)\n      .where(eq(leavePolicies.id, id));\n  }\n\n  // Notification operations\n  async getNotificationsByUser(userId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt))\n      .limit(50);\n  }\n\n  async getUnreadNotificationsByUser(userId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(and(\n        eq(notifications.userId, userId),\n        eq(notifications.isRead, false)\n      ))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: any): Promise<any> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<any> {\n    const [notification] = await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id))\n      .returning();\n    return notification;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.userId, userId));\n  }\n\n  // Meal plan operations\n  async getMealPlansByHotel(hotelId: string): Promise<MealPlan[]> {\n    return await db\n      .select()\n      .from(mealPlans)\n      .where(and(\n        eq(mealPlans.hotelId, hotelId),\n        eq(mealPlans.isActive, true)\n      ))\n      .orderBy(asc(mealPlans.planType));\n  }\n\n  async getMealPlan(id: string): Promise<MealPlan | undefined> {\n    const [plan] = await db\n      .select()\n      .from(mealPlans)\n      .where(eq(mealPlans.id, id));\n    return plan || undefined;\n  }\n\n  async createMealPlan(plan: InsertMealPlan): Promise<MealPlan> {\n    const [mealPlan] = await db\n      .insert(mealPlans)\n      .values(plan)\n      .returning();\n    return mealPlan;\n  }\n\n  async updateMealPlan(id: string, plan: Partial<InsertMealPlan>): Promise<MealPlan> {\n    const [mealPlan] = await db\n      .update(mealPlans)\n      .set({ ...plan, updatedAt: new Date() })\n      .where(eq(mealPlans.id, id))\n      .returning();\n    return mealPlan;\n  }\n\n  async deleteMealPlan(id: string, hotelId: string): Promise<boolean> {\n    const result = await db\n      .update(mealPlans)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(and(\n        eq(mealPlans.id, id),\n        eq(mealPlans.hotelId, hotelId)\n      ))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Meal voucher operations\n  async createMealVoucher(voucher: InsertMealVoucher): Promise<MealVoucher> {\n    const [created] = await db\n      .insert(mealVouchers)\n      .values(voucher)\n      .returning();\n    return created;\n  }\n\n  async getMealVouchers(hotelId: string, filters?: { status?: string; date?: Date }): Promise<MealVoucher[]> {\n    const conditions = [eq(mealVouchers.hotelId, hotelId)];\n    \n    if (filters?.status) {\n      conditions.push(eq(mealVouchers.status, filters.status));\n    }\n    \n    if (filters?.date) {\n      const startOfDay = new Date(filters.date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(filters.date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      conditions.push(\n        and(\n          gte(mealVouchers.voucherDate, startOfDay),\n          lte(mealVouchers.voucherDate, endOfDay)\n        ) as any\n      );\n    }\n    \n    return await db\n      .select()\n      .from(mealVouchers)\n      .where(and(...conditions))\n      .orderBy(desc(mealVouchers.voucherDate));\n  }\n\n  async getMealVouchersByRoom(roomId: string): Promise<MealVoucher[]> {\n    return await db\n      .select()\n      .from(mealVouchers)\n      .where(eq(mealVouchers.roomId, roomId))\n      .orderBy(desc(mealVouchers.voucherDate));\n  }\n\n  async redeemMealVoucher(id: string, redeemedBy: string, notes?: string): Promise<MealVoucher | null> {\n    // CRITICAL: Use transaction for atomic operation\n    try {\n      return await db.transaction(async (tx) => {\n        // Lock the voucher row\n        const [voucher] = await tx\n          .select()\n          .from(mealVouchers)\n          .where(eq(mealVouchers.id, id))\n          .for('update'); // Row lock\n        \n        if (!voucher) {\n          throw new Error('Meal voucher not found');\n        }\n        \n        // Check if already used\n        if (voucher.status !== 'unused') {\n          throw new Error('Meal voucher has already been used');\n        }\n        \n        // Redeem the voucher\n        const [redeemed] = await tx\n          .update(mealVouchers)\n          .set({\n            status: 'used',\n            usedAt: new Date(),\n            redeemedBy,\n            notes\n          })\n          .where(and(\n            eq(mealVouchers.id, id),\n            eq(mealVouchers.status, 'unused') // Double-check in update\n          ))\n          .returning();\n        \n        if (!redeemed) {\n          throw new Error('Failed to redeem voucher - may have been used by another request');\n        }\n        \n        return redeemed;\n      });\n    } catch (error) {\n      console.error('Meal voucher redemption error:', error);\n      return null;\n    }\n  }\n\n  // Guest operations\n  async getGuestsByHotel(hotelId: string): Promise<Guest[]> {\n    return await db\n      .select()\n      .from(guests)\n      .where(and(\n        eq(guests.hotelId, hotelId),\n        isNull(guests.deletedAt)\n      ))\n      .orderBy(desc(guests.createdAt));\n  }\n\n  async getGuest(id: string): Promise<Guest | undefined> {\n    const [guest] = await db\n      .select()\n      .from(guests)\n      .where(and(\n        eq(guests.id, id),\n        isNull(guests.deletedAt)\n      ));\n    return guest || undefined;\n  }\n\n  async createGuest(guestData: InsertGuest): Promise<Guest> {\n    const [guest] = await db\n      .insert(guests)\n      .values(guestData)\n      .returning();\n    return guest;\n  }\n\n  async updateGuest(id: string, guestData: Partial<InsertGuest>): Promise<Guest> {\n    const [guest] = await db\n      .update(guests)\n      .set({ ...guestData, updatedAt: new Date() })\n      .where(eq(guests.id, id))\n      .returning();\n    return guest;\n  }\n\n  async deleteGuest(id: string): Promise<void> {\n    // CRITICAL: Never hard delete - use soft delete only\n    await db\n      .update(guests)\n      .set({ deletedAt: new Date() })\n      .where(eq(guests.id, id));\n    \n    // Do NOT use: await db.delete(guests).where(eq(guests.id, id));\n  }\n\n  async restoreGuest(id: string, hotelId: string): Promise<Guest> {\n    const [guest] = await db\n      .update(guests)\n      .set({ deletedAt: null, updatedAt: new Date() })\n      .where(and(\n        eq(guests.id, id),\n        eq(guests.hotelId, hotelId)\n      ))\n      .returning();\n    \n    if (!guest) {\n      throw new Error('Guest not found or does not belong to this hotel');\n    }\n    \n    return guest;\n  }\n\n  async searchGuests(hotelId: string, searchTerm: string): Promise<Guest[]> {\n    const search = `%${searchTerm.toLowerCase()}%`;\n    return await db\n      .select()\n      .from(guests)\n      .where(and(\n        eq(guests.hotelId, hotelId),\n        isNull(guests.deletedAt),\n        sql`(LOWER(${guests.firstName}) LIKE ${search} OR LOWER(${guests.lastName}) LIKE ${search} OR LOWER(${guests.phone}) LIKE ${search} OR LOWER(${guests.email}) LIKE ${search})`\n      ))\n      .orderBy(desc(guests.createdAt));\n  }\n\n  // Stock request operations\n  async getStockRequestsByHotel(hotelId: string): Promise<StockRequest[]> {\n    return await db\n      .select()\n      .from(stockRequests)\n      .where(eq(stockRequests.hotelId, hotelId))\n      .orderBy(desc(stockRequests.createdAt));\n  }\n\n  async getStockRequestsByUser(userId: string): Promise<StockRequest[]> {\n    return await db\n      .select()\n      .from(stockRequests)\n      .where(eq(stockRequests.requestedBy, userId))\n      .orderBy(desc(stockRequests.createdAt));\n  }\n\n  async getPendingStockRequestsForStorekeeper(hotelId: string): Promise<StockRequest[]> {\n    return await db\n      .select()\n      .from(stockRequests)\n      .where(and(\n        eq(stockRequests.hotelId, hotelId),\n        sql`${stockRequests.status} IN ('pending', 'approved')`\n      ))\n      .orderBy(asc(stockRequests.createdAt));\n  }\n\n  async getStockRequestsByDepartment(hotelId: string, department: string): Promise<StockRequest[]> {\n    return await db\n      .select()\n      .from(stockRequests)\n      .where(and(\n        eq(stockRequests.hotelId, hotelId),\n        eq(stockRequests.department, department)\n      ))\n      .orderBy(desc(stockRequests.createdAt));\n  }\n\n  async getStockRequest(id: string): Promise<StockRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(stockRequests)\n      .where(eq(stockRequests.id, id));\n    return request || undefined;\n  }\n\n  async createStockRequest(requestData: InsertStockRequest): Promise<StockRequest> {\n    const [request] = await db\n      .insert(stockRequests)\n      .values(requestData)\n      .returning();\n    return request;\n  }\n\n  async updateStockRequest(id: string, requestData: Partial<StockRequest>): Promise<StockRequest> {\n    const [request] = await db\n      .update(stockRequests)\n      .set({ ...requestData, updatedAt: new Date() })\n      .where(eq(stockRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async approveStockRequest(id: string, approvedBy: string): Promise<StockRequest> {\n    const [request] = await db\n      .update(stockRequests)\n      .set({ \n        status: 'approved',\n        approvedBy,\n        approvedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(stockRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async deliverStockRequest(id: string, deliveredBy: string): Promise<StockRequest> {\n    const request = await this.getStockRequest(id);\n    if (!request) {\n      throw new Error('Stock request not found');\n    }\n\n    const inventoryItem = await db.query.inventoryItems.findFirst({\n      where: (inventoryItemsTable, { eq }) => eq(inventoryItemsTable.id, request.itemId)\n    });\n\n    if (!inventoryItem) {\n      throw new Error('Inventory item not found');\n    }\n\n    let quantityInBaseUnit = Number(request.quantity);\n    \n    if (request.unit && request.unit !== inventoryItem.baseUnit) {\n      const { convertToBase } = await import('@shared/measurements');\n      const category = (inventoryItem.measurementCategory || 'weight') as any;\n      const conversionProfile = inventoryItem.conversionProfile as any;\n      \n      try {\n        quantityInBaseUnit = convertToBase(\n          Number(request.quantity),\n          request.unit as any,\n          (inventoryItem.baseUnit || 'kg') as any,\n          category,\n          conversionProfile\n        );\n      } catch (error) {\n        console.error(`Unit conversion error for ${inventoryItem.name}:`, error);\n      }\n    }\n\n    const currentStock = Number(inventoryItem.baseStockQty || inventoryItem.stockQty || 0);\n    const newQuantity = currentStock - quantityInBaseUnit;\n\n    await db\n      .update(inventoryItems)\n      .set({ \n        baseStockQty: String(newQuantity),\n        stockQty: String(newQuantity),\n        updatedAt: new Date()\n      })\n      .where(eq(inventoryItems.id, request.itemId));\n\n    await this.createInventoryTransaction({\n      hotelId: request.hotelId,\n      itemId: request.itemId,\n      transactionType: 'issue',\n      qtyBase: String(quantityInBaseUnit),\n      qtyPackage: request.unit === inventoryItem.packageUnit ? request.quantity : null,\n      issuedToUserId: request.requestedBy,\n      department: request.department,\n      notes: `Stock request delivered - ${request.notes || ''}`,\n      recordedBy: deliveredBy\n    });\n\n    const [updatedRequest] = await db\n      .update(stockRequests)\n      .set({ \n        status: 'delivered',\n        deliveredAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(stockRequests.id, id))\n      .returning();\n\n    return updatedRequest;\n  }\n\n  // Hall booking operations\n  async getHallBookingsByHotel(hotelId: string): Promise<SelectHallBooking[]> {\n    return await db\n      .select()\n      .from(hallBookings)\n      .where(eq(hallBookings.hotelId, hotelId))\n      .orderBy(desc(hallBookings.bookingStartTime));\n  }\n\n  async getHallBookingsByHall(hallId: string): Promise<SelectHallBooking[]> {\n    return await db\n      .select()\n      .from(hallBookings)\n      .where(eq(hallBookings.hallId, hallId))\n      .orderBy(desc(hallBookings.bookingStartTime));\n  }\n\n  async getHallBooking(id: string): Promise<SelectHallBooking | undefined> {\n    const [booking] = await db\n      .select()\n      .from(hallBookings)\n      .where(eq(hallBookings.id, id));\n    return booking || undefined;\n  }\n\n  async createHallBooking(bookingData: InsertHallBooking): Promise<SelectHallBooking> {\n    // CRITICAL: Use database transaction with row locking to prevent double booking\n    return await db.transaction(async (tx) => {\n      const { hallId, bookingStartTime, bookingEndTime } = bookingData;\n      \n      // Lock the hall for update\n      const [hall] = await tx\n        .select()\n        .from(halls)\n        .where(eq(halls.id, hallId))\n        .for('update'); // PostgreSQL row lock\n      \n      if (!hall) {\n        throw new Error('Hall not found');\n      }\n      \n      // Check for existing bookings with time overlap\n      const overlapping = await tx\n        .select()\n        .from(hallBookings)\n        .where(\n          and(\n            eq(hallBookings.hallId, hallId),\n            or(\n              eq(hallBookings.status, 'confirmed'),\n              eq(hallBookings.status, 'pending'),\n              eq(hallBookings.status, 'quotation')\n            ),\n            // Time overlap check: new booking overlaps with existing booking\n            or(\n              // New booking starts during existing booking\n              and(\n                lte(hallBookings.bookingStartTime, bookingStartTime),\n                gt(hallBookings.bookingEndTime, bookingStartTime)\n              ),\n              // New booking ends during existing booking\n              and(\n                lt(hallBookings.bookingStartTime, bookingEndTime),\n                gte(hallBookings.bookingEndTime, bookingEndTime)\n              ),\n              // New booking completely contains existing booking\n              and(\n                gte(hallBookings.bookingStartTime, bookingStartTime),\n                lte(hallBookings.bookingEndTime, bookingEndTime)\n              )\n            )\n          )\n        )\n        .limit(1);\n      \n      if (overlapping.length > 0) {\n        throw new Error('Hall is already booked for the selected time period');\n      }\n      \n      // Create booking\n      const [booking] = await tx\n        .insert(hallBookings)\n        .values(bookingData)\n        .returning();\n      \n      return booking;\n    });\n  }\n\n  async updateHallBooking(id: string, bookingData: Partial<InsertHallBooking>): Promise<SelectHallBooking> {\n    const [booking] = await db\n      .update(hallBookings)\n      .set({ ...bookingData, updatedAt: new Date() })\n      .where(eq(hallBookings.id, id))\n      .returning();\n    return booking;\n  }\n\n  async confirmHallBooking(id: string, confirmedBy: string): Promise<SelectHallBooking> {\n    const [booking] = await db\n      .update(hallBookings)\n      .set({ \n        status: 'confirmed',\n        confirmedBy,\n        confirmedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(hallBookings.id, id))\n      .returning();\n    return booking;\n  }\n\n  async cancelHallBooking(id: string, cancelledBy: string, reason: string): Promise<SelectHallBooking> {\n    const [booking] = await db\n      .update(hallBookings)\n      .set({ \n        status: 'cancelled',\n        cancelledBy,\n        cancellationReason: reason,\n        cancelledAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(hallBookings.id, id))\n      .returning();\n    return booking;\n  }\n\n  async checkHallAvailability(\n    hallId: string, \n    startTime: Date, \n    endTime: Date, \n    excludeBookingId?: string\n  ): Promise<boolean> {\n    const conditions = [\n      eq(hallBookings.hallId, hallId),\n      sql`${hallBookings.status} IN ('deposit_pending', 'confirmed', 'in_progress', 'completed')`,\n      sql`${hallBookings.bookingStartTime} < ${endTime.toISOString()}`,\n      sql`${hallBookings.bookingEndTime} > ${startTime.toISOString()}`\n    ];\n\n    if (excludeBookingId) {\n      conditions.push(sql`${hallBookings.id} != ${excludeBookingId}`);\n    }\n\n    const conflicts = await db\n      .select()\n      .from(hallBookings)\n      .where(and(...conditions));\n    \n    return conflicts.length === 0;\n  }\n\n  async createBookingPayment(paymentData: any): Promise<any> {\n    const [payment] = await db\n      .insert(bookingPayments)\n      .values(paymentData)\n      .returning();\n    return payment;\n  }\n\n  async getRestaurantBillsByHotel(hotelId: string, filters?: { startDate?: Date; endDate?: Date; status?: string }): Promise<any[]> {\n    const conditions = [eq(restaurantBills.hotelId, hotelId)];\n    \n    if (filters?.startDate) {\n      conditions.push(sql`${restaurantBills.createdAt} >= ${filters.startDate.toISOString()}`);\n    }\n    if (filters?.endDate) {\n      conditions.push(sql`${restaurantBills.createdAt} <= ${filters.endDate.toISOString()}`);\n    }\n    if (filters?.status) {\n      conditions.push(eq(restaurantBills.status, filters.status));\n    }\n    \n    return await db\n      .select()\n      .from(restaurantBills)\n      .where(and(...conditions))\n      .orderBy(desc(restaurantBills.createdAt));\n  }\n\n  async getRestaurantBill(id: string): Promise<any | undefined> {\n    const [bill] = await db\n      .select()\n      .from(restaurantBills)\n      .where(eq(restaurantBills.id, id));\n    return bill || undefined;\n  }\n\n  async createRestaurantBill(billData: any): Promise<any> {\n    const [bill] = await db\n      .insert(restaurantBills)\n      .values(billData)\n      .returning();\n    return bill;\n  }\n\n  async updateRestaurantBill(id: string, billData: Partial<any>): Promise<any> {\n    const [bill] = await db\n      .update(restaurantBills)\n      .set(billData)\n      .where(eq(restaurantBills.id, id))\n      .returning();\n    return bill;\n  }\n\n  async getBillPayments(billId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(billPayments)\n      .where(eq(billPayments.billId, billId))\n      .orderBy(asc(billPayments.createdAt));\n  }\n\n  async createBillPayment(paymentData: any): Promise<any> {\n    const [payment] = await db\n      .insert(billPayments)\n      .values(paymentData)\n      .returning();\n    return payment;\n  }\n\n  async getBillPayment(paymentId: string): Promise<any | undefined> {\n    const [payment] = await db\n      .select()\n      .from(billPayments)\n      .where(eq(billPayments.id, paymentId));\n    return payment || undefined;\n  }\n\n  async voidBillPayment(paymentId: string, voidedBy: string, reason: string): Promise<any> {\n    const [voided] = await db\n      .update(billPayments)\n      .set({\n        isVoided: true,\n        voidedBy,\n        voidedAt: new Date(),\n        voidReason: reason\n      })\n      .where(eq(billPayments.id, paymentId))\n      .returning();\n    return voided;\n  }\n\n  async createAttendance(userId: string, hotelId: string, clockInTime: Date, location: string | null, ip: string | null, source: string | null): Promise<Attendance> {\n    const [record] = await db\n      .insert(attendance)\n      .values({\n        userId,\n        hotelId,\n        clockInTime,\n        clockInLocation: location,\n        clockInIp: ip,\n        clockInSource: source,\n        status: 'active'\n      })\n      .returning();\n    return record;\n  }\n\n  async getActiveAttendance(userId: string): Promise<Attendance | null> {\n    const [record] = await db\n      .select()\n      .from(attendance)\n      .where(and(\n        eq(attendance.userId, userId),\n        eq(attendance.status, 'active')\n      ))\n      .orderBy(desc(attendance.clockInTime))\n      .limit(1);\n    return record || null;\n  }\n\n  async clockOut(attendanceId: string, clockOutTime: Date, location: string | null, ip: string | null, source: string | null): Promise<Attendance> {\n    const [record] = await db\n      .select()\n      .from(attendance)\n      .where(eq(attendance.id, attendanceId));\n\n    if (!record) {\n      throw new Error('Attendance record not found');\n    }\n\n    const clockInTime = new Date(record.clockInTime);\n    const totalHours = (clockOutTime.getTime() - clockInTime.getTime()) / (1000 * 60 * 60);\n\n    const [updated] = await db\n      .update(attendance)\n      .set({\n        clockOutTime,\n        clockOutLocation: location,\n        clockOutIp: ip,\n        clockOutSource: source,\n        totalHours: totalHours.toFixed(2),\n        status: 'completed',\n        updatedAt: new Date()\n      })\n      .where(eq(attendance.id, attendanceId))\n      .returning();\n    \n    return updated;\n  }\n\n  async getAttendanceByUser(userId: string, startDate?: Date, endDate?: Date): Promise<Attendance[]> {\n    const conditions = [eq(attendance.userId, userId)];\n    \n    if (startDate) {\n      conditions.push(gte(attendance.clockInTime, startDate));\n    }\n    if (endDate) {\n      conditions.push(lte(attendance.clockInTime, endDate));\n    }\n\n    return await db\n      .select()\n      .from(attendance)\n      .where(and(...conditions))\n      .orderBy(desc(attendance.clockInTime));\n  }\n\n  async getAttendanceByHotel(hotelId: string, date: Date): Promise<Attendance[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    \n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db\n      .select()\n      .from(attendance)\n      .where(and(\n        eq(attendance.hotelId, hotelId),\n        or(\n          and(\n            gte(attendance.clockInTime, startOfDay),\n            lte(attendance.clockInTime, endOfDay)\n          ),\n          eq(attendance.status, 'active')\n        )\n      ))\n      .orderBy(desc(attendance.clockInTime));\n  }\n\n  async getAllAttendanceByHotel(hotelId: string, startDate?: Date, endDate?: Date): Promise<Attendance[]> {\n    const conditions = [eq(attendance.hotelId, hotelId)];\n    \n    if (startDate) {\n      conditions.push(gte(attendance.clockInTime, startDate));\n    }\n    if (endDate) {\n      conditions.push(lte(attendance.clockInTime, endDate));\n    }\n\n    return await db\n      .select()\n      .from(attendance)\n      .where(and(...conditions))\n      .orderBy(desc(attendance.clockInTime));\n  }\n\n  async canClockIn(userId: string): Promise<{ canClockIn: boolean; reason?: string }> {\n    const user = await this.getUser(userId);\n    \n    if (!user) {\n      return { canClockIn: false, reason: 'User not found' };\n    }\n\n    if (!user.isActive) {\n      return { canClockIn: false, reason: 'User is not active' };\n    }\n\n    const activeAttendance = await this.getActiveAttendance(userId);\n    \n    if (activeAttendance) {\n      return { canClockIn: false, reason: 'Already clocked in' };\n    }\n\n    const lastAttendance = await db\n      .select()\n      .from(attendance)\n      .where(eq(attendance.userId, userId))\n      .orderBy(desc(attendance.clockInTime))\n      .limit(1);\n\n    if (lastAttendance.length > 0 && lastAttendance[0].clockOutTime) {\n      const lastClockOut = new Date(lastAttendance[0].clockOutTime);\n      const now = new Date();\n      const minutesSinceLastClockOut = (now.getTime() - lastClockOut.getTime()) / (1000 * 60);\n      \n      if (minutesSinceLastClockOut < 1) {\n        return { canClockIn: false, reason: 'Must wait at least 1 minute after clocking out' };\n      }\n    }\n\n    return { canClockIn: true };\n  }\n\n  async createAuditLog(log: { hotelId: string; resourceType: string; resourceId: string; action: string; userId: string; details: any }): Promise<any> {\n    const [auditLog] = await db\n      .insert(auditLogs)\n      .values({\n        hotelId: log.hotelId,\n        resourceType: log.resourceType,\n        resourceId: log.resourceId,\n        action: log.action,\n        userId: log.userId,\n        details: log.details,\n        success: true\n      })\n      .returning();\n    \n    return auditLog;\n  }\n\n  async createPriceChangeLog(log: { hotelId: string; itemId: string; itemType: string; itemName: string; previousPrice: string | number; newPrice: string | number; changedBy: string }): Promise<any> {\n    const [priceChangeLog] = await db\n      .insert(priceChangeLogs)\n      .values({\n        hotelId: log.hotelId,\n        itemId: log.itemId,\n        itemType: log.itemType,\n        itemName: log.itemName,\n        previousPrice: String(log.previousPrice),\n        newPrice: String(log.newPrice),\n        changedBy: log.changedBy\n      })\n      .returning();\n    \n    return priceChangeLog;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":115037},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/dashboard/manager/staff-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Users, UserPlus, AlertTriangle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nexport default function StaffManagement() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isResetPasswordDialogOpen, setIsResetPasswordDialogOpen] = useState(false);\n  const [selectedStaff, setSelectedStaff] = useState<any>(null);\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [newStaff, setNewStaff] = useState({\n    username: \"\",\n    email: \"\",\n    phone: \"\",\n    fullName: \"\",\n    address: \"\",\n    password: \"\",\n    role: \"\"\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch current staff\n  const { data: staff = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/users\", { credentials: \"include\" });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch staff\");\n      }\n      return response.json();\n    },\n    refetchInterval: 3000\n  });\n\n  // Fetch available roles that manager can create\n  const { data: allRoles = [] } = useQuery<any[]>({\n    queryKey: [\"/api/roles\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/roles\", { credentials: \"include\" });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch roles\");\n      }\n      return response.json();\n    },\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  // Roles that a manager can create (based on server authorization)\n  const managerCanCreate = ['waiter', 'kitchen_staff', 'housekeeping_staff', 'security_guard', 'cashier', 'front_desk'];\n  const availableRoles = allRoles.filter((role: any) => managerCanCreate.includes(role.name));\n\n  // Create staff mutation\n  const createStaffMutation = useMutation({\n    mutationFn: async (staffData: any) => {\n      const response = await fetch(\"/api/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(staffData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create staff member\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      setIsAddDialogOpen(false);\n      setNewStaff({ username: \"\", email: \"\", phone: \"\", fullName: \"\", address: \"\", password: \"\", role: \"\" });\n      toast.success(\"Staff member created successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message || \"Failed to create staff member\");\n    }\n  });\n\n  // Delete staff mutation\n  const deleteStaffMutation = useMutation({\n    mutationFn: async (staffId: string) => {\n      const response = await fetch(`/api/users/${staffId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete staff member\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/users\"] });\n      toast.success(\"Staff member removed successfully\");\n    },\n    onError: () => {\n      toast.error(\"Failed to remove staff member\");\n    }\n  });\n\n  // Reset password mutation\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ targetUserId, newPassword }: { targetUserId: string; newPassword: string }) => {\n      const response = await fetch(\"/api/manager/reset-staff-password\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ targetUserId, newPassword })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to reset password\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIsResetPasswordDialogOpen(false);\n      setNewPassword(\"\");\n      setSelectedStaff(null);\n      toast.success(`Password reset successfully for ${data.username}`);\n    },\n    onError: (error: any) => {\n      toast.error(error.message || \"Failed to reset password\");\n    }\n  });\n\n  const handleCreateStaff = () => {\n    if (!newStaff.username || !newStaff.password || !newStaff.role || !newStaff.phone || !newStaff.fullName || !newStaff.address) {\n      toast.error(\"Please fill in all required fields (username, password, role, phone, full name, and address)\");\n      return;\n    }\n\n    const selectedRole = availableRoles.find((r: any) => r.name === newStaff.role);\n    if (!selectedRole) {\n      toast.error(\"Invalid role selected\");\n      return;\n    }\n\n    createStaffMutation.mutate({\n      ...newStaff,\n      roleId: selectedRole.id,\n      verification: {}\n    });\n  };\n\n  const { confirm } = useConfirmDialog();\n\n  const handleDeleteStaff = async (staffMember: any) => {\n    await confirm({\n      title: \"Remove Staff Member\",\n      description: `Are you sure you want to remove ${staffMember.username}? This action cannot be undone.`,\n      confirmText: \"Remove\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: () => {\n        deleteStaffMutation.mutate(staffMember.id);\n      }\n    });\n  };\n\n  const handleResetPassword = (staffMember: any) => {\n    setSelectedStaff(staffMember);\n    setIsResetPasswordDialogOpen(true);\n  };\n\n  const handleConfirmResetPassword = () => {\n    if (!newPassword || newPassword.length < 8) {\n      toast.error(\"Password must be at least 8 characters\");\n      return;\n    }\n    if (!selectedStaff) {\n      toast.error(\"No staff member selected\");\n      return;\n    }\n    resetPasswordMutation.mutate({ \n      targetUserId: selectedStaff.id, \n      newPassword \n    });\n  };\n\n  const staffColumns = [\n    { key: \"username\", label: \"Username\", sortable: true },\n    { \n      key: \"fullName\", \n      label: \"Name\", \n      sortable: true,\n      render: (value: any, row: any) => value || row.username || \"-\"\n    },\n    { \n      key: \"address\", \n      label: \"Address\", \n      sortable: true,\n      render: (value: any) => value || \"-\"\n    },\n    { key: \"email\", label: \"Email\", sortable: true },\n    { key: \"phone\", label: \"Phone\", sortable: true },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || \"Unknown\"\n    },\n    { \n      key: \"id\", \n      label: \"Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n            {isOnDuty ? 'On Duty' : 'Off Duty'}\n          </span>\n        );\n      }\n    },\n    { key: \"createdAt\", label: \"Hired\", sortable: true, render: (value: string) => new Date(value).toLocaleDateString() }\n  ];\n\n  const staffActions = [\n    { \n      label: \"Reset Password\", \n      action: handleResetPassword, \n      variant: \"outline\" as const\n    },\n    { \n      label: \"Remove\", \n      action: handleDeleteStaff, \n      variant: \"destructive\" as const,\n      icon: <AlertTriangle className=\"h-4 w-4\" />\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Staff Management\">\n      <div className=\"space-y-6\">\n        {/* Overview Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-6 w-6\" />\n              Staff Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">{staff.length}</div>\n                <div className=\"text-sm text-blue-600\">Total Staff</div>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">{staff.filter((s: any) => dailyAttendance.some(a => a.userId === s.id && a.status === 'active')).length}</div>\n                <div className=\"text-sm text-green-600\">On Duty Now</div>\n              </div>\n              <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-orange-600\">{availableRoles.length}</div>\n                <div className=\"text-sm text-orange-600\">Available Roles</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Staff Table */}\n        <DataTable\n          title=\"Staff Members\"\n          data={staff as any[]}\n          columns={staffColumns}\n          actions={staffActions}\n          onAdd={() => setIsAddDialogOpen(true)}\n          addButtonLabel=\"Add Staff Member\"\n          searchPlaceholder=\"Search staff...\"\n          isLoading={isLoading}\n        />\n\n        {/* Add Staff Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <UserPlus className=\"h-5 w-5\" />\n                Add New Staff Member\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"username\">Username *</Label>\n                  <Input\n                    id=\"username\"\n                    value={newStaff.username}\n                    onChange={(e) => setNewStaff(prev => ({ ...prev, username: e.target.value }))}\n                    placeholder=\"Enter username\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={newStaff.email}\n                    onChange={(e) => setNewStaff(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"Enter email\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"phone\">Phone *</Label>\n                  <Input\n                    id=\"phone\"\n                    value={newStaff.phone}\n                    onChange={(e) => setNewStaff(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"Enter phone number\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"fullName\">Full Name *</Label>\n                  <Input\n                    id=\"fullName\"\n                    value={newStaff.fullName}\n                    onChange={(e) => setNewStaff(prev => ({ ...prev, fullName: e.target.value }))}\n                    placeholder=\"Enter full name\"\n                    required\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"address\">Address *</Label>\n                <Input\n                  id=\"address\"\n                  value={newStaff.address}\n                  onChange={(e) => setNewStaff(prev => ({ ...prev, address: e.target.value }))}\n                  placeholder=\"Enter address\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={newStaff.password}\n                  onChange={(e) => setNewStaff(prev => ({ ...prev, password: e.target.value }))}\n                  placeholder=\"Enter password\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"role\">Role *</Label>\n                <Select value={newStaff.role} onValueChange={(value) => setNewStaff(prev => ({ ...prev, role: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableRoles.map((role: any) => (\n                      <SelectItem key={role.id} value={role.name}>\n                        {role.name.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateStaff}\n                  disabled={createStaffMutation.isPending}\n                >\n                  {createStaffMutation.isPending ? \"Creating...\" : \"Create Staff Member\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Reset Password Dialog */}\n        <Dialog open={isResetPasswordDialogOpen} onOpenChange={setIsResetPasswordDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Reset Staff Password</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Reset password for <span className=\"font-semibold\">{selectedStaff?.username}</span>\n              </p>\n              <div>\n                <Label htmlFor=\"new-password\">New Password *</Label>\n                <Input\n                  id=\"new-password\"\n                  type=\"password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  placeholder=\"Enter new password (min 8 characters)\"\n                  data-testid=\"input-reset-password\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Password must be at least 8 characters long\n                </p>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsResetPasswordDialogOpen(false);\n                    setNewPassword(\"\");\n                    setSelectedStaff(null);\n                  }}\n                  data-testid=\"button-cancel-reset\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleConfirmResetPassword}\n                  disabled={resetPasswordMutation.isPending}\n                  data-testid=\"button-confirm-reset\"\n                >\n                  {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":16086},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/pages/dashboard/surveillance-officer.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Clock, CheckSquare, Car, AlertTriangle, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { format } from \"date-fns\";\n\nexport default function SurveillanceOfficerDashboard() {\n  const { user } = useAuth();\n  \n  const { data: tasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/security/tasks\"],\n    refetchInterval: 3000\n  });\n\n  const { data: vehicleLogs = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vehicle-logs\"],\n    refetchInterval: 3000\n  });\n\n  const { data: maintenanceRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/maintenance-requests\"],\n    refetchInterval: 3000\n  });\n\n  const myTasks = tasks.filter(t => t.assignedTo === user?.id);\n  const pendingTasks = myTasks.filter(t => t.status === 'pending');\n  const inProgressTasks = myTasks.filter(t => t.status === 'in_progress');\n  const completedTasks = myTasks.filter(t => t.status === 'completed');\n  \n  const myVehicleLogs = vehicleLogs.filter(v => v.recordedBy === user?.id);\n  const activeVehicles = myVehicleLogs.filter(v => !v.checkOut);\n  \n  const myMaintenanceRequests = maintenanceRequests.filter(r => r.reportedBy === user?.id);\n  const pendingMaintenanceRequests = myMaintenanceRequests.filter(r => r.status === 'pending');\n\n  return (\n    <DashboardLayout title=\"Surveillance Officer Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Welcome Section */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-4\">\n              <Shield className=\"h-12 w-12 text-primary\" />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Welcome, {user?.username}</h2>\n                <p className=\"text-muted-foreground\">Monitor and secure the premises</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Pending Tasks\"\n            value={pendingTasks.length}\n            icon={<Clock />}\n            iconColor=\"text-orange-500\"\n          />\n          <StatsCard\n            title=\"In Progress\"\n            value={inProgressTasks.length}\n            icon={<Shield />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Active Vehicles\"\n            value={activeVehicles.length}\n            icon={<Car />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Pending Maintenance\"\n            value={pendingMaintenanceRequests.length}\n            icon={<AlertTriangle />}\n            iconColor=\"text-red-500\"\n          />\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Link href=\"/surveillance-officer/duty-status\">\n                <Button className=\"w-full\" variant=\"outline\" data-testid=\"link-duty-status\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Duty Status\n                </Button>\n              </Link>\n              <Link href=\"/surveillance-officer/vehicle-logs\">\n                <Button className=\"w-full\" variant=\"outline\" data-testid=\"link-vehicle-logs\">\n                  <Car className=\"h-4 w-4 mr-2\" />\n                  Vehicle Check-in/Out\n                </Button>\n              </Link>\n              <Link href=\"/surveillance-officer/my-tasks\">\n                <Button className=\"w-full\" variant=\"outline\" data-testid=\"link-my-tasks\">\n                  <CheckSquare className=\"h-4 w-4 mr-2\" />\n                  View My Tasks\n                </Button>\n              </Link>\n              <Link href=\"/surveillance-officer/maintenance-reports\">\n                <Button className=\"w-full\" variant=\"outline\" data-testid=\"link-maintenance\">\n                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                  Report Maintenance\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Tasks */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {myTasks.length === 0 ? (\n              <p className=\"text-center py-8 text-muted-foreground\">No tasks assigned yet.</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {myTasks.slice(0, 3).map((task) => (\n                  <div key={task.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{task.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {task.dueDate && `Due: ${format(new Date(task.dueDate), 'MMM dd, yyyy')}`}\n                      </p>\n                    </div>\n                    <span className={`px-2 py-1 rounded text-xs ${\n                      task.status === 'completed' ? 'bg-green-100 text-green-800' :\n                      task.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                      'bg-gray-100 text-gray-800'\n                    }`}>\n                      {task.status.replace('_', ' ')}\n                    </span>\n                  </div>\n                ))}\n                {myTasks.length > 3 && (\n                  <Link href=\"/surveillance-officer/my-tasks\">\n                    <Button variant=\"link\" className=\"w-full\">View all tasks →</Button>\n                  </Link>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Vehicle Logs */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Vehicle Logs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {myVehicleLogs.length === 0 ? (\n              <p className=\"text-center py-8 text-muted-foreground\">No vehicle logs yet.</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {myVehicleLogs.slice(0, 3).map((log) => (\n                  <div key={log.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Car className=\"h-4 w-4\" />\n                        <p className=\"font-medium\">{log.vehicleNumber}</p>\n                        <span className=\"text-sm text-muted-foreground\">• {log.driverName}</span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {format(new Date(log.checkIn), 'MMM dd, HH:mm')}\n                      </p>\n                    </div>\n                    <span className={`px-2 py-1 rounded text-xs ${\n                      log.checkOut ? 'bg-gray-100 text-gray-800' : 'bg-green-100 text-green-800'\n                    }`}>\n                      {log.checkOut ? 'Checked Out' : 'On Premises'}\n                    </span>\n                  </div>\n                ))}\n                {myVehicleLogs.length > 3 && (\n                  <Link href=\"/surveillance-officer/vehicle-logs\">\n                    <Button variant=\"link\" className=\"w-full\">View all logs →</Button>\n                  </Link>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7981},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { ComponentType } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  allowedRoles = []\n}: {\n  path: string;\n  component: ComponentType<any>;\n  allowedRoles?: string[];\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // Check role permissions if specified\n  if (allowedRoles.length > 0 && user.role?.name) {\n    if (!allowedRoles.includes(user.role.name)) {\n      return (\n        <Route path={path}>\n          <div className=\"flex items-center justify-center min-h-screen\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-bold text-foreground mb-2\">Access Denied</h1>\n              <p className=\"text-muted-foreground\">You don't have permission to access this page.</p>\n            </div>\n          </div>\n        </Route>\n      );\n    }\n  }\n\n  return <Route path={path}><Component /></Route>;\n}\n","size_bytes":1350},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { log } from './vite';\n\ninterface WebSocketClient extends WebSocket {\n  hotelId?: string;\n  userId?: string;\n  role?: string;\n}\n\nlet wss: WebSocketServer;\nconst clients = new Map<string, WebSocketClient>();\n\nexport function setupWebSocket(server: Server) {\n  wss = new WebSocketServer({ \n    server,\n    path: '/ws'\n  });\n\n  wss.on('connection', (ws: WebSocketClient, req) => {\n    const url = new URL(req.url || '', `http://${req.headers.host}`);\n    const hotelId = url.searchParams.get('hotelId');\n    const userId = url.searchParams.get('userId');\n    const role = url.searchParams.get('role');\n\n    if (hotelId && userId) {\n      ws.hotelId = hotelId;\n      ws.userId = userId;\n      ws.role = role || undefined;\n      clients.set(userId, ws);\n      log(`WebSocket client connected: user ${userId}, role ${role}, hotel ${hotelId}`);\n    }\n\n    ws.on('message', (message: string) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        // Handle ping/pong for connection keep-alive\n        if (data.type === 'ping') {\n          ws.send(JSON.stringify({ type: 'pong' }));\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (userId) {\n        clients.delete(userId);\n        log(`WebSocket client disconnected: user ${userId}`);\n      }\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n\n  return wss;\n}\n\n// Broadcast to all clients in a hotel\nexport function broadcastToHotel(hotelId: string, event: string, data: any) {\n  if (!wss) return;\n\n  const message = JSON.stringify({ event, data, timestamp: new Date().toISOString() });\n  \n  clients.forEach((client, userId) => {\n    if (client.hotelId === hotelId && client.readyState === WebSocket.OPEN) {\n      client.send(message);\n    }\n  });\n}\n\n// Broadcast to specific roles in a hotel\nexport function broadcastToRole(hotelId: string, roles: string[], event: string, data: any) {\n  if (!wss) return;\n\n  const message = JSON.stringify({ event, data, timestamp: new Date().toISOString() });\n  \n  clients.forEach((client, userId) => {\n    if (\n      client.hotelId === hotelId && \n      client.role && \n      roles.includes(client.role) && \n      client.readyState === WebSocket.OPEN\n    ) {\n      client.send(message);\n    }\n  });\n}\n\n// Broadcast to a specific user\nexport function broadcastToUser(userId: string, event: string, data: any) {\n  const client = clients.get(userId);\n  \n  if (client && client.readyState === WebSocket.OPEN) {\n    const message = JSON.stringify({ event, data, timestamp: new Date().toISOString() });\n    client.send(message);\n  }\n}\n\n// Broadcast real-time events\nexport const wsEvents = {\n  // Task updates\n  taskCreated: (hotelId: string, task: any) => \n    broadcastToHotel(hotelId, 'task:created', task),\n  \n  taskUpdated: (hotelId: string, task: any) => \n    broadcastToHotel(hotelId, 'task:updated', task),\n  \n  taskDeleted: (hotelId: string, taskId: string) => \n    broadcastToHotel(hotelId, 'task:deleted', { taskId }),\n\n  // Attendance updates\n  attendanceUpdated: (hotelId: string, attendance: any) => \n    broadcastToHotel(hotelId, 'attendance:updated', attendance),\n\n  // KOT order updates\n  kotOrderCreated: (hotelId: string, order: any) => \n    broadcastToRole(hotelId, ['kitchen_staff', 'bartender', 'barista', 'waiter', 'restaurant_bar_manager'], 'kot:created', order),\n  \n  kotOrderUpdated: (hotelId: string, order: any) => \n    broadcastToRole(hotelId, ['kitchen_staff', 'bartender', 'barista', 'waiter', 'restaurant_bar_manager'], 'kot:updated', order),\n\n  // Room status updates\n  roomStatusUpdated: (hotelId: string, room: any) => \n    broadcastToRole(hotelId, ['housekeeping_supervisor', 'housekeeping_staff', 'front_desk', 'manager'], 'room:updated', room),\n\n  // Stock/Inventory updates\n  stockUpdated: (hotelId: string, item: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'restaurant_bar_manager', 'housekeeping_supervisor'], 'stock:updated', item),\n\n  // Stock request updates\n  stockRequestCreated: (hotelId: string, request: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner'], 'stock-request:created', request),\n\n  stockRequestUpdated: (hotelId: string, request: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner'], 'stock-request:updated', request),\n\n  // Leave request updates\n  leaveRequestCreated: (hotelId: string, leaveRequest: any) => \n    broadcastToHotel(hotelId, 'leave:created', leaveRequest),\n\n  leaveRequestUpdated: (hotelId: string, leaveRequest: any) => \n    broadcastToHotel(hotelId, 'leave:updated', leaveRequest),\n\n  // Service updates\n  serviceCreated: (hotelId: string, service: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'service:created', service),\n\n  serviceUpdated: (hotelId: string, service: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'service:updated', service),\n\n  // Transaction updates\n  transactionCreated: (hotelId: string, transaction: any) => \n    broadcastToRole(hotelId, ['finance', 'cashier', 'manager', 'owner'], 'transaction:created', transaction),\n  \n  transactionUpdated: (hotelId: string, transaction: any) => \n    broadcastToRole(hotelId, ['finance', 'cashier', 'manager', 'owner'], 'transaction:updated', transaction),\n\n  // Maintenance request updates\n  maintenanceUpdated: (hotelId: string, request: any) => \n    broadcastToHotel(hotelId, 'maintenance:updated', request),\n\n  // Vehicle log updates\n  vehicleLogUpdated: (hotelId: string, log: any) => \n    broadcastToRole(hotelId, ['surveillance_officer', 'security_head', 'security_guard'], 'vehicle:updated', log),\n\n  // Guest updates\n  guestCreated: (hotelId: string, guest: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'guest:created', guest),\n  \n  guestUpdated: (hotelId: string, guest: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'guest:updated', guest),\n\n  // Room service charge updates\n  roomServiceChargeCreated: (hotelId: string, charge: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'room-service-charge:created', charge),\n  \n  roomServiceChargeDeleted: (hotelId: string, chargeId: string) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'room-service-charge:deleted', { chargeId }),\n\n  // Reservation updates\n  reservationCreated: (hotelId: string, reservation: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'reservation:created', reservation),\n  \n  reservationUpdated: (hotelId: string, reservation: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'reservation:updated', reservation),\n\n  // Hall booking updates\n  hallBookingCreated: (hotelId: string, booking: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'hall-booking:created', booking),\n  \n  hallBookingUpdated: (hotelId: string, booking: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'hall-booking:updated', booking),\n\n  // Payment updates\n  paymentCreated: (hotelId: string, payment: any) => \n    broadcastToRole(hotelId, ['finance', 'cashier', 'manager', 'owner', 'front_desk'], 'payment:created', payment),\n  \n  paymentUpdated: (hotelId: string, payment: any) => \n    broadcastToRole(hotelId, ['finance', 'cashier', 'manager', 'owner', 'front_desk'], 'payment:updated', payment),\n\n  // Inventory updates\n  inventoryCreated: (hotelId: string, item: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner'], 'inventory:created', item),\n  \n  inventoryUpdated: (hotelId: string, item: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner'], 'inventory:updated', item),\n  \n  inventoryDeleted: (hotelId: string, itemId: string) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner'], 'inventory:deleted', { itemId }),\n\n  // Inventory transaction updates\n  inventoryTransactionCreated: (hotelId: string, transaction: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner'], 'inventory-transaction:created', transaction),\n\n  // Wastage updates\n  wastageCreated: (hotelId: string, wastage: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner', 'restaurant_bar_manager'], 'wastage:created', wastage),\n  \n  wastageUpdated: (hotelId: string, wastage: any) => \n    broadcastToRole(hotelId, ['storekeeper', 'manager', 'owner', 'restaurant_bar_manager'], 'wastage:updated', wastage),\n\n  // User/Staff updates\n  userCreated: (hotelId: string, user: any) => \n    broadcastToRole(hotelId, ['manager', 'owner'], 'user:created', user),\n  \n  userUpdated: (hotelId: string, user: any) => \n    broadcastToRole(hotelId, ['manager', 'owner'], 'user:updated', user),\n\n  // Room and amenity updates\n  roomCreated: (hotelId: string, room: any) => \n    broadcastToRole(hotelId, ['front_desk', 'manager', 'owner'], 'room:created', room),\n  \n  amenityUpdated: (hotelId: string, amenity: any) => \n    broadcastToRole(hotelId, ['manager', 'owner'], 'amenity:updated', amenity),\n\n  // General notification\n  notification: (userId: string, notification: any) => \n    broadcastToUser(userId, 'notification', notification),\n};\n","size_bytes":9360},"tests/test-brutal.js":{"content":"#!/usr/bin/env node\n\n/**\n * BRUTAL API TESTING SUITE\n * Tests every endpoint, every edge case, every possible failure\n */\n\nconst BASE_URL = 'http://localhost:5000';\n\n// Test accounts from seed.ts\nconst TEST_ACCOUNTS = {\n  superadmin: { username: 'superadmin', password: 'superadmin' },\n  owner: { username: 'owner', password: 'owner123' },\n  manager: { username: 'manager', password: 'manager' },\n  waiter: { username: 'waiter', password: 'waiter' },\n  cashier: { username: 'cashier', password: 'cashier' },\n  frontdesk: { username: 'sita', password: 'sitasita' },\n  barista: { username: 'barista', password: 'barista' },\n};\n\nlet testResults = {\n  passed: 0,\n  failed: 0,\n  errors: []\n};\n\n// Color codes for terminal output\nconst colors = {\n  reset: '\\x1b[0m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  cyan: '\\x1b[36m',\n  magenta: '\\x1b[35m',\n};\n\nfunction log(msg, color = 'reset') {\n  console.log(`${colors[color]}${msg}${colors.reset}`);\n}\n\nfunction logSuccess(msg) {\n  log(`✓ ${msg}`, 'green');\n  testResults.passed++;\n}\n\nfunction logError(msg, details = '') {\n  log(`✗ ${msg}`, 'red');\n  if (details) log(`  Details: ${details}`, 'yellow');\n  testResults.failed++;\n  testResults.errors.push({ msg, details });\n}\n\nfunction logSection(msg) {\n  log(`\\n${'='.repeat(80)}`, 'cyan');\n  log(`  ${msg}`, 'cyan');\n  log('='.repeat(80), 'cyan');\n}\n\nasync function request(endpoint, options = {}) {\n  const url = `${BASE_URL}${endpoint}`;\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n  });\n  \n  const text = await response.text();\n  let data;\n  try {\n    data = text ? JSON.parse(text) : null;\n  } catch {\n    data = text;\n  }\n  \n  return { status: response.status, data, headers: response.headers };\n}\n\nasync function login(username, password) {\n  const response = await request('/api/login', {\n    method: 'POST',\n    body: JSON.stringify({ username, password }),\n    credentials: 'include',\n  });\n  return response;\n}\n\nasync function logout() {\n  return await request('/api/logout', {\n    method: 'POST',\n    credentials: 'include',\n  });\n}\n\n// =============================================================================\n// TEST 1: AUTHENTICATION BRUTAL TESTS\n// =============================================================================\n\nasync function testAuthentication() {\n  logSection('TEST 1: AUTHENTICATION BRUTAL TESTS');\n  \n  // Test 1.1: Login with wrong password\n  log('\\nTest 1.1: Login with WRONG password', 'blue');\n  const wrongPass = await login('owner', 'wrongpassword123');\n  if (wrongPass.status === 401) {\n    logSuccess('Wrong password correctly rejected');\n  } else {\n    logError('Wrong password not rejected!', `Status: ${wrongPass.status}`);\n  }\n  \n  // Test 1.2: Login with non-existent user\n  log('\\nTest 1.2: Login with NON-EXISTENT user', 'blue');\n  const fakeUser = await login('hacker', 'hackme');\n  if (fakeUser.status === 401) {\n    logSuccess('Non-existent user correctly rejected');\n  } else {\n    logError('Non-existent user not rejected!', `Status: ${fakeUser.status}`);\n  }\n  \n  // Test 1.3: SQL injection attempt\n  log('\\nTest 1.3: SQL INJECTION attempt', 'blue');\n  const sqlInject = await login(\"admin' OR '1'='1\", \"' OR '1'='1\");\n  if (sqlInject.status === 401) {\n    logSuccess('SQL injection attempt blocked');\n  } else {\n    logError('SQL INJECTION VULNERABILITY!', `Status: ${sqlInject.status}`);\n  }\n  \n  // Test 1.4: Empty credentials\n  log('\\nTest 1.4: EMPTY credentials', 'blue');\n  const empty = await login('', '');\n  if (empty.status === 400 || empty.status === 401) {\n    logSuccess('Empty credentials rejected');\n  } else {\n    logError('Empty credentials not rejected!', `Status: ${empty.status}`);\n  }\n  \n  // Test 1.5: Valid login\n  log('\\nTest 1.5: VALID login', 'blue');\n  const validLogin = await login('owner', 'owner123');\n  if (validLogin.status === 200 && validLogin.data.user) {\n    logSuccess('Valid login successful');\n  } else {\n    logError('Valid login failed!', `Status: ${validLogin.status}`);\n  }\n}\n\n// =============================================================================\n// TEST 2: AUTHORIZATION BRUTAL TESTS (18 secured endpoints)\n// =============================================================================\n\nasync function testAuthorization() {\n  logSection('TEST 2: AUTHORIZATION BRUTAL TESTS - Attack 18 Secured Endpoints');\n  \n  // First login as waiter (low privilege)\n  await login('waiter', 'waiter');\n  \n  // Get owner's hotel ID (should be blocked)\n  log('\\nTest 2.1: Accessing ANOTHER hotel\\'s data', 'blue');\n  \n  // Try to access hotel data with wrong hotel ID\n  const fakeHotelId = '00000000-0000-0000-0000-000000000000';\n  \n  const unauthorizedEndpoints = [\n    `/api/hotels/${fakeHotelId}/users`,\n    `/api/hotels/${fakeHotelId}/rooms`,\n    `/api/hotels/${fakeHotelId}/transactions`,\n    `/api/hotels/${fakeHotelId}/inventory`,\n    `/api/hotels/${fakeHotelId}/vendors`,\n    `/api/hotels/${fakeHotelId}/restaurant-tables`,\n    `/api/hotels/${fakeHotelId}/taxes`,\n    `/api/hotels/${fakeHotelId}/vouchers`,\n    `/api/hotels/${fakeHotelId}/maintenance-requests`,\n    `/api/hotels/${fakeHotelId}/vehicle-logs`,\n    `/api/hotels/${fakeHotelId}/room-service-orders`,\n    `/api/hotels/${fakeHotelId}/hall-bookings`,\n    `/api/hotels/${fakeHotelId}/meal-plans`,\n    `/api/hotels/${fakeHotelId}/menu-items`,\n    `/api/hotels/${fakeHotelId}/menu-categories`,\n  ];\n  \n  for (const endpoint of unauthorizedEndpoints) {\n    const response = await request(endpoint, {\n      method: 'GET',\n      credentials: 'include',\n    });\n    \n    if (response.status === 403) {\n      logSuccess(`${endpoint} - Access denied correctly`);\n    } else if (response.status === 404) {\n      logSuccess(`${endpoint} - Not found (acceptable)`);\n    } else {\n      logError(`${endpoint} - SECURITY BREACH!`, `Status: ${response.status}, got data: ${JSON.stringify(response.data).substring(0, 100)}`);\n    }\n  }\n  \n  await logout();\n}\n\n// =============================================================================\n// TEST 3: INPUT VALIDATION BRUTAL TESTS\n// =============================================================================\n\nasync function testInputValidation() {\n  logSection('TEST 3: INPUT VALIDATION BRUTAL TESTS');\n  \n  await login('manager', 'manager');\n  \n  // Test 3.1: XSS attempt in transaction description\n  log('\\nTest 3.1: XSS INJECTION in transaction', 'blue');\n  const xss = await request('/api/transactions', {\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify({\n      amount: 1000,\n      transactionType: 'cash',\n      category: 'room',\n      description: '<script>alert(\"XSS\")</script>',\n      paymentMethod: 'cash',\n    }),\n  });\n  \n  if (xss.status === 400 || (xss.status === 201 && !xss.data.description?.includes('<script>'))) {\n    logSuccess('XSS attempt sanitized or blocked');\n  } else {\n    logError('XSS VULNERABILITY!', `Description: ${xss.data?.description}`);\n  }\n  \n  // Test 3.2: Negative amount\n  log('\\nTest 3.2: NEGATIVE amount in transaction', 'blue');\n  const negative = await request('/api/transactions', {\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify({\n      amount: -5000,\n      transactionType: 'cash',\n      category: 'room',\n      description: 'Negative amount test',\n      paymentMethod: 'cash',\n    }),\n  });\n  \n  if (negative.status === 400) {\n    logSuccess('Negative amount rejected');\n  } else {\n    logError('NEGATIVE AMOUNT ACCEPTED!', `Status: ${negative.status}`);\n  }\n  \n  // Test 3.3: Extremely large number\n  log('\\nTest 3.3: EXTREME number (overflow)', 'blue');\n  const overflow = await request('/api/transactions', {\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify({\n      amount: 999999999999999999999,\n      transactionType: 'cash',\n      category: 'room',\n      description: 'Overflow test',\n      paymentMethod: 'cash',\n    }),\n  });\n  \n  if (overflow.status === 400) {\n    logSuccess('Overflow prevented');\n  } else if (overflow.status === 201) {\n    log('  Warning: Large number accepted, check if handled correctly', 'yellow');\n  }\n  \n  // Test 3.4: Missing required fields\n  log('\\nTest 3.4: MISSING required fields', 'blue');\n  const missing = await request('/api/transactions', {\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify({\n      amount: 100,\n      // Missing transactionType, category, etc.\n    }),\n  });\n  \n  if (missing.status === 400) {\n    logSuccess('Missing fields rejected');\n  } else {\n    logError('MISSING FIELDS NOT VALIDATED!', `Status: ${missing.status}`);\n  }\n  \n  await logout();\n}\n\n// =============================================================================\n// TEST 4: VOID TRANSACTION BRUTAL TESTS\n// =============================================================================\n\nasync function testVoidTransaction() {\n  logSection('TEST 4: VOID TRANSACTION BRUTAL TESTS');\n  \n  await login('manager', 'manager');\n  \n  // Test 4.1: Void with short reason (< 15 chars)\n  log('\\nTest 4.1: Void with SHORT reason (< 15 chars)', 'blue');\n  \n  // First create a transaction\n  const trans = await request('/api/transactions', {\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify({\n      amount: 500,\n      transactionType: 'cash',\n      category: 'room',\n      description: 'Test transaction for void',\n      paymentMethod: 'cash',\n    }),\n  });\n  \n  if (trans.status === 201) {\n    const voidShort = await request(`/api/transactions/${trans.data.id}/void`, {\n      method: 'POST',\n      credentials: 'include',\n      body: JSON.stringify({\n        reason: 'short', // Only 5 chars\n      }),\n    });\n    \n    if (voidShort.status === 400) {\n      logSuccess('Short void reason rejected (< 15 chars)');\n    } else {\n      logError('SHORT VOID REASON ACCEPTED!', `Status: ${voidShort.status}`);\n    }\n    \n    // Test 4.2: Valid void\n    log('\\nTest 4.2: VALID void with proper reason', 'blue');\n    const voidValid = await request(`/api/transactions/${trans.data.id}/void`, {\n      method: 'POST',\n      credentials: 'include',\n      body: JSON.stringify({\n        reason: 'This is a valid reason for voiding this transaction with more than 15 characters',\n      }),\n    });\n    \n    if (voidValid.status === 200) {\n      logSuccess('Valid void successful');\n      \n      // Test 4.3: Double void attempt\n      log('\\nTest 4.3: DOUBLE void attempt', 'blue');\n      const doubleVoid = await request(`/api/transactions/${trans.data.id}/void`, {\n        method: 'POST',\n        credentials: 'include',\n        body: JSON.stringify({\n          reason: 'Trying to void an already voided transaction - should fail',\n        }),\n      });\n      \n      if (doubleVoid.status === 400) {\n        logSuccess('Double void prevented');\n      } else {\n        logError('DOUBLE VOID ALLOWED!', `Status: ${doubleVoid.status}`);\n      }\n    }\n  }\n  \n  await logout();\n  \n  // Test 4.4: Void as non-manager\n  log('\\nTest 4.4: Void as WAITER (non-manager)', 'blue');\n  await login('waiter', 'waiter');\n  \n  const voidUnauth = await request(`/api/transactions/${trans.data?.id}/void`, {\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify({\n      reason: 'Waiter trying to void - should be rejected by role check',\n    }),\n  });\n  \n  if (voidUnauth.status === 403) {\n    logSuccess('Non-manager void rejected');\n  } else {\n    logError('NON-MANAGER CAN VOID!', `Status: ${voidUnauth.status}`);\n  }\n  \n  await logout();\n}\n\n// =============================================================================\n// TEST 5: CONCURRENT ACCESS TESTS\n// =============================================================================\n\nasync function testConcurrency() {\n  logSection('TEST 5: CONCURRENT ACCESS & RACE CONDITION TESTS');\n  \n  await login('cashier', 'cashier');\n  \n  // Test 5.1: Multiple simultaneous voucher redemptions\n  log('\\nTest 5.1: RACE CONDITION - Simultaneous voucher redemptions', 'blue');\n  \n  // This would need a voucher ID - skip if not available\n  log('  ℹ Voucher race condition test requires existing voucher - manual test needed', 'yellow');\n  \n  await logout();\n}\n\n// =============================================================================\n// MAIN TEST RUNNER\n// =============================================================================\n\nasync function runAllTests() {\n  log('\\n🔥🔥🔥 BRUTAL API TESTING SUITE 🔥🔥🔥\\n', 'magenta');\n  log('Attacking the system from every angle...\\n', 'yellow');\n  \n  try {\n    await testAuthentication();\n    await testAuthorization();\n    await testInputValidation();\n    await testVoidTransaction();\n    await testConcurrency();\n    \n    // Final summary\n    logSection('TEST SUMMARY');\n    log(`\\nTotal Tests: ${testResults.passed + testResults.failed}`, 'cyan');\n    log(`Passed: ${testResults.passed}`, 'green');\n    log(`Failed: ${testResults.failed}`, 'red');\n    \n    if (testResults.errors.length > 0) {\n      log('\\n❌ CRITICAL ISSUES FOUND:', 'red');\n      testResults.errors.forEach((err, i) => {\n        log(`\\n${i + 1}. ${err.msg}`, 'red');\n        if (err.details) log(`   ${err.details}`, 'yellow');\n      });\n    } else {\n      log('\\n✅ ALL TESTS PASSED! System is SOLID! 💪', 'green');\n    }\n    \n    process.exit(testResults.failed > 0 ? 1 : 0);\n    \n  } catch (error) {\n    log(`\\n💥 FATAL ERROR: ${error.message}`, 'red');\n    console.error(error);\n    process.exit(1);\n  }\n}\n\nrunAllTests();\n","size_bytes":13543},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: number, currency: string = 'NPR'): string {\n  const currencySymbol = currency === 'NPR' || !currency ? 'रु' : 'रु';\n  \n  const formatted = new Intl.NumberFormat('en-NP', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n  \n  return `${currencySymbol}${formatted}`;\n}\n\nexport function formatDate(date: string | Date): string {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(new Date(date));\n}\n\nexport function formatDateTime(date: string | Date): string {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(new Date(date));\n}\n\nexport function capitalizeWords(str: string): string {\n  return str.replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nexport function formatRoleName(roleName: string): string {\n  return roleName.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nexport function getStatusColor(status: string): string {\n  switch (status.toLowerCase()) {\n    case 'pending':\n      return 'bg-yellow-100 text-yellow-800';\n    case 'performing':\n    case 'in_progress':\n      return 'bg-blue-100 text-blue-800';\n    case 'pending_review':\n      return 'bg-orange-100 text-orange-800';\n    case 'completed':\n    case 'ready':\n      return 'bg-green-100 text-green-800';\n    case 'cancelled':\n    case 'failed':\n      return 'bg-red-100 text-red-800';\n    case 'open':\n      return 'bg-gray-100 text-gray-800';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n}\n\nexport function generateRandomId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(null, args), delay);\n  };\n}\n","size_bytes":2217},"client/src/pages/dashboard/guests.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Users, UserPlus, Search, Edit, Trash2, Phone, Mail, MapPin, CalendarIcon, IdCard } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\nimport { formatDate, cn } from \"@/lib/utils\";\nimport { insertGuestSchema, type Guest } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { COUNTRIES } from \"@/lib/constants\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\n\nconst guestFormSchema = insertGuestSchema.extend({\n  dateOfBirth: z.date().optional().nullable()\n});\n\ntype GuestFormData = z.infer<typeof guestFormSchema>;\n\nexport default function GuestsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { confirm } = useConfirmDialog();\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedGuest, setSelectedGuest] = useState<Guest | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [dateOfBirth, setDateOfBirth] = useState<Date | undefined>();\n  const [openCountryAdd, setOpenCountryAdd] = useState(false);\n  const [openCountryEdit, setOpenCountryEdit] = useState(false);\n\n  const { data: guests = [], isLoading } = useQuery<Guest[]>({\n    queryKey: [\"/api/hotels/current/guests\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Listen for real-time guest updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/guests\"],\n    refetchInterval: 3000,\n    events: ['guest:created', 'guest:updated']\n  });\n\n  const guestForm = useForm<GuestFormData>({\n    resolver: zodResolver(guestFormSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      city: \"\",\n      country: \"\",\n      idType: \"\",\n      idNumber: \"\",\n      nationality: \"\",\n      notes: \"\",\n      dateOfBirth: null\n    }\n  });\n\n  const createGuestMutation = useMutation({\n    mutationFn: async (data: GuestFormData) => {\n      const formattedData = {\n        ...data,\n        hotelId: user?.hotelId,\n        createdBy: user?.id,\n        dateOfBirth: dateOfBirth || null\n      };\n      await apiRequest(\"POST\", \"/api/hotels/current/guests\", formattedData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/guests\"] });\n      toast({ title: \"Guest added successfully\" });\n      guestForm.reset();\n      setDateOfBirth(undefined);\n      setIsAddModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to add guest\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateGuestMutation = useMutation({\n    mutationFn: async (data: GuestFormData) => {\n      if (!selectedGuest) return;\n      const formattedData = {\n        ...data,\n        dateOfBirth: dateOfBirth || null\n      };\n      await apiRequest(\"PUT\", `/api/hotels/current/guests/${selectedGuest.id}`, formattedData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/guests\"] });\n      toast({ title: \"Guest updated successfully\" });\n      guestForm.reset();\n      setDateOfBirth(undefined);\n      setSelectedGuest(null);\n      setIsEditModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update guest\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteGuestMutation = useMutation({\n    mutationFn: async (guestId: string) => {\n      await apiRequest(\"DELETE\", `/api/hotels/current/guests/${guestId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/guests\"] });\n      toast({ title: \"Guest deleted successfully\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to delete guest\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleEditGuest = (guest: Guest) => {\n    setSelectedGuest(guest);\n    guestForm.reset({\n      firstName: guest.firstName,\n      lastName: guest.lastName,\n      email: guest.email || \"\",\n      phone: guest.phone,\n      address: guest.address || \"\",\n      city: guest.city || \"\",\n      country: guest.country || \"\",\n      idType: guest.idType || \"\",\n      idNumber: guest.idNumber || \"\",\n      nationality: guest.nationality || \"\",\n      notes: guest.notes || \"\",\n      dateOfBirth: guest.dateOfBirth ? new Date(guest.dateOfBirth) : null\n    });\n    if (guest.dateOfBirth) {\n      setDateOfBirth(new Date(guest.dateOfBirth));\n    }\n    setIsEditModalOpen(true);\n  };\n\n  const handleDeleteGuest = async (guestId: string) => {\n    await confirm({\n      title: \"Delete Guest\",\n      description: \"Are you sure you want to delete this guest?\",\n      confirmText: \"Delete\",\n      cancelText: \"Cancel\",\n      variant: \"destructive\",\n      onConfirm: () => {\n        deleteGuestMutation.mutate(guestId);\n      }\n    });\n  };\n\n  const filteredGuests = guests.filter(guest => {\n    const search = searchQuery.toLowerCase();\n    return (\n      guest.firstName.toLowerCase().includes(search) ||\n      guest.lastName.toLowerCase().includes(search) ||\n      guest.phone.toLowerCase().includes(search) ||\n      (guest.email && guest.email.toLowerCase().includes(search))\n    );\n  });\n\n  return (\n    <DashboardLayout title=\"Guest Management\">\n      <div className=\"space-y-6\">\n        <Card className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm opacity-90\">Total Guests</p>\n                <p className=\"text-4xl font-bold mt-2\">{guests.length}</p>\n                <p className=\"text-sm opacity-90 mt-1\">Registered in the system</p>\n              </div>\n              <Users className=\"h-16 w-16 opacity-50\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n              <CardTitle>All Guests</CardTitle>\n              <Button onClick={() => setIsAddModalOpen(true)} data-testid=\"button-add-guest\">\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add Guest\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search guests by name, phone, or email...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-guests\"\n                />\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading guests...</div>\n            ) : filteredGuests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {searchQuery ? \"No guests found matching your search\" : \"No guests registered yet\"}\n              </div>\n            ) : (\n              <div className=\"grid gap-4\">\n                {filteredGuests.map((guest) => (\n                  <Card key={guest.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex flex-col md:flex-row items-start justify-between gap-4\">\n                        <div className=\"flex-1 w-full\">\n                          <h3 className=\"text-lg font-semibold\" data-testid={`text-guest-name-${guest.id}`}>\n                            {guest.firstName} {guest.lastName}\n                          </h3>\n                          <div className=\"mt-3 grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                            {guest.phone && (\n                              <div className=\"flex items-center gap-2\">\n                                <Phone className=\"h-4 w-4 flex-shrink-0\" />\n                                <span className=\"truncate\">{guest.phone}</span>\n                              </div>\n                            )}\n                            {guest.email && (\n                              <div className=\"flex items-center gap-2\">\n                                <Mail className=\"h-4 w-4 flex-shrink-0\" />\n                                <span className=\"truncate\">{guest.email}</span>\n                              </div>\n                            )}\n                            {guest.city && (\n                              <div className=\"flex items-center gap-2\">\n                                <MapPin className=\"h-4 w-4 flex-shrink-0\" />\n                                <span className=\"truncate\">{guest.city}{guest.country && `, ${guest.country}`}</span>\n                              </div>\n                            )}\n                            {guest.idNumber && (\n                              <div className=\"flex items-center gap-2\">\n                                <IdCard className=\"h-4 w-4 flex-shrink-0\" />\n                                <span className=\"truncate\">{guest.idType || \"ID\"}: {guest.idNumber}</span>\n                              </div>\n                            )}\n                          </div>\n                          {guest.notes && (\n                            <div className=\"mt-2 text-sm text-muted-foreground\">\n                              <span className=\"font-medium\">Notes:</span> {guest.notes}\n                            </div>\n                          )}\n                          <div className=\"mt-2 text-xs text-muted-foreground\">\n                            Added on {guest.createdAt ? formatDate(guest.createdAt) : 'N/A'}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2 w-full md:w-auto\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleEditGuest(guest)}\n                            data-testid={`button-edit-guest-${guest.id}`}\n                            className=\"flex-1 md:flex-initial\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteGuest(guest.id)}\n                            data-testid={`button-delete-guest-${guest.id}`}\n                            className=\"flex-1 md:flex-initial\"\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add New Guest</DialogTitle>\n            </DialogHeader>\n            <Form {...guestForm}>\n              <form onSubmit={guestForm.handleSubmit((data) => createGuestMutation.mutate(data))} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"John\" data-testid=\"input-first-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"Doe\" data-testid=\"input-last-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone *</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"+977-9800000000\" data-testid=\"input-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} type=\"email\" placeholder=\"john@example.com\" data-testid=\"input-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={guestForm.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || \"\"} placeholder=\"Street address\" data-testid=\"input-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"city\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>City</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"Kathmandu\" data-testid=\"input-city\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"country\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-col\">\n                        <FormLabel>Country</FormLabel>\n                        <Popover open={openCountryAdd} onOpenChange={setOpenCountryAdd}>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant=\"outline\"\n                                role=\"combobox\"\n                                className={cn(\n                                  \"w-full justify-between\",\n                                  !field.value && \"text-muted-foreground\"\n                                )}\n                                data-testid=\"select-country\"\n                              >\n                                {field.value\n                                  ? COUNTRIES.find((country) => country.name === field.value)\n                                    ? `${COUNTRIES.find((country) => country.name === field.value)?.flag} ${field.value}`\n                                    : \"Select country\"\n                                  : \"Select country\"}\n                                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0\" align=\"start\">\n                            <Command>\n                              <CommandInput placeholder=\"Type to search countries...\" />\n                              <CommandList>\n                                <CommandEmpty>No country found.</CommandEmpty>\n                                <CommandGroup>\n                                  {COUNTRIES.map((country) => (\n                                    <CommandItem\n                                      key={country.code}\n                                      value={country.name}\n                                      onSelect={() => {\n                                        field.onChange(country.name);\n                                        setOpenCountryAdd(false);\n                                      }}\n                                    >\n                                      <Check\n                                        className={cn(\n                                          \"mr-2 h-4 w-4\",\n                                          country.name === field.value\n                                            ? \"opacity-100\"\n                                            : \"opacity-0\"\n                                        )}\n                                      />\n                                      <span className=\"text-lg mr-2\">{country.flag}</span>\n                                      {country.name}\n                                    </CommandItem>\n                                  ))}\n                                </CommandGroup>\n                              </CommandList>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"idType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || undefined}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-id-type\">\n                              <SelectValue placeholder=\"Select ID type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"passport\">Passport</SelectItem>\n                            <SelectItem value=\"national_id\">National ID</SelectItem>\n                            <SelectItem value=\"driving_license\">Driving License</SelectItem>\n                            <SelectItem value=\"citizenship\">Citizenship</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"idNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"ID number\" data-testid=\"input-id-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"nationality\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nationality</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"Nepali\" data-testid=\"input-nationality\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormItem>\n                    <FormLabel>Date of Birth</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className={cn(\n                              \"w-full pl-3 text-left font-normal\",\n                              !dateOfBirth && \"text-muted-foreground\"\n                            )}\n                            data-testid=\"button-select-dob\"\n                          >\n                            {dateOfBirth ? format(dateOfBirth, \"PPP\") : <span>Pick a date</span>}\n                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={dateOfBirth}\n                          onSelect={setDateOfBirth}\n                          disabled={(date) => date > new Date()}\n                          initialFocus\n                          captionLayout=\"dropdown-buttons\"\n                          fromYear={1920}\n                          toYear={new Date().getFullYear()}\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </FormItem>\n                </div>\n\n                <FormField\n                  control={guestForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} value={field.value || \"\"} placeholder=\"Additional notes about the guest\" rows={3} data-testid=\"input-notes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex flex-col sm:flex-row gap-2\">\n                  <Button type=\"submit\" className=\"flex-1\" disabled={createGuestMutation.isPending} data-testid=\"button-submit-guest\">\n                    {createGuestMutation.isPending ? \"Adding...\" : \"Add Guest\"}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" className=\"flex-1\" onClick={() => setIsAddModalOpen(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Guest</DialogTitle>\n            </DialogHeader>\n            <Form {...guestForm}>\n              <form onSubmit={guestForm.handleSubmit((data) => updateGuestMutation.mutate(data))} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"John\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"Doe\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone *</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"+977-9800000000\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} type=\"email\" placeholder=\"john@example.com\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={guestForm.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || \"\"} placeholder=\"Street address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"city\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>City</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"Kathmandu\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"country\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-col\">\n                        <FormLabel>Country</FormLabel>\n                        <Popover open={openCountryEdit} onOpenChange={setOpenCountryEdit}>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant=\"outline\"\n                                role=\"combobox\"\n                                className={cn(\n                                  \"w-full justify-between\",\n                                  !field.value && \"text-muted-foreground\"\n                                )}\n                              >\n                                {field.value\n                                  ? COUNTRIES.find((country) => country.name === field.value)\n                                    ? `${COUNTRIES.find((country) => country.name === field.value)?.flag} ${field.value}`\n                                    : \"Select country\"\n                                  : \"Select country\"}\n                                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0\" align=\"start\">\n                            <Command>\n                              <CommandInput placeholder=\"Type to search countries...\" />\n                              <CommandList>\n                                <CommandEmpty>No country found.</CommandEmpty>\n                                <CommandGroup>\n                                  {COUNTRIES.map((country) => (\n                                    <CommandItem\n                                      key={country.code}\n                                      value={country.name}\n                                      onSelect={() => {\n                                        field.onChange(country.name);\n                                        setOpenCountryEdit(false);\n                                      }}\n                                    >\n                                      <Check\n                                        className={cn(\n                                          \"mr-2 h-4 w-4\",\n                                          country.name === field.value\n                                            ? \"opacity-100\"\n                                            : \"opacity-0\"\n                                        )}\n                                      />\n                                      <span className=\"text-lg mr-2\">{country.flag}</span>\n                                      {country.name}\n                                    </CommandItem>\n                                  ))}\n                                </CommandGroup>\n                              </CommandList>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"idType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || undefined}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select ID type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"passport\">Passport</SelectItem>\n                            <SelectItem value=\"national_id\">National ID</SelectItem>\n                            <SelectItem value=\"driving_license\">Driving License</SelectItem>\n                            <SelectItem value=\"citizenship\">Citizenship</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={guestForm.control}\n                    name=\"idNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"ID number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={guestForm.control}\n                    name=\"nationality\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nationality</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"Nepali\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormItem>\n                    <FormLabel>Date of Birth</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className={cn(\n                              \"w-full pl-3 text-left font-normal\",\n                              !dateOfBirth && \"text-muted-foreground\"\n                            )}\n                          >\n                            {dateOfBirth ? format(dateOfBirth, \"PPP\") : <span>Pick a date</span>}\n                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={dateOfBirth}\n                          onSelect={setDateOfBirth}\n                          disabled={(date) => date > new Date()}\n                          initialFocus\n                          captionLayout=\"dropdown-buttons\"\n                          fromYear={1920}\n                          toYear={new Date().getFullYear()}\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </FormItem>\n                </div>\n\n                <FormField\n                  control={guestForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} value={field.value || \"\"} placeholder=\"Additional notes about the guest\" rows={3} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex flex-col sm:flex-row gap-2\">\n                  <Button type=\"submit\" className=\"flex-1\" disabled={updateGuestMutation.isPending}>\n                    {updateGuestMutation.isPending ? \"Updating...\" : \"Update Guest\"}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" className=\"flex-1\" onClick={() => setIsEditModalOpen(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":37496},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/dashboard/storekeeper/duty-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, LogIn, LogOut, Calendar } from \"lucide-react\";\nimport { formatDateTime } from \"@/lib/utils\";\n\nexport default function StorekeeperDutyStatus() {\n  const { data: attendanceStatus } = useQuery<any>({\n    queryKey: [\"/api/attendance/status\"],\n    refetchInterval: 3000\n  });\n\n  const { data: attendanceHistory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/history\"],\n    refetchInterval: 3000\n  });\n\n  const isOnDuty = attendanceStatus?.isOnDuty || false;\n  const activeAttendance = attendanceStatus?.attendance;\n  const recentAttendance = attendanceHistory.slice(0, 5);\n\n  return (\n    <DashboardLayout title=\"Duty Status\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>My Duty Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"h-8 w-8 text-blue-500\" />\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Current Status</h4>\n                    <p className=\"text-sm text-muted-foreground\">Your duty status for today</p>\n                  </div>\n                </div>\n                <Badge \n                  className={isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} \n                  variant=\"secondary\"\n                  data-testid=\"current-duty-status\"\n                >\n                  {isOnDuty ? 'On Duty' : 'Off Duty'}\n                </Badge>\n              </div>\n\n              {activeAttendance && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <LogIn className=\"h-6 w-6 text-green-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Clock In Time</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-time\">\n                            {formatDateTime(activeAttendance.clockInTime)}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Calendar className=\"h-6 w-6 text-blue-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Location</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-location\">\n                            {activeAttendance.clockInLocation || 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n                    <strong>Note:</strong> Use the duty toggle in the top navigation bar to clock in or clock out. \n                    When on duty, you can manage inventory and complete assigned tasks.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Attendance History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {recentAttendance.length === 0 ? (\n              <p className=\"text-muted-foreground\">No attendance records found</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentAttendance.map((record: any, index: number) => (\n                  <div key={record.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`attendance-record-${index}`}>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <LogIn className=\"h-4 w-4 text-green-500\" />\n                        <p className=\"text-sm font-medium text-foreground\">{formatDateTime(record.clockInTime)}</p>\n                      </div>\n                      {record.clockOutTime && (\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <LogOut className=\"h-4 w-4 text-gray-500\" />\n                          <p className=\"text-sm text-muted-foreground\">{formatDateTime(record.clockOutTime)}</p>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={record.status === 'active' ? 'default' : 'secondary'}>\n                        {record.status === 'active' ? 'Active' : 'Completed'}\n                      </Badge>\n                      {record.totalHours && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">{parseFloat(record.totalHours).toFixed(2)} hours</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":5829},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/dashboard/owner/leave-policies.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Pencil, Trash2, Save, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useConfirmDialog } from \"@/hooks/use-confirm-dialog\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\ninterface LeavePolicy {\n  id: string;\n  hotelId: string;\n  leaveType: string;\n  displayName: string;\n  defaultDays: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function LeavePoliciesPage() {\n  const { toast } = useToast();\n  const { confirm } = useConfirmDialog();\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [isCreating, setIsCreating] = useState(false);\n  const [formData, setFormData] = useState({\n    leaveType: \"\",\n    displayName: \"\",\n    defaultDays: 0,\n    isActive: true\n  });\n\n  const { data: hotel } = useQuery<any>({\n    queryKey: [\"/api/hotels/current\"],\n    refetchInterval: 3000\n  });\n\n  const { data: policies = [], isLoading } = useQuery<LeavePolicy[]>({\n    queryKey: [\"/api/hotels/current/leave-policies\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates for leave policy changes\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/leave-policies\"],\n    refetchInterval: 3000,\n    events: ['leave-policy:created', 'leave-policy:updated', 'leave-policy:deleted']\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/leave-policies\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-policies\"] });\n      toast({ title: \"Success\", description: \"Leave policy created successfully\" });\n      setIsCreating(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create leave policy\", variant: \"destructive\" });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/leave-policies/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-policies\"] });\n      toast({ title: \"Success\", description: \"Leave policy updated successfully\" });\n      setEditingId(null);\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update leave policy\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/leave-policies/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-policies\"] });\n      toast({ title: \"Success\", description: \"Leave policy deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete leave policy\", variant: \"destructive\" });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      leaveType: \"\",\n      displayName: \"\",\n      defaultDays: 0,\n      isActive: true\n    });\n  };\n\n  const handleCreate = () => {\n    if (!formData.leaveType || !formData.displayName || formData.defaultDays <= 0) {\n      toast({ title: \"Validation Error\", description: \"Please fill all fields correctly\", variant: \"destructive\" });\n      return;\n    }\n    createMutation.mutate(formData);\n  };\n\n  const handleUpdate = (id: string) => {\n    if (!formData.displayName || formData.defaultDays <= 0) {\n      toast({ title: \"Validation Error\", description: \"Please fill all fields correctly\", variant: \"destructive\" });\n      return;\n    }\n    updateMutation.mutate({ \n      id, \n      data: {\n        displayName: formData.displayName,\n        defaultDays: formData.defaultDays,\n        isActive: formData.isActive\n      }\n    });\n  };\n\n  const startEdit = (policy: LeavePolicy) => {\n    setEditingId(policy.id);\n    setFormData({\n      leaveType: policy.leaveType,\n      displayName: policy.displayName,\n      defaultDays: policy.defaultDays,\n      isActive: policy.isActive\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    setIsCreating(false);\n    resetForm();\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Leave Policies\" currentHotel={hotel?.name}>\n        <div className=\"flex items-center justify-center h-64\">\n          <p className=\"text-muted-foreground\">Loading leave policies...</p>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Leave Policies\" currentHotel={hotel?.name}>\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Leave Policy Configuration</CardTitle>\n                <CardDescription>\n                  Configure annual leave days for different leave types. These settings will apply to all staff members.\n                </CardDescription>\n              </div>\n              {!isCreating && (\n                <Button onClick={() => setIsCreating(true)} data-testid=\"button-add-policy\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Leave Policy\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {isCreating && (\n                <Card className=\"border-2 border-primary\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"new-leave-type\">Leave Type</Label>\n                        <Input\n                          id=\"new-leave-type\"\n                          placeholder=\"e.g., sick, vacation\"\n                          value={formData.leaveType}\n                          onChange={(e) => setFormData({ ...formData, leaveType: e.target.value.toLowerCase() })}\n                          data-testid=\"input-leave-type\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"new-display-name\">Display Name</Label>\n                        <Input\n                          id=\"new-display-name\"\n                          placeholder=\"e.g., Sick Leave\"\n                          value={formData.displayName}\n                          onChange={(e) => setFormData({ ...formData, displayName: e.target.value })}\n                          data-testid=\"input-display-name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"new-default-days\">Annual Days</Label>\n                        <Input\n                          id=\"new-default-days\"\n                          type=\"number\"\n                          min=\"0\"\n                          placeholder=\"e.g., 15\"\n                          value={formData.defaultDays || \"\"}\n                          onChange={(e) => setFormData({ ...formData, defaultDays: parseInt(e.target.value) || 0 })}\n                          data-testid=\"input-default-days\"\n                        />\n                      </div>\n                      <div className=\"flex items-end gap-2\">\n                        <Button \n                          onClick={handleCreate} \n                          disabled={createMutation.isPending}\n                          data-testid=\"button-save-new-policy\"\n                        >\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          Save\n                        </Button>\n                        <Button variant=\"outline\" onClick={cancelEdit} data-testid=\"button-cancel-new\">\n                          <X className=\"h-4 w-4 mr-2\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {policies.length === 0 && !isCreating ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>No leave policies configured yet.</p>\n                  <p className=\"text-sm\">Click \"Add Leave Policy\" to create your first policy.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {policies.map((policy) => (\n                    <Card key={policy.id} className={editingId === policy.id ? \"border-2 border-primary\" : \"\"}>\n                      <CardContent className=\"pt-6\">\n                        {editingId === policy.id ? (\n                          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label>Leave Type</Label>\n                              <Input value={policy.leaveType} disabled />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor={`edit-display-name-${policy.id}`}>Display Name</Label>\n                              <Input\n                                id={`edit-display-name-${policy.id}`}\n                                value={formData.displayName}\n                                onChange={(e) => setFormData({ ...formData, displayName: e.target.value })}\n                                data-testid={`input-edit-display-name-${policy.id}`}\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor={`edit-default-days-${policy.id}`}>Annual Days</Label>\n                              <Input\n                                id={`edit-default-days-${policy.id}`}\n                                type=\"number\"\n                                min=\"0\"\n                                value={formData.defaultDays || \"\"}\n                                onChange={(e) => setFormData({ ...formData, defaultDays: parseInt(e.target.value) || 0 })}\n                                data-testid={`input-edit-days-${policy.id}`}\n                              />\n                            </div>\n                            <div className=\"flex items-end gap-2\">\n                              <Button \n                                onClick={() => handleUpdate(policy.id)} \n                                disabled={updateMutation.isPending}\n                                data-testid={`button-save-${policy.id}`}\n                              >\n                                <Save className=\"h-4 w-4 mr-2\" />\n                                Save\n                              </Button>\n                              <Button variant=\"outline\" onClick={cancelEdit} data-testid={`button-cancel-${policy.id}`}>\n                                <X className=\"h-4 w-4 mr-2\" />\n                                Cancel\n                              </Button>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1 grid grid-cols-1 md:grid-cols-4 gap-4\">\n                              <div>\n                                <p className=\"text-sm font-medium text-muted-foreground\">Leave Type</p>\n                                <p className=\"font-medium\" data-testid={`text-leave-type-${policy.id}`}>{policy.leaveType}</p>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-muted-foreground\">Display Name</p>\n                                <p className=\"font-medium\" data-testid={`text-display-name-${policy.id}`}>{policy.displayName}</p>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-muted-foreground\">Annual Days</p>\n                                <p className=\"font-medium\" data-testid={`text-days-${policy.id}`}>{policy.defaultDays} days</p>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                                <div className=\"flex items-center gap-2\">\n                                  <Switch\n                                    checked={policy.isActive}\n                                    onCheckedChange={(checked) => {\n                                      updateMutation.mutate({ \n                                        id: policy.id, \n                                        data: { isActive: checked }\n                                      });\n                                    }}\n                                    data-testid={`switch-active-${policy.id}`}\n                                  />\n                                  <span className=\"text-sm\" data-testid={`text-status-${policy.id}`}>\n                                    {policy.isActive ? \"Active\" : \"Inactive\"}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2 ml-4\">\n                              <Button \n                                variant=\"outline\" \n                                size=\"icon\" \n                                onClick={() => startEdit(policy)}\n                                data-testid={`button-edit-${policy.id}`}\n                              >\n                                <Pencil className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"outline\" \n                                size=\"icon\" \n                                onClick={async () => {\n                                  await confirm({\n                                    title: \"Delete Leave Policy\",\n                                    description: \"Are you sure you want to delete this leave policy?\",\n                                    confirmText: \"Delete\",\n                                    cancelText: \"Cancel\",\n                                    variant: \"destructive\",\n                                    onConfirm: () => {\n                                      deleteMutation.mutate(policy.id);\n                                    }\n                                  });\n                                }}\n                                disabled={deleteMutation.isPending}\n                                data-testid={`button-delete-${policy.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>How Leave Policies Work</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3 text-sm text-muted-foreground\">\n            <p>• <strong>Leave Type:</strong> A unique identifier for the leave category (e.g., sick, vacation, personal)</p>\n            <p>• <strong>Display Name:</strong> The user-friendly name shown to staff (e.g., \"Sick Leave\", \"Annual Vacation\")</p>\n            <p>• <strong>Annual Days:</strong> The number of leave days allocated to each staff member per year</p>\n            <p>• <strong>Status:</strong> Active policies are available for staff to use; inactive policies are hidden</p>\n            <p>• Leave balances are automatically initialized for all active staff members at the beginning of each year</p>\n            <p>• Changes to leave policies will apply to new leave balance allocations in future years</p>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":16712},"client/src/pages/dashboard/leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, Clock, User, CheckCircle, XCircle, AlertCircle, ArrowLeft, Plus } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function LeaveRequests() {\n  const [, setLocation] = useLocation();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newRequest, setNewRequest] = useState({\n    leaveType: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\"\n  });\n\n  const queryClient = useQueryClient();\n\n  const { data: myRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/leave-requests/my-requests\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/leave-requests/my-requests\", { \n        credentials: \"include\" \n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave requests\");\n      return response.json();\n    }\n  });\n\n  const { data: leaveBalances = [] } = useQuery<any[]>({\n    queryKey: [\"/api/leave-balances\"],\n    refetchInterval: 3000,\n    queryFn: async () => {\n      const response = await fetch(\"/api/leave-balances\", { \n        credentials: \"include\" \n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave balances\");\n      return response.json();\n    }\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      const response = await fetch(\"/api/hotels/current/leave-requests\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create leave request\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/leave-requests/my-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-balances\"] });\n      setIsAddDialogOpen(false);\n      setNewRequest({ leaveType: \"\", startDate: \"\", endDate: \"\", reason: \"\" });\n      toast.success(\"Leave request submitted successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.message);\n    }\n  });\n\n  const handleCreateRequest = () => {\n    if (!newRequest.leaveType || !newRequest.startDate || !newRequest.endDate || !newRequest.reason) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n    createRequestMutation.mutate(newRequest);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig: Record<string, { variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\", icon: any }> = {\n      'pending': { variant: 'secondary', icon: AlertCircle },\n      'approved': { variant: 'default', icon: CheckCircle },\n      'rejected': { variant: 'destructive', icon: XCircle }\n    };\n    const config = statusConfig[status] || statusConfig['pending'];\n    const Icon = config.icon;\n    return (\n      <Badge variant={config.variant} className=\"flex items-center gap-1 w-fit\">\n        <Icon className=\"w-3 h-3\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const requestColumns = [\n    { \n      key: \"leaveType\", \n      label: \"Leave Type\",\n      sortable: true,\n      render: (value: any) => value?.name || \"N/A\"\n    },\n    { \n      key: \"startDate\", \n      label: \"Start Date\", \n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleDateString()\n    },\n    { \n      key: \"endDate\", \n      label: \"End Date\", \n      sortable: true,\n      render: (value: string) => new Date(value).toLocaleDateString()\n    },\n    { \n      key: \"totalDays\", \n      label: \"Days\", \n      sortable: true \n    },\n    { \n      key: \"status\", \n      label: \"Status\", \n      sortable: true,\n      render: (value: string) => getStatusBadge(value)\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"My Leave Requests\">\n      <div className=\"space-y-6 p-4 sm:p-6\">\n        {/* Leave Balance Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {leaveBalances.map((balance: any) => (\n            <Card key={balance.id}>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  {balance.leaveTypeDetails?.name || balance.leaveType || \"Leave Type\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-baseline justify-between\">\n                  <div className=\"text-2xl font-bold\">{balance.remainingDays}</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    of {balance.totalDays} days\n                  </div>\n                </div>\n                <div className=\"mt-2 h-2 bg-secondary rounded-full overflow-hidden\">\n                  <div \n                    className=\"h-full bg-primary transition-all\" \n                    style={{ width: `${(balance.remainingDays / balance.totalDays) * 100}%` }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n          {leaveBalances.length === 0 && (\n            <Card className=\"col-span-full\">\n              <CardContent className=\"pt-6 text-center text-muted-foreground\">\n                No leave balance information available\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Request Leave Button */}\n        <div className=\"flex justify-between items-center\">\n          <h2 className=\"text-2xl font-bold\">Leave Requests</h2>\n          <Button onClick={() => setIsAddDialogOpen(true)} className=\"gap-2\">\n            <Plus className=\"w-4 h-4\" />\n            Request Leave\n          </Button>\n        </div>\n\n        {/* My Leave Requests Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>My Leave Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <p className=\"text-center text-muted-foreground py-8\">Loading...</p>\n            ) : myRequests.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\">\n                No leave requests yet. Click \"Request Leave\" to submit your first request.\n              </p>\n            ) : (\n              <DataTable\n                title=\"My Requests\"\n                data={myRequests}\n                columns={requestColumns}\n                searchPlaceholder=\"Search requests...\"\n              />\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Leave Request Dialog */}\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request Leave</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"leaveType\">Leave Type *</Label>\n                <Select\n                  value={newRequest.leaveType}\n                  onValueChange={(value) => setNewRequest({ ...newRequest, leaveType: value })}\n                >\n                  <SelectTrigger id=\"leaveType\">\n                    <SelectValue placeholder=\"Select leave type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {leaveBalances.map((balance: any) => (\n                      <SelectItem key={balance.id} value={balance.leavePolicyId}>\n                        {balance.leavePolicy?.name} ({balance.remainingDays} days available)\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"startDate\">Start Date *</Label>\n                  <Input\n                    id=\"startDate\"\n                    type=\"date\"\n                    value={newRequest.startDate}\n                    onChange={(e) => setNewRequest({ ...newRequest, startDate: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"endDate\">End Date *</Label>\n                  <Input\n                    id=\"endDate\"\n                    type=\"date\"\n                    value={newRequest.endDate}\n                    onChange={(e) => setNewRequest({ ...newRequest, endDate: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"reason\">Reason *</Label>\n                <Textarea\n                  id=\"reason\"\n                  placeholder=\"Please provide a reason for your leave request\"\n                  value={newRequest.reason}\n                  onChange={(e) => setNewRequest({ ...newRequest, reason: e.target.value })}\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsAddDialogOpen(false);\n                    setNewRequest({ leaveType: \"\", startDate: \"\", endDate: \"\", reason: \"\" });\n                  }}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreateRequest}\n                  disabled={createRequestMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10726},"client/src/pages/dashboard/housekeeping-staff/duty-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, LogIn, LogOut, Calendar } from \"lucide-react\";\nimport { formatDateTime } from \"@/lib/utils\";\n\nexport default function HousekeepingStaffDutyStatus() {\n  const { data: attendanceStatus } = useQuery<any>({\n    queryKey: [\"/api/attendance/status\"],\n    refetchInterval: 3000\n  });\n\n  const { data: attendanceHistory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/history\"],\n    refetchInterval: 3000\n  });\n\n  const isOnDuty = attendanceStatus?.isOnDuty || false;\n  const activeAttendance = attendanceStatus?.attendance;\n  const recentAttendance = attendanceHistory.slice(0, 5);\n\n  return (\n    <DashboardLayout title=\"Duty Status\">\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>My Duty Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"h-8 w-8 text-blue-500\" />\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Current Status</h4>\n                    <p className=\"text-sm text-muted-foreground\">Your duty status for today</p>\n                  </div>\n                </div>\n                <Badge \n                  className={isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} \n                  variant=\"secondary\"\n                  data-testid=\"duty-status-badge\"\n                >\n                  {isOnDuty ? 'On Duty' : 'Off Duty'}\n                </Badge>\n              </div>\n\n              {activeAttendance && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <LogIn className=\"h-6 w-6 text-green-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Clock In Time</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-time\">\n                            {formatDateTime(activeAttendance.clockInTime)}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Calendar className=\"h-6 w-6 text-blue-500\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Location</p>\n                          <p className=\"font-medium text-foreground\" data-testid=\"clock-in-location\">\n                            {activeAttendance.clockInLocation || 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n                    <strong>Note:</strong> Use the duty toggle in the top navigation bar to clock in or clock out. \n                    Your attendance is automatically tracked when you're on duty.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Attendance History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {recentAttendance.length === 0 ? (\n              <p className=\"text-muted-foreground\">No attendance records found</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentAttendance.map((record: any, index: number) => (\n                  <div key={record.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`attendance-record-${index}`}>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <LogIn className=\"h-4 w-4 text-green-500\" />\n                        <p className=\"text-sm font-medium text-foreground\">{formatDateTime(record.clockInTime)}</p>\n                      </div>\n                      {record.clockOutTime && (\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <LogOut className=\"h-4 w-4 text-gray-500\" />\n                          <p className=\"text-sm text-muted-foreground\">{formatDateTime(record.clockOutTime)}</p>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={record.status === 'active' ? 'default' : 'secondary'}>\n                        {record.status === 'active' ? 'Active' : 'Completed'}\n                      </Badge>\n                      {record.totalHours && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">{parseFloat(record.totalHours).toFixed(2)} hours</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":5827},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/dashboard/owner/inventory-tracking.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Package, AlertTriangle, TrendingDown, BarChart } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function InventoryTracking() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [updateStockDialog, setUpdateStockDialog] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [removeDialog, setRemoveDialog] = useState(false);\n  const [addDialog, setAddDialog] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  \n  // Form states\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [sku, setSku] = useState(\"\");\n  const [unit, setUnit] = useState(\"piece\");\n  const [reorderLevel, setReorderLevel] = useState(\"\");\n  const [storageLocation, setStorageLocation] = useState(\"\");\n  const [costPerUnit, setCostPerUnit] = useState(\"\");\n  const [stockQty, setStockQty] = useState(\"\");\n  \n  const { data: inventory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: consumptions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-consumptions\"],\n    refetchInterval: 3000\n  });\n\n  // Real-time updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000,\n    events: ['inventory:created', 'inventory:updated', 'inventory:deleted']\n  });\n\n  // Populate form when editing\n  useEffect(() => {\n    if (selectedItem && editDialog) {\n      setName(selectedItem.name || \"\");\n      setDescription(selectedItem.description || \"\");\n      setSku(selectedItem.sku || \"\");\n      setUnit(selectedItem.unit || selectedItem.baseUnit || \"piece\");\n      setReorderLevel(selectedItem.reorderLevel || \"\");\n      setStorageLocation(selectedItem.storageLocation || \"\");\n      setCostPerUnit(selectedItem.costPerUnit || \"\");\n    } else if (selectedItem && updateStockDialog) {\n      setStockQty(selectedItem.baseStockQty || \"\");\n    } else if (!editDialog && !addDialog && !updateStockDialog) {\n      resetForm();\n    }\n  }, [selectedItem, editDialog, addDialog, updateStockDialog]);\n\n  const resetForm = () => {\n    setName(\"\");\n    setDescription(\"\");\n    setSku(\"\");\n    setUnit(\"piece\");\n    setReorderLevel(\"\");\n    setStorageLocation(\"\");\n    setCostPerUnit(\"\");\n    setStockQty(\"\");\n  };\n\n  // Mutations\n  const createItemMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/hotels/current/inventory-items\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({ title: \"Success\", description: \"Inventory item created successfully!\" });\n      setAddDialog(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create inventory item\", variant: \"destructive\" });\n    }\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest(\"PUT\", `/api/hotels/current/inventory-items/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({ title: \"Success\", description: \"Inventory item updated successfully!\" });\n      setEditDialog(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update inventory item\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/hotels/current/inventory-items/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({ title: \"Success\", description: \"Inventory item removed successfully!\" });\n      setRemoveDialog(false);\n      setSelectedItem(null);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to remove inventory item\", variant: \"destructive\" });\n    }\n  });\n\n  const updateStockMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest(\"PUT\", `/api/hotels/current/inventory-items/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/inventory-items\"] });\n      toast({ title: \"Success\", description: \"Stock updated successfully!\" });\n      setUpdateStockDialog(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update stock\", variant: \"destructive\" });\n    }\n  });\n\n  const handleSaveItem = () => {\n    if (!name.trim()) {\n      toast({ title: \"Error\", description: \"Item name is required\", variant: \"destructive\" });\n      return;\n    }\n\n    const data = {\n      hotelId: user?.hotelId,\n      name,\n      description: description || null,\n      sku: sku || \"AUTO\",\n      unit: unit || \"piece\",\n      packageUnit: null,\n      baseUnitsPerPackage: \"0\",\n      packageStockQty: \"0\",\n      baseStockQty: \"0\",\n      reorderLevel: reorderLevel || \"0\",\n      storageLocation: storageLocation || null,\n      costPerUnit: costPerUnit || \"0\",\n      departments: []\n    };\n\n    if (selectedItem && editDialog) {\n      updateItemMutation.mutate({ id: selectedItem.id, data });\n    } else {\n      createItemMutation.mutate(data);\n    }\n  };\n\n  const handleUpdateStock = () => {\n    if (!stockQty || Number(stockQty) < 0) {\n      toast({ title: \"Error\", description: \"Please enter a valid stock quantity\", variant: \"destructive\" });\n      return;\n    }\n\n    updateStockMutation.mutate({ \n      id: selectedItem.id, \n      data: { baseStockQty: stockQty } \n    });\n  };\n\n  const handleRemoveItem = () => {\n    if (selectedItem) {\n      deleteItemMutation.mutate(selectedItem.id);\n    }\n  };\n\n  // Calculate inventory metrics\n  const totalItems = inventory.length;\n  const lowStockItems = inventory.filter(item => \n    Number(item.baseStockQty) <= Number(item.reorderLevel)\n  ).length;\n  const outOfStockItems = inventory.filter(item => \n    Number(item.baseStockQty) === 0\n  ).length;\n  const totalValue = inventory.reduce((sum, item) => \n    sum + (Number(item.baseStockQty) * (Number(item.costPerUnit) || 0)), 0\n  );\n\n  const inventoryColumns = [\n    { key: \"name\", label: \"Item Name\", sortable: true },\n    { key: \"sku\", label: \"SKU\", sortable: true },\n    { key: \"description\", label: \"Description\", sortable: true },\n    { \n      key: \"baseStockQty\", \n      label: \"Current Stock\", \n      sortable: true,\n      render: (value: any, row: any) => {\n        const baseStock = Number(value || 0).toFixed(2);\n        const packageStock = Number(row.packageStockQty || 0).toFixed(2);\n        const displayUnit = row.unit || row.baseUnit || \"piece\";\n        return `${baseStock} ${displayUnit}${row.packageUnit ? ` (${packageStock} ${row.packageUnit})` : ''}`;\n      }\n    },\n    { key: \"reorderLevel\", label: \"Reorder Level\", sortable: true },\n    { \n      key: \"unit\", \n      label: \"Unit\", \n      sortable: true,\n      render: (value: any, row: any) => value || row.baseUnit || \"piece\"\n    },\n    { \n      key: \"costPerUnit\", \n      label: \"Cost/Unit\", \n      sortable: true,\n      render: (value: any) => `NPR ${Number(value || 0).toFixed(2)}`\n    },\n    { key: \"storageLocation\", label: \"Storage\", sortable: true },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: any, row: any) => {\n        const stock = Number(row.baseStockQty);\n        const reorder = Number(row.reorderLevel);\n        if (stock === 0) {\n          return <span className=\"px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs\">Out of Stock</span>;\n        } else if (stock <= reorder) {\n          return <span className=\"px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs\">Low Stock</span>;\n        }\n        return <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs\">In Stock</span>;\n      }\n    }\n  ];\n\n  const consumptionColumns = [\n    { key: \"itemName\", label: \"Item\", sortable: true },\n    { key: \"qty\", label: \"Quantity\", sortable: true },\n    { key: \"reason\", label: \"Reason\", sortable: true },\n    { key: \"createdAt\", label: \"Date\", sortable: true, render: (value: string) => \n      new Date(value).toLocaleDateString()\n    }\n  ];\n\n  const inventoryActions = [\n    { \n      label: \"Update Stock\", \n      action: (row: any) => {\n        setSelectedItem(row);\n        setUpdateStockDialog(true);\n      }\n    },\n    { \n      label: \"Edit Item\", \n      action: (row: any) => {\n        setSelectedItem(row);\n        setEditDialog(true);\n      }\n    },\n    { \n      label: \"Remove\", \n      action: (row: any) => {\n        setSelectedItem(row);\n        setRemoveDialog(true);\n      }, \n      variant: \"destructive\" as const \n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Inventory Tracking\">\n      <div className=\"space-y-6\">\n        {/* Inventory Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Items\"\n            value={totalItems}\n            icon={<Package />}\n            iconColor=\"text-blue-500\"\n          />\n          <StatsCard\n            title=\"Low Stock Items\"\n            value={lowStockItems}\n            icon={<AlertTriangle />}\n            iconColor=\"text-yellow-500\"\n          />\n          <StatsCard\n            title=\"Out of Stock\"\n            value={outOfStockItems}\n            icon={<TrendingDown />}\n            iconColor=\"text-red-500\"\n          />\n          <StatsCard\n            title=\"Total Value\"\n            value={`NPR ${totalValue.toLocaleString()}`}\n            icon={<BarChart />}\n            iconColor=\"text-green-500\"\n          />\n        </div>\n\n        {/* Quick Stock Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Stock Status Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 bg-green-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-green-600\">\n                  {inventory.filter(item => Number(item.baseStockQty) > Number(item.reorderLevel)).length}\n                </div>\n                <div className=\"text-sm text-green-700 mt-2\">Items in Stock</div>\n              </div>\n              <div className=\"text-center p-6 bg-yellow-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-yellow-600\">{lowStockItems}</div>\n                <div className=\"text-sm text-yellow-700 mt-2\">Low Stock Items</div>\n              </div>\n              <div className=\"text-center p-6 bg-red-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-red-600\">{outOfStockItems}</div>\n                <div className=\"text-sm text-red-700 mt-2\">Out of Stock</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Inventory Table */}\n        <DataTable\n          title=\"Inventory Items\"\n          data={inventory}\n          columns={inventoryColumns}\n          actions={inventoryActions}\n          onAdd={() => setAddDialog(true)}\n          addButtonLabel=\"Add Inventory Item\"\n          searchPlaceholder=\"Search inventory...\"\n        />\n\n        {/* Recent Consumptions */}\n        <DataTable\n          title=\"Recent Inventory Consumptions\"\n          data={consumptions.slice(0, 20)}\n          columns={consumptionColumns}\n          searchPlaceholder=\"Search consumptions...\"\n        />\n\n        {/* Dialogs */}\n        <Dialog open={updateStockDialog} onOpenChange={setUpdateStockDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Update Stock - {selectedItem?.name}</DialogTitle>\n              <DialogDescription>Adjust inventory stock quantity</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stock-qty\">Current Stock ({selectedItem?.unit || selectedItem?.baseUnit || 'units'})</Label>\n                <Input\n                  id=\"stock-qty\"\n                  type=\"number\"\n                  value={stockQty}\n                  onChange={(e) => setStockQty(e.target.value)}\n                  placeholder=\"Enter stock quantity\"\n                  data-testid=\"input-stock-qty\"\n                />\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setUpdateStockDialog(false)} data-testid=\"button-cancel-update-stock\">Cancel</Button>\n                <Button onClick={handleUpdateStock} disabled={updateStockMutation.isPending} data-testid=\"button-update-stock\">\n                  {updateStockMutation.isPending ? \"Updating...\" : \"Update Stock\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={editDialog} onOpenChange={setEditDialog}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Item - {selectedItem?.name}</DialogTitle>\n              <DialogDescription>Update inventory item details</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-name\">Item Name *</Label>\n                  <Input\n                    id=\"edit-name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    placeholder=\"Enter item name\"\n                    data-testid=\"input-item-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-sku\">SKU</Label>\n                  <Input\n                    id=\"edit-sku\"\n                    value={sku}\n                    onChange={(e) => setSku(e.target.value)}\n                    placeholder=\"Enter SKU\"\n                    data-testid=\"input-sku\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-description\">Description</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  placeholder=\"Enter description\"\n                  data-testid=\"input-description\"\n                />\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-unit\">Unit</Label>\n                  <Input\n                    id=\"edit-unit\"\n                    value={unit}\n                    onChange={(e) => setUnit(e.target.value)}\n                    placeholder=\"e.g., piece, kg, liter\"\n                    data-testid=\"input-unit\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-reorder-level\">Reorder Level</Label>\n                  <Input\n                    id=\"edit-reorder-level\"\n                    type=\"number\"\n                    value={reorderLevel}\n                    onChange={(e) => setReorderLevel(e.target.value)}\n                    placeholder=\"Minimum stock level\"\n                    data-testid=\"input-reorder-level\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-storage\">Storage Location</Label>\n                  <Input\n                    id=\"edit-storage\"\n                    value={storageLocation}\n                    onChange={(e) => setStorageLocation(e.target.value)}\n                    placeholder=\"Storage location\"\n                    data-testid=\"input-storage\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-cost\">Cost Per Unit</Label>\n                  <Input\n                    id=\"edit-cost\"\n                    type=\"number\"\n                    value={costPerUnit}\n                    onChange={(e) => setCostPerUnit(e.target.value)}\n                    placeholder=\"Cost per unit\"\n                    data-testid=\"input-cost\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setEditDialog(false)} data-testid=\"button-cancel-edit\">Cancel</Button>\n                <Button onClick={handleSaveItem} disabled={updateItemMutation.isPending} data-testid=\"button-save-item\">\n                  {updateItemMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={removeDialog} onOpenChange={setRemoveDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Remove Item - {selectedItem?.name}</DialogTitle>\n              <DialogDescription>Are you sure you want to remove this item?</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                This action cannot be undone. The item will be permanently removed from the inventory.\n              </p>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setRemoveDialog(false)} data-testid=\"button-cancel-remove\">Cancel</Button>\n                <Button variant=\"destructive\" onClick={handleRemoveItem} disabled={deleteItemMutation.isPending} data-testid=\"button-confirm-remove\">\n                  {deleteItemMutation.isPending ? \"Removing...\" : \"Remove Item\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={addDialog} onOpenChange={setAddDialog}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add Inventory Item</DialogTitle>\n              <DialogDescription>Create a new inventory item</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"add-name\">Item Name *</Label>\n                  <Input\n                    id=\"add-name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    placeholder=\"Enter item name\"\n                    data-testid=\"input-item-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"add-sku\">SKU</Label>\n                  <Input\n                    id=\"add-sku\"\n                    value={sku}\n                    onChange={(e) => setSku(e.target.value)}\n                    placeholder=\"Enter SKU\"\n                    data-testid=\"input-sku\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"add-description\">Description</Label>\n                <Textarea\n                  id=\"add-description\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  placeholder=\"Enter description\"\n                  data-testid=\"input-description\"\n                />\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"add-unit\">Unit</Label>\n                  <Input\n                    id=\"add-unit\"\n                    value={unit}\n                    onChange={(e) => setUnit(e.target.value)}\n                    placeholder=\"e.g., piece, kg, liter\"\n                    data-testid=\"input-unit\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"add-reorder-level\">Reorder Level</Label>\n                  <Input\n                    id=\"add-reorder-level\"\n                    type=\"number\"\n                    value={reorderLevel}\n                    onChange={(e) => setReorderLevel(e.target.value)}\n                    placeholder=\"Minimum stock level\"\n                    data-testid=\"input-reorder-level\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"add-storage\">Storage Location</Label>\n                  <Input\n                    id=\"add-storage\"\n                    value={storageLocation}\n                    onChange={(e) => setStorageLocation(e.target.value)}\n                    placeholder=\"Storage location\"\n                    data-testid=\"input-storage\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"add-cost\">Cost Per Unit</Label>\n                  <Input\n                    id=\"add-cost\"\n                    type=\"number\"\n                    value={costPerUnit}\n                    onChange={(e) => setCostPerUnit(e.target.value)}\n                    placeholder=\"Cost per unit\"\n                    data-testid=\"input-cost\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setAddDialog(false)} data-testid=\"button-cancel-add\">Cancel</Button>\n                <Button onClick={handleSaveItem} disabled={createItemMutation.isPending} data-testid=\"button-create-item\">\n                  {createItemMutation.isPending ? \"Creating...\" : \"Create Item\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":23354},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useCallback } from 'react';\nimport { useAuth } from './use-auth';\n\ntype WebSocketEventHandler = (data: any) => void;\n\ninterface WebSocketMessage {\n  event: string;\n  data: any;\n  timestamp: string;\n}\n\nexport function useWebSocket() {\n  const { user } = useAuth();\n  const ws = useRef<WebSocket | null>(null);\n  const eventHandlers = useRef<Map<string, Set<WebSocketEventHandler>>>(new Map());\n  const reconnectTimeout = useRef<NodeJS.Timeout>();\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 10;\n\n  const connect = useCallback(() => {\n    if (!user?.id || !user?.hotelId || !user?.role?.name) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws?hotelId=${user.hotelId}&userId=${user.id}&role=${user.role.name}`;\n\n    try {\n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        reconnectAttempts.current = 0;\n\n        // Send ping every 30 seconds to keep connection alive\n        const pingInterval = setInterval(() => {\n          if (ws.current?.readyState === WebSocket.OPEN) {\n            ws.current.send(JSON.stringify({ type: 'ping' }));\n          } else {\n            clearInterval(pingInterval);\n          }\n        }, 30000);\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          \n          // Ignore pong messages\n          if (message.event === 'pong') return;\n\n          // Call all registered handlers for this event\n          const handlers = eventHandlers.current.get(message.event);\n          if (handlers) {\n            handlers.forEach(handler => handler(message.data));\n          }\n\n          // Also call wildcard handlers (for debugging)\n          const wildcardHandlers = eventHandlers.current.get('*');\n          if (wildcardHandlers) {\n            wildcardHandlers.forEach(handler => handler(message));\n          }\n        } catch (error) {\n          // Silent error handling for message parsing\n        }\n      };\n\n      ws.current.onerror = () => {\n        // Silent error handling for WebSocket errors\n      };\n\n      ws.current.onclose = () => {\n        \n        // Attempt to reconnect with exponential backoff\n        if (reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          reconnectTimeout.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        }\n      };\n    } catch (error) {\n      // Silent error handling for connection errors\n    }\n  }, [user?.id, user?.hotelId, user?.role?.name]);\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeout.current) {\n        clearTimeout(reconnectTimeout.current);\n      }\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [connect]);\n\n  const on = useCallback((event: string, handler: WebSocketEventHandler) => {\n    if (!eventHandlers.current.has(event)) {\n      eventHandlers.current.set(event, new Set());\n    }\n    eventHandlers.current.get(event)!.add(handler);\n\n    // Return cleanup function\n    return () => {\n      const handlers = eventHandlers.current.get(event);\n      if (handlers) {\n        handlers.delete(handler);\n        if (handlers.size === 0) {\n          eventHandlers.current.delete(event);\n        }\n      }\n    };\n  }, []);\n\n  const off = useCallback((event: string, handler?: WebSocketEventHandler) => {\n    if (!handler) {\n      eventHandlers.current.delete(event);\n    } else {\n      const handlers = eventHandlers.current.get(event);\n      if (handlers) {\n        handlers.delete(handler);\n        if (handlers.size === 0) {\n          eventHandlers.current.delete(event);\n        }\n      }\n    }\n  }, []);\n\n  return { on, off };\n}\n","size_bytes":3907},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/common/duty-toggle.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\n\nexport function DutyToggle() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: attendanceStatus } = useQuery<any>({\n    queryKey: [\"/api/attendance/status\"]\n  });\n\n  const isOnDuty = attendanceStatus?.isOnDuty ?? false;\n\n  const updateDutyMutation = useMutation({\n    mutationFn: async (shouldClockIn: boolean) => {\n      if (shouldClockIn) {\n        const res = await apiRequest(\"POST\", \"/api/attendance/clock-in\", {\n          location: \"Web Dashboard\",\n          source: \"web\"\n        });\n        return res.json();\n      } else {\n        const res = await apiRequest(\"POST\", \"/api/attendance/clock-out\", {\n          location: \"Web Dashboard\",\n          source: \"web\"\n        });\n        return res.json();\n      }\n    },\n    onSuccess: (_, shouldClockIn) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: shouldClockIn ? \"Clocked In\" : \"Clocked Out\",\n        description: shouldClockIn ? \"You are now on duty\" : \"You have clocked out successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update duty status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggle = () => {\n    const newStatus = !isOnDuty;\n    updateDutyMutation.mutate(newStatus);\n  };\n\n  return (\n    <div className=\"flex items-center space-x-1 md:space-x-2\">\n      <span className=\"text-xs md:text-sm text-muted-foreground hidden sm:inline\">Duty Status:</span>\n      <Button\n        size=\"sm\"\n        variant={isOnDuty ? \"default\" : \"destructive\"}\n        onClick={handleToggle}\n        disabled={updateDutyMutation.isPending}\n        className=\"flex items-center space-x-1 md:space-x-2 px-2 md:px-3 py-1 rounded-full text-xs md:text-sm\"\n        data-testid=\"button-duty-toggle\"\n      >\n        <div className={cn(\n          \"w-2 h-2 rounded-full\",\n          isOnDuty ? \"bg-white\" : \"bg-current\"\n        )} />\n        <span>{isOnDuty ? \"On Duty\" : \"Off Duty\"}</span>\n      </Button>\n    </div>\n  );\n}\n","size_bytes":2421},"client/src/pages/dashboard/manager/discount-vouchers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Trash2, Plus, Edit, Ticket, Clock, Users, Percent } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\n\ninterface Voucher {\n  id: string;\n  hotelId: string;\n  code: string;\n  discountAmount: string;\n  discountType: string;\n  validFrom: string;\n  validUntil: string;\n  maxUses: number;\n  usedCount: number;\n  createdBy: string;\n  createdAt: string;\n}\n\nexport default function DiscountVouchers() {\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [editingVoucher, setEditingVoucher] = useState<Voucher | null>(null);\n  const [code, setCode] = useState(\"\");\n  const [discountAmount, setDiscountAmount] = useState(\"\");\n  const [discountType, setDiscountType] = useState(\"\");\n  const [validFrom, setValidFrom] = useState(\"\");\n  const [validUntil, setValidUntil] = useState(\"\");\n  const [maxUses, setMaxUses] = useState(\"\");\n\n  const queryClient = useQueryClient();\n\n  // Get current user and hotel info\n  const { data: currentUser, isLoading: userLoading } = useQuery<any>({\n    queryKey: [\"/api/user\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/user\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch user\");\n      return response.json();\n    },\n    refetchInterval: 3000\n  });\n\n  // Fetch vouchers for this hotel\n  const { data: vouchers = [], isLoading: vouchersLoading } = useQuery<Voucher[]>({\n    queryKey: [\"/api/hotels/current/vouchers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels/current/vouchers\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch vouchers\");\n      return response.json();\n    },\n    refetchInterval: 3000\n  });\n\n  // Create voucher mutation\n  const createVoucher = useMutation({\n    mutationFn: async (voucherData: any) => {\n      if (!currentUser?.hotelId || !currentUser?.id) {\n        throw new Error(\"User information not available\");\n      }\n      \n      const response = await fetch(\"/api/vouchers\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(voucherData)\n      });\n      if (!response.ok) throw new Error(\"Failed to create voucher\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vouchers\"] });\n      toast.success(\"Voucher created successfully\");\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast.error(error.message || \"Failed to create voucher\");\n    }\n  });\n\n  // Update voucher mutation\n  const updateVoucher = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/vouchers/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error(\"Failed to update voucher\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vouchers\"] });\n      toast.success(\"Voucher updated successfully\");\n      setEditingVoucher(null);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast.error(error.message || \"Failed to update voucher\");\n    }\n  });\n\n  // Delete voucher mutation\n  const deleteVoucher = useMutation({\n    mutationFn: async (voucherId: string) => {\n      const response = await fetch(`/api/vouchers/${voucherId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to delete voucher\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/vouchers\"] });\n      toast.success(\"Voucher deleted successfully\");\n    },\n    onError: (error: Error) => {\n      toast.error(error.message || \"Failed to delete voucher\");\n    }\n  });\n\n  const resetForm = () => {\n    setCode(\"\");\n    setDiscountAmount(\"\");\n    setDiscountType(\"\");\n    setValidFrom(\"\");\n    setValidUntil(\"\");\n    setMaxUses(\"\");\n    setShowCreateForm(false);\n    setEditingVoucher(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!currentUser?.hotelId || !currentUser?.id) {\n      toast.error(\"Please wait for user information to load\");\n      return;\n    }\n    \n    if (!code || !discountAmount || !discountType || !validFrom || !validUntil || !maxUses) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    if (isNaN(Number(discountAmount)) || Number(discountAmount) <= 0) {\n      toast.error(\"Please enter a valid discount amount\");\n      return;\n    }\n\n    if (isNaN(Number(maxUses)) || Number(maxUses) <= 0) {\n      toast.error(\"Please enter a valid maximum uses\");\n      return;\n    }\n\n    const voucherData = {\n      code: code.toUpperCase(),\n      discountAmount: Number(discountAmount).toFixed(2),\n      discountType,\n      validFrom: new Date(validFrom).toISOString(),\n      validUntil: new Date(validUntil).toISOString(),\n      maxUses: Number(maxUses)\n    };\n\n    if (editingVoucher) {\n      updateVoucher.mutate({ id: editingVoucher.id, data: voucherData });\n    } else {\n      createVoucher.mutate(voucherData);\n    }\n  };\n\n  const handleEdit = (voucher: Voucher) => {\n    setEditingVoucher(voucher);\n    setCode(voucher.code);\n    setDiscountAmount(voucher.discountAmount);\n    setDiscountType(voucher.discountType);\n    setValidFrom(new Date(voucher.validFrom).toISOString().split('T')[0]);\n    setValidUntil(new Date(voucher.validUntil).toISOString().split('T')[0]);\n    setMaxUses(voucher.maxUses.toString());\n    setShowCreateForm(true);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\"\n    });\n  };\n\n  const getStatusBadge = (voucher: Voucher) => {\n    const now = new Date();\n    const validFrom = new Date(voucher.validFrom);\n    const validUntil = new Date(voucher.validUntil);\n    \n    if (now < validFrom) {\n      return <Badge variant=\"outline\">Upcoming</Badge>;\n    } else if (now > validUntil) {\n      return <Badge variant=\"destructive\">Expired</Badge>;\n    } else if (voucher.usedCount >= voucher.maxUses) {\n      return <Badge variant=\"secondary\">Exhausted</Badge>;\n    } else {\n      return <Badge variant=\"default\">Active</Badge>;\n    }\n  };\n\n  const getDiscountDisplay = (voucher: Voucher) => {\n    if (voucher.discountType === \"percentage\") {\n      return `${voucher.discountAmount}%`;\n    } else {\n      return `NPR ${Number(voucher.discountAmount).toLocaleString()}`;\n    }\n  };\n\n  const activeVouchers = vouchers.filter(v => {\n    const now = new Date();\n    const validFrom = new Date(v.validFrom);\n    const validUntil = new Date(v.validUntil);\n    return now >= validFrom && now <= validUntil && v.usedCount < v.maxUses;\n  });\n\n  const totalUsages = vouchers.reduce((sum, v) => sum + v.usedCount, 0);\n\n  if (userLoading || vouchersLoading) {\n    return (\n      <DashboardLayout title=\"Discount Vouchers\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Discount Vouchers\">\n      <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Discount Vouchers</h1>\n          <p className=\"text-gray-600 mt-1\">Create and manage discount vouchers for your customers</p>\n        </div>\n        <Button \n          onClick={() => setShowCreateForm(true)}\n          className=\"flex items-center gap-2\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Create Voucher\n        </Button>\n      </div>\n\n      {/* Voucher Stats */}\n      <div className=\"grid md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Vouchers</CardTitle>\n            <Ticket className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{vouchers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Vouchers</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeVouchers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Currently valid</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Usage</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalUsages}</div>\n            <p className=\"text-xs text-muted-foreground\">Times redeemed</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg. Usage Rate</CardTitle>\n            <Percent className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {vouchers.length > 0 ? \n                Math.round((totalUsages / vouchers.reduce((sum, v) => sum + v.maxUses, 0)) * 100) : 0\n              }%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Average redemption</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Create/Edit Voucher Form */}\n      <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>{editingVoucher ? \"Edit Voucher\" : \"Create New Voucher\"}</DialogTitle>\n            <DialogDescription>\n              {editingVoucher ? \"Update voucher details\" : \"Create a new discount voucher for customers\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"code\">Voucher Code *</Label>\n              <Input\n                id=\"code\"\n                placeholder=\"e.g., WELCOME10\"\n                value={code}\n                onChange={(e) => setCode(e.target.value)}\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"discountType\">Discount Type *</Label>\n                <Select value={discountType} onValueChange={setDiscountType}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"percentage\">Percentage</SelectItem>\n                    <SelectItem value=\"fixed_amount\">Fixed Amount</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"discountAmount\">\n                  Amount * {discountType === \"percentage\" ? \"(%)\" : \"(NPR)\"}\n                </Label>\n                <Input\n                  id=\"discountAmount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder={discountType === \"percentage\" ? \"10\" : \"100\"}\n                  value={discountAmount}\n                  onChange={(e) => setDiscountAmount(e.target.value)}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"validFrom\">Valid From *</Label>\n                <Input\n                  id=\"validFrom\"\n                  type=\"date\"\n                  value={validFrom}\n                  onChange={(e) => setValidFrom(e.target.value)}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"validUntil\">Valid Until *</Label>\n                <Input\n                  id=\"validUntil\"\n                  type=\"date\"\n                  value={validUntil}\n                  onChange={(e) => setValidUntil(e.target.value)}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"maxUses\">Maximum Uses *</Label>\n              <Input\n                id=\"maxUses\"\n                type=\"number\"\n                placeholder=\"100\"\n                value={maxUses}\n                onChange={(e) => setMaxUses(e.target.value)}\n                required\n              />\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button \n                type=\"submit\" \n                disabled={createVoucher.isPending || updateVoucher.isPending}\n                className=\"flex-1\"\n              >\n                {createVoucher.isPending || updateVoucher.isPending \n                  ? (editingVoucher ? \"Updating...\" : \"Creating...\") \n                  : (editingVoucher ? \"Update Voucher\" : \"Create Voucher\")\n                }\n              </Button>\n              <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Vouchers List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Vouchers</CardTitle>\n          <CardDescription>Manage your discount vouchers and track usage</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {vouchers.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Ticket className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No vouchers created yet</p>\n              <p className=\"text-sm\">Create your first discount voucher to get started</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {vouchers.map((voucher) => (\n                <div \n                  key={voucher.id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <h3 className=\"font-semibold text-lg\">{voucher.code}</h3>\n                      {getStatusBadge(voucher)}\n                      <span className=\"font-bold text-green-600\">\n                        {getDiscountDisplay(voucher)}\n                      </span>\n                    </div>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600\">\n                      <div>\n                        <span className=\"font-medium\">Valid: </span>\n                        {formatDate(voucher.validFrom)} - {formatDate(voucher.validUntil)}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Usage: </span>\n                        {voucher.usedCount}/{voucher.maxUses}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Remaining: </span>\n                        {voucher.maxUses - voucher.usedCount}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Created: </span>\n                        {formatDate(voucher.createdAt)}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(voucher)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteVoucher.mutate(voucher.id)}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      disabled={deleteVoucher.isPending}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n    </DashboardLayout>\n  );\n}","size_bytes":17997},"client/src/components/modals/create-hotel-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Hotel, Loader2 } from \"lucide-react\";\n\nconst hotelSchema = z.object({\n  name: z.string().min(1, \"Hotel name is required\").max(100, \"Hotel name must be less than 100 characters\"),\n  address: z.string().min(1, \"Address is required\").max(255, \"Address must be less than 255 characters\"),\n  city: z.string().min(1, \"City is required\").max(50, \"City must be less than 50 characters\"),\n  state: z.string().min(1, \"State is required\").max(50, \"State must be less than 50 characters\"),\n  zipCode: z.string().min(1, \"ZIP code is required\").max(10, \"ZIP code must be less than 10 characters\"),\n  country: z.string().min(1, \"Country is required\").max(50, \"Country must be less than 50 characters\"),\n  phone: z.string().min(1, \"Phone number is required\").max(20, \"Phone number must be less than 20 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  vatNo: z.string().optional(),\n  description: z.string().optional()\n});\n\ntype HotelFormData = z.infer<typeof hotelSchema>;\n\ninterface CreateHotelModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CreateHotelModal({ isOpen, onClose }: CreateHotelModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<HotelFormData>({\n    resolver: zodResolver(hotelSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      country: \"\",\n      phone: \"\",\n      email: \"\",\n      vatNo: \"\",\n      description: \"\"\n    }\n  });\n\n  const createHotelMutation = useMutation({\n    mutationFn: async (data: HotelFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/hotels\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels\"] });\n      toast({\n        title: \"Hotel Created Successfully\",\n        description: \"The new hotel has been added to the system.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to Create Hotel\",\n        description: error.message || \"Please check your input and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: HotelFormData) => {\n    createHotelMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    if (!createHotelMutation.isPending) {\n      form.reset();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-create-hotel\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Hotel className=\"h-5 w-5 text-primary\" />\n            <span>Create New Hotel</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Hotel Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter hotel name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email *</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"hotel@example.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter hotel address\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"city\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>City *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"City\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>State *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"State\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"zipCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ZIP Code *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"ZIP Code\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"country\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Country *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Country\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Phone number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"vatNo\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>VAT Number</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"VAT registration number (optional)\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Hotel description (optional)\" \n                      className=\"min-h-[80px]\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={createHotelMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createHotelMutation.isPending}\n                data-testid=\"button-create-hotel\"\n              >\n                {createHotelMutation.isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                Create Hotel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9337},"client/src/components/dashboard/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: React.ReactNode;\n  iconColor?: string;\n  trend?: {\n    value: number;\n    label: string;\n    isPositive: boolean;\n  };\n  className?: string;\n}\n\nexport function StatsCard({ \n  title, \n  value, \n  icon, \n  iconColor = \"text-primary\",\n  trend,\n  className \n}: StatsCardProps) {\n  return (\n    <Card className={cn(\"\", className)} data-testid={`stats-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-4 md:p-6\">\n        <div className=\"flex items-start gap-3 md:gap-4\">\n          <div className={cn(\"text-2xl md:text-3xl flex-shrink-0\", iconColor)}>\n            {icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-xs md:text-sm text-muted-foreground mb-1\" data-testid={`stats-title-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {title}\n            </p>\n            <p className=\"text-lg md:text-2xl font-bold text-foreground break-words\" data-testid={`stats-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </p>\n            {trend && (\n              <div className=\"flex items-center mt-1 flex-wrap gap-1\">\n                <span className={cn(\n                  \"text-xs font-medium\",\n                  trend.isPositive ? \"text-green-600\" : \"text-red-600\"\n                )}>\n                  {trend.isPositive ? \"+\" : \"\"}{trend.value}%\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {trend.label}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1790},"client/src/pages/dashboard/security-head/vehicle-logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { format } from \"date-fns\";\nimport { Car } from \"lucide-react\";\n\nexport default function SecurityHeadVehicleLogs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: vehicleLogs = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/vehicle-logs\"],\n    refetchInterval: 3000\n  });\n\n  const activeVehicles = vehicleLogs.filter(v => !v.checkOut);\n  \n  const filteredLogs = vehicleLogs.filter(log => \n    searchQuery === \"\" || \n    log.vehicleNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    log.driverName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    log.recordedByUser?.username?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <DashboardLayout title=\"Vehicle Logs\">\n      <div className=\"space-y-6\">\n        {/* Stats Card */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Vehicles On Premises</p>\n                <p className=\"text-4xl font-bold\">{activeVehicles.length}</p>\n              </div>\n              <Car className=\"h-12 w-12 text-purple-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Vehicle Logs */}\n        <Card>\n          <CardHeader>\n            <CardTitle>All Vehicle Logs</CardTitle>\n            <CardDescription>\n              <div className=\"mt-2\">\n                <Label htmlFor=\"vehicleSearch\">Search</Label>\n                <Input\n                  id=\"vehicleSearch\"\n                  data-testid=\"input-vehicle-search\"\n                  placeholder=\"Search by vehicle number, driver name, or recorded by...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\" data-testid=\"loading-vehicles\">Loading vehicle logs...</div>\n            ) : filteredLogs.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-vehicles\">\n                {searchQuery ? 'No matching vehicles found.' : 'No vehicle logs yet.'}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredLogs.map((log) => (\n                  <div \n                    key={log.id} \n                    className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\" \n                    data-testid={`vehicle-${log.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-1\">\n                        <Car className=\"h-5 w-5 text-muted-foreground\" />\n                        <span className=\"font-semibold text-lg\" data-testid={`vehicle-number-${log.id}`}>\n                          {log.vehicleNumber}\n                        </span>\n                        <span className=\"px-2 py-0.5 rounded text-xs bg-blue-100 text-blue-800\">\n                          {log.vehicleType}\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground ml-8\">\n                        <p>Driver: {log.driverName}</p>\n                        {log.purpose && <p>Purpose: {log.purpose}</p>}\n                        <p>Recorded by: {log.recordedByUser?.username || 'Unknown'}</p>\n                        <p className=\"mt-1\">\n                          Check-in: {format(new Date(log.checkIn), 'MMM dd, yyyy HH:mm')}\n                        </p>\n                        {log.checkOut && (\n                          <p>Check-out: {format(new Date(log.checkOut), 'MMM dd, yyyy HH:mm')}</p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                        log.checkOut ? 'bg-gray-100 text-gray-800' : 'bg-green-100 text-green-800'\n                      }`} data-testid={`vehicle-status-${log.id}`}>\n                        {log.checkOut ? 'Checked Out' : 'On Premises'}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":4947},"client/src/pages/dashboard/surveillance-officer/my-tasks.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { Clock, CheckSquare, AlertCircle } from \"lucide-react\";\n\nexport default function SurveillanceOfficerMyTasks() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tasks = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/security/tasks\"],\n    refetchInterval: 3000\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, status }: { taskId: string; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/tasks/${taskId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/security/tasks\"] });\n      toast({ title: \"Task status updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update task\", \n        description: error.message || \"An error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const myTasks = tasks.filter(t => t.assignedTo === user?.id);\n  const pendingTasks = myTasks.filter(t => t.status === 'pending');\n  const inProgressTasks = myTasks.filter(t => t.status === 'in_progress');\n  const completedTasks = myTasks.filter(t => t.status === 'completed');\n\n  return (\n    <DashboardLayout title=\"My Tasks\">\n      <div className=\"space-y-6\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pending</p>\n                  <p className=\"text-3xl font-bold\">{pendingTasks.length}</p>\n                </div>\n                <Clock className=\"h-10 w-10 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                  <p className=\"text-3xl font-bold\">{inProgressTasks.length}</p>\n                </div>\n                <AlertCircle className=\"h-10 w-10 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Completed</p>\n                  <p className=\"text-3xl font-bold\">{completedTasks.length}</p>\n                </div>\n                <CheckSquare className=\"h-10 w-10 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Task List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>My Assigned Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\" data-testid=\"loading-tasks\">Loading tasks...</div>\n            ) : myTasks.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-tasks\">\n                No tasks assigned yet.\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {myTasks.map((task) => (\n                  <div key={task.id} className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\" data-testid={`task-${task.id}`}>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <h4 className=\"font-medium\" data-testid={`task-title-${task.id}`}>{task.title}</h4>\n                          <span className={`px-2 py-0.5 rounded text-xs ${\n                            task.priority === 'high' ? 'bg-red-100 text-red-800' :\n                            task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                            'bg-blue-100 text-blue-800'\n                          }`}>\n                            {task.priority}\n                          </span>\n                          <span className={`px-2 py-0.5 rounded text-xs ${\n                            task.status === 'completed' ? 'bg-green-100 text-green-800' :\n                            task.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                            'bg-gray-100 text-gray-800'\n                          }`} data-testid={`task-status-${task.id}`}>\n                            {task.status.replace('_', ' ')}\n                          </span>\n                        </div>\n                        {task.description && (\n                          <p className=\"text-sm text-muted-foreground mb-2\">{task.description}</p>\n                        )}\n                        {task.dueDate && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            Due: {format(new Date(task.dueDate), 'MMM dd, yyyy HH:mm')}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-2 ml-4\">\n                        {task.status === 'pending' && (\n                          <Button \n                            size=\"sm\" \n                            onClick={() => updateTaskMutation.mutate({ taskId: task.id, status: 'in_progress' })}\n                            disabled={updateTaskMutation.isPending}\n                            data-testid={`button-start-${task.id}`}\n                          >\n                            Start\n                          </Button>\n                        )}\n                        {task.status === 'in_progress' && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => updateTaskMutation.mutate({ taskId: task.id, status: 'completed' })}\n                            disabled={updateTaskMutation.isPending}\n                            data-testid={`button-complete-${task.id}`}\n                          >\n                            Complete\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7038},"client/src/pages/dashboard/finance/transactions.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { Download, Plus, Filter, DollarSign, CreditCard, Smartphone, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRealtimeQuery } from \"@/hooks/use-realtime-query\";\n\nexport default function FinanceTransactionsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isAddTransactionModalOpen, setIsAddTransactionModalOpen] = useState(false);\n  const [filterType, setFilterType] = useState(\"all\");\n  const [filterPaymentMethod, setFilterPaymentMethod] = useState(\"all\");\n  const [dateRange, setDateRange] = useState(\"all\");\n\n  const { data: transactions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    enabled: !!user?.hotelId\n  });\n\n  // Listen for real-time transaction updates\n  useRealtimeQuery({\n    queryKey: [\"/api/hotels/current/transactions\"],\n    refetchInterval: 3000,\n    events: ['transaction:created', 'transaction:updated']\n  });\n\n  const transactionForm = useForm({\n    defaultValues: {\n      txnType: \"cash_in\",\n      amount: \"\",\n      paymentMethod: \"cash\",\n      purpose: \"\",\n      reference: \"\"\n    }\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/transactions\", {\n        hotelId: user?.hotelId,\n        txnType: data.txnType,\n        amount: parseFloat(data.amount),\n        paymentMethod: data.paymentMethod,\n        purpose: data.purpose,\n        reference: data.reference,\n        createdBy: user?.id\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/transactions\"] });\n      toast({ title: \"Transaction created successfully\" });\n      transactionForm.reset();\n      setIsAddTransactionModalOpen(false);\n    },\n    onError: () => {\n      toast({ title: \"Failed to create transaction\", variant: \"destructive\" });\n    }\n  });\n\n  const onSubmitTransaction = (data: any) => {\n    createTransactionMutation.mutate(data);\n  };\n\n  // Filter transactions\n  const filteredTransactions = transactions.filter(t => {\n    const typeMatch = filterType === \"all\" || t.txnType === filterType;\n    const paymentMatch = filterPaymentMethod === \"all\" || t.paymentMethod === filterPaymentMethod;\n    return typeMatch && paymentMatch;\n  });\n\n  // Calculate totals\n  const cashInTransactions = filteredTransactions.filter(t => \n    t.txnType === 'cash_in' || t.txnType === 'pos_in' || t.txnType === 'fonepay_in' || t.txnType?.includes('_in')\n  );\n  const cashOutTransactions = filteredTransactions.filter(t => \n    t.txnType === 'cash_out' || t.txnType === 'vendor_payment' || t.txnType?.includes('_out')\n  );\n\n  const totalCashIn = cashInTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalCashOut = cashOutTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const netCashFlow = totalCashIn - totalCashOut;\n\n  // Payment method breakdown\n  const cashTransactions = filteredTransactions.filter(t => t.paymentMethod === 'cash');\n  const posTransactions = filteredTransactions.filter(t => t.paymentMethod === 'pos');\n  const fonepayTransactions = filteredTransactions.filter(t => t.paymentMethod === 'fonepay');\n\n  const totalCash = cashTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalPos = posTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n  const totalFonepay = fonepayTransactions.reduce((sum, t) => sum + Number(t.amount || 0), 0);\n\n  const exportTransactions = () => {\n    const csvContent = [\n      ['Date', 'Type', 'Amount', 'Payment Method', 'Purpose', 'Reference'],\n      ...filteredTransactions.map(t => [\n        formatDate(t.createdAt),\n        t.txnType,\n        t.amount,\n        t.paymentMethod,\n        t.purpose || '',\n        t.reference || ''\n      ])\n    ].map(row => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `transactions_${new Date().toISOString().split('T')[0]}.csv`;\n    link.click();\n    URL.revokeObjectURL(url);\n    toast({ title: \"Transactions exported successfully\" });\n  };\n\n  return (\n    <DashboardLayout title=\"Transaction Management\">\n      <div className=\"space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Cash In</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(totalCashIn)}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{cashInTransactions.length} transactions</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Cash Out</p>\n                  <p className=\"text-2xl font-bold text-red-600\">{formatCurrency(totalCashOut)}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{cashOutTransactions.length} transactions</p>\n                </div>\n                <TrendingDown className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Net Cash Flow</p>\n                  <p className={`text-2xl font-bold ${netCashFlow >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {formatCurrency(netCashFlow)}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Current balance</p>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Transactions</p>\n                  <p className=\"text-2xl font-bold\">{filteredTransactions.length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Filtered results</p>\n                </div>\n                <Filter className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Payment Method Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Method Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <DollarSign className=\"h-8 w-8 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Cash</p>\n                    <p className=\"text-xl font-bold\">{formatCurrency(totalCash)}</p>\n                    <p className=\"text-xs text-muted-foreground\">{cashTransactions.length} transactions</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <CreditCard className=\"h-8 w-8 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">POS</p>\n                    <p className=\"text-xl font-bold\">{formatCurrency(totalPos)}</p>\n                    <p className=\"text-xs text-muted-foreground\">{posTransactions.length} transactions</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <Smartphone className=\"h-8 w-8 text-purple-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Fonepay</p>\n                    <p className=\"text-xl font-bold\">{formatCurrency(totalFonepay)}</p>\n                    <p className=\"text-xs text-muted-foreground\">{fonepayTransactions.length} transactions</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Filters and Actions */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n              <CardTitle>All Transactions</CardTitle>\n              <div className=\"flex gap-2\">\n                <Button onClick={exportTransactions} variant=\"outline\" data-testid=\"button-export\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export CSV\n                </Button>\n                <Button onClick={() => setIsAddTransactionModalOpen(true)} data-testid=\"button-add-transaction\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Transaction\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Transaction Type</label>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger data-testid=\"filter-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"cash_in\">Cash In</SelectItem>\n                    <SelectItem value=\"cash_out\">Cash Out</SelectItem>\n                    <SelectItem value=\"pos_in\">POS In</SelectItem>\n                    <SelectItem value=\"fonepay_in\">Fonepay In</SelectItem>\n                    <SelectItem value=\"vendor_payment\">Vendor Payment</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Payment Method</label>\n                <Select value={filterPaymentMethod} onValueChange={setFilterPaymentMethod}>\n                  <SelectTrigger data-testid=\"filter-payment\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Methods</SelectItem>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"pos\">POS</SelectItem>\n                    <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Date Range</label>\n                <Select value={dateRange} onValueChange={setDateRange}>\n                  <SelectTrigger data-testid=\"filter-date\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Time</SelectItem>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Transactions Table */}\n            <div className=\"border rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Date</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Type</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Amount</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Payment Method</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Purpose</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium\">Reference</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredTransactions.length === 0 ? (\n                      <tr>\n                        <td colSpan={6} className=\"px-4 py-8 text-center text-muted-foreground\">\n                          No transactions found\n                        </td>\n                      </tr>\n                    ) : (\n                      filteredTransactions.map((transaction) => (\n                        <tr key={transaction.id} className=\"border-t hover:bg-muted/50\">\n                          <td className=\"px-4 py-3 text-sm\">{formatDate(transaction.createdAt)}</td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <span className={`inline-block px-2 py-1 rounded text-xs ${\n                              transaction.txnType?.includes('_in') ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' : \n                              'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'\n                            }`}>\n                              {transaction.txnType}\n                            </span>\n                          </td>\n                          <td className={`px-4 py-3 text-sm font-medium ${\n                            transaction.txnType?.includes('_in') ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {formatCurrency(Number(transaction.amount))}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm capitalize\">{transaction.paymentMethod}</td>\n                          <td className=\"px-4 py-3 text-sm\">{transaction.purpose || '-'}</td>\n                          <td className=\"px-4 py-3 text-sm text-muted-foreground\">{transaction.reference || '-'}</td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Add Transaction Modal */}\n        <Dialog open={isAddTransactionModalOpen} onOpenChange={setIsAddTransactionModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Transaction</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...transactionForm}>\n              <form onSubmit={transactionForm.handleSubmit(onSubmitTransaction)} className=\"space-y-4\">\n                <FormField\n                  control={transactionForm.control}\n                  name=\"txnType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Transaction Type *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"input-txn-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash_in\">Cash In</SelectItem>\n                          <SelectItem value=\"cash_out\">Cash Out</SelectItem>\n                          <SelectItem value=\"pos_in\">POS In</SelectItem>\n                          <SelectItem value=\"fonepay_in\">Fonepay In</SelectItem>\n                          <SelectItem value=\"vendor_payment\">Vendor Payment</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={transactionForm.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-amount\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={transactionForm.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"input-payment-method\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"pos\">POS</SelectItem>\n                          <SelectItem value=\"fonepay\">Fonepay</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={transactionForm.control}\n                  name=\"purpose\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Purpose</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Transaction purpose\" data-testid=\"input-purpose\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={transactionForm.control}\n                  name=\"reference\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reference</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Reference number or note\" data-testid=\"input-reference\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2\">\n                  <Button type=\"submit\" className=\"flex-1\" disabled={createTransactionMutation.isPending} data-testid=\"button-submit\">\n                    {createTransactionMutation.isPending ? \"Creating...\" : \"Create Transaction\"}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" className=\"flex-1\" onClick={() => setIsAddTransactionModalOpen(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":20455},"client/src/lib/constants.ts":{"content":"export const ROLES = {\n  SUPER_ADMIN: 'super_admin',\n  OWNER: 'owner',\n  MANAGER: 'manager',\n  HOUSEKEEPING_SUPERVISOR: 'housekeeping_supervisor',\n  HOUSEKEEPING_STAFF: 'housekeeping_staff',\n  RESTAURANT_BAR_MANAGER: 'restaurant_bar_manager',\n  WAITER: 'waiter',\n  KITCHEN_STAFF: 'kitchen_staff',\n  BARTENDER: 'bartender',\n  BARISTA: 'barista',\n  CASHIER: 'cashier',\n  SECURITY_HEAD: 'security_head',\n  SECURITY_GUARD: 'security_guard',\n  SURVEILLANCE_OFFICER: 'surveillance_officer',\n  FINANCE: 'finance',\n  FRONT_DESK: 'front_desk',\n  STOREKEEPER: 'storekeeper'\n} as const;\n\nexport const ROLE_NAMES = {\n  [ROLES.SUPER_ADMIN]: 'Super Admin',\n  [ROLES.OWNER]: 'Hotel Owner',\n  [ROLES.MANAGER]: 'Manager',\n  [ROLES.HOUSEKEEPING_SUPERVISOR]: 'Housekeeping Supervisor',\n  [ROLES.HOUSEKEEPING_STAFF]: 'Housekeeping Staff',\n  [ROLES.RESTAURANT_BAR_MANAGER]: 'Restaurant & Bar Manager',\n  [ROLES.WAITER]: 'Waiter',\n  [ROLES.KITCHEN_STAFF]: 'Kitchen Staff',\n  [ROLES.BARTENDER]: 'Bartender',\n  [ROLES.BARISTA]: 'Barista',\n  [ROLES.CASHIER]: 'Cashier',\n  [ROLES.SECURITY_HEAD]: 'Security Head',\n  [ROLES.SECURITY_GUARD]: 'Security Guard',\n  [ROLES.SURVEILLANCE_OFFICER]: 'Surveillance Officer',\n  [ROLES.FINANCE]: 'Finance',\n  [ROLES.FRONT_DESK]: 'Front Desk',\n  [ROLES.STOREKEEPER]: 'Storekeeper'\n} as const;\n\nexport const ROLE_DASHBOARDS = {\n  [ROLES.SUPER_ADMIN]: '/',\n  [ROLES.OWNER]: '/owner',\n  [ROLES.MANAGER]: '/manager',\n  [ROLES.HOUSEKEEPING_SUPERVISOR]: '/housekeeping-supervisor',\n  [ROLES.HOUSEKEEPING_STAFF]: '/housekeeping-staff',\n  [ROLES.RESTAURANT_BAR_MANAGER]: '/restaurant-bar-manager',\n  [ROLES.WAITER]: '/waiter',\n  [ROLES.KITCHEN_STAFF]: '/kitchen-staff',\n  [ROLES.BARTENDER]: '/bartender',\n  [ROLES.BARISTA]: '/barista',\n  [ROLES.CASHIER]: '/cashier',\n  [ROLES.SECURITY_HEAD]: '/security-head',\n  [ROLES.SECURITY_GUARD]: '/security-guard',\n  [ROLES.SURVEILLANCE_OFFICER]: '/surveillance-officer',\n  [ROLES.FINANCE]: '/finance',\n  [ROLES.FRONT_DESK]: '/front-desk',\n  [ROLES.STOREKEEPER]: '/storekeeper'\n} as const;\n\nexport const DUTY_ROLES = [\n  ROLES.MANAGER,\n  ROLES.RESTAURANT_BAR_MANAGER,\n  ROLES.HOUSEKEEPING_SUPERVISOR,\n  ROLES.HOUSEKEEPING_STAFF,\n  ROLES.WAITER,\n  ROLES.KITCHEN_STAFF,\n  ROLES.BARTENDER,\n  ROLES.BARISTA,\n  ROLES.CASHIER,\n  ROLES.SECURITY_HEAD,\n  ROLES.SECURITY_GUARD,\n  ROLES.SURVEILLANCE_OFFICER,\n  ROLES.FINANCE,\n  ROLES.FRONT_DESK,\n  ROLES.STOREKEEPER\n];\n\nexport const TASK_STATUSES = {\n  PENDING: 'pending',\n  PERFORMING: 'performing',\n  COMPLETED: 'completed'\n} as const;\n\nexport const TRANSACTION_TYPES = {\n  CASH_IN: 'cash_in',\n  CASH_OUT: 'cash_out',\n  VENDOR_PAYMENT: 'vendor_payment',\n  POS_IN: 'pos_in',\n  FONEPAY_IN: 'fonepay_in'\n} as const;\n\nexport const PAYMENT_METHODS = {\n  CASH: 'cash',\n  POS: 'pos',\n  FONEPAY: 'fonepay'\n} as const;\n\nexport const KOT_STATUSES = {\n  OPEN: 'open',\n  PREPARING: 'preparing',\n  READY: 'ready',\n  SERVED: 'served'\n} as const;\n\nexport const MAINTENANCE_STATUSES = {\n  OPEN: 'open',\n  IN_PROGRESS: 'in_progress',\n  COMPLETED: 'completed'\n} as const;\n\nexport const ROOM_TYPES = {\n  DELUXE: 'deluxe',\n  SUITE: 'suite',\n  PRESIDENTIAL: 'presidential'\n} as const;\n\nexport const TAX_TYPES = {\n  VAT: 'vat',\n  SERVICE_TAX: 'service_tax',\n  LUXURY_TAX: 'luxury_tax'\n} as const;\n\nexport const COUNTRIES = [\n  { code: \"AF\", name: \"Afghanistan\", flag: \"🇦🇫\" },\n  { code: \"AL\", name: \"Albania\", flag: \"🇦🇱\" },\n  { code: \"DZ\", name: \"Algeria\", flag: \"🇩🇿\" },\n  { code: \"AR\", name: \"Argentina\", flag: \"🇦🇷\" },\n  { code: \"AM\", name: \"Armenia\", flag: \"🇦🇲\" },\n  { code: \"AU\", name: \"Australia\", flag: \"🇦🇺\" },\n  { code: \"AT\", name: \"Austria\", flag: \"🇦🇹\" },\n  { code: \"AZ\", name: \"Azerbaijan\", flag: \"🇦🇿\" },\n  { code: \"BH\", name: \"Bahrain\", flag: \"🇧🇭\" },\n  { code: \"BD\", name: \"Bangladesh\", flag: \"🇧🇩\" },\n  { code: \"BY\", name: \"Belarus\", flag: \"🇧🇾\" },\n  { code: \"BE\", name: \"Belgium\", flag: \"🇧🇪\" },\n  { code: \"BT\", name: \"Bhutan\", flag: \"🇧🇹\" },\n  { code: \"BO\", name: \"Bolivia\", flag: \"🇧🇴\" },\n  { code: \"BR\", name: \"Brazil\", flag: \"🇧🇷\" },\n  { code: \"BN\", name: \"Brunei\", flag: \"🇧🇳\" },\n  { code: \"BG\", name: \"Bulgaria\", flag: \"🇧🇬\" },\n  { code: \"KH\", name: \"Cambodia\", flag: \"🇰🇭\" },\n  { code: \"CA\", name: \"Canada\", flag: \"🇨🇦\" },\n  { code: \"CL\", name: \"Chile\", flag: \"🇨🇱\" },\n  { code: \"CN\", name: \"China\", flag: \"🇨🇳\" },\n  { code: \"CO\", name: \"Colombia\", flag: \"🇨🇴\" },\n  { code: \"CR\", name: \"Costa Rica\", flag: \"🇨🇷\" },\n  { code: \"HR\", name: \"Croatia\", flag: \"🇭🇷\" },\n  { code: \"CU\", name: \"Cuba\", flag: \"🇨🇺\" },\n  { code: \"CY\", name: \"Cyprus\", flag: \"🇨🇾\" },\n  { code: \"CZ\", name: \"Czech Republic\", flag: \"🇨🇿\" },\n  { code: \"DK\", name: \"Denmark\", flag: \"🇩🇰\" },\n  { code: \"EC\", name: \"Ecuador\", flag: \"🇪🇨\" },\n  { code: \"EG\", name: \"Egypt\", flag: \"🇪🇬\" },\n  { code: \"EE\", name: \"Estonia\", flag: \"🇪🇪\" },\n  { code: \"ET\", name: \"Ethiopia\", flag: \"🇪🇹\" },\n  { code: \"FI\", name: \"Finland\", flag: \"🇫🇮\" },\n  { code: \"FR\", name: \"France\", flag: \"🇫🇷\" },\n  { code: \"GE\", name: \"Georgia\", flag: \"🇬🇪\" },\n  { code: \"DE\", name: \"Germany\", flag: \"🇩🇪\" },\n  { code: \"GH\", name: \"Ghana\", flag: \"🇬🇭\" },\n  { code: \"GR\", name: \"Greece\", flag: \"🇬🇷\" },\n  { code: \"HK\", name: \"Hong Kong\", flag: \"🇭🇰\" },\n  { code: \"HU\", name: \"Hungary\", flag: \"🇭🇺\" },\n  { code: \"IS\", name: \"Iceland\", flag: \"🇮🇸\" },\n  { code: \"IN\", name: \"India\", flag: \"🇮🇳\" },\n  { code: \"ID\", name: \"Indonesia\", flag: \"🇮🇩\" },\n  { code: \"IR\", name: \"Iran\", flag: \"🇮🇷\" },\n  { code: \"IQ\", name: \"Iraq\", flag: \"🇮🇶\" },\n  { code: \"IE\", name: \"Ireland\", flag: \"🇮🇪\" },\n  { code: \"IL\", name: \"Israel\", flag: \"🇮🇱\" },\n  { code: \"IT\", name: \"Italy\", flag: \"🇮🇹\" },\n  { code: \"JP\", name: \"Japan\", flag: \"🇯🇵\" },\n  { code: \"JO\", name: \"Jordan\", flag: \"🇯🇴\" },\n  { code: \"KZ\", name: \"Kazakhstan\", flag: \"🇰🇿\" },\n  { code: \"KE\", name: \"Kenya\", flag: \"🇰🇪\" },\n  { code: \"KR\", name: \"South Korea\", flag: \"🇰🇷\" },\n  { code: \"KW\", name: \"Kuwait\", flag: \"🇰🇼\" },\n  { code: \"LA\", name: \"Laos\", flag: \"🇱🇦\" },\n  { code: \"LV\", name: \"Latvia\", flag: \"🇱🇻\" },\n  { code: \"LB\", name: \"Lebanon\", flag: \"🇱🇧\" },\n  { code: \"LT\", name: \"Lithuania\", flag: \"🇱🇹\" },\n  { code: \"LU\", name: \"Luxembourg\", flag: \"🇱🇺\" },\n  { code: \"MY\", name: \"Malaysia\", flag: \"🇲🇾\" },\n  { code: \"MV\", name: \"Maldives\", flag: \"🇲🇻\" },\n  { code: \"MX\", name: \"Mexico\", flag: \"🇲🇽\" },\n  { code: \"MN\", name: \"Mongolia\", flag: \"🇲🇳\" },\n  { code: \"MA\", name: \"Morocco\", flag: \"🇲🇦\" },\n  { code: \"MM\", name: \"Myanmar\", flag: \"🇲🇲\" },\n  { code: \"NP\", name: \"Nepal\", flag: \"🇳🇵\" },\n  { code: \"NL\", name: \"Netherlands\", flag: \"🇳🇱\" },\n  { code: \"NZ\", name: \"New Zealand\", flag: \"🇳🇿\" },\n  { code: \"NO\", name: \"Norway\", flag: \"🇳🇴\" },\n  { code: \"OM\", name: \"Oman\", flag: \"🇴🇲\" },\n  { code: \"PK\", name: \"Pakistan\", flag: \"🇵🇰\" },\n  { code: \"PE\", name: \"Peru\", flag: \"🇵🇪\" },\n  { code: \"PH\", name: \"Philippines\", flag: \"🇵🇭\" },\n  { code: \"PL\", name: \"Poland\", flag: \"🇵🇱\" },\n  { code: \"PT\", name: \"Portugal\", flag: \"🇵🇹\" },\n  { code: \"QA\", name: \"Qatar\", flag: \"🇶🇦\" },\n  { code: \"RO\", name: \"Romania\", flag: \"🇷🇴\" },\n  { code: \"RU\", name: \"Russia\", flag: \"🇷🇺\" },\n  { code: \"SA\", name: \"Saudi Arabia\", flag: \"🇸🇦\" },\n  { code: \"SG\", name: \"Singapore\", flag: \"🇸🇬\" },\n  { code: \"SK\", name: \"Slovakia\", flag: \"🇸🇰\" },\n  { code: \"SI\", name: \"Slovenia\", flag: \"🇸🇮\" },\n  { code: \"ZA\", name: \"South Africa\", flag: \"🇿🇦\" },\n  { code: \"ES\", name: \"Spain\", flag: \"🇪🇸\" },\n  { code: \"LK\", name: \"Sri Lanka\", flag: \"🇱🇰\" },\n  { code: \"SE\", name: \"Sweden\", flag: \"🇸🇪\" },\n  { code: \"CH\", name: \"Switzerland\", flag: \"🇨🇭\" },\n  { code: \"TW\", name: \"Taiwan\", flag: \"🇹🇼\" },\n  { code: \"TH\", name: \"Thailand\", flag: \"🇹🇭\" },\n  { code: \"TR\", name: \"Turkey\", flag: \"🇹🇷\" },\n  { code: \"UA\", name: \"Ukraine\", flag: \"🇺🇦\" },\n  { code: \"AE\", name: \"United Arab Emirates\", flag: \"🇦🇪\" },\n  { code: \"GB\", name: \"United Kingdom\", flag: \"🇬🇧\" },\n  { code: \"US\", name: \"United States\", flag: \"🇺🇸\" },\n  { code: \"UY\", name: \"Uruguay\", flag: \"🇺🇾\" },\n  { code: \"UZ\", name: \"Uzbekistan\", flag: \"🇺🇿\" },\n  { code: \"VE\", name: \"Venezuela\", flag: \"🇻🇪\" },\n  { code: \"VN\", name: \"Vietnam\", flag: \"🇻🇳\" },\n  { code: \"YE\", name: \"Yemen\", flag: \"🇾🇪\" }\n] as const;\n\nexport const NAVIGATION_ITEMS = {\n  [ROLES.SUPER_ADMIN]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' }\n  ],\n  [ROLES.OWNER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Users', label: 'Guest Management', id: 'guests' },\n    { icon: 'CalendarCheck', label: 'Hall Bookings', id: 'hall-bookings' },\n    { icon: 'PieChart', label: 'Financial Overview', id: 'financial' },\n    { icon: 'Package', label: 'Inventory Tracking', id: 'inventory' },\n    { icon: 'Bed', label: 'Room Occupancy', id: 'occupancy' },\n    { icon: 'Waves', label: 'Amenities', id: 'amenities' },\n    { icon: 'Tag', label: 'Discount Vouchers', id: 'vouchers' },\n    { icon: 'Calculator', label: 'Tax Configuration', id: 'taxes' },\n    { icon: 'UserCog', label: 'Staff Management', id: 'staff' },\n    { icon: 'ClipboardCheck', label: 'Attendance Reports', id: 'attendance' },\n    { icon: 'Settings', label: 'Leave Policies', id: 'leave-policies' },\n    { icon: 'FileCheck', label: 'Leave Approvals', id: 'leave-approvals' },\n    { icon: 'FileText', label: 'Report', id: 'report' },\n    { icon: 'BarChart', label: 'Financial Report', id: 'reports' }\n  ],\n  [ROLES.MANAGER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Users', label: 'Guest Management', id: 'guests' },\n    { icon: 'CalendarCheck', label: 'Hall Bookings', id: 'hall-bookings' },\n    { icon: 'UserCog', label: 'Staff Management', id: 'staff' },\n    { icon: 'ClipboardCheck', label: 'Attendance Reports', id: 'attendance' },\n    { icon: 'CreditCard', label: 'Vendor Payments', id: 'payments' },\n    { icon: 'Tag', label: 'Discount Vouchers', id: 'vouchers' },\n    { icon: 'DoorOpen', label: 'Room Setup', id: 'rooms' },\n    { icon: 'DollarSign', label: 'Room Pricing', id: 'pricing' },\n    { icon: 'Waves', label: 'Amenities', id: 'amenities' },\n    { icon: 'UtensilsCrossed', label: 'Meal Plans', id: 'meal-plans' },\n    { icon: 'Wrench', label: 'Maintenance Requests', id: 'maintenance-requests' },\n    { icon: 'CalendarDays', label: 'Leave Requests', id: 'leave' },\n    { icon: 'FileCheck', label: 'Leave Approvals', id: 'leave-approvals' },\n    { icon: 'Receipt', label: 'Transactions', id: 'transactions' }\n  ],\n  [ROLES.CASHIER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Receipt', label: 'Table Billing', id: 'table-billing' },\n    { icon: 'CalendarCheck', label: 'Hall Bookings', id: 'hall-bookings' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.FRONT_DESK]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Users', label: 'Guest Management', id: 'guests' },\n    { icon: 'CalendarCheck', label: 'Hall Bookings', id: 'hall-bookings' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'Wrench', label: 'Maintenance', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.HOUSEKEEPING_SUPERVISOR]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'UserCog', label: 'Staff Management', id: 'staff' },\n    { icon: 'Clock', label: 'Duty Tracking', id: 'duty' },\n    { icon: 'DoorClosed', label: 'Room Cleaning Queue', id: 'cleaning-queue' },\n    { icon: 'ClipboardList', label: 'Task Assignment', id: 'tasks' },\n    { icon: 'Wrench', label: 'Maintenance Requests', id: 'maintenance' },\n    { icon: 'MapPin', label: 'Staff Tracking', id: 'tracking' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.HOUSEKEEPING_STAFF]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Clock', label: 'Duty Status', id: 'duty' },\n    { icon: 'CheckSquare', label: 'My Tasks', id: 'tasks' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.RESTAURANT_BAR_MANAGER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'UserCog', label: 'Staff Management', id: 'staff' },\n    { icon: 'Package', label: 'Stock Requests', id: 'stock-requests' },\n    { icon: 'Clock', label: 'Duty Tracking', id: 'duty' },\n    { icon: 'ClipboardList', label: 'Task Assignment', id: 'tasks' },\n    { icon: 'Menu', label: 'Menu Management', id: 'menu' },\n    { icon: 'Table', label: 'Table Setup', id: 'tables' },\n    { icon: 'Wrench', label: 'Maintenance Requests', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' },\n    { icon: 'CheckCircle', label: 'Leave Approvals', id: 'leave-approvals' },\n    { icon: 'Trash2', label: 'Staff Wastage', id: 'wastage' }\n  ],\n  [ROLES.WAITER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'CheckSquare', label: 'My Tasks', id: 'tasks' },\n    { icon: 'ShoppingCart', label: 'Orders', id: 'orders' },\n    { icon: 'Receipt', label: 'Billing', id: 'billing' },\n    { icon: 'Search', label: 'Food Search', id: 'search' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.KITCHEN_STAFF]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.BARTENDER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.BARISTA]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.SECURITY_HEAD]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Users', label: 'Staff Management', id: 'staff' },\n    { icon: 'Car', label: 'Vehicle Logs', id: 'vehicles' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' },\n    { icon: 'CheckCircle', label: 'Leave Approvals', id: 'leave-approvals' }\n  ],\n  [ROLES.SECURITY_GUARD]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Clock', label: 'Duty Status', id: 'duty' },\n    { icon: 'CheckSquare', label: 'My Tasks', id: 'tasks' },\n    { icon: 'Car', label: 'Vehicle Check', id: 'vehicles' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.SURVEILLANCE_OFFICER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Clock', label: 'Duty Status', id: 'duty' },\n    { icon: 'CheckSquare', label: 'My Tasks', id: 'tasks' },\n    { icon: 'Car', label: 'Vehicle Logs', id: 'vehicles' },\n    { icon: 'Wrench', label: 'Maintenance Reports', id: 'maintenance' },\n    { icon: 'Package', label: 'Request Stock', id: 'request-stock' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.FINANCE]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'CalendarCheck', label: 'Hall Bookings', id: 'hall-bookings' },\n    { icon: 'Receipt', label: 'Transactions', id: 'transactions' },\n    { icon: 'TrendingUp', label: 'Revenue Reports', id: 'revenue' },\n    { icon: 'TrendingDown', label: 'Expense Tracking', id: 'expenses' },\n    { icon: 'DollarSign', label: 'Cash Flow', id: 'cashflow' },\n    { icon: 'CreditCard', label: 'Payment Reconciliation', id: 'reconciliation' },\n    { icon: 'FileText', label: 'Reports & Summary', id: 'reports' },\n    { icon: 'Wrench', label: 'Maintenance Requests', id: 'maintenance-requests' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ],\n  [ROLES.STOREKEEPER]: [\n    { icon: 'LayoutDashboard', label: 'Dashboard', id: 'dashboard' },\n    { icon: 'Package', label: 'Inventory Tracking', id: 'inventory' },\n    { icon: 'Edit', label: 'Inventory Management', id: 'management' },\n    { icon: 'ClipboardCheck', label: 'Stock Requests', id: 'stock-requests' },\n    { icon: 'Wrench', label: 'Maintenance Requests', id: 'maintenance' },\n    { icon: 'CheckSquare', label: 'My Tasks', id: 'tasks' },\n    { icon: 'FileCheck', label: 'Leave Requests', id: 'leave' }\n  ]\n};\n","size_bytes":17607},"client/src/pages/dashboard/restaurant-bar-manager.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { DataTable } from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, Utensils, Package, Calendar, ChefHat, Coffee } from \"lucide-react\";\n\nexport default function RestaurantBarManagerDashboard() {\n  const [, setLocation] = useLocation();\n  const { data: staff = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/users\"],\n    refetchInterval: 3000\n  });\n\n  const { data: menuItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/menu-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: tables = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/restaurant-tables\"],\n    refetchInterval: 3000\n  });\n\n  const { data: inventory = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const { data: kotOrders = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/kot-orders\"],\n    refetchInterval: 3000\n  });\n\n  const { data: dailyAttendance = [] } = useQuery<any[]>({\n    queryKey: [\"/api/attendance/daily\"],\n    refetchInterval: 3000\n  });\n\n  const restaurantStaff = staff.filter(s => \n    ['waiter', 'kitchen_staff', 'bartender', 'barista', 'cashier'].includes(s.role?.name || '')\n  );\n  const onlineStaff = restaurantStaff.filter(s => {\n    return dailyAttendance.some(a => a.userId === s.id && a.status === 'active');\n  });\n  const activeMenuItems = menuItems.filter(item => item.active);\n  const lowStockItems = inventory.filter(item => \n    Number(item.stockQty) <= Number(item.reorderLevel)\n  );\n\n  const staffColumns = [\n    { key: \"username\", label: \"Name\", sortable: true },\n    { \n      key: \"role\", \n      label: \"Role\", \n      sortable: true,\n      render: (value: any) => value?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())\n    },\n    { \n      key: \"id\", \n      label: \"Status\", \n      render: (userId: string) => {\n        const isOnDuty = dailyAttendance.some(a => a.userId === userId && a.status === 'active');\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs flex items-center space-x-1 ${isOnDuty ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>\n            <div className={`w-2 h-2 rounded-full ${isOnDuty ? 'bg-green-500' : 'bg-gray-400'}`} />\n            <span>{isOnDuty ? 'On Duty' : 'Off Duty'}</span>\n          </span>\n        );\n      }\n    },\n    { \n      key: \"lastLogin\", \n      label: \"Last Active\", \n      sortable: true,\n      render: (value: string) => value ? new Date(value).toLocaleString('en-GB', { timeZone: 'Asia/Kathmandu' }) : 'Never'\n    }\n  ];\n\n  const menuColumns = [\n    { key: \"name\", label: \"Item\", sortable: true },\n    { \n      key: \"category\", \n      label: \"Category\", \n      render: (value: any, row: any) => row.category?.name || \"Uncategorized\"\n    },\n    { key: \"price\", label: \"Price\", sortable: true, render: (value: number) => `रु${value}` },\n    { \n      key: \"active\", \n      label: \"Status\", \n      render: (value: boolean) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${value ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n          {value ? 'Active' : 'Inactive'}\n        </span>\n      )\n    }\n  ];\n\n  const tableColumns = [\n    { key: \"name\", label: \"Table\", sortable: true },\n    { key: \"capacity\", label: \"Capacity\", sortable: true },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: () => (\n        <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs\">Available</span>\n      )\n    }\n  ];\n\n  const inventoryColumns = [\n    { key: \"name\", label: \"Item\", sortable: true },\n    { key: \"stockQty\", label: \"Stock\", sortable: true },\n    { key: \"unit\", label: \"Unit\", sortable: true },\n    { \n      key: \"status\", \n      label: \"Status\", \n      render: (value: any, row: any) => {\n        const stock = Number(row.stockQty);\n        const reorder = Number(row.reorderLevel);\n        if (stock <= reorder) {\n          return <span className=\"px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs\">Low Stock</span>;\n        } else if (stock <= reorder * 1.5) {\n          return <span className=\"px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs\">Medium</span>;\n        }\n        return <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs\">In Stock</span>;\n      }\n    }\n  ];\n\n  const staffActions = [\n    { label: \"View\", action: () => setLocation(\"/restaurant-bar-manager/staff-management\") }\n  ];\n\n  const menuActions = [\n    { label: \"Manage\", action: () => setLocation(\"/restaurant-bar-manager/menu-management\") }\n  ];\n\n  const tableActions = [\n    { label: \"Manage\", action: () => setLocation(\"/restaurant-bar-manager/table-setup\") }\n  ];\n\n  return (\n    <DashboardLayout title=\"Restaurant & Bar Manager Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Staff Members\"\n            value={restaurantStaff.length}\n            icon={<Users />}\n            iconColor=\"text-blue-500\"\n            trend={{ \n              value: onlineStaff.length > 0 ? Math.round((onlineStaff.length / restaurantStaff.length) * 100) : 0, \n              label: \"on duty\", \n              isPositive: true \n            }}\n          />\n          <StatsCard\n            title=\"Menu Items\"\n            value={activeMenuItems.length}\n            icon={<Utensils />}\n            iconColor=\"text-green-500\"\n          />\n          <StatsCard\n            title=\"Tables Available\"\n            value={tables.length}\n            icon={<Calendar />}\n            iconColor=\"text-purple-500\"\n          />\n          <StatsCard\n            title=\"Low Stock Alerts\"\n            value={lowStockItems.length}\n            icon={<Package />}\n            iconColor=\"text-red-500\"\n          />\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Restaurant Operations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-add-staff\"\n                onClick={() => setLocation(\"/restaurant-bar-manager/staff-management\")}\n              >\n                <Users className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Add Staff</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-menu-management\"\n                onClick={() => setLocation(\"/restaurant-bar-manager/menu-management\")}\n              >\n                <Utensils className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Menu Management</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-table-setup\"\n                onClick={() => setLocation(\"/restaurant-bar-manager/table-setup\")}\n              >\n                <Calendar className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Table Setup</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex flex-col items-center justify-center gap-0.5 p-0 [&_svg]:size-6\" \n                data-testid=\"button-inventory\"\n                onClick={() => setLocation(\"/restaurant-bar-manager/inventory-tracking\")}\n              >\n                <Package className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Inventory</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Staff Management */}\n        <DataTable\n          title=\"Restaurant Staff\"\n          data={restaurantStaff}\n          columns={staffColumns}\n          actions={staffActions}\n          onAdd={() => setLocation(\"/restaurant-bar-manager/staff-management\")}\n          addButtonLabel=\"Add Staff Member\"\n          searchPlaceholder=\"Search staff...\"\n        />\n\n        {/* Menu Management */}\n        <DataTable\n          title=\"Menu Management\"\n          data={menuItems}\n          columns={menuColumns}\n          actions={menuActions}\n          onAdd={() => setLocation(\"/restaurant-bar-manager/menu-management\")}\n          addButtonLabel=\"Add Menu Item\"\n          searchPlaceholder=\"Search menu items...\"\n        />\n\n        {/* Table Management */}\n        <DataTable\n          title=\"Table Management\"\n          data={tables}\n          columns={tableColumns}\n          actions={tableActions}\n          onAdd={() => setLocation(\"/restaurant-bar-manager/table-setup\")}\n          addButtonLabel=\"Add Table\"\n          searchPlaceholder=\"Search tables...\"\n        />\n\n        {/* Inventory Status */}\n        <DataTable\n          title=\"Inventory Status\"\n          data={inventory}\n          columns={inventoryColumns}\n          searchPlaceholder=\"Search inventory items...\"\n        />\n\n        {/* Today's KOT Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Today's KOT Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\" data-testid=\"kot-summary-total\">\n                <div className=\"text-2xl font-bold text-blue-600\">{kotOrders.length}</div>\n                <div className=\"text-sm text-blue-700\">Total Orders</div>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\" data-testid=\"kot-summary-completed\">\n                <div className=\"text-2xl font-bold text-green-600\">{kotOrders.filter(k => k.status === 'served').length}</div>\n                <div className=\"text-sm text-green-700\">Completed</div>\n              </div>\n              <div className=\"text-center p-4 bg-orange-50 rounded-lg\" data-testid=\"kot-summary-preparing\">\n                <div className=\"text-2xl font-bold text-orange-600\">{kotOrders.filter(k => k.status === 'preparing').length}</div>\n                <div className=\"text-sm text-orange-700\">Preparing</div>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\" data-testid=\"kot-summary-revenue\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  रु{kotOrders.reduce((total, order) => {\n                    if (order.status === 'served') {\n                      // Calculate order total from items if available\n                      return total + (order.total || 0);\n                    }\n                    return total;\n                  }, 0).toLocaleString()}\n                </div>\n                <div className=\"text-sm text-purple-700\">Today's Revenue</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Staff Performance */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Staff Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {restaurantStaff.slice(0, 5).map((staff, index) => (\n                <div key={staff.id} className=\"flex items-center justify-between p-3 bg-secondary rounded-lg\" data-testid={`staff-performance-${index}`}>\n                  <div className=\"flex items-center space-x-3\">\n                    {staff.role?.name === 'waiter' && <Users className=\"h-5 w-5 text-blue-500\" />}\n                    {staff.role?.name === 'kitchen_staff' && <ChefHat className=\"h-5 w-5 text-green-500\" />}\n                    {staff.role?.name === 'bartender' && <Coffee className=\"h-5 w-5 text-purple-500\" />}\n                    {staff.role?.name === 'barista' && <Coffee className=\"h-5 w-5 text-orange-500\" />}\n                    {staff.role?.name === 'cashier' && <Users className=\"h-5 w-5 text-red-500\" />}\n                    <div>\n                      <h4 className=\"font-medium text-foreground\">{staff.username}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {staff.role?.name?.replace(/_/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    {(() => {\n                      const isOnDuty = dailyAttendance.some(a => a.userId === staff.id && a.status === 'active');\n                      return (\n                        <>\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {isOnDuty ? 'On Duty' : 'Available'}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {isOnDuty ? 'Currently on duty' : 'Off duty'}\n                          </div>\n                        </>\n                      );\n                    })()}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":13740},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, UserWithRole as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Authentication Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      // Clear user-specific queries to prevent cache persistence across logins\n      // Use type: \"all\" to remove both active and inactive queries\n      queryClient.removeQueries({ queryKey: [\"/api/user\"], type: \"all\" });\n      queryClient.removeQueries({ queryKey: [\"/api/attendance/status\"], type: \"all\" });\n      queryClient.removeQueries({ queryKey: [\"/api/attendance/daily\"], type: \"all\" });\n      queryClient.removeQueries({ queryKey: [\"/api/hotels/current/attendance\"], type: \"all\" });\n      queryClient.removeQueries({ queryKey: [\"/api/hotels/current/users\"], type: \"all\" });\n      queryClient.removeQueries({ queryKey: [\"/api/hotels/current/transactions\"], type: \"all\" });\n      queryClient.removeQueries({ queryKey: [\"/api/hotels/current/vendors\"], type: \"all\" });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3574},"client/src/pages/dashboard/stock-requests/request-stock.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Package, Plus, CheckCircle, Clock, Truck } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { z } from \"zod\";\nimport { getCategoryForUnit, getSupportedUnitsForItem, getUnitLabel, type UnitCode } from \"@shared/measurements\";\n\nconst requestStockSchema = z.object({\n  itemId: z.string().min(1, \"Please select an item\"),\n  quantity: z.string()\n    .min(1, \"Quantity is required\")\n    .refine((val) => {\n      const trimmed = val.trim();\n      const num = Number(trimmed);\n      return trimmed !== \"\" && Number.isFinite(num) && num > 0;\n    }, {\n      message: \"Quantity must be a valid positive number\"\n    }),\n  unit: z.string().min(1, \"Unit is required\"),\n  notes: z.string().optional()\n});\n\ntype RequestStockForm = z.infer<typeof requestStockSchema>;\n\nexport default function RequestStock() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isRequestModalOpen, setIsRequestModalOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  const [availableUnits, setAvailableUnits] = useState<UnitCode[]>([]);\n\n  const { data: allInventoryItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  // Map role names to department names for filtering\n  const roleToDepartmentMap: Record<string, string> = {\n    'kitchen_staff': 'kitchen',\n    'waiter': 'restaurant',\n    'bartender': 'bar',\n    'barista': 'bar',\n    'housekeeping_staff': 'housekeeping',\n    'front_desk': 'front_desk',\n    'security_guard': 'security',\n    'surveillance_officer': 'security',\n  };\n\n  // Filter items based on user role/department\n  const inventoryItems = useMemo(() => {\n    const userRole = user?.role?.name;\n    if (!userRole) return allInventoryItems;\n\n    const userDepartment = roleToDepartmentMap[userRole];\n    if (!userDepartment) return allInventoryItems;\n\n    return allInventoryItems.filter((item: any) => {\n      const departments = item.departments || [];\n      return departments.includes('all') || departments.includes(userDepartment);\n    });\n  }, [allInventoryItems, user]);\n\n  const { data: myRequests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/stock-requests/my-requests\"],\n    refetchInterval: 3000\n  });\n\n  const form = useForm<RequestStockForm>({\n    resolver: zodResolver(requestStockSchema),\n    defaultValues: {\n      itemId: \"\",\n      quantity: \"\",\n      unit: \"\",\n      notes: \"\"\n    }\n  });\n\n  const requestMutation = useMutation({\n    mutationFn: async (data: RequestStockForm) => {\n      return await apiRequest(\"POST\", \"/api/hotels/current/stock-requests\", {\n        ...data,\n        quantity: parseFloat(data.quantity)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotels/current/stock-requests/my-requests\"] });\n      toast({\n        title: \"Success\",\n        description: \"Stock request submitted successfully\"\n      });\n      setIsRequestModalOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit stock request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleItemSelect = (itemId: string) => {\n    const item = inventoryItems.find((i: any) => i.id === itemId);\n    if (item) {\n      setSelectedItem(item);\n      form.setValue(\"itemId\", itemId);\n      \n      const rawBaseUnit = item.baseUnit || \"piece\";\n      const baseUnitCode = rawBaseUnit as UnitCode;\n      const category = getCategoryForUnit(baseUnitCode);\n      \n      if (category) {\n        const units = getSupportedUnitsForItem(category);\n        if (units && units.length > 0) {\n          setAvailableUnits(units);\n          const matchedUnit = units.find(u => u === baseUnitCode) || units[0];\n          form.setValue(\"unit\", matchedUnit);\n        } else {\n          \n          setAvailableUnits([baseUnitCode]);\n          form.setValue(\"unit\", baseUnitCode);\n        }\n      } else {\n        \n        setAvailableUnits([baseUnitCode]);\n        form.setValue(\"unit\", baseUnitCode);\n      }\n    }\n  };\n\n  const handleSubmit = (data: RequestStockForm) => {\n    requestMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-50\"><Clock className=\"w-3 h-3 mr-1\" /> Pending</Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"bg-blue-50\"><Truck className=\"w-3 h-3 mr-1\" /> Ready to Pickup</Badge>;\n      case 'delivered':\n        return <Badge variant=\"outline\" className=\"bg-green-50\"><CheckCircle className=\"w-3 h-3 mr-1\" /> Delivered</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Request Stock\">\n      <div className=\"container mx-auto p-4 sm:p-6 space-y-4 sm:space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold\">Request Stock</h1>\n            <p className=\"text-muted-foreground mt-1 text-sm sm:text-base\">Request inventory items from the storekeeper</p>\n          </div>\n          <Button onClick={() => setIsRequestModalOpen(true)} data-testid=\"button-request-stock\" className=\"w-full sm:w-auto\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Request\n          </Button>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Stock Requests</CardTitle>\n            <CardDescription>View the status of your stock requests</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {myRequests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Package className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No stock requests yet</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {myRequests.map((request: any) => {\n                  const item = inventoryItems.find((i: any) => i.id === request.itemId);\n                  return (\n                    <div key={request.id} className=\"border rounded-lg p-3 sm:p-4 flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3\" data-testid={`request-${request.id}`}>\n                      <div className=\"flex-1\">\n                        <div className=\"font-semibold\" data-testid={`text-item-${request.id}`}>{item?.name || 'Unknown Item'}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Quantity: {request.quantity} {request.unit}\n                        </div>\n                        {request.notes && (\n                          <div className=\"text-sm text-muted-foreground mt-1\">\n                            Notes: {request.notes}\n                          </div>\n                        )}\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          Requested: {new Date(request.createdAt).toLocaleString()}\n                        </div>\n                      </div>\n                      <div data-testid={`status-${request.id}`} className=\"self-start sm:self-center\">{getStatusBadge(request.status)}</div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Dialog open={isRequestModalOpen} onOpenChange={setIsRequestModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request Stock</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"itemId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Item</FormLabel>\n                      <Select\n                        value={field.value}\n                        onValueChange={(value) => {\n                          field.onChange(value);\n                          handleItemSelect(value);\n                        }}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-item\">\n                            <SelectValue placeholder=\"Select item\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {inventoryItems.map((item: any) => (\n                            <SelectItem key={item.id} value={item.id}>\n                              {item.name} ({item.baseStockQty || item.stockQty || 0} {item.baseUnit || item.unit || 'units'} available)\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"quantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quantity</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.001\"\n                            placeholder=\"Enter quantity\"\n                            {...field}\n                            data-testid=\"input-quantity\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"unit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Unit</FormLabel>\n                        <Select\n                          value={field.value}\n                          onValueChange={field.onChange}\n                          disabled={!selectedItem || availableUnits.length === 0}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-unit\">\n                              <SelectValue placeholder=\"Select unit\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {availableUnits.map((unit) => (\n                              <SelectItem key={unit} value={unit}>\n                                {getUnitLabel(unit)} ({unit})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Any additional notes\"\n                          {...field}\n                          data-testid=\"input-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsRequestModalOpen(false)} data-testid=\"button-cancel\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={requestMutation.isPending} data-testid=\"button-submit\">\n                    {requestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":13445},"client/src/pages/dashboard/storekeeper/consumption-tracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { TrendingDown, Search, Calendar } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function StorekeeperConsumptionTracking() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: consumptions = [], isLoading: loadingConsumptions } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-consumptions\"],\n    refetchInterval: 3000\n  });\n\n  const { data: inventoryItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/hotels/current/inventory-items\"],\n    refetchInterval: 3000\n  });\n\n  const enrichedConsumptions = consumptions.map((consumption: any) => {\n    const item = inventoryItems.find((i: any) => i.id === consumption.itemId);\n    return {\n      ...consumption,\n      itemName: item?.name || 'Unknown Item',\n      unit: consumption.unit || item?.baseUnit || item?.unit || '',\n      type: consumption.referenceEntity === 'wastage' ? 'wastage' : 'consumption'\n    };\n  });\n\n  const filteredConsumptions = enrichedConsumptions.filter((consumption: any) =>\n    consumption.itemName.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const totalConsumptions = enrichedConsumptions.length;\n  const wastageCount = enrichedConsumptions.filter((c: any) => c.type === 'wastage').length;\n  const regularConsumptions = totalConsumptions - wastageCount;\n\n  return (\n    <DashboardLayout title=\"Consumption Tracking\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Total Consumptions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"count-total-consumptions\">\n                {totalConsumptions}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Regular Use\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"count-regular-consumptions\">\n                {regularConsumptions}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Wastage Records\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\" data-testid=\"count-wastage\">\n                {wastageCount}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingDown className=\"w-5 h-5\" />\n              Consumption History\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search consumptions...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-consumption\"\n                />\n              </div>\n            </div>\n\n            {loadingConsumptions ? (\n              <p className=\"text-center text-muted-foreground py-8\">Loading consumption history...</p>\n            ) : filteredConsumptions.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\" data-testid=\"no-consumptions-message\">\n                {searchTerm ? 'No consumptions found' : 'No consumption records'}\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredConsumptions.map((consumption: any) => (\n                  <div\n                    key={consumption.id}\n                    className={`p-4 border rounded-lg ${\n                      consumption.type === 'wastage'\n                        ? 'border-red-200 bg-red-50 dark:bg-red-950'\n                        : 'hover:bg-accent'\n                    } transition-colors`}\n                    data-testid={`consumption-item-${consumption.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold\" data-testid={`consumption-item-name-${consumption.id}`}>\n                            {consumption.itemName}\n                          </h3>\n                          <Badge \n                            variant={consumption.type === 'wastage' ? 'destructive' : 'default'}\n                            data-testid={`consumption-type-${consumption.id}`}\n                          >\n                            {consumption.type || 'consumption'}\n                          </Badge>\n                        </div>\n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\n                          <p>\n                            <span className=\"font-medium\">Quantity:</span> {consumption.qty} {consumption.unit}\n                          </p>\n                          {consumption.notes && (\n                            <p>\n                              <span className=\"font-medium\">Notes:</span> {consumption.notes}\n                            </p>\n                          )}\n                          {consumption.department && (\n                            <p>\n                              <span className=\"font-medium\">Department:</span> {consumption.department}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex-shrink-0 text-right\">\n                        {consumption.createdAt && (\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Calendar className=\"w-3 h-3\" />\n                            {new Date(consumption.createdAt).toLocaleDateString()}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7073},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845}},"version":2}